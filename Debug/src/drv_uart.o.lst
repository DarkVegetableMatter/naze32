   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"drv_uart.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.comm	rxBuffer,256,4
  19              		.global	rxDMAPos
  20              		.bss
  21              		.align	2
  24              	rxDMAPos:
  25 0000 00000000 		.space	4
  26              		.comm	txBuffer,256,4
  27              		.global	txBufferTail
  28              		.align	2
  31              	txBufferTail:
  32 0004 00000000 		.space	4
  33              		.global	txBufferHead
  34              		.align	2
  37              	txBufferHead:
  38 0008 00000000 		.space	4
  39              		.text
  40              		.align	2
  41              		.thumb
  42              		.thumb_func
  44              	uartTxDMA:
  45              	.LFB29:
  46              		.file 1 "../src/drv_uart.c"
   1:../src/drv_uart.c **** #include "board.h"
   2:../src/drv_uart.c **** 
   3:../src/drv_uart.c **** /*
   4:../src/drv_uart.c ****     DMA UART routines idea lifted from AutoQuad
   5:../src/drv_uart.c ****     Copyright © 2011  Bill Nesbitt
   6:../src/drv_uart.c **** */
   7:../src/drv_uart.c **** #define UART_BUFFER_SIZE    256
   8:../src/drv_uart.c **** 
   9:../src/drv_uart.c **** // Receive buffer, circular DMA
  10:../src/drv_uart.c **** volatile uint8_t rxBuffer[UART_BUFFER_SIZE];
  11:../src/drv_uart.c **** uint32_t rxDMAPos = 0;
  12:../src/drv_uart.c **** volatile uint8_t txBuffer[UART_BUFFER_SIZE];
  13:../src/drv_uart.c **** uint32_t txBufferTail = 0;
  14:../src/drv_uart.c **** uint32_t txBufferHead = 0;
  15:../src/drv_uart.c **** 
  16:../src/drv_uart.c **** static void uartTxDMA(void)
  17:../src/drv_uart.c **** {
  47              		.loc 1 17 0
  48              		.cfi_startproc
  49              		@ args = 0, pretend = 0, frame = 0
  50              		@ frame_needed = 1, uses_anonymous_args = 0
  51 0000 80B5     		push	{r7, lr}
  52              	.LCFI0:
  53              		.cfi_def_cfa_offset 8
  54              		.cfi_offset 7, -8
  55              		.cfi_offset 14, -4
  56 0002 00AF     		add	r7, sp, #0
  57              	.LCFI1:
  58              		.cfi_def_cfa_register 7
  18:../src/drv_uart.c ****     DMA1_Channel4->CMAR = (uint32_t)&txBuffer[txBufferTail];
  59              		.loc 1 18 0
  60 0004 134B     		ldr	r3, .L4
  61 0006 144A     		ldr	r2, .L4+4
  62 0008 1168     		ldr	r1, [r2, #0]
  63 000a 144A     		ldr	r2, .L4+8
  64 000c 8A18     		adds	r2, r1, r2
  65 000e DA60     		str	r2, [r3, #12]
  19:../src/drv_uart.c ****     if (txBufferHead > txBufferTail) {
  66              		.loc 1 19 0
  67 0010 134B     		ldr	r3, .L4+12
  68 0012 1A68     		ldr	r2, [r3, #0]
  69 0014 104B     		ldr	r3, .L4+4
  70 0016 1B68     		ldr	r3, [r3, #0]
  71 0018 9A42     		cmp	r2, r3
  72 001a 0BD9     		bls	.L2
  20:../src/drv_uart.c ****         DMA1_Channel4->CNDTR = txBufferHead - txBufferTail;
  73              		.loc 1 20 0
  74 001c 0D4B     		ldr	r3, .L4
  75 001e 104A     		ldr	r2, .L4+12
  76 0020 1168     		ldr	r1, [r2, #0]
  77 0022 0D4A     		ldr	r2, .L4+4
  78 0024 1268     		ldr	r2, [r2, #0]
  79 0026 8A1A     		subs	r2, r1, r2
  80 0028 5A60     		str	r2, [r3, #4]
  21:../src/drv_uart.c ****         txBufferTail = txBufferHead;
  81              		.loc 1 21 0
  82 002a 0D4B     		ldr	r3, .L4+12
  83 002c 1A68     		ldr	r2, [r3, #0]
  84 002e 0A4B     		ldr	r3, .L4+4
  85 0030 1A60     		str	r2, [r3, #0]
  86 0032 09E0     		b	.L3
  87              	.L2:
  22:../src/drv_uart.c ****     } else {
  23:../src/drv_uart.c ****         DMA1_Channel4->CNDTR = UART_BUFFER_SIZE - txBufferTail;
  88              		.loc 1 23 0
  89 0034 074B     		ldr	r3, .L4
  90 0036 084A     		ldr	r2, .L4+4
  91 0038 1268     		ldr	r2, [r2, #0]
  92 003a C2F58072 		rsb	r2, r2, #256
  93 003e 5A60     		str	r2, [r3, #4]
  24:../src/drv_uart.c ****         txBufferTail = 0;
  94              		.loc 1 24 0
  95 0040 054B     		ldr	r3, .L4+4
  96 0042 4FF00002 		mov	r2, #0
  97 0046 1A60     		str	r2, [r3, #0]
  98              	.L3:
  25:../src/drv_uart.c ****     }
  26:../src/drv_uart.c **** 
  27:../src/drv_uart.c ****     DMA_Cmd(DMA1_Channel4, ENABLE);
  99              		.loc 1 27 0
 100 0048 0248     		ldr	r0, .L4
 101 004a 4FF00101 		mov	r1, #1
 102 004e FFF7FEFF 		bl	DMA_Cmd
  28:../src/drv_uart.c **** }
 103              		.loc 1 28 0
 104 0052 80BD     		pop	{r7, pc}
 105              	.L5:
 106              		.align	2
 107              	.L4:
 108 0054 44000240 		.word	1073872964
 109 0058 00000000 		.word	txBufferTail
 110 005c 00000000 		.word	txBuffer
 111 0060 00000000 		.word	txBufferHead
 112              		.cfi_endproc
 113              	.LFE29:
 115              		.align	2
 116              		.global	DMA1_Channel4_IRQHandler
 117              		.thumb
 118              		.thumb_func
 120              	DMA1_Channel4_IRQHandler:
 121              	.LFB30:
  29:../src/drv_uart.c **** 
  30:../src/drv_uart.c **** void DMA1_Channel4_IRQHandler(void)
  31:../src/drv_uart.c **** {
 122              		.loc 1 31 0
 123              		.cfi_startproc
 124              		@ args = 0, pretend = 0, frame = 0
 125              		@ frame_needed = 1, uses_anonymous_args = 0
 126 0064 80B5     		push	{r7, lr}
 127              	.LCFI2:
 128              		.cfi_def_cfa_offset 8
 129              		.cfi_offset 7, -8
 130              		.cfi_offset 14, -4
 131 0066 00AF     		add	r7, sp, #0
 132              	.LCFI3:
 133              		.cfi_def_cfa_register 7
  32:../src/drv_uart.c ****     DMA_ClearITPendingBit(DMA1_IT_TC4);
 134              		.loc 1 32 0
 135 0068 4FF40050 		mov	r0, #8192
 136 006c FFF7FEFF 		bl	DMA_ClearITPendingBit
  33:../src/drv_uart.c ****     DMA_Cmd(DMA1_Channel4, DISABLE);
 137              		.loc 1 33 0
 138 0070 0648     		ldr	r0, .L8
 139 0072 4FF00001 		mov	r1, #0
 140 0076 FFF7FEFF 		bl	DMA_Cmd
  34:../src/drv_uart.c **** 
  35:../src/drv_uart.c ****     if (txBufferHead != txBufferTail)
 141              		.loc 1 35 0
 142 007a 054B     		ldr	r3, .L8+4
 143 007c 1A68     		ldr	r2, [r3, #0]
 144 007e 054B     		ldr	r3, .L8+8
 145 0080 1B68     		ldr	r3, [r3, #0]
 146 0082 9A42     		cmp	r2, r3
 147 0084 01D0     		beq	.L6
  36:../src/drv_uart.c ****         uartTxDMA();
 148              		.loc 1 36 0
 149 0086 FFF7BBFF 		bl	uartTxDMA
 150              	.L6:
  37:../src/drv_uart.c **** }
 151              		.loc 1 37 0
 152 008a 80BD     		pop	{r7, pc}
 153              	.L9:
 154              		.align	2
 155              	.L8:
 156 008c 44000240 		.word	1073872964
 157 0090 00000000 		.word	txBufferHead
 158 0094 00000000 		.word	txBufferTail
 159              		.cfi_endproc
 160              	.LFE30:
 162              		.align	2
 163              		.global	uartInit
 164              		.thumb
 165              		.thumb_func
 167              	uartInit:
 168              	.LFB31:
  38:../src/drv_uart.c **** 
  39:../src/drv_uart.c **** void uartInit(uint32_t speed)
  40:../src/drv_uart.c **** {
 169              		.loc 1 40 0
 170              		.cfi_startproc
 171              		@ args = 0, pretend = 0, frame = 80
 172              		@ frame_needed = 1, uses_anonymous_args = 0
 173 0098 80B5     		push	{r7, lr}
 174              	.LCFI4:
 175              		.cfi_def_cfa_offset 8
 176              		.cfi_offset 7, -8
 177              		.cfi_offset 14, -4
 178 009a 94B0     		sub	sp, sp, #80
 179              	.LCFI5:
 180              		.cfi_def_cfa_offset 88
 181 009c 00AF     		add	r7, sp, #0
 182              	.LCFI6:
 183              		.cfi_def_cfa_register 7
 184 009e 7860     		str	r0, [r7, #4]
  41:../src/drv_uart.c ****     GPIO_InitTypeDef GPIO_InitStructure;
  42:../src/drv_uart.c ****     USART_InitTypeDef USART_InitStructure;
  43:../src/drv_uart.c ****     DMA_InitTypeDef DMA_InitStructure;
  44:../src/drv_uart.c ****     NVIC_InitTypeDef NVIC_InitStructure;
  45:../src/drv_uart.c **** 
  46:../src/drv_uart.c ****     // USART1_TX    PA9
  47:../src/drv_uart.c ****     // USART1_RX    PA10
  48:../src/drv_uart.c ****     GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 185              		.loc 1 48 0
 186 00a0 4FF40073 		mov	r3, #512
 187 00a4 A7F84C30 		strh	r3, [r7, #76]	@ movhi
  49:../src/drv_uart.c ****     GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 188              		.loc 1 49 0
 189 00a8 4FF00203 		mov	r3, #2
 190 00ac 87F84E30 		strb	r3, [r7, #78]
  50:../src/drv_uart.c ****     GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 191              		.loc 1 50 0
 192 00b0 4FF01803 		mov	r3, #24
 193 00b4 87F84F30 		strb	r3, [r7, #79]
  51:../src/drv_uart.c ****     GPIO_Init(GPIOA, &GPIO_InitStructure);
 194              		.loc 1 51 0
 195 00b8 07F14C03 		add	r3, r7, #76
 196 00bc 5848     		ldr	r0, .L11
 197 00be 1946     		mov	r1, r3
 198 00c0 FFF7FEFF 		bl	GPIO_Init
  52:../src/drv_uart.c ****     GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 199              		.loc 1 52 0
 200 00c4 4FF48063 		mov	r3, #1024
 201 00c8 A7F84C30 		strh	r3, [r7, #76]	@ movhi
  53:../src/drv_uart.c ****     GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 202              		.loc 1 53 0
 203 00cc 4FF04803 		mov	r3, #72
 204 00d0 87F84F30 		strb	r3, [r7, #79]
  54:../src/drv_uart.c ****     GPIO_Init(GPIOA, &GPIO_InitStructure);
 205              		.loc 1 54 0
 206 00d4 07F14C03 		add	r3, r7, #76
 207 00d8 5148     		ldr	r0, .L11
 208 00da 1946     		mov	r1, r3
 209 00dc FFF7FEFF 		bl	GPIO_Init
  55:../src/drv_uart.c **** 
  56:../src/drv_uart.c ****     // DMA TX Interrupt
  57:../src/drv_uart.c ****     NVIC_InitStructure.NVIC_IRQChannel = DMA1_Channel4_IRQn;
 210              		.loc 1 57 0
 211 00e0 4FF00E03 		mov	r3, #14
 212 00e4 3B73     		strb	r3, [r7, #12]
  58:../src/drv_uart.c ****     NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 213              		.loc 1 58 0
 214 00e6 4FF00103 		mov	r3, #1
 215 00ea 7B73     		strb	r3, [r7, #13]
  59:../src/drv_uart.c ****     NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 216              		.loc 1 59 0
 217 00ec 4FF00103 		mov	r3, #1
 218 00f0 BB73     		strb	r3, [r7, #14]
  60:../src/drv_uart.c ****     NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 219              		.loc 1 60 0
 220 00f2 4FF00103 		mov	r3, #1
 221 00f6 FB73     		strb	r3, [r7, #15]
  61:../src/drv_uart.c ****     NVIC_Init(&NVIC_InitStructure);
 222              		.loc 1 61 0
 223 00f8 07F10C03 		add	r3, r7, #12
 224 00fc 1846     		mov	r0, r3
 225 00fe FFF7FEFF 		bl	NVIC_Init
  62:../src/drv_uart.c **** 
  63:../src/drv_uart.c ****     USART_InitStructure.USART_BaudRate = speed;
 226              		.loc 1 63 0
 227 0102 7B68     		ldr	r3, [r7, #4]
 228 0104 FB63     		str	r3, [r7, #60]
  64:../src/drv_uart.c ****     USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 229              		.loc 1 64 0
 230 0106 4FF00003 		mov	r3, #0
 231 010a A7F84030 		strh	r3, [r7, #64]	@ movhi
  65:../src/drv_uart.c ****     USART_InitStructure.USART_StopBits = USART_StopBits_1;
 232              		.loc 1 65 0
 233 010e 4FF00003 		mov	r3, #0
 234 0112 A7F84230 		strh	r3, [r7, #66]	@ movhi
  66:../src/drv_uart.c ****     USART_InitStructure.USART_Parity = USART_Parity_No;
 235              		.loc 1 66 0
 236 0116 4FF00003 		mov	r3, #0
 237 011a A7F84430 		strh	r3, [r7, #68]	@ movhi
  67:../src/drv_uart.c ****     USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 238              		.loc 1 67 0
 239 011e 4FF00003 		mov	r3, #0
 240 0122 A7F84830 		strh	r3, [r7, #72]	@ movhi
  68:../src/drv_uart.c ****     USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 241              		.loc 1 68 0
 242 0126 4FF00C03 		mov	r3, #12
 243 012a A7F84630 		strh	r3, [r7, #70]	@ movhi
  69:../src/drv_uart.c ****     USART_Init(USART1, &USART_InitStructure);
 244              		.loc 1 69 0
 245 012e 07F13C03 		add	r3, r7, #60
 246 0132 3C48     		ldr	r0, .L11+4
 247 0134 1946     		mov	r1, r3
 248 0136 FFF7FEFF 		bl	USART_Init
  70:../src/drv_uart.c **** 
  71:../src/drv_uart.c ****     // Receive DMA into a circular buffer
  72:../src/drv_uart.c ****     DMA_DeInit(DMA1_Channel5);
 249              		.loc 1 72 0
 250 013a 3B48     		ldr	r0, .L11+8
 251 013c FFF7FEFF 		bl	DMA_DeInit
  73:../src/drv_uart.c ****     DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;
 252              		.loc 1 73 0
 253 0140 4FF48053 		mov	r3, #4096
 254 0144 7B63     		str	r3, [r7, #52]
  74:../src/drv_uart.c ****     DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 255              		.loc 1 74 0
 256 0146 4FF00003 		mov	r3, #0
 257 014a BB63     		str	r3, [r7, #56]
  75:../src/drv_uart.c ****     DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&USART1->DR;
 258              		.loc 1 75 0
 259 014c 374B     		ldr	r3, .L11+12
 260 014e 3B61     		str	r3, [r7, #16]
  76:../src/drv_uart.c ****     DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)rxBuffer;
 261              		.loc 1 76 0
 262 0150 374B     		ldr	r3, .L11+16
 263 0152 7B61     		str	r3, [r7, #20]
  77:../src/drv_uart.c ****     DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 264              		.loc 1 77 0
 265 0154 4FF00003 		mov	r3, #0
 266 0158 BB61     		str	r3, [r7, #24]
  78:../src/drv_uart.c ****     DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 267              		.loc 1 78 0
 268 015a 4FF00003 		mov	r3, #0
 269 015e 3B62     		str	r3, [r7, #32]
  79:../src/drv_uart.c ****     DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 270              		.loc 1 79 0
 271 0160 4FF00003 		mov	r3, #0
 272 0164 BB62     		str	r3, [r7, #40]
  80:../src/drv_uart.c ****     DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 273              		.loc 1 80 0
 274 0166 4FF08003 		mov	r3, #128
 275 016a 7B62     		str	r3, [r7, #36]
  81:../src/drv_uart.c ****     DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 276              		.loc 1 81 0
 277 016c 4FF00003 		mov	r3, #0
 278 0170 FB62     		str	r3, [r7, #44]
  82:../src/drv_uart.c ****     DMA_InitStructure.DMA_BufferSize = UART_BUFFER_SIZE;
 279              		.loc 1 82 0
 280 0172 4FF48073 		mov	r3, #256
 281 0176 FB61     		str	r3, [r7, #28]
  83:../src/drv_uart.c ****     DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 282              		.loc 1 83 0
 283 0178 4FF02003 		mov	r3, #32
 284 017c 3B63     		str	r3, [r7, #48]
  84:../src/drv_uart.c ****     DMA_Init(DMA1_Channel5, &DMA_InitStructure);
 285              		.loc 1 84 0
 286 017e 07F11003 		add	r3, r7, #16
 287 0182 2948     		ldr	r0, .L11+8
 288 0184 1946     		mov	r1, r3
 289 0186 FFF7FEFF 		bl	DMA_Init
  85:../src/drv_uart.c **** 
  86:../src/drv_uart.c ****     DMA_Cmd(DMA1_Channel5, ENABLE);
 290              		.loc 1 86 0
 291 018a 2748     		ldr	r0, .L11+8
 292 018c 4FF00101 		mov	r1, #1
 293 0190 FFF7FEFF 		bl	DMA_Cmd
  87:../src/drv_uart.c ****     USART_DMACmd(USART1, USART_DMAReq_Rx, ENABLE);
 294              		.loc 1 87 0
 295 0194 2348     		ldr	r0, .L11+4
 296 0196 4FF04001 		mov	r1, #64
 297 019a 4FF00102 		mov	r2, #1
 298 019e FFF7FEFF 		bl	USART_DMACmd
  88:../src/drv_uart.c ****     rxDMAPos = DMA_GetCurrDataCounter(DMA1_Channel5);
 299              		.loc 1 88 0
 300 01a2 2148     		ldr	r0, .L11+8
 301 01a4 FFF7FEFF 		bl	DMA_GetCurrDataCounter
 302 01a8 0346     		mov	r3, r0
 303 01aa 1A46     		mov	r2, r3
 304 01ac 214B     		ldr	r3, .L11+20
 305 01ae 1A60     		str	r2, [r3, #0]
  89:../src/drv_uart.c **** 
  90:../src/drv_uart.c ****     // Transmit DMA
  91:../src/drv_uart.c ****     DMA_DeInit(DMA1_Channel4);
 306              		.loc 1 91 0
 307 01b0 2148     		ldr	r0, .L11+24
 308 01b2 FFF7FEFF 		bl	DMA_DeInit
  92:../src/drv_uart.c ****     DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&USART1->DR;
 309              		.loc 1 92 0
 310 01b6 1D4B     		ldr	r3, .L11+12
 311 01b8 3B61     		str	r3, [r7, #16]
  93:../src/drv_uart.c ****     DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;
 312              		.loc 1 93 0
 313 01ba 4FF01003 		mov	r3, #16
 314 01be BB61     		str	r3, [r7, #24]
  94:../src/drv_uart.c ****     DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 315              		.loc 1 94 0
 316 01c0 4FF00003 		mov	r3, #0
 317 01c4 3B62     		str	r3, [r7, #32]
  95:../src/drv_uart.c ****     DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 318              		.loc 1 95 0
 319 01c6 4FF00003 		mov	r3, #0
 320 01ca BB62     		str	r3, [r7, #40]
  96:../src/drv_uart.c ****     DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 321              		.loc 1 96 0
 322 01cc 4FF08003 		mov	r3, #128
 323 01d0 7B62     		str	r3, [r7, #36]
  97:../src/drv_uart.c ****     DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 324              		.loc 1 97 0
 325 01d2 4FF00003 		mov	r3, #0
 326 01d6 FB62     		str	r3, [r7, #44]
  98:../src/drv_uart.c ****     DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 327              		.loc 1 98 0
 328 01d8 4FF00003 		mov	r3, #0
 329 01dc 3B63     		str	r3, [r7, #48]
  99:../src/drv_uart.c ****     DMA_Init(DMA1_Channel4, &DMA_InitStructure);
 330              		.loc 1 99 0
 331 01de 07F11003 		add	r3, r7, #16
 332 01e2 1548     		ldr	r0, .L11+24
 333 01e4 1946     		mov	r1, r3
 334 01e6 FFF7FEFF 		bl	DMA_Init
 100:../src/drv_uart.c ****     DMA_ITConfig(DMA1_Channel4, DMA_IT_TC, ENABLE);
 335              		.loc 1 100 0
 336 01ea 1348     		ldr	r0, .L11+24
 337 01ec 4FF00201 		mov	r1, #2
 338 01f0 4FF00102 		mov	r2, #1
 339 01f4 FFF7FEFF 		bl	DMA_ITConfig
 101:../src/drv_uart.c ****     DMA1_Channel4->CNDTR = 0;
 340              		.loc 1 101 0
 341 01f8 0F4B     		ldr	r3, .L11+24
 342 01fa 4FF00002 		mov	r2, #0
 343 01fe 5A60     		str	r2, [r3, #4]
 102:../src/drv_uart.c ****     USART_DMACmd(USART1, USART_DMAReq_Tx, ENABLE);
 344              		.loc 1 102 0
 345 0200 0848     		ldr	r0, .L11+4
 346 0202 4FF08001 		mov	r1, #128
 347 0206 4FF00102 		mov	r2, #1
 348 020a FFF7FEFF 		bl	USART_DMACmd
 103:../src/drv_uart.c **** 
 104:../src/drv_uart.c ****     USART_Cmd(USART1, ENABLE);
 349              		.loc 1 104 0
 350 020e 0548     		ldr	r0, .L11+4
 351 0210 4FF00101 		mov	r1, #1
 352 0214 FFF7FEFF 		bl	USART_Cmd
 105:../src/drv_uart.c **** }
 353              		.loc 1 105 0
 354 0218 07F15007 		add	r7, r7, #80
 355 021c BD46     		mov	sp, r7
 356 021e 80BD     		pop	{r7, pc}
 357              	.L12:
 358              		.align	2
 359              	.L11:
 360 0220 00080140 		.word	1073809408
 361 0224 00380140 		.word	1073821696
 362 0228 58000240 		.word	1073872984
 363 022c 04380140 		.word	1073821700
 364 0230 00000000 		.word	rxBuffer
 365 0234 00000000 		.word	rxDMAPos
 366 0238 44000240 		.word	1073872964
 367              		.cfi_endproc
 368              	.LFE31:
 370              		.align	2
 371              		.global	uartAvailable
 372              		.thumb
 373              		.thumb_func
 375              	uartAvailable:
 376              	.LFB32:
 106:../src/drv_uart.c **** 
 107:../src/drv_uart.c **** uint16_t uartAvailable(void)
 108:../src/drv_uart.c **** {
 377              		.loc 1 108 0
 378              		.cfi_startproc
 379              		@ args = 0, pretend = 0, frame = 0
 380              		@ frame_needed = 1, uses_anonymous_args = 0
 381 023c 80B5     		push	{r7, lr}
 382              	.LCFI7:
 383              		.cfi_def_cfa_offset 8
 384              		.cfi_offset 7, -8
 385              		.cfi_offset 14, -4
 386 023e 00AF     		add	r7, sp, #0
 387              	.LCFI8:
 388              		.cfi_def_cfa_register 7
 109:../src/drv_uart.c ****     return (DMA_GetCurrDataCounter(DMA1_Channel5) != rxDMAPos) ? true : false;
 389              		.loc 1 109 0
 390 0240 0648     		ldr	r0, .L15
 391 0242 FFF7FEFF 		bl	DMA_GetCurrDataCounter
 392 0246 0346     		mov	r3, r0
 393 0248 1A46     		mov	r2, r3
 394 024a 054B     		ldr	r3, .L15+4
 395 024c 1B68     		ldr	r3, [r3, #0]
 396 024e 9A42     		cmp	r2, r3
 397 0250 0CBF     		ite	eq
 398 0252 0023     		moveq	r3, #0
 399 0254 0123     		movne	r3, #1
 400 0256 DBB2     		uxtb	r3, r3
 110:../src/drv_uart.c **** }
 401              		.loc 1 110 0
 402 0258 1846     		mov	r0, r3
 403 025a 80BD     		pop	{r7, pc}
 404              	.L16:
 405              		.align	2
 406              	.L15:
 407 025c 58000240 		.word	1073872984
 408 0260 00000000 		.word	rxDMAPos
 409              		.cfi_endproc
 410              	.LFE32:
 412              		.align	2
 413              		.global	uartTransmitEmpty
 414              		.thumb
 415              		.thumb_func
 417              	uartTransmitEmpty:
 418              	.LFB33:
 111:../src/drv_uart.c **** 
 112:../src/drv_uart.c **** bool uartTransmitEmpty(void)
 113:../src/drv_uart.c **** {
 419              		.loc 1 113 0
 420              		.cfi_startproc
 421              		@ args = 0, pretend = 0, frame = 0
 422              		@ frame_needed = 1, uses_anonymous_args = 0
 423              		@ link register save eliminated.
 424 0264 80B4     		push	{r7}
 425              	.LCFI9:
 426              		.cfi_def_cfa_offset 4
 427              		.cfi_offset 7, -4
 428 0266 00AF     		add	r7, sp, #0
 429              	.LCFI10:
 430              		.cfi_def_cfa_register 7
 114:../src/drv_uart.c ****     return (txBufferTail == txBufferHead);
 431              		.loc 1 114 0
 432 0268 064B     		ldr	r3, .L19
 433 026a 1A68     		ldr	r2, [r3, #0]
 434 026c 064B     		ldr	r3, .L19+4
 435 026e 1B68     		ldr	r3, [r3, #0]
 436 0270 9A42     		cmp	r2, r3
 437 0272 14BF     		ite	ne
 438 0274 0023     		movne	r3, #0
 439 0276 0123     		moveq	r3, #1
 440 0278 DBB2     		uxtb	r3, r3
 115:../src/drv_uart.c **** }
 441              		.loc 1 115 0
 442 027a 1846     		mov	r0, r3
 443 027c BD46     		mov	sp, r7
 444 027e 80BC     		pop	{r7}
 445 0280 7047     		bx	lr
 446              	.L20:
 447 0282 00BF     		.align	2
 448              	.L19:
 449 0284 00000000 		.word	txBufferTail
 450 0288 00000000 		.word	txBufferHead
 451              		.cfi_endproc
 452              	.LFE33:
 454              		.align	2
 455              		.global	uartRead
 456              		.thumb
 457              		.thumb_func
 459              	uartRead:
 460              	.LFB34:
 116:../src/drv_uart.c **** 
 117:../src/drv_uart.c **** uint8_t uartRead(void)
 118:../src/drv_uart.c **** {
 461              		.loc 1 118 0
 462              		.cfi_startproc
 463              		@ args = 0, pretend = 0, frame = 8
 464              		@ frame_needed = 1, uses_anonymous_args = 0
 465              		@ link register save eliminated.
 466 028c 80B4     		push	{r7}
 467              	.LCFI11:
 468              		.cfi_def_cfa_offset 4
 469              		.cfi_offset 7, -4
 470 028e 83B0     		sub	sp, sp, #12
 471              	.LCFI12:
 472              		.cfi_def_cfa_offset 16
 473 0290 00AF     		add	r7, sp, #0
 474              	.LCFI13:
 475              		.cfi_def_cfa_register 7
 119:../src/drv_uart.c ****     uint8_t ch;
 120:../src/drv_uart.c **** 
 121:../src/drv_uart.c ****     ch = rxBuffer[UART_BUFFER_SIZE - rxDMAPos];
 476              		.loc 1 121 0
 477 0292 0E4B     		ldr	r3, .L24
 478 0294 1B68     		ldr	r3, [r3, #0]
 479 0296 C3F58073 		rsb	r3, r3, #256
 480 029a 0D4A     		ldr	r2, .L24+4
 481 029c D35C     		ldrb	r3, [r2, r3]
 482 029e FB71     		strb	r3, [r7, #7]
 122:../src/drv_uart.c ****     // go back around the buffer
 123:../src/drv_uart.c ****     if (--rxDMAPos == 0)
 483              		.loc 1 123 0
 484 02a0 0A4B     		ldr	r3, .L24
 485 02a2 1B68     		ldr	r3, [r3, #0]
 486 02a4 03F1FF32 		add	r2, r3, #-1
 487 02a8 084B     		ldr	r3, .L24
 488 02aa 1A60     		str	r2, [r3, #0]
 489 02ac 074B     		ldr	r3, .L24
 490 02ae 1B68     		ldr	r3, [r3, #0]
 491 02b0 002B     		cmp	r3, #0
 492 02b2 03D1     		bne	.L22
 124:../src/drv_uart.c ****         rxDMAPos = UART_BUFFER_SIZE;
 493              		.loc 1 124 0
 494 02b4 054B     		ldr	r3, .L24
 495 02b6 4FF48072 		mov	r2, #256
 496 02ba 1A60     		str	r2, [r3, #0]
 497              	.L22:
 125:../src/drv_uart.c **** 
 126:../src/drv_uart.c ****     return ch;
 498              		.loc 1 126 0
 499 02bc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 127:../src/drv_uart.c **** }
 500              		.loc 1 127 0
 501 02be 1846     		mov	r0, r3
 502 02c0 07F10C07 		add	r7, r7, #12
 503 02c4 BD46     		mov	sp, r7
 504 02c6 80BC     		pop	{r7}
 505 02c8 7047     		bx	lr
 506              	.L25:
 507 02ca 00BF     		.align	2
 508              	.L24:
 509 02cc 00000000 		.word	rxDMAPos
 510 02d0 00000000 		.word	rxBuffer
 511              		.cfi_endproc
 512              	.LFE34:
 514              		.align	2
 515              		.global	uartReadPoll
 516              		.thumb
 517              		.thumb_func
 519              	uartReadPoll:
 520              	.LFB35:
 128:../src/drv_uart.c **** 
 129:../src/drv_uart.c **** uint8_t uartReadPoll(void)
 130:../src/drv_uart.c **** {
 521              		.loc 1 130 0
 522              		.cfi_startproc
 523              		@ args = 0, pretend = 0, frame = 0
 524              		@ frame_needed = 1, uses_anonymous_args = 0
 525 02d4 80B5     		push	{r7, lr}
 526              	.LCFI14:
 527              		.cfi_def_cfa_offset 8
 528              		.cfi_offset 7, -8
 529              		.cfi_offset 14, -4
 530 02d6 00AF     		add	r7, sp, #0
 531              	.LCFI15:
 532              		.cfi_def_cfa_register 7
 131:../src/drv_uart.c ****     while (!uartAvailable()); // wait for some bytes
 533              		.loc 1 131 0
 534 02d8 00BF     		nop
 535              	.L27:
 536              		.loc 1 131 0 is_stmt 0 discriminator 1
 537 02da FFF7FEFF 		bl	uartAvailable
 538 02de 0346     		mov	r3, r0
 539 02e0 002B     		cmp	r3, #0
 540 02e2 FAD0     		beq	.L27
 132:../src/drv_uart.c ****     return uartRead();
 541              		.loc 1 132 0 is_stmt 1
 542 02e4 FFF7FEFF 		bl	uartRead
 543 02e8 0346     		mov	r3, r0
 133:../src/drv_uart.c **** }
 544              		.loc 1 133 0
 545 02ea 1846     		mov	r0, r3
 546 02ec 80BD     		pop	{r7, pc}
 547              		.cfi_endproc
 548              	.LFE35:
 550 02ee 00BF     		.align	2
 551              		.global	uartWrite
 552              		.thumb
 553              		.thumb_func
 555              	uartWrite:
 556              	.LFB36:
 134:../src/drv_uart.c **** 
 135:../src/drv_uart.c **** void uartWrite(uint8_t ch)
 136:../src/drv_uart.c **** {
 557              		.loc 1 136 0
 558              		.cfi_startproc
 559              		@ args = 0, pretend = 0, frame = 8
 560              		@ frame_needed = 1, uses_anonymous_args = 0
 561 02f0 80B5     		push	{r7, lr}
 562              	.LCFI16:
 563              		.cfi_def_cfa_offset 8
 564              		.cfi_offset 7, -8
 565              		.cfi_offset 14, -4
 566 02f2 82B0     		sub	sp, sp, #8
 567              	.LCFI17:
 568              		.cfi_def_cfa_offset 16
 569 02f4 00AF     		add	r7, sp, #0
 570              	.LCFI18:
 571              		.cfi_def_cfa_register 7
 572 02f6 0346     		mov	r3, r0
 573 02f8 FB71     		strb	r3, [r7, #7]
 137:../src/drv_uart.c ****     txBuffer[txBufferHead] = ch;
 574              		.loc 1 137 0
 575 02fa 0C4B     		ldr	r3, .L31
 576 02fc 1B68     		ldr	r3, [r3, #0]
 577 02fe 0C4A     		ldr	r2, .L31+4
 578 0300 F979     		ldrb	r1, [r7, #7]
 579 0302 D154     		strb	r1, [r2, r3]
 138:../src/drv_uart.c ****     txBufferHead = (txBufferHead + 1) % UART_BUFFER_SIZE;
 580              		.loc 1 138 0
 581 0304 094B     		ldr	r3, .L31
 582 0306 1B68     		ldr	r3, [r3, #0]
 583 0308 03F10103 		add	r3, r3, #1
 584 030c DAB2     		uxtb	r2, r3
 585 030e 074B     		ldr	r3, .L31
 586 0310 1A60     		str	r2, [r3, #0]
 139:../src/drv_uart.c **** 
 140:../src/drv_uart.c ****     // if DMA wasn't enabled, fire it up
 141:../src/drv_uart.c ****     if (!(DMA1_Channel4->CCR & 1))
 587              		.loc 1 141 0
 588 0312 084B     		ldr	r3, .L31+8
 589 0314 1B68     		ldr	r3, [r3, #0]
 590 0316 03F00103 		and	r3, r3, #1
 591 031a 002B     		cmp	r3, #0
 592 031c 01D1     		bne	.L29
 142:../src/drv_uart.c ****         uartTxDMA();
 593              		.loc 1 142 0
 594 031e FFF76FFE 		bl	uartTxDMA
 595              	.L29:
 143:../src/drv_uart.c **** }
 596              		.loc 1 143 0
 597 0322 07F10807 		add	r7, r7, #8
 598 0326 BD46     		mov	sp, r7
 599 0328 80BD     		pop	{r7, pc}
 600              	.L32:
 601 032a 00BF     		.align	2
 602              	.L31:
 603 032c 00000000 		.word	txBufferHead
 604 0330 00000000 		.word	txBuffer
 605 0334 44000240 		.word	1073872964
 606              		.cfi_endproc
 607              	.LFE36:
 609              		.align	2
 610              		.global	uartPrint
 611              		.thumb
 612              		.thumb_func
 614              	uartPrint:
 615              	.LFB37:
 144:../src/drv_uart.c **** 
 145:../src/drv_uart.c **** void uartPrint(char *str)
 146:../src/drv_uart.c **** {
 616              		.loc 1 146 0
 617              		.cfi_startproc
 618              		@ args = 0, pretend = 0, frame = 8
 619              		@ frame_needed = 1, uses_anonymous_args = 0
 620 0338 80B5     		push	{r7, lr}
 621              	.LCFI19:
 622              		.cfi_def_cfa_offset 8
 623              		.cfi_offset 7, -8
 624              		.cfi_offset 14, -4
 625 033a 82B0     		sub	sp, sp, #8
 626              	.LCFI20:
 627              		.cfi_def_cfa_offset 16
 628 033c 00AF     		add	r7, sp, #0
 629              	.LCFI21:
 630              		.cfi_def_cfa_register 7
 631 033e 7860     		str	r0, [r7, #4]
 147:../src/drv_uart.c ****     while (*str)
 632              		.loc 1 147 0
 633 0340 08E0     		b	.L34
 634              	.L35:
 148:../src/drv_uart.c ****         uartWrite(*(str++));
 635              		.loc 1 148 0
 636 0342 7B68     		ldr	r3, [r7, #4]
 637 0344 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 638 0346 7A68     		ldr	r2, [r7, #4]
 639 0348 02F10102 		add	r2, r2, #1
 640 034c 7A60     		str	r2, [r7, #4]
 641 034e 1846     		mov	r0, r3
 642 0350 FFF7FEFF 		bl	uartWrite
 643              	.L34:
 147:../src/drv_uart.c ****     while (*str)
 644              		.loc 1 147 0 discriminator 1
 645 0354 7B68     		ldr	r3, [r7, #4]
 646 0356 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 647 0358 002B     		cmp	r3, #0
 648 035a F2D1     		bne	.L35
 149:../src/drv_uart.c **** }
 649              		.loc 1 149 0
 650 035c 07F10807 		add	r7, r7, #8
 651 0360 BD46     		mov	sp, r7
 652 0362 80BD     		pop	{r7, pc}
 653              		.cfi_endproc
 654              	.LFE37:
 656              		.global	uart2Callback
 657              		.bss
 658              		.align	2
 661              	uart2Callback:
 662 000c 00000000 		.space	4
 663              		.comm	tx2Buffer,128,4
 664              		.global	tx2BufferTail
 665              		.align	2
 668              	tx2BufferTail:
 669 0010 00000000 		.space	4
 670              		.global	tx2BufferHead
 671              		.align	2
 674              	tx2BufferHead:
 675 0014 00000000 		.space	4
 676              		.global	uart2RxOnly
 679              	uart2RxOnly:
 680 0018 00       		.space	1
 681 0019 000000   		.text
 682              		.align	2
 683              		.thumb
 684              		.thumb_func
 686              	uart2Open:
 687              	.LFB38:
 150:../src/drv_uart.c **** 
 151:../src/drv_uart.c **** /* -------------------------- UART2 (Spektrum, GPS) ----------------------------- */
 152:../src/drv_uart.c **** uartReceiveCallbackPtr uart2Callback = NULL;
 153:../src/drv_uart.c **** #define UART2_BUFFER_SIZE    128
 154:../src/drv_uart.c **** 
 155:../src/drv_uart.c **** volatile uint8_t tx2Buffer[UART2_BUFFER_SIZE];
 156:../src/drv_uart.c **** uint32_t tx2BufferTail = 0;
 157:../src/drv_uart.c **** uint32_t tx2BufferHead = 0;
 158:../src/drv_uart.c **** bool uart2RxOnly = false;
 159:../src/drv_uart.c **** 
 160:../src/drv_uart.c **** static void uart2Open(uint32_t speed)
 161:../src/drv_uart.c **** {
 688              		.loc 1 161 0
 689              		.cfi_startproc
 690              		@ args = 0, pretend = 0, frame = 24
 691              		@ frame_needed = 1, uses_anonymous_args = 0
 692 0364 80B5     		push	{r7, lr}
 693              	.LCFI22:
 694              		.cfi_def_cfa_offset 8
 695              		.cfi_offset 7, -8
 696              		.cfi_offset 14, -4
 697 0366 86B0     		sub	sp, sp, #24
 698              	.LCFI23:
 699              		.cfi_def_cfa_offset 32
 700 0368 00AF     		add	r7, sp, #0
 701              	.LCFI24:
 702              		.cfi_def_cfa_register 7
 703 036a 7860     		str	r0, [r7, #4]
 162:../src/drv_uart.c ****     USART_InitTypeDef USART_InitStructure;
 163:../src/drv_uart.c **** 
 164:../src/drv_uart.c ****     USART_StructInit(&USART_InitStructure);
 704              		.loc 1 164 0
 705 036c 07F10803 		add	r3, r7, #8
 706 0370 1846     		mov	r0, r3
 707 0372 FFF7FEFF 		bl	USART_StructInit
 165:../src/drv_uart.c ****     USART_InitStructure.USART_BaudRate = speed;
 708              		.loc 1 165 0
 709 0376 7B68     		ldr	r3, [r7, #4]
 710 0378 BB60     		str	r3, [r7, #8]
 166:../src/drv_uart.c ****     USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 711              		.loc 1 166 0
 712 037a 4FF00003 		mov	r3, #0
 713 037e BB81     		strh	r3, [r7, #12]	@ movhi
 167:../src/drv_uart.c ****     USART_InitStructure.USART_StopBits = USART_StopBits_1;
 714              		.loc 1 167 0
 715 0380 4FF00003 		mov	r3, #0
 716 0384 FB81     		strh	r3, [r7, #14]	@ movhi
 168:../src/drv_uart.c ****     USART_InitStructure.USART_Parity = USART_Parity_No;
 717              		.loc 1 168 0
 718 0386 4FF00003 		mov	r3, #0
 719 038a 3B82     		strh	r3, [r7, #16]	@ movhi
 169:../src/drv_uart.c ****     USART_InitStructure.USART_Mode = USART_Mode_Rx | (uart2RxOnly ? 0 : USART_Mode_Tx);
 720              		.loc 1 169 0
 721 038c 0D4B     		ldr	r3, .L39
 722 038e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 723 0390 002B     		cmp	r3, #0
 724 0392 02D0     		beq	.L37
 725              		.loc 1 169 0 is_stmt 0 discriminator 1
 726 0394 4FF00403 		mov	r3, #4
 727 0398 01E0     		b	.L38
 728              	.L37:
 729              		.loc 1 169 0 discriminator 2
 730 039a 4FF00C03 		mov	r3, #12
 731              	.L38:
 732              		.loc 1 169 0 discriminator 3
 733 039e 7B82     		strh	r3, [r7, #18]	@ movhi
 170:../src/drv_uart.c ****     USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 734              		.loc 1 170 0 is_stmt 1 discriminator 3
 735 03a0 4FF00003 		mov	r3, #0
 736 03a4 BB82     		strh	r3, [r7, #20]	@ movhi
 171:../src/drv_uart.c ****     USART_Init(USART2, &USART_InitStructure);
 737              		.loc 1 171 0 discriminator 3
 738 03a6 07F10803 		add	r3, r7, #8
 739 03aa 0748     		ldr	r0, .L39+4
 740 03ac 1946     		mov	r1, r3
 741 03ae FFF7FEFF 		bl	USART_Init
 172:../src/drv_uart.c ****     USART_Cmd(USART2, ENABLE);
 742              		.loc 1 172 0 discriminator 3
 743 03b2 0548     		ldr	r0, .L39+4
 744 03b4 4FF00101 		mov	r1, #1
 745 03b8 FFF7FEFF 		bl	USART_Cmd
 173:../src/drv_uart.c **** }
 746              		.loc 1 173 0 discriminator 3
 747 03bc 07F11807 		add	r7, r7, #24
 748 03c0 BD46     		mov	sp, r7
 749 03c2 80BD     		pop	{r7, pc}
 750              	.L40:
 751              		.align	2
 752              	.L39:
 753 03c4 00000000 		.word	uart2RxOnly
 754 03c8 00440040 		.word	1073759232
 755              		.cfi_endproc
 756              	.LFE38:
 758              		.align	2
 759              		.global	uart2Init
 760              		.thumb
 761              		.thumb_func
 763              	uart2Init:
 764              	.LFB39:
 174:../src/drv_uart.c **** 
 175:../src/drv_uart.c **** void uart2Init(uint32_t speed, uartReceiveCallbackPtr func, bool rxOnly)
 176:../src/drv_uart.c **** {
 765              		.loc 1 176 0
 766              		.cfi_startproc
 767              		@ args = 0, pretend = 0, frame = 24
 768              		@ frame_needed = 1, uses_anonymous_args = 0
 769 03cc 80B5     		push	{r7, lr}
 770              	.LCFI25:
 771              		.cfi_def_cfa_offset 8
 772              		.cfi_offset 7, -8
 773              		.cfi_offset 14, -4
 774 03ce 86B0     		sub	sp, sp, #24
 775              	.LCFI26:
 776              		.cfi_def_cfa_offset 32
 777 03d0 00AF     		add	r7, sp, #0
 778              	.LCFI27:
 779              		.cfi_def_cfa_register 7
 780 03d2 F860     		str	r0, [r7, #12]
 781 03d4 B960     		str	r1, [r7, #8]
 782 03d6 1346     		mov	r3, r2
 783 03d8 FB71     		strb	r3, [r7, #7]
 177:../src/drv_uart.c ****     NVIC_InitTypeDef NVIC_InitStructure;
 178:../src/drv_uart.c ****     GPIO_InitTypeDef GPIO_InitStructure;
 179:../src/drv_uart.c **** 
 180:../src/drv_uart.c ****     RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 784              		.loc 1 180 0
 785 03da 4FF40030 		mov	r0, #131072
 786 03de 4FF00101 		mov	r1, #1
 787 03e2 FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
 181:../src/drv_uart.c **** 
 182:../src/drv_uart.c ****     uart2RxOnly = rxOnly;
 788              		.loc 1 182 0
 789 03e6 294B     		ldr	r3, .L44
 790 03e8 FA79     		ldrb	r2, [r7, #7]
 791 03ea 1A70     		strb	r2, [r3, #0]
 183:../src/drv_uart.c **** 
 184:../src/drv_uart.c ****     NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 792              		.loc 1 184 0
 793 03ec 4FF02603 		mov	r3, #38
 794 03f0 3B75     		strb	r3, [r7, #20]
 185:../src/drv_uart.c ****     NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 795              		.loc 1 185 0
 796 03f2 4FF00103 		mov	r3, #1
 797 03f6 7B75     		strb	r3, [r7, #21]
 186:../src/drv_uart.c ****     NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;
 798              		.loc 1 186 0
 799 03f8 4FF00203 		mov	r3, #2
 800 03fc BB75     		strb	r3, [r7, #22]
 187:../src/drv_uart.c ****     NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 801              		.loc 1 187 0
 802 03fe 4FF00103 		mov	r3, #1
 803 0402 FB75     		strb	r3, [r7, #23]
 188:../src/drv_uart.c ****     NVIC_Init(&NVIC_InitStructure);
 804              		.loc 1 188 0
 805 0404 07F11403 		add	r3, r7, #20
 806 0408 1846     		mov	r0, r3
 807 040a FFF7FEFF 		bl	NVIC_Init
 189:../src/drv_uart.c **** 
 190:../src/drv_uart.c ****     // USART2_TX    PA2
 191:../src/drv_uart.c ****     // USART2_RX    PA3
 192:../src/drv_uart.c ****     GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 808              		.loc 1 192 0
 809 040e 4FF00403 		mov	r3, #4
 810 0412 3B82     		strh	r3, [r7, #16]	@ movhi
 193:../src/drv_uart.c ****     GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 811              		.loc 1 193 0
 812 0414 4FF00203 		mov	r3, #2
 813 0418 BB74     		strb	r3, [r7, #18]
 194:../src/drv_uart.c ****     GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 814              		.loc 1 194 0
 815 041a 4FF01803 		mov	r3, #24
 816 041e FB74     		strb	r3, [r7, #19]
 195:../src/drv_uart.c ****     if (!rxOnly)
 817              		.loc 1 195 0
 818 0420 FB79     		ldrb	r3, [r7, #7]
 819 0422 83F00103 		eor	r3, r3, #1
 820 0426 DBB2     		uxtb	r3, r3
 821 0428 002B     		cmp	r3, #0
 822 042a 05D0     		beq	.L42
 196:../src/drv_uart.c ****         GPIO_Init(GPIOA, &GPIO_InitStructure);
 823              		.loc 1 196 0
 824 042c 07F11003 		add	r3, r7, #16
 825 0430 1748     		ldr	r0, .L44+4
 826 0432 1946     		mov	r1, r3
 827 0434 FFF7FEFF 		bl	GPIO_Init
 828              	.L42:
 197:../src/drv_uart.c ****     GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
 829              		.loc 1 197 0
 830 0438 4FF00803 		mov	r3, #8
 831 043c 3B82     		strh	r3, [r7, #16]	@ movhi
 198:../src/drv_uart.c ****     GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 832              		.loc 1 198 0
 833 043e 4FF04803 		mov	r3, #72
 834 0442 FB74     		strb	r3, [r7, #19]
 199:../src/drv_uart.c ****     GPIO_Init(GPIOA, &GPIO_InitStructure);
 835              		.loc 1 199 0
 836 0444 07F11003 		add	r3, r7, #16
 837 0448 1148     		ldr	r0, .L44+4
 838 044a 1946     		mov	r1, r3
 839 044c FFF7FEFF 		bl	GPIO_Init
 200:../src/drv_uart.c **** 
 201:../src/drv_uart.c ****     uart2Open(speed);
 840              		.loc 1 201 0
 841 0450 F868     		ldr	r0, [r7, #12]
 842 0452 FFF787FF 		bl	uart2Open
 202:../src/drv_uart.c ****     USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 843              		.loc 1 202 0
 844 0456 0F48     		ldr	r0, .L44+8
 845 0458 40F22551 		movw	r1, #1317
 846 045c 4FF00102 		mov	r2, #1
 847 0460 FFF7FEFF 		bl	USART_ITConfig
 203:../src/drv_uart.c ****     if (!rxOnly)
 848              		.loc 1 203 0
 849 0464 FB79     		ldrb	r3, [r7, #7]
 850 0466 83F00103 		eor	r3, r3, #1
 851 046a DBB2     		uxtb	r3, r3
 852 046c 002B     		cmp	r3, #0
 853 046e 06D0     		beq	.L43
 204:../src/drv_uart.c ****         USART_ITConfig(USART2, USART_IT_TXE, ENABLE);
 854              		.loc 1 204 0
 855 0470 0848     		ldr	r0, .L44+8
 856 0472 40F22771 		movw	r1, #1831
 857 0476 4FF00102 		mov	r2, #1
 858 047a FFF7FEFF 		bl	USART_ITConfig
 859              	.L43:
 205:../src/drv_uart.c ****     uart2Callback = func;
 860              		.loc 1 205 0
 861 047e 064B     		ldr	r3, .L44+12
 862 0480 BA68     		ldr	r2, [r7, #8]
 863 0482 1A60     		str	r2, [r3, #0]
 206:../src/drv_uart.c **** }
 864              		.loc 1 206 0
 865 0484 07F11807 		add	r7, r7, #24
 866 0488 BD46     		mov	sp, r7
 867 048a 80BD     		pop	{r7, pc}
 868              	.L45:
 869              		.align	2
 870              	.L44:
 871 048c 00000000 		.word	uart2RxOnly
 872 0490 00080140 		.word	1073809408
 873 0494 00440040 		.word	1073759232
 874 0498 00000000 		.word	uart2Callback
 875              		.cfi_endproc
 876              	.LFE39:
 878              		.align	2
 879              		.global	uart2ChangeBaud
 880              		.thumb
 881              		.thumb_func
 883              	uart2ChangeBaud:
 884              	.LFB40:
 207:../src/drv_uart.c **** 
 208:../src/drv_uart.c **** void uart2ChangeBaud(uint32_t speed)
 209:../src/drv_uart.c **** {
 885              		.loc 1 209 0
 886              		.cfi_startproc
 887              		@ args = 0, pretend = 0, frame = 8
 888              		@ frame_needed = 1, uses_anonymous_args = 0
 889 049c 80B5     		push	{r7, lr}
 890              	.LCFI28:
 891              		.cfi_def_cfa_offset 8
 892              		.cfi_offset 7, -8
 893              		.cfi_offset 14, -4
 894 049e 82B0     		sub	sp, sp, #8
 895              	.LCFI29:
 896              		.cfi_def_cfa_offset 16
 897 04a0 00AF     		add	r7, sp, #0
 898              	.LCFI30:
 899              		.cfi_def_cfa_register 7
 900 04a2 7860     		str	r0, [r7, #4]
 210:../src/drv_uart.c ****     uart2Open(speed);
 901              		.loc 1 210 0
 902 04a4 7868     		ldr	r0, [r7, #4]
 903 04a6 FFF75DFF 		bl	uart2Open
 211:../src/drv_uart.c **** }
 904              		.loc 1 211 0
 905 04aa 07F10807 		add	r7, r7, #8
 906 04ae BD46     		mov	sp, r7
 907 04b0 80BD     		pop	{r7, pc}
 908              		.cfi_endproc
 909              	.LFE40:
 911 04b2 00BF     		.align	2
 912              		.global	uart2Write
 913              		.thumb
 914              		.thumb_func
 916              	uart2Write:
 917              	.LFB41:
 212:../src/drv_uart.c **** 
 213:../src/drv_uart.c **** void uart2Write(uint8_t ch)
 214:../src/drv_uart.c **** {
 918              		.loc 1 214 0
 919              		.cfi_startproc
 920              		@ args = 0, pretend = 0, frame = 8
 921              		@ frame_needed = 1, uses_anonymous_args = 0
 922 04b4 80B5     		push	{r7, lr}
 923              	.LCFI31:
 924              		.cfi_def_cfa_offset 8
 925              		.cfi_offset 7, -8
 926              		.cfi_offset 14, -4
 927 04b6 82B0     		sub	sp, sp, #8
 928              	.LCFI32:
 929              		.cfi_def_cfa_offset 16
 930 04b8 00AF     		add	r7, sp, #0
 931              	.LCFI33:
 932              		.cfi_def_cfa_register 7
 933 04ba 0346     		mov	r3, r0
 934 04bc FB71     		strb	r3, [r7, #7]
 215:../src/drv_uart.c ****     if (uart2RxOnly)
 935              		.loc 1 215 0
 936 04be 0F4B     		ldr	r3, .L51
 937 04c0 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 938 04c2 002B     		cmp	r3, #0
 939 04c4 14D1     		bne	.L50
 940              	.L48:
 216:../src/drv_uart.c ****         return;
 217:../src/drv_uart.c **** 
 218:../src/drv_uart.c ****     tx2Buffer[tx2BufferHead] = ch;
 941              		.loc 1 218 0
 942 04c6 0E4B     		ldr	r3, .L51+4
 943 04c8 1B68     		ldr	r3, [r3, #0]
 944 04ca 0E4A     		ldr	r2, .L51+8
 945 04cc F979     		ldrb	r1, [r7, #7]
 946 04ce D154     		strb	r1, [r2, r3]
 219:../src/drv_uart.c ****     tx2BufferHead = (tx2BufferHead + 1) % UART2_BUFFER_SIZE;
 947              		.loc 1 219 0
 948 04d0 0B4B     		ldr	r3, .L51+4
 949 04d2 1B68     		ldr	r3, [r3, #0]
 950 04d4 03F10103 		add	r3, r3, #1
 951 04d8 03F07F02 		and	r2, r3, #127
 952 04dc 084B     		ldr	r3, .L51+4
 953 04de 1A60     		str	r2, [r3, #0]
 220:../src/drv_uart.c **** 
 221:../src/drv_uart.c ****     USART_ITConfig(USART2, USART_IT_TXE, ENABLE);
 954              		.loc 1 221 0
 955 04e0 0948     		ldr	r0, .L51+12
 956 04e2 40F22771 		movw	r1, #1831
 957 04e6 4FF00102 		mov	r2, #1
 958 04ea FFF7FEFF 		bl	USART_ITConfig
 959 04ee 00E0     		b	.L47
 960              	.L50:
 216:../src/drv_uart.c ****         return;
 961              		.loc 1 216 0
 962 04f0 00BF     		nop
 963              	.L47:
 222:../src/drv_uart.c **** }
 964              		.loc 1 222 0
 965 04f2 07F10807 		add	r7, r7, #8
 966 04f6 BD46     		mov	sp, r7
 967 04f8 80BD     		pop	{r7, pc}
 968              	.L52:
 969 04fa 00BF     		.align	2
 970              	.L51:
 971 04fc 00000000 		.word	uart2RxOnly
 972 0500 00000000 		.word	tx2BufferHead
 973 0504 00000000 		.word	tx2Buffer
 974 0508 00440040 		.word	1073759232
 975              		.cfi_endproc
 976              	.LFE41:
 978              		.align	2
 979              		.global	uart2TransmitEmpty
 980              		.thumb
 981              		.thumb_func
 983              	uart2TransmitEmpty:
 984              	.LFB42:
 223:../src/drv_uart.c **** 
 224:../src/drv_uart.c **** bool uart2TransmitEmpty(void)
 225:../src/drv_uart.c **** {
 985              		.loc 1 225 0
 986              		.cfi_startproc
 987              		@ args = 0, pretend = 0, frame = 0
 988              		@ frame_needed = 1, uses_anonymous_args = 0
 989              		@ link register save eliminated.
 990 050c 80B4     		push	{r7}
 991              	.LCFI34:
 992              		.cfi_def_cfa_offset 4
 993              		.cfi_offset 7, -4
 994 050e 00AF     		add	r7, sp, #0
 995              	.LCFI35:
 996              		.cfi_def_cfa_register 7
 226:../src/drv_uart.c ****     return tx2BufferTail == tx2BufferHead;
 997              		.loc 1 226 0
 998 0510 064B     		ldr	r3, .L55
 999 0512 1A68     		ldr	r2, [r3, #0]
 1000 0514 064B     		ldr	r3, .L55+4
 1001 0516 1B68     		ldr	r3, [r3, #0]
 1002 0518 9A42     		cmp	r2, r3
 1003 051a 14BF     		ite	ne
 1004 051c 0023     		movne	r3, #0
 1005 051e 0123     		moveq	r3, #1
 1006 0520 DBB2     		uxtb	r3, r3
 227:../src/drv_uart.c **** }
 1007              		.loc 1 227 0
 1008 0522 1846     		mov	r0, r3
 1009 0524 BD46     		mov	sp, r7
 1010 0526 80BC     		pop	{r7}
 1011 0528 7047     		bx	lr
 1012              	.L56:
 1013 052a 00BF     		.align	2
 1014              	.L55:
 1015 052c 00000000 		.word	tx2BufferTail
 1016 0530 00000000 		.word	tx2BufferHead
 1017              		.cfi_endproc
 1018              	.LFE42:
 1020              		.align	2
 1021              		.global	USART2_IRQHandler
 1022              		.thumb
 1023              		.thumb_func
 1025              	USART2_IRQHandler:
 1026              	.LFB43:
 228:../src/drv_uart.c **** 
 229:../src/drv_uart.c **** void USART2_IRQHandler(void)
 230:../src/drv_uart.c **** {
 1027              		.loc 1 230 0
 1028              		.cfi_startproc
 1029              		@ args = 0, pretend = 0, frame = 8
 1030              		@ frame_needed = 1, uses_anonymous_args = 0
 1031 0534 90B5     		push	{r4, r7, lr}
 1032              	.LCFI36:
 1033              		.cfi_def_cfa_offset 12
 1034              		.cfi_offset 4, -12
 1035              		.cfi_offset 7, -8
 1036              		.cfi_offset 14, -4
 1037 0536 83B0     		sub	sp, sp, #12
 1038              	.LCFI37:
 1039              		.cfi_def_cfa_offset 24
 1040 0538 00AF     		add	r7, sp, #0
 1041              	.LCFI38:
 1042              		.cfi_def_cfa_register 7
 231:../src/drv_uart.c ****     uint16_t SR = USART2->SR;
 1043              		.loc 1 231 0
 1044 053a 1D4B     		ldr	r3, .L61
 1045 053c 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1046 053e FB80     		strh	r3, [r7, #6]	@ movhi
 232:../src/drv_uart.c **** 
 233:../src/drv_uart.c ****     if (SR & USART_IT_RXNE) {
 1047              		.loc 1 233 0
 1048 0540 FA88     		ldrh	r2, [r7, #6]
 1049 0542 40F22553 		movw	r3, #1317
 1050 0546 1340     		ands	r3, r3, r2
 1051 0548 002B     		cmp	r3, #0
 1052 054a 0BD0     		beq	.L58
 234:../src/drv_uart.c ****         if (uart2Callback)
 1053              		.loc 1 234 0
 1054 054c 194B     		ldr	r3, .L61+4
 1055 054e 1B68     		ldr	r3, [r3, #0]
 1056 0550 002B     		cmp	r3, #0
 1057 0552 07D0     		beq	.L58
 235:../src/drv_uart.c ****             uart2Callback(USART_ReceiveData(USART2));
 1058              		.loc 1 235 0
 1059 0554 174B     		ldr	r3, .L61+4
 1060 0556 1C68     		ldr	r4, [r3, #0]
 1061 0558 1548     		ldr	r0, .L61
 1062 055a FFF7FEFF 		bl	USART_ReceiveData
 1063 055e 0346     		mov	r3, r0
 1064 0560 1846     		mov	r0, r3
 1065 0562 A047     		blx	r4
 1066              	.L58:
 236:../src/drv_uart.c ****     }
 237:../src/drv_uart.c ****     if (SR & USART_FLAG_TXE) {
 1067              		.loc 1 237 0
 1068 0564 FB88     		ldrh	r3, [r7, #6]
 1069 0566 03F08003 		and	r3, r3, #128
 1070 056a 002B     		cmp	r3, #0
 1071 056c 1CD0     		beq	.L57
 238:../src/drv_uart.c ****         if (tx2BufferTail != tx2BufferHead) {
 1072              		.loc 1 238 0
 1073 056e 124B     		ldr	r3, .L61+8
 1074 0570 1A68     		ldr	r2, [r3, #0]
 1075 0572 124B     		ldr	r3, .L61+12
 1076 0574 1B68     		ldr	r3, [r3, #0]
 1077 0576 9A42     		cmp	r2, r3
 1078 0578 0FD0     		beq	.L60
 239:../src/drv_uart.c ****             USART2->DR = tx2Buffer[tx2BufferTail];
 1079              		.loc 1 239 0
 1080 057a 0D4B     		ldr	r3, .L61
 1081 057c 0E4A     		ldr	r2, .L61+8
 1082 057e 1268     		ldr	r2, [r2, #0]
 1083 0580 0F49     		ldr	r1, .L61+16
 1084 0582 8A5C     		ldrb	r2, [r1, r2]
 1085 0584 D2B2     		uxtb	r2, r2
 1086 0586 9A80     		strh	r2, [r3, #4]	@ movhi
 240:../src/drv_uart.c ****             tx2BufferTail = (tx2BufferTail + 1) % UART2_BUFFER_SIZE;
 1087              		.loc 1 240 0
 1088 0588 0B4B     		ldr	r3, .L61+8
 1089 058a 1B68     		ldr	r3, [r3, #0]
 1090 058c 03F10103 		add	r3, r3, #1
 1091 0590 03F07F02 		and	r2, r3, #127
 1092 0594 084B     		ldr	r3, .L61+8
 1093 0596 1A60     		str	r2, [r3, #0]
 1094 0598 06E0     		b	.L57
 1095              	.L60:
 241:../src/drv_uart.c ****         } else {
 242:../src/drv_uart.c ****             USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
 1096              		.loc 1 242 0
 1097 059a 0548     		ldr	r0, .L61
 1098 059c 40F22771 		movw	r1, #1831
 1099 05a0 4FF00002 		mov	r2, #0
 1100 05a4 FFF7FEFF 		bl	USART_ITConfig
 1101              	.L57:
 243:../src/drv_uart.c ****         }
 244:../src/drv_uart.c ****     }
 245:../src/drv_uart.c **** }
 1102              		.loc 1 245 0
 1103 05a8 07F10C07 		add	r7, r7, #12
 1104 05ac BD46     		mov	sp, r7
 1105 05ae 90BD     		pop	{r4, r7, pc}
 1106              	.L62:
 1107              		.align	2
 1108              	.L61:
 1109 05b0 00440040 		.word	1073759232
 1110 05b4 00000000 		.word	uart2Callback
 1111 05b8 00000000 		.word	tx2BufferTail
 1112 05bc 00000000 		.word	tx2BufferHead
 1113 05c0 00000000 		.word	tx2Buffer
 1114              		.cfi_endproc
 1115              	.LFE43:
 1117              	.Letext0:
 1118              		.file 2 "/home/oni/ARM_EABI/bin/../lib/gcc/arm-none-eabi/4.7.2/../../../../arm-none-eabi/include/s
 1119              		.file 3 "/home/oni/workspace/Naze32/lib/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
 1120              		.file 4 "/home/oni/workspace/Naze32/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dma.h"
 1121              		.file 5 "/home/oni/workspace/Naze32/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_gpio.h"
 1122              		.file 6 "/home/oni/workspace/Naze32/lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_usart.h"
 1123              		.file 7 "/home/oni/workspace/Naze32/lib/STM32F10x_StdPeriph_Driver/inc/misc.h"
 1124              		.file 8 "../src/board.h"
 1125              		.file 9 "/home/oni/workspace/Naze32/lib/CMSIS/CM3/CoreSupport/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:00000000 drv_uart.c
                            *COM*:00000100 rxBuffer
     /tmp/cc6joGnr.s:24     .bss:00000000 rxDMAPos
     /tmp/cc6joGnr.s:21     .bss:00000000 $d
                            *COM*:00000100 txBuffer
     /tmp/cc6joGnr.s:31     .bss:00000004 txBufferTail
     /tmp/cc6joGnr.s:37     .bss:00000008 txBufferHead
     /tmp/cc6joGnr.s:40     .text:00000000 $t
     /tmp/cc6joGnr.s:44     .text:00000000 uartTxDMA
     /tmp/cc6joGnr.s:108    .text:00000054 $d
     /tmp/cc6joGnr.s:115    .text:00000064 $t
     /tmp/cc6joGnr.s:120    .text:00000064 DMA1_Channel4_IRQHandler
     /tmp/cc6joGnr.s:156    .text:0000008c $d
     /tmp/cc6joGnr.s:162    .text:00000098 $t
     /tmp/cc6joGnr.s:167    .text:00000098 uartInit
     /tmp/cc6joGnr.s:360    .text:00000220 $d
     /tmp/cc6joGnr.s:370    .text:0000023c $t
     /tmp/cc6joGnr.s:375    .text:0000023c uartAvailable
     /tmp/cc6joGnr.s:407    .text:0000025c $d
     /tmp/cc6joGnr.s:412    .text:00000264 $t
     /tmp/cc6joGnr.s:417    .text:00000264 uartTransmitEmpty
     /tmp/cc6joGnr.s:449    .text:00000284 $d
     /tmp/cc6joGnr.s:454    .text:0000028c $t
     /tmp/cc6joGnr.s:459    .text:0000028c uartRead
     /tmp/cc6joGnr.s:509    .text:000002cc $d
     /tmp/cc6joGnr.s:514    .text:000002d4 $t
     /tmp/cc6joGnr.s:519    .text:000002d4 uartReadPoll
     /tmp/cc6joGnr.s:555    .text:000002f0 uartWrite
     /tmp/cc6joGnr.s:603    .text:0000032c $d
     /tmp/cc6joGnr.s:609    .text:00000338 $t
     /tmp/cc6joGnr.s:614    .text:00000338 uartPrint
     /tmp/cc6joGnr.s:661    .bss:0000000c uart2Callback
                            *COM*:00000080 tx2Buffer
     /tmp/cc6joGnr.s:668    .bss:00000010 tx2BufferTail
     /tmp/cc6joGnr.s:674    .bss:00000014 tx2BufferHead
     /tmp/cc6joGnr.s:679    .bss:00000018 uart2RxOnly
     /tmp/cc6joGnr.s:686    .text:00000364 uart2Open
     /tmp/cc6joGnr.s:753    .text:000003c4 $d
     /tmp/cc6joGnr.s:758    .text:000003cc $t
     /tmp/cc6joGnr.s:763    .text:000003cc uart2Init
     /tmp/cc6joGnr.s:871    .text:0000048c $d
     /tmp/cc6joGnr.s:878    .text:0000049c $t
     /tmp/cc6joGnr.s:883    .text:0000049c uart2ChangeBaud
     /tmp/cc6joGnr.s:916    .text:000004b4 uart2Write
     /tmp/cc6joGnr.s:971    .text:000004fc $d
     /tmp/cc6joGnr.s:978    .text:0000050c $t
     /tmp/cc6joGnr.s:983    .text:0000050c uart2TransmitEmpty
     /tmp/cc6joGnr.s:1015   .text:0000052c $d
     /tmp/cc6joGnr.s:1020   .text:00000534 $t
     /tmp/cc6joGnr.s:1025   .text:00000534 USART2_IRQHandler
     /tmp/cc6joGnr.s:1109   .text:000005b0 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.809c0ff785d6d6219236c5d51f444c16
                           .group:00000000 wm4.stdbool.h.29.1c9ee6859ce8145f7838a4f2549ccec2
                           .group:00000000 wm4.newlib.h.8.e1d498e57c12962fc6d7be5061a6981a
                           .group:00000000 wm4.config.h.148.52fe83653334d06815a0c57b59a3e584
                           .group:00000000 wm4._ansi.h.23.95dee4059009fe3ab635a191bb73dc66
                           .group:00000000 wm4.stdlib.h.18.6f6153fd5cb89acd58c0f0ab1f77e147
                           .group:00000000 wm4.stddef.h.187.40b3a084f9bc2c020a9e00b9eabe9c14
                           .group:00000000 wm4._default_types.h.6.1dbd2e581fd590860c7c17f21d147e91
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.349.31f4c5baff3fa2689010b32028da9c47
                           .group:00000000 wm4.reent.h.16.58b23a9f0faf0e7f2dfe7e2d33154afd
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.55.22eafe60f8565d898cbb44515781114b
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.math.h.49.5da716593b937b9fb02bef6ed6537c13
                           .group:00000000 wm4.ctype.h.2.fecd14bb6f4e162ef31748cc97760e21
                           .group:00000000 wm4.string.h.8.ef946ad0bc9ad5c970c365dcd1fc4b0a
                           .group:00000000 wm4.stddef.h.235.d9f4f80b8c4429535175712282cda6a6
                           .group:00000000 wm4.string.h.86.d5c872ff52e2712c985b588a0ef39f3c
                           .group:00000000 wm4.stdio.h.27.f2ac352bab34f31f9f478442827b2ba6
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.types.h.23.0d949686bbcadd1621462d4fa1f884f9
                           .group:00000000 wm4.stddef.h.40.b60a1c1ee3f272eef5327a730cbabca6
                           .group:00000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:00000000 wm4.types.h.80.f2bfdfeee9f340633702c07fad9b5e01
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.63.1f4bc553faa62c5c69dd9cb47f9f1417
                           .group:00000000 wm4.stm32f10x.h.51.b859cb68ed44ee02c916b41cb8c68f1c
                           .group:00000000 wm4.core_cm3.h.25.119fe996be41b62fbd915b59177e39d1
                           .group:00000000 wm4.stm32f10x.h.522.9a9f642c8c562acb4a63ad5d933b7c01
                           .group:00000000 wm4.stm32f10x.h.8304.f7d8ad90959e99679b3257267c3aadfe
                           .group:00000000 wm4.stm32f10x_adc.h.83.4d35a50d598070ecea6f33bcef02c922
                           .group:00000000 wm4.stm32f10x_bkp.h.25.4622919f1e30efdad5eb44e12edd5513
                           .group:00000000 wm4.stm32f10x_can.h.25.48aab46fcce6d08400bf960b028e4698
                           .group:00000000 wm4.stm32f10x_cec.h.25.8f03450e7bbb704d96e7bc73ec0f66a7
                           .group:00000000 wm4.stm32f10x_dac.h.25.6e7f2924f39c60c10815105b99b8b446
                           .group:00000000 wm4.stm32f10x_dbgmcu.h.25.d3351200fc7f9c8615d1ae81d40db08a
                           .group:00000000 wm4.stm32f10x_dma.h.25.94e36204daa98cae5dcc70a10a9694d5
                           .group:00000000 wm4.stm32f10x_exti.h.25.b9064155c5c006b5154b39788c79001a
                           .group:00000000 wm4.stm32f10x_flash.h.25.4be61fcb02863962a1e006449d310650
                           .group:00000000 wm4.stm32f10x_fsmc.h.25.bca154da2699cdb6024c0c6c4fc5aa89
                           .group:00000000 wm4.stm32f10x_gpio.h.25.80c981af0e637567395034c576cfb3ce
                           .group:00000000 wm4.stm32f10x_i2c.h.25.7b6cbaea24c6f25f538f8516d1814cb2
                           .group:00000000 wm4.stm32f10x_iwdg.h.25.da9374ab9856795610487f312ccf3122
                           .group:00000000 wm4.stm32f10x_pwr.h.25.37ef75009f751ef5fe27910e0bf00a62
                           .group:00000000 wm4.stm32f10x_rcc.h.25.968bcf08d813e68e57c280a4da69fa5a
                           .group:00000000 wm4.stm32f10x_rtc.h.25.361142606ba98ddcd10369f321f6e636
                           .group:00000000 wm4.stm32f10x_sdio.h.25.1fb5280a7690ef99070096bf8c866b3a
                           .group:00000000 wm4.stm32f10x_spi.h.25.68b3d5ccfcf895f9fe505ce20c0c300f
                           .group:00000000 wm4.stm32f10x_tim.h.25.21c6ec062f1e74898cb96a57da276fec
                           .group:00000000 wm4.stm32f10x_usart.h.25.29629c699b65db3f3efd3561f66b0bf6
                           .group:00000000 wm4.stm32f10x_wwdg.h.25.dde12201d86b5aa9ecaafb5eccdc6549
                           .group:00000000 wm4.misc.h.25.068e106f368fa5369a681ef57c106f4b
                           .group:00000000 wm4.stdarg.h.31.fa591a4b1df9e413e9f5b8097f9ae89d
                           .group:00000000 wm4.printf.h.118.ab3672ee221610a07496c11f46394049
                           .group:00000000 wm4.board.h.22.3e17243136ce51e89ad1cec38a12dc6f
                           .group:00000000 wm4.drv_adc.h.3.0c1a2a90f0739aca31cc38e66ffab3f5
                           .group:00000000 wm4.drv_pwm.h.3.1f878ba1925c00079825df97e09db15d

UNDEFINED SYMBOLS
DMA_Cmd
DMA_ClearITPendingBit
GPIO_Init
NVIC_Init
USART_Init
DMA_DeInit
DMA_Init
USART_DMACmd
DMA_GetCurrDataCounter
DMA_ITConfig
USART_Cmd
USART_StructInit
RCC_APB1PeriphClockCmd
USART_ITConfig
USART_ReceiveData
