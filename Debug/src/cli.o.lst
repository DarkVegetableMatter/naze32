   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"cli.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.bss
  19              		.align	2
  20              	cliBuffer:
  21 0000 00000000 		.space	48
  21      00000000 
  21      00000000 
  21      00000000 
  21      00000000 
  22              		.align	2
  23              	bufferIndex:
  24 0030 00000000 		.space	4
  25              		.global	mixerNames
  26              		.section	.rodata
  27              		.align	2
  28              	.LC0:
  29 0000 54524900 		.ascii	"TRI\000"
  30              		.align	2
  31              	.LC1:
  32 0004 51554144 		.ascii	"QUADP\000"
  32      5000
  33 000a 0000     		.align	2
  34              	.LC2:
  35 000c 51554144 		.ascii	"QUADX\000"
  35      5800
  36 0012 0000     		.align	2
  37              	.LC3:
  38 0014 424900   		.ascii	"BI\000"
  39 0017 00       		.align	2
  40              	.LC4:
  41 0018 47494D42 		.ascii	"GIMBAL\000"
  41      414C00
  42 001f 00       		.align	2
  43              	.LC5:
  44 0020 593600   		.ascii	"Y6\000"
  45 0023 00       		.align	2
  46              	.LC6:
  47 0024 48455836 		.ascii	"HEX6\000"
  47      00
  48 0029 000000   		.align	2
  49              	.LC7:
  50 002c 464C5949 		.ascii	"FLYING_WING\000"
  50      4E475F57 
  50      494E4700 
  51              		.align	2
  52              	.LC8:
  53 0038 593400   		.ascii	"Y4\000"
  54 003b 00       		.align	2
  55              	.LC9:
  56 003c 48455836 		.ascii	"HEX6X\000"
  56      5800
  57 0042 0000     		.align	2
  58              	.LC10:
  59 0044 4F43544F 		.ascii	"OCTOX8\000"
  59      583800
  60 004b 00       		.align	2
  61              	.LC11:
  62 004c 4F43544F 		.ascii	"OCTOFLATP\000"
  62      464C4154 
  62      5000
  63 0056 0000     		.align	2
  64              	.LC12:
  65 0058 4F43544F 		.ascii	"OCTOFLATX\000"
  65      464C4154 
  65      5800
  66 0062 0000     		.align	2
  67              	.LC13:
  68 0064 41495250 		.ascii	"AIRPLANE\000"
  68      4C414E45 
  68      00
  69 006d 000000   		.align	2
  70              	.LC14:
  71 0070 48454C49 		.ascii	"HELI_120_CCPM\000"
  71      5F313230 
  71      5F434350 
  71      4D00
  72 007e 0000     		.align	2
  73              	.LC15:
  74 0080 48454C49 		.ascii	"HELI_90_DEG\000"
  74      5F39305F 
  74      44454700 
  75              		.align	2
  76              	.LC16:
  77 008c 56544149 		.ascii	"VTAIL4\000"
  77      4C3400
  78 0093 00       		.align	2
  79              	.LC17:
  80 0094 43555354 		.ascii	"CUSTOM\000"
  80      4F4D00
  81 009b 00       		.align	2
  84              	mixerNames:
  85 009c 00000000 		.word	.LC0
  86 00a0 04000000 		.word	.LC1
  87 00a4 0C000000 		.word	.LC2
  88 00a8 14000000 		.word	.LC3
  89 00ac 18000000 		.word	.LC4
  90 00b0 20000000 		.word	.LC5
  91 00b4 24000000 		.word	.LC6
  92 00b8 2C000000 		.word	.LC7
  93 00bc 38000000 		.word	.LC8
  94 00c0 3C000000 		.word	.LC9
  95 00c4 44000000 		.word	.LC10
  96 00c8 4C000000 		.word	.LC11
  97 00cc 58000000 		.word	.LC12
  98 00d0 64000000 		.word	.LC13
  99 00d4 70000000 		.word	.LC14
 100 00d8 80000000 		.word	.LC15
 101 00dc 8C000000 		.word	.LC16
 102 00e0 94000000 		.word	.LC17
 103 00e4 00000000 		.word	0
 104              		.global	featureNames
 105              		.align	2
 106              	.LC18:
 107 00e8 50504D00 		.ascii	"PPM\000"
 108              		.align	2
 109              	.LC19:
 110 00ec 56424154 		.ascii	"VBAT\000"
 110      00
 111 00f1 000000   		.align	2
 112              	.LC20:
 113 00f4 494E464C 		.ascii	"INFLIGHT_ACC_CAL\000"
 113      49474854 
 113      5F414343 
 113      5F43414C 
 113      00
 114 0105 000000   		.align	2
 115              	.LC21:
 116 0108 5350454B 		.ascii	"SPEKTRUM\000"
 116      5452554D 
 116      00
 117 0111 000000   		.align	2
 118              	.LC22:
 119 0114 4D4F544F 		.ascii	"MOTOR_STOP\000"
 119      525F5354 
 119      4F5000
 120 011f 00       		.align	2
 121              	.LC23:
 122 0120 53455256 		.ascii	"SERVO_TILT\000"
 122      4F5F5449 
 122      4C5400
 123 012b 00       		.align	2
 124              	.LC24:
 125 012c 4759524F 		.ascii	"GYRO_SMOOTHING\000"
 125      5F534D4F 
 125      4F544849 
 125      4E4700
 126 013b 00       		.align	2
 127              	.LC25:
 128 013c 4C45445F 		.ascii	"LED_RING\000"
 128      52494E47 
 128      00
 129 0145 000000   		.align	2
 130              	.LC26:
 131 0148 47505300 		.ascii	"GPS\000"
 132              		.align	2
 133              	.LC27:
 134 014c 4641494C 		.ascii	"FAILSAFE\000"
 134      53414645 
 134      00
 135 0155 000000   		.align	2
 136              	.LC28:
 137 0158 534F4E41 		.ascii	"SONAR\000"
 137      5200
 138 015e 0000     		.align	2
 139              	.LC29:
 140 0160 54454C45 		.ascii	"TELEMETRY\000"
 140      4D455452 
 140      5900
 141 016a 0000     		.align	2
 142              	.LC30:
 143 016c 504F5745 		.ascii	"POWERMETER\000"
 143      524D4554 
 143      455200
 144 0177 00       		.align	2
 145              	.LC31:
 146 0178 56415249 		.ascii	"VARIO\000"
 146      4F00
 147 017e 0000     		.align	2
 150              	featureNames:
 151 0180 E8000000 		.word	.LC18
 152 0184 EC000000 		.word	.LC19
 153 0188 F4000000 		.word	.LC20
 154 018c 08010000 		.word	.LC21
 155 0190 14010000 		.word	.LC22
 156 0194 20010000 		.word	.LC23
 157 0198 2C010000 		.word	.LC24
 158 019c 3C010000 		.word	.LC25
 159 01a0 48010000 		.word	.LC26
 160 01a4 4C010000 		.word	.LC27
 161 01a8 58010000 		.word	.LC28
 162 01ac 60010000 		.word	.LC29
 163 01b0 6C010000 		.word	.LC30
 164 01b4 78010000 		.word	.LC31
 165 01b8 00000000 		.word	0
 166              		.global	sensorNames
 167              		.align	2
 168              	.LC32:
 169 01bc 41434300 		.ascii	"ACC\000"
 170              		.align	2
 171              	.LC33:
 172 01c0 4241524F 		.ascii	"BARO\000"
 172      00
 173 01c5 000000   		.align	2
 174              	.LC34:
 175 01c8 4D414700 		.ascii	"MAG\000"
 176              		.align	2
 179              	sensorNames:
 180 01cc BC010000 		.word	.LC32
 181 01d0 C0010000 		.word	.LC33
 182 01d4 C8010000 		.word	.LC34
 183 01d8 58010000 		.word	.LC28
 184 01dc 48010000 		.word	.LC26
 185 01e0 00000000 		.word	0
 186              		.global	accNames
 187              		.align	2
 188              	.LC35:
 189 01e4 00       		.ascii	"\000"
 190 01e5 000000   		.align	2
 191              	.LC36:
 192 01e8 4144584C 		.ascii	"ADXL345\000"
 192      33343500 
 193              		.align	2
 194              	.LC37:
 195 01f0 4D505536 		.ascii	"MPU6050\000"
 195      30353000 
 196              		.align	2
 197              	.LC38:
 198 01f8 4D4D4138 		.ascii	"MMA845x\000"
 198      34357800 
 199              		.align	2
 202              	accNames:
 203 0200 E4010000 		.word	.LC35
 204 0204 E8010000 		.word	.LC36
 205 0208 F0010000 		.word	.LC37
 206 020c F8010000 		.word	.LC38
 207 0210 00000000 		.word	0
 208              		.global	cmdTable
 209              		.align	2
 210              	.LC39:
 211 0214 61757800 		.ascii	"aux\000"
 212              		.align	2
 213              	.LC40:
 214 0218 66656174 		.ascii	"feature_name auxflag or blank for list\000"
 214      7572655F 
 214      6E616D65 
 214      20617578 
 214      666C6167 
 215 023f 00       		.align	2
 216              	.LC41:
 217 0240 636D6978 		.ascii	"cmix\000"
 217      00
 218 0245 000000   		.align	2
 219              	.LC42:
 220 0248 64657369 		.ascii	"design custom mixer\000"
 220      676E2063 
 220      7573746F 
 220      6D206D69 
 220      78657200 
 221              		.align	2
 222              	.LC43:
 223 025c 64656661 		.ascii	"defaults\000"
 223      756C7473 
 223      00
 224 0265 000000   		.align	2
 225              	.LC44:
 226 0268 72657365 		.ascii	"reset to defaults and reboot\000"
 226      7420746F 
 226      20646566 
 226      61756C74 
 226      7320616E 
 227 0285 000000   		.align	2
 228              	.LC45:
 229 0288 64756D70 		.ascii	"dump\000"
 229      00
 230 028d 000000   		.align	2
 231              	.LC46:
 232 0290 7072696E 		.ascii	"print configurable settings in a pastable form\000"
 232      7420636F 
 232      6E666967 
 232      75726162 
 232      6C652073 
 233 02bf 00       		.align	2
 234              	.LC47:
 235 02c0 65786974 		.ascii	"exit\000"
 235      00
 236 02c5 000000   		.align	2
 237              	.LC48:
 238 02c8 66656174 		.ascii	"feature\000"
 238      75726500 
 239              		.align	2
 240              	.LC49:
 241 02d0 6C697374 		.ascii	"list or -val or val\000"
 241      206F7220 
 241      2D76616C 
 241      206F7220 
 241      76616C00 
 242              		.align	2
 243              	.LC50:
 244 02e4 68656C70 		.ascii	"help\000"
 244      00
 245 02e9 000000   		.align	2
 246              	.LC51:
 247 02ec 69326300 		.ascii	"i2c\000"
 248              		.align	2
 249              	.LC52:
 250 02f0 69326320 		.ascii	"i2c bus tool\000"
 250      62757320 
 250      746F6F6C 
 250      00
 251 02fd 000000   		.align	2
 252              	.LC53:
 253 0300 6D617000 		.ascii	"map\000"
 254              		.align	2
 255              	.LC54:
 256 0304 6D617070 		.ascii	"mapping of rc channel order\000"
 256      696E6720 
 256      6F662072 
 256      63206368 
 256      616E6E65 
 257              		.align	2
 258              	.LC55:
 259 0320 6D697865 		.ascii	"mixer\000"
 259      7200
 260 0326 0000     		.align	2
 261              	.LC56:
 262 0328 6D697865 		.ascii	"mixer name or list\000"
 262      72206E61 
 262      6D65206F 
 262      72206C69 
 262      737400
 263 033b 00       		.align	2
 264              	.LC57:
 265 033c 70726F66 		.ascii	"profile\000"
 265      696C6500 
 266              		.align	2
 267              	.LC58:
 268 0344 696E6465 		.ascii	"index (0 to 2)\000"
 268      78202830 
 268      20746F20 
 268      322900
 269 0353 00       		.align	2
 270              	.LC59:
 271 0354 73617665 		.ascii	"save\000"
 271      00
 272 0359 000000   		.align	2
 273              	.LC60:
 274 035c 73617665 		.ascii	"save and reboot\000"
 274      20616E64 
 274      20726562 
 274      6F6F7400 
 275              		.align	2
 276              	.LC61:
 277 036c 73657400 		.ascii	"set\000"
 278              		.align	2
 279              	.LC62:
 280 0370 6E616D65 		.ascii	"name=value or blank or * for list\000"
 280      3D76616C 
 280      7565206F 
 280      7220626C 
 280      616E6B20 
 281 0392 0000     		.align	2
 282              	.LC63:
 283 0394 73746174 		.ascii	"status\000"
 283      757300
 284 039b 00       		.align	2
 285              	.LC64:
 286 039c 73686F77 		.ascii	"show system status\000"
 286      20737973 
 286      74656D20 
 286      73746174 
 286      757300
 287 03af 00       		.align	2
 288              	.LC65:
 289 03b0 76657273 		.ascii	"version\000"
 289      696F6E00 
 290              		.align	2
 293              	cmdTable:
 294 03b8 14020000 		.word	.LC39
 295 03bc 18020000 		.word	.LC40
 296 03c0 00000000 		.word	cliAux
 297 03c4 40020000 		.word	.LC41
 298 03c8 48020000 		.word	.LC42
 299 03cc 00000000 		.word	cliCMix
 300 03d0 5C020000 		.word	.LC43
 301 03d4 68020000 		.word	.LC44
 302 03d8 00000000 		.word	cliDefaults
 303 03dc 88020000 		.word	.LC45
 304 03e0 90020000 		.word	.LC46
 305 03e4 00000000 		.word	cliDump
 306 03e8 C0020000 		.word	.LC47
 307 03ec E4010000 		.word	.LC35
 308 03f0 00000000 		.word	cliExit
 309 03f4 C8020000 		.word	.LC48
 310 03f8 D0020000 		.word	.LC49
 311 03fc 00000000 		.word	cliFeature
 312 0400 E4020000 		.word	.LC50
 313 0404 E4010000 		.word	.LC35
 314 0408 00000000 		.word	cliHelp
 315 040c EC020000 		.word	.LC51
 316 0410 F0020000 		.word	.LC52
 317 0414 00000000 		.word	cliI2C
 318 0418 00030000 		.word	.LC53
 319 041c 04030000 		.word	.LC54
 320 0420 00000000 		.word	cliMap
 321 0424 20030000 		.word	.LC55
 322 0428 28030000 		.word	.LC56
 323 042c 00000000 		.word	cliMixer
 324 0430 3C030000 		.word	.LC57
 325 0434 44030000 		.word	.LC58
 326 0438 00000000 		.word	cliProfile
 327 043c 54030000 		.word	.LC59
 328 0440 5C030000 		.word	.LC60
 329 0444 00000000 		.word	cliSave
 330 0448 6C030000 		.word	.LC61
 331 044c 70030000 		.word	.LC62
 332 0450 00000000 		.word	cliSet
 333 0454 94030000 		.word	.LC63
 334 0458 9C030000 		.word	.LC64
 335 045c 00000000 		.word	cliStatus
 336 0460 B0030000 		.word	.LC65
 337 0464 E4010000 		.word	.LC35
 338 0468 00000000 		.word	cliVersion
 339              		.global	valueTable
 340              		.align	2
 341              	.LC66:
 342 046c 6C6F6F70 		.ascii	"looptime\000"
 342      74696D65 
 342      00
 343 0475 000000   		.align	2
 344              	.LC67:
 345 0478 6D696472 		.ascii	"midrc\000"
 345      6300
 346 047e 0000     		.align	2
 347              	.LC68:
 348 0480 6D696E74 		.ascii	"minthrottle\000"
 348      68726F74 
 348      746C6500 
 349              		.align	2
 350              	.LC69:
 351 048c 6D617874 		.ascii	"maxthrottle\000"
 351      68726F74 
 351      746C6500 
 352              		.align	2
 353              	.LC70:
 354 0498 6D696E63 		.ascii	"mincommand\000"
 354      6F6D6D61 
 354      6E6400
 355 04a3 00       		.align	2
 356              	.LC71:
 357 04a4 6D696E63 		.ascii	"mincheck\000"
 357      6865636B 
 357      00
 358 04ad 000000   		.align	2
 359              	.LC72:
 360 04b0 6D617863 		.ascii	"maxcheck\000"
 360      6865636B 
 360      00
 361 04b9 000000   		.align	2
 362              	.LC73:
 363 04bc 72657461 		.ascii	"retarded_arm\000"
 363      72646564 
 363      5F61726D 
 363      00
 364 04c9 000000   		.align	2
 365              	.LC74:
 366 04cc 6D6F746F 		.ascii	"motor_pwm_rate\000"
 366      725F7077 
 366      6D5F7261 
 366      746500
 367 04db 00       		.align	2
 368              	.LC75:
 369 04dc 73657276 		.ascii	"servo_pwm_rate\000"
 369      6F5F7077 
 369      6D5F7261 
 369      746500
 370 04eb 00       		.align	2
 371              	.LC76:
 372 04ec 73657269 		.ascii	"serial_baudrate\000"
 372      616C5F62 
 372      61756472 
 372      61746500 
 373              		.align	2
 374              	.LC77:
 375 04fc 6770735F 		.ascii	"gps_baudrate\000"
 375      62617564 
 375      72617465 
 375      00
 376 0509 000000   		.align	2
 377              	.LC78:
 378 050c 7370656B 		.ascii	"spektrum_hires\000"
 378      7472756D 
 378      5F686972 
 378      657300
 379 051b 00       		.align	2
 380              	.LC79:
 381 051c 76626174 		.ascii	"vbatscale\000"
 381      7363616C 
 381      6500
 382 0526 0000     		.align	2
 383              	.LC80:
 384 0528 76626174 		.ascii	"vbatmaxcellvoltage\000"
 384      6D617863 
 384      656C6C76 
 384      6F6C7461 
 384      676500
 385 053b 00       		.align	2
 386              	.LC81:
 387 053c 76626174 		.ascii	"vbatmincellvoltage\000"
 387      6D696E63 
 387      656C6C76 
 387      6F6C7461 
 387      676500
 388 054f 00       		.align	2
 389              	.LC82:
 390 0550 706F7765 		.ascii	"power_adc_channel\000"
 390      725F6164 
 390      635F6368 
 390      616E6E65 
 390      6C00
 391 0562 0000     		.align	2
 392              	.LC83:
 393 0564 616C6967 		.ascii	"align_gyro_x\000"
 393      6E5F6779 
 393      726F5F78 
 393      00
 394 0571 000000   		.align	2
 395              	.LC84:
 396 0574 616C6967 		.ascii	"align_gyro_y\000"
 396      6E5F6779 
 396      726F5F79 
 396      00
 397 0581 000000   		.align	2
 398              	.LC85:
 399 0584 616C6967 		.ascii	"align_gyro_z\000"
 399      6E5F6779 
 399      726F5F7A 
 399      00
 400 0591 000000   		.align	2
 401              	.LC86:
 402 0594 616C6967 		.ascii	"align_acc_x\000"
 402      6E5F6163 
 402      635F7800 
 403              		.align	2
 404              	.LC87:
 405 05a0 616C6967 		.ascii	"align_acc_y\000"
 405      6E5F6163 
 405      635F7900 
 406              		.align	2
 407              	.LC88:
 408 05ac 616C6967 		.ascii	"align_acc_z\000"
 408      6E5F6163 
 408      635F7A00 
 409              		.align	2
 410              	.LC89:
 411 05b8 616C6967 		.ascii	"align_mag_x\000"
 411      6E5F6D61 
 411      675F7800 
 412              		.align	2
 413              	.LC90:
 414 05c4 616C6967 		.ascii	"align_mag_y\000"
 414      6E5F6D61 
 414      675F7900 
 415              		.align	2
 416              	.LC91:
 417 05d0 616C6967 		.ascii	"align_mag_z\000"
 417      6E5F6D61 
 417      675F7A00 
 418              		.align	2
 419              	.LC92:
 420 05dc 6163635F 		.ascii	"acc_hardware\000"
 420      68617264 
 420      77617265 
 420      00
 421 05e9 000000   		.align	2
 422              	.LC93:
 423 05ec 6D6F726F 		.ascii	"moron_threshold\000"
 423      6E5F7468 
 423      72657368 
 423      6F6C6400 
 424              		.align	2
 425              	.LC94:
 426 05fc 6779726F 		.ascii	"gyro_lpf\000"
 426      5F6C7066 
 426      00
 427 0605 000000   		.align	2
 428              	.LC95:
 429 0608 6779726F 		.ascii	"gyro_cmpf_factor\000"
 429      5F636D70 
 429      665F6661 
 429      63746F72 
 429      00
 430 0619 000000   		.align	2
 431              	.LC96:
 432 061c 6770735F 		.ascii	"gps_type\000"
 432      74797065 
 432      00
 433 0625 000000   		.align	2
 434              	.LC97:
 435 0628 64656164 		.ascii	"deadband\000"
 435      62616E64 
 435      00
 436 0631 000000   		.align	2
 437              	.LC98:
 438 0634 79617764 		.ascii	"yawdeadband\000"
 438      65616462 
 438      616E6400 
 439              		.align	2
 440              	.LC99:
 441 0640 616C745F 		.ascii	"alt_hold_throttle_neutral\000"
 441      686F6C64 
 441      5F746872 
 441      6F74746C 
 441      655F6E65 
 442 065a 0000     		.align	2
 443              	.LC100:
 444 065c 72635F72 		.ascii	"rc_rate\000"
 444      61746500 
 445              		.align	2
 446              	.LC101:
 447 0664 72635F65 		.ascii	"rc_expo\000"
 447      78706F00 
 448              		.align	2
 449              	.LC102:
 450 066c 7468725F 		.ascii	"thr_mid\000"
 450      6D696400 
 451              		.align	2
 452              	.LC103:
 453 0674 7468725F 		.ascii	"thr_expo\000"
 453      6578706F 
 453      00
 454 067d 000000   		.align	2
 455              	.LC104:
 456 0680 726F6C6C 		.ascii	"roll_pitch_rate\000"
 456      5F706974 
 456      63685F72 
 456      61746500 
 457              		.align	2
 458              	.LC105:
 459 0690 79617772 		.ascii	"yawrate\000"
 459      61746500 
 460              		.align	2
 461              	.LC106:
 462 0698 6661696C 		.ascii	"failsafe_delay\000"
 462      73616665 
 462      5F64656C 
 462      617900
 463 06a7 00       		.align	2
 464              	.LC107:
 465 06a8 6661696C 		.ascii	"failsafe_off_delay\000"
 465      73616665 
 465      5F6F6666 
 465      5F64656C 
 465      617900
 466 06bb 00       		.align	2
 467              	.LC108:
 468 06bc 6661696C 		.ascii	"failsafe_throttle\000"
 468      73616665 
 468      5F746872 
 468      6F74746C 
 468      6500
 469 06ce 0000     		.align	2
 470              	.LC109:
 471 06d0 7961775F 		.ascii	"yaw_direction\000"
 471      64697265 
 471      6374696F 
 471      6E00
 472 06de 0000     		.align	2
 473              	.LC110:
 474 06e0 7472695F 		.ascii	"tri_yaw_middle\000"
 474      7961775F 
 474      6D696464 
 474      6C6500
 475 06ef 00       		.align	2
 476              	.LC111:
 477 06f0 7472695F 		.ascii	"tri_yaw_min\000"
 477      7961775F 
 477      6D696E00 
 478              		.align	2
 479              	.LC112:
 480 06fc 7472695F 		.ascii	"tri_yaw_max\000"
 480      7961775F 
 480      6D617800 
 481              		.align	2
 482              	.LC113:
 483 0708 77696E67 		.ascii	"wing_left_min\000"
 483      5F6C6566 
 483      745F6D69 
 483      6E00
 484 0716 0000     		.align	2
 485              	.LC114:
 486 0718 77696E67 		.ascii	"wing_left_mid\000"
 486      5F6C6566 
 486      745F6D69 
 486      6400
 487 0726 0000     		.align	2
 488              	.LC115:
 489 0728 77696E67 		.ascii	"wing_left_max\000"
 489      5F6C6566 
 489      745F6D61 
 489      7800
 490 0736 0000     		.align	2
 491              	.LC116:
 492 0738 77696E67 		.ascii	"wing_right_min\000"
 492      5F726967 
 492      68745F6D 
 492      696E00
 493 0747 00       		.align	2
 494              	.LC117:
 495 0748 77696E67 		.ascii	"wing_right_mid\000"
 495      5F726967 
 495      68745F6D 
 495      696400
 496 0757 00       		.align	2
 497              	.LC118:
 498 0758 77696E67 		.ascii	"wing_right_max\000"
 498      5F726967 
 498      68745F6D 
 498      617800
 499 0767 00       		.align	2
 500              	.LC119:
 501 0768 70697463 		.ascii	"pitch_direction_l\000"
 501      685F6469 
 501      72656374 
 501      696F6E5F 
 501      6C00
 502 077a 0000     		.align	2
 503              	.LC120:
 504 077c 70697463 		.ascii	"pitch_direction_r\000"
 504      685F6469 
 504      72656374 
 504      696F6E5F 
 504      7200
 505 078e 0000     		.align	2
 506              	.LC121:
 507 0790 726F6C6C 		.ascii	"roll_direction_l\000"
 507      5F646972 
 507      65637469 
 507      6F6E5F6C 
 507      00
 508 07a1 000000   		.align	2
 509              	.LC122:
 510 07a4 726F6C6C 		.ascii	"roll_direction_r\000"
 510      5F646972 
 510      65637469 
 510      6F6E5F72 
 510      00
 511 07b5 000000   		.align	2
 512              	.LC123:
 513 07b8 67696D62 		.ascii	"gimbal_flags\000"
 513      616C5F66 
 513      6C616773 
 513      00
 514 07c5 000000   		.align	2
 515              	.LC124:
 516 07c8 67696D62 		.ascii	"gimbal_pitch_gain\000"
 516      616C5F70 
 516      69746368 
 516      5F676169 
 516      6E00
 517 07da 0000     		.align	2
 518              	.LC125:
 519 07dc 67696D62 		.ascii	"gimbal_roll_gain\000"
 519      616C5F72 
 519      6F6C6C5F 
 519      6761696E 
 519      00
 520 07ed 000000   		.align	2
 521              	.LC126:
 522 07f0 67696D62 		.ascii	"gimbal_pitch_min\000"
 522      616C5F70 
 522      69746368 
 522      5F6D696E 
 522      00
 523 0801 000000   		.align	2
 524              	.LC127:
 525 0804 67696D62 		.ascii	"gimbal_pitch_max\000"
 525      616C5F70 
 525      69746368 
 525      5F6D6178 
 525      00
 526 0815 000000   		.align	2
 527              	.LC128:
 528 0818 67696D62 		.ascii	"gimbal_pitch_mid\000"
 528      616C5F70 
 528      69746368 
 528      5F6D6964 
 528      00
 529 0829 000000   		.align	2
 530              	.LC129:
 531 082c 67696D62 		.ascii	"gimbal_roll_min\000"
 531      616C5F72 
 531      6F6C6C5F 
 531      6D696E00 
 532              		.align	2
 533              	.LC130:
 534 083c 67696D62 		.ascii	"gimbal_roll_max\000"
 534      616C5F72 
 534      6F6C6C5F 
 534      6D617800 
 535              		.align	2
 536              	.LC131:
 537 084c 67696D62 		.ascii	"gimbal_roll_mid\000"
 537      616C5F72 
 537      6F6C6C5F 
 537      6D696400 
 538              		.align	2
 539              	.LC132:
 540 085c 6163635F 		.ascii	"acc_lpf_factor\000"
 540      6C70665F 
 540      66616374 
 540      6F7200
 541 086b 00       		.align	2
 542              	.LC133:
 543 086c 6163635F 		.ascii	"acc_lpf_for_velocity\000"
 543      6C70665F 
 543      666F725F 
 543      76656C6F 
 543      63697479 
 544 0881 000000   		.align	2
 545              	.LC134:
 546 0884 6163635F 		.ascii	"acc_trim_pitch\000"
 546      7472696D 
 546      5F706974 
 546      636800
 547 0893 00       		.align	2
 548              	.LC135:
 549 0894 6163635F 		.ascii	"acc_trim_roll\000"
 549      7472696D 
 549      5F726F6C 
 549      6C00
 550 08a2 0000     		.align	2
 551              	.LC136:
 552 08a4 6261726F 		.ascii	"baro_tab_size\000"
 552      5F746162 
 552      5F73697A 
 552      6500
 553 08b2 0000     		.align	2
 554              	.LC137:
 555 08b4 6261726F 		.ascii	"baro_noise_lpf\000"
 555      5F6E6F69 
 555      73655F6C 
 555      706600
 556 08c3 00       		.align	2
 557              	.LC138:
 558 08c4 6261726F 		.ascii	"baro_cf\000"
 558      5F636600 
 559              		.align	2
 560              	.LC139:
 561 08cc 6D61675F 		.ascii	"mag_declination\000"
 561      6465636C 
 561      696E6174 
 561      696F6E00 
 562              		.align	2
 563              	.LC140:
 564 08dc 6770735F 		.ascii	"gps_pos_p\000"
 564      706F735F 
 564      7000
 565 08e6 0000     		.align	2
 566              	.LC141:
 567 08e8 6770735F 		.ascii	"gps_pos_i\000"
 567      706F735F 
 567      6900
 568 08f2 0000     		.align	2
 569              	.LC142:
 570 08f4 6770735F 		.ascii	"gps_pos_d\000"
 570      706F735F 
 570      6400
 571 08fe 0000     		.align	2
 572              	.LC143:
 573 0900 6770735F 		.ascii	"gps_posr_p\000"
 573      706F7372 
 573      5F7000
 574 090b 00       		.align	2
 575              	.LC144:
 576 090c 6770735F 		.ascii	"gps_posr_i\000"
 576      706F7372 
 576      5F6900
 577 0917 00       		.align	2
 578              	.LC145:
 579 0918 6770735F 		.ascii	"gps_posr_d\000"
 579      706F7372 
 579      5F6400
 580 0923 00       		.align	2
 581              	.LC146:
 582 0924 6770735F 		.ascii	"gps_nav_p\000"
 582      6E61765F 
 582      7000
 583 092e 0000     		.align	2
 584              	.LC147:
 585 0930 6770735F 		.ascii	"gps_nav_i\000"
 585      6E61765F 
 585      6900
 586 093a 0000     		.align	2
 587              	.LC148:
 588 093c 6770735F 		.ascii	"gps_nav_d\000"
 588      6E61765F 
 588      6400
 589 0946 0000     		.align	2
 590              	.LC149:
 591 0948 6770735F 		.ascii	"gps_wp_radius\000"
 591      77705F72 
 591      61646975 
 591      7300
 592 0956 0000     		.align	2
 593              	.LC150:
 594 0958 6E61765F 		.ascii	"nav_controls_heading\000"
 594      636F6E74 
 594      726F6C73 
 594      5F686561 
 594      64696E67 
 595 096d 000000   		.align	2
 596              	.LC151:
 597 0970 6E61765F 		.ascii	"nav_speed_min\000"
 597      73706565 
 597      645F6D69 
 597      6E00
 598 097e 0000     		.align	2
 599              	.LC152:
 600 0980 6E61765F 		.ascii	"nav_speed_max\000"
 600      73706565 
 600      645F6D61 
 600      7800
 601 098e 0000     		.align	2
 602              	.LC153:
 603 0990 6E61765F 		.ascii	"nav_slew_rate\000"
 603      736C6577 
 603      5F726174 
 603      6500
 604 099e 0000     		.align	2
 605              	.LC154:
 606 09a0 705F7069 		.ascii	"p_pitch\000"
 606      74636800 
 607              		.align	2
 608              	.LC155:
 609 09a8 695F7069 		.ascii	"i_pitch\000"
 609      74636800 
 610              		.align	2
 611              	.LC156:
 612 09b0 645F7069 		.ascii	"d_pitch\000"
 612      74636800 
 613              		.align	2
 614              	.LC157:
 615 09b8 705F726F 		.ascii	"p_roll\000"
 615      6C6C00
 616 09bf 00       		.align	2
 617              	.LC158:
 618 09c0 695F726F 		.ascii	"i_roll\000"
 618      6C6C00
 619 09c7 00       		.align	2
 620              	.LC159:
 621 09c8 645F726F 		.ascii	"d_roll\000"
 621      6C6C00
 622 09cf 00       		.align	2
 623              	.LC160:
 624 09d0 705F7961 		.ascii	"p_yaw\000"
 624      7700
 625 09d6 0000     		.align	2
 626              	.LC161:
 627 09d8 695F7961 		.ascii	"i_yaw\000"
 627      7700
 628 09de 0000     		.align	2
 629              	.LC162:
 630 09e0 645F7961 		.ascii	"d_yaw\000"
 630      7700
 631 09e6 0000     		.align	2
 632              	.LC163:
 633 09e8 705F616C 		.ascii	"p_alt\000"
 633      7400
 634 09ee 0000     		.align	2
 635              	.LC164:
 636 09f0 695F616C 		.ascii	"i_alt\000"
 636      7400
 637 09f6 0000     		.align	2
 638              	.LC165:
 639 09f8 645F616C 		.ascii	"d_alt\000"
 639      7400
 640 09fe 0000     		.align	2
 641              	.LC166:
 642 0a00 705F6C65 		.ascii	"p_level\000"
 642      76656C00 
 643              		.align	2
 644              	.LC167:
 645 0a08 695F6C65 		.ascii	"i_level\000"
 645      76656C00 
 646              		.align	2
 647              	.LC168:
 648 0a10 645F6C65 		.ascii	"d_level\000"
 648      76656C00 
 649              		.align	2
 652              	valueTable:
 653 0a18 6C040000 		.word	.LC66
 654 0a1c 02       		.byte	2
 655 0a1d 000000   		.space	3
 656 0a20 0C000000 		.word	mcfg+12
 657 0a24 00000000 		.word	0
 658 0a28 28230000 		.word	9000
 659 0a2c 78040000 		.word	.LC67
 660 0a30 02       		.byte	2
 661 0a31 000000   		.space	3
 662 0a34 08010000 		.word	mcfg+264
 663 0a38 B0040000 		.word	1200
 664 0a3c A4060000 		.word	1700
 665 0a40 80040000 		.word	.LC68
 666 0a44 02       		.byte	2
 667 0a45 000000   		.space	3
 668 0a48 D0000000 		.word	mcfg+208
 669 0a4c 00000000 		.word	0
 670 0a50 D0070000 		.word	2000
 671 0a54 8C040000 		.word	.LC69
 672 0a58 02       		.byte	2
 673 0a59 000000   		.space	3
 674 0a5c D2000000 		.word	mcfg+210
 675 0a60 00000000 		.word	0
 676 0a64 D0070000 		.word	2000
 677 0a68 98040000 		.word	.LC70
 678 0a6c 02       		.byte	2
 679 0a6d 000000   		.space	3
 680 0a70 D4000000 		.word	mcfg+212
 681 0a74 00000000 		.word	0
 682 0a78 D0070000 		.word	2000
 683 0a7c A4040000 		.word	.LC71
 684 0a80 02       		.byte	2
 685 0a81 000000   		.space	3
 686 0a84 0A010000 		.word	mcfg+266
 687 0a88 00000000 		.word	0
 688 0a8c D0070000 		.word	2000
 689 0a90 B0040000 		.word	.LC72
 690 0a94 02       		.byte	2
 691 0a95 000000   		.space	3
 692 0a98 0C010000 		.word	mcfg+268
 693 0a9c 00000000 		.word	0
 694 0aa0 D0070000 		.word	2000
 695 0aa4 BC040000 		.word	.LC73
 696 0aa8 00       		.byte	0
 697 0aa9 000000   		.space	3
 698 0aac 0E010000 		.word	mcfg+270
 699 0ab0 00000000 		.word	0
 700 0ab4 01000000 		.word	1
 701 0ab8 CC040000 		.word	.LC74
 702 0abc 02       		.byte	2
 703 0abd 000000   		.space	3
 704 0ac0 D6000000 		.word	mcfg+214
 705 0ac4 32000000 		.word	50
 706 0ac8 F2010000 		.word	498
 707 0acc DC040000 		.word	.LC75
 708 0ad0 02       		.byte	2
 709 0ad1 000000   		.space	3
 710 0ad4 D8000000 		.word	mcfg+216
 711 0ad8 32000000 		.word	50
 712 0adc F2010000 		.word	498
 713 0ae0 EC040000 		.word	.LC76
 714 0ae4 04       		.byte	4
 715 0ae5 000000   		.space	3
 716 0ae8 14010000 		.word	mcfg+276
 717 0aec B0040000 		.word	1200
 718 0af0 00C20100 		.word	115200
 719 0af4 FC040000 		.word	.LC77
 720 0af8 04       		.byte	4
 721 0af9 000000   		.space	3
 722 0afc 10010000 		.word	mcfg+272
 723 0b00 B0040000 		.word	1200
 724 0b04 00C20100 		.word	115200
 725 0b08 0C050000 		.word	.LC78
 726 0b0c 00       		.byte	0
 727 0b0d 000000   		.space	3
 728 0b10 06010000 		.word	mcfg+262
 729 0b14 00000000 		.word	0
 730 0b18 01000000 		.word	1
 731 0b1c 1C050000 		.word	.LC79
 732 0b20 00       		.byte	0
 733 0b21 000000   		.space	3
 734 0b24 FA000000 		.word	mcfg+250
 735 0b28 0A000000 		.word	10
 736 0b2c C8000000 		.word	200
 737 0b30 28050000 		.word	.LC80
 738 0b34 00       		.byte	0
 739 0b35 000000   		.space	3
 740 0b38 FB000000 		.word	mcfg+251
 741 0b3c 0A000000 		.word	10
 742 0b40 32000000 		.word	50
 743 0b44 3C050000 		.word	.LC81
 744 0b48 00       		.byte	0
 745 0b49 000000   		.space	3
 746 0b4c FC000000 		.word	mcfg+252
 747 0b50 0A000000 		.word	10
 748 0b54 32000000 		.word	50
 749 0b58 50050000 		.word	.LC82
 750 0b5c 00       		.byte	0
 751 0b5d 000000   		.space	3
 752 0b60 FD000000 		.word	mcfg+253
 753 0b64 00000000 		.word	0
 754 0b68 09000000 		.word	9
 755 0b6c 64050000 		.word	.LC83
 756 0b70 01       		.byte	1
 757 0b71 000000   		.space	3
 758 0b74 DA000000 		.word	mcfg+218
 759 0b78 FDFFFFFF 		.word	-3
 760 0b7c 03000000 		.word	3
 761 0b80 74050000 		.word	.LC84
 762 0b84 01       		.byte	1
 763 0b85 000000   		.space	3
 764 0b88 DB000000 		.word	mcfg+219
 765 0b8c FDFFFFFF 		.word	-3
 766 0b90 03000000 		.word	3
 767 0b94 84050000 		.word	.LC85
 768 0b98 01       		.byte	1
 769 0b99 000000   		.space	3
 770 0b9c DC000000 		.word	mcfg+220
 771 0ba0 FDFFFFFF 		.word	-3
 772 0ba4 03000000 		.word	3
 773 0ba8 94050000 		.word	.LC86
 774 0bac 01       		.byte	1
 775 0bad 000000   		.space	3
 776 0bb0 DD000000 		.word	mcfg+221
 777 0bb4 FDFFFFFF 		.word	-3
 778 0bb8 03000000 		.word	3
 779 0bbc A0050000 		.word	.LC87
 780 0bc0 01       		.byte	1
 781 0bc1 000000   		.space	3
 782 0bc4 DE000000 		.word	mcfg+222
 783 0bc8 FDFFFFFF 		.word	-3
 784 0bcc 03000000 		.word	3
 785 0bd0 AC050000 		.word	.LC88
 786 0bd4 01       		.byte	1
 787 0bd5 000000   		.space	3
 788 0bd8 DF000000 		.word	mcfg+223
 789 0bdc FDFFFFFF 		.word	-3
 790 0be0 03000000 		.word	3
 791 0be4 B8050000 		.word	.LC89
 792 0be8 01       		.byte	1
 793 0be9 000000   		.space	3
 794 0bec E0000000 		.word	mcfg+224
 795 0bf0 FDFFFFFF 		.word	-3
 796 0bf4 03000000 		.word	3
 797 0bf8 C4050000 		.word	.LC90
 798 0bfc 01       		.byte	1
 799 0bfd 000000   		.space	3
 800 0c00 E1000000 		.word	mcfg+225
 801 0c04 FDFFFFFF 		.word	-3
 802 0c08 03000000 		.word	3
 803 0c0c D0050000 		.word	.LC91
 804 0c10 01       		.byte	1
 805 0c11 000000   		.space	3
 806 0c14 E2000000 		.word	mcfg+226
 807 0c18 FDFFFFFF 		.word	-3
 808 0c1c 03000000 		.word	3
 809 0c20 DC050000 		.word	.LC92
 810 0c24 00       		.byte	0
 811 0c25 000000   		.space	3
 812 0c28 E3000000 		.word	mcfg+227
 813 0c2c 00000000 		.word	0
 814 0c30 03000000 		.word	3
 815 0c34 EC050000 		.word	.LC93
 816 0c38 00       		.byte	0
 817 0c39 000000   		.space	3
 818 0c3c EC000000 		.word	mcfg+236
 819 0c40 00000000 		.word	0
 820 0c44 80000000 		.word	128
 821 0c48 FC050000 		.word	.LC94
 822 0c4c 02       		.byte	2
 823 0c4d 000000   		.space	3
 824 0c50 E4000000 		.word	mcfg+228
 825 0c54 00000000 		.word	0
 826 0c58 00010000 		.word	256
 827 0c5c 08060000 		.word	.LC95
 828 0c60 02       		.byte	2
 829 0c61 000000   		.space	3
 830 0c64 E6000000 		.word	mcfg+230
 831 0c68 64000000 		.word	100
 832 0c6c E8030000 		.word	1000
 833 0c70 1C060000 		.word	.LC96
 834 0c74 00       		.byte	0
 835 0c75 000000   		.space	3
 836 0c78 0F010000 		.word	mcfg+271
 837 0c7c 00000000 		.word	0
 838 0c80 03000000 		.word	3
 839 0c84 28060000 		.word	.LC97
 840 0c88 00       		.byte	0
 841 0c89 000000   		.space	3
 842 0c8c 60000000 		.word	cfg+96
 843 0c90 00000000 		.word	0
 844 0c94 20000000 		.word	32
 845 0c98 34060000 		.word	.LC98
 846 0c9c 00       		.byte	0
 847 0c9d 000000   		.space	3
 848 0ca0 61000000 		.word	cfg+97
 849 0ca4 00000000 		.word	0
 850 0ca8 64000000 		.word	100
 851 0cac 40060000 		.word	.LC99
 852 0cb0 00       		.byte	0
 853 0cb1 000000   		.space	3
 854 0cb4 62000000 		.word	cfg+98
 855 0cb8 01000000 		.word	1
 856 0cbc FA000000 		.word	250
 857 0cc0 5C060000 		.word	.LC100
 858 0cc4 00       		.byte	0
 859 0cc5 000000   		.space	3
 860 0cc8 1E000000 		.word	cfg+30
 861 0ccc 00000000 		.word	0
 862 0cd0 FA000000 		.word	250
 863 0cd4 64060000 		.word	.LC101
 864 0cd8 00       		.byte	0
 865 0cd9 000000   		.space	3
 866 0cdc 1F000000 		.word	cfg+31
 867 0ce0 00000000 		.word	0
 868 0ce4 64000000 		.word	100
 869 0ce8 6C060000 		.word	.LC102
 870 0cec 00       		.byte	0
 871 0ced 000000   		.space	3
 872 0cf0 20000000 		.word	cfg+32
 873 0cf4 00000000 		.word	0
 874 0cf8 64000000 		.word	100
 875 0cfc 74060000 		.word	.LC103
 876 0d00 00       		.byte	0
 877 0d01 000000   		.space	3
 878 0d04 21000000 		.word	cfg+33
 879 0d08 00000000 		.word	0
 880 0d0c FA000000 		.word	250
 881 0d10 80060000 		.word	.LC104
 882 0d14 00       		.byte	0
 883 0d15 000000   		.space	3
 884 0d18 22000000 		.word	cfg+34
 885 0d1c 00000000 		.word	0
 886 0d20 64000000 		.word	100
 887 0d24 90060000 		.word	.LC105
 888 0d28 00       		.byte	0
 889 0d29 000000   		.space	3
 890 0d2c 23000000 		.word	cfg+35
 891 0d30 00000000 		.word	0
 892 0d34 64000000 		.word	100
 893 0d38 98060000 		.word	.LC106
 894 0d3c 00       		.byte	0
 895 0d3d 000000   		.space	3
 896 0d40 64000000 		.word	cfg+100
 897 0d44 00000000 		.word	0
 898 0d48 C8000000 		.word	200
 899 0d4c A8060000 		.word	.LC107
 900 0d50 00       		.byte	0
 901 0d51 000000   		.space	3
 902 0d54 65000000 		.word	cfg+101
 903 0d58 00000000 		.word	0
 904 0d5c C8000000 		.word	200
 905 0d60 BC060000 		.word	.LC108
 906 0d64 02       		.byte	2
 907 0d65 000000   		.space	3
 908 0d68 66000000 		.word	cfg+102
 909 0d6c E8030000 		.word	1000
 910 0d70 D0070000 		.word	2000
 911 0d74 D0060000 		.word	.LC109
 912 0d78 01       		.byte	1
 913 0d79 000000   		.space	3
 914 0d7c 68000000 		.word	cfg+104
 915 0d80 FFFFFFFF 		.word	-1
 916 0d84 01000000 		.word	1
 917 0d88 E0060000 		.word	.LC110
 918 0d8c 02       		.byte	2
 919 0d8d 000000   		.space	3
 920 0d90 6A000000 		.word	cfg+106
 921 0d94 00000000 		.word	0
 922 0d98 D0070000 		.word	2000
 923 0d9c F0060000 		.word	.LC111
 924 0da0 02       		.byte	2
 925 0da1 000000   		.space	3
 926 0da4 6C000000 		.word	cfg+108
 927 0da8 00000000 		.word	0
 928 0dac D0070000 		.word	2000
 929 0db0 FC060000 		.word	.LC112
 930 0db4 02       		.byte	2
 931 0db5 000000   		.space	3
 932 0db8 6E000000 		.word	cfg+110
 933 0dbc 00000000 		.word	0
 934 0dc0 D0070000 		.word	2000
 935 0dc4 08070000 		.word	.LC113
 936 0dc8 02       		.byte	2
 937 0dc9 000000   		.space	3
 938 0dcc 70000000 		.word	cfg+112
 939 0dd0 00000000 		.word	0
 940 0dd4 D0070000 		.word	2000
 941 0dd8 18070000 		.word	.LC114
 942 0ddc 02       		.byte	2
 943 0ddd 000000   		.space	3
 944 0de0 72000000 		.word	cfg+114
 945 0de4 00000000 		.word	0
 946 0de8 D0070000 		.word	2000
 947 0dec 28070000 		.word	.LC115
 948 0df0 02       		.byte	2
 949 0df1 000000   		.space	3
 950 0df4 74000000 		.word	cfg+116
 951 0df8 00000000 		.word	0
 952 0dfc D0070000 		.word	2000
 953 0e00 38070000 		.word	.LC116
 954 0e04 02       		.byte	2
 955 0e05 000000   		.space	3
 956 0e08 76000000 		.word	cfg+118
 957 0e0c 00000000 		.word	0
 958 0e10 D0070000 		.word	2000
 959 0e14 48070000 		.word	.LC117
 960 0e18 02       		.byte	2
 961 0e19 000000   		.space	3
 962 0e1c 78000000 		.word	cfg+120
 963 0e20 00000000 		.word	0
 964 0e24 D0070000 		.word	2000
 965 0e28 58070000 		.word	.LC118
 966 0e2c 02       		.byte	2
 967 0e2d 000000   		.space	3
 968 0e30 7A000000 		.word	cfg+122
 969 0e34 00000000 		.word	0
 970 0e38 D0070000 		.word	2000
 971 0e3c 68070000 		.word	.LC119
 972 0e40 01       		.byte	1
 973 0e41 000000   		.space	3
 974 0e44 7C000000 		.word	cfg+124
 975 0e48 FFFFFFFF 		.word	-1
 976 0e4c 01000000 		.word	1
 977 0e50 7C070000 		.word	.LC120
 978 0e54 01       		.byte	1
 979 0e55 000000   		.space	3
 980 0e58 7D000000 		.word	cfg+125
 981 0e5c FFFFFFFF 		.word	-1
 982 0e60 01000000 		.word	1
 983 0e64 90070000 		.word	.LC121
 984 0e68 01       		.byte	1
 985 0e69 000000   		.space	3
 986 0e6c 7E000000 		.word	cfg+126
 987 0e70 FFFFFFFF 		.word	-1
 988 0e74 01000000 		.word	1
 989 0e78 A4070000 		.word	.LC122
 990 0e7c 01       		.byte	1
 991 0e7d 000000   		.space	3
 992 0e80 7F000000 		.word	cfg+127
 993 0e84 FFFFFFFF 		.word	-1
 994 0e88 01000000 		.word	1
 995 0e8c B8070000 		.word	.LC123
 996 0e90 00       		.byte	0
 997 0e91 000000   		.space	3
 998 0e94 82000000 		.word	cfg+130
 999 0e98 00000000 		.word	0
 1000 0e9c FF000000 		.word	255
 1001 0ea0 C8070000 		.word	.LC124
 1002 0ea4 01       		.byte	1
 1003 0ea5 000000   		.space	3
 1004 0ea8 80000000 		.word	cfg+128
 1005 0eac 9CFFFFFF 		.word	-100
 1006 0eb0 64000000 		.word	100
 1007 0eb4 DC070000 		.word	.LC125
 1008 0eb8 01       		.byte	1
 1009 0eb9 000000   		.space	3
 1010 0ebc 81000000 		.word	cfg+129
 1011 0ec0 9CFFFFFF 		.word	-100
 1012 0ec4 64000000 		.word	100
 1013 0ec8 F0070000 		.word	.LC126
 1014 0ecc 02       		.byte	2
 1015 0ecd 000000   		.space	3
 1016 0ed0 84000000 		.word	cfg+132
 1017 0ed4 64000000 		.word	100
 1018 0ed8 B80B0000 		.word	3000
 1019 0edc 04080000 		.word	.LC127
 1020 0ee0 02       		.byte	2
 1021 0ee1 000000   		.space	3
 1022 0ee4 86000000 		.word	cfg+134
 1023 0ee8 64000000 		.word	100
 1024 0eec B80B0000 		.word	3000
 1025 0ef0 18080000 		.word	.LC128
 1026 0ef4 02       		.byte	2
 1027 0ef5 000000   		.space	3
 1028 0ef8 88000000 		.word	cfg+136
 1029 0efc 64000000 		.word	100
 1030 0f00 B80B0000 		.word	3000
 1031 0f04 2C080000 		.word	.LC129
 1032 0f08 02       		.byte	2
 1033 0f09 000000   		.space	3
 1034 0f0c 8A000000 		.word	cfg+138
 1035 0f10 64000000 		.word	100
 1036 0f14 B80B0000 		.word	3000
 1037 0f18 3C080000 		.word	.LC130
 1038 0f1c 02       		.byte	2
 1039 0f1d 000000   		.space	3
 1040 0f20 8C000000 		.word	cfg+140
 1041 0f24 64000000 		.word	100
 1042 0f28 B80B0000 		.word	3000
 1043 0f2c 4C080000 		.word	.LC131
 1044 0f30 02       		.byte	2
 1045 0f31 000000   		.space	3
 1046 0f34 8E000000 		.word	cfg+142
 1047 0f38 64000000 		.word	100
 1048 0f3c B80B0000 		.word	3000
 1049 0f40 5C080000 		.word	.LC132
 1050 0f44 00       		.byte	0
 1051 0f45 000000   		.space	3
 1052 0f48 2C000000 		.word	cfg+44
 1053 0f4c 00000000 		.word	0
 1054 0f50 FA000000 		.word	250
 1055 0f54 6C080000 		.word	.LC133
 1056 0f58 00       		.byte	0
 1057 0f59 000000   		.space	3
 1058 0f5c 2D000000 		.word	cfg+45
 1059 0f60 01000000 		.word	1
 1060 0f64 FA000000 		.word	250
 1061 0f68 84080000 		.word	.LC134
 1062 0f6c 03       		.byte	3
 1063 0f6d 000000   		.space	3
 1064 0f70 2A000000 		.word	cfg+42
 1065 0f74 D4FEFFFF 		.word	-300
 1066 0f78 2C010000 		.word	300
 1067 0f7c 94080000 		.word	.LC135
 1068 0f80 03       		.byte	3
 1069 0f81 000000   		.space	3
 1070 0f84 28000000 		.word	cfg+40
 1071 0f88 D4FEFFFF 		.word	-300
 1072 0f8c 2C010000 		.word	300
 1073 0f90 A4080000 		.word	.LC136
 1074 0f94 00       		.byte	0
 1075 0f95 000000   		.space	3
 1076 0f98 2F000000 		.word	cfg+47
 1077 0f9c 00000000 		.word	0
 1078 0fa0 30000000 		.word	48
 1079 0fa4 B4080000 		.word	.LC137
 1080 0fa8 05       		.byte	5
 1081 0fa9 000000   		.space	3
 1082 0fac 30000000 		.word	cfg+48
 1083 0fb0 00000000 		.word	0
 1084 0fb4 01000000 		.word	1
 1085 0fb8 C4080000 		.word	.LC138
 1086 0fbc 05       		.byte	5
 1087 0fbd 000000   		.space	3
 1088 0fc0 34000000 		.word	cfg+52
 1089 0fc4 00000000 		.word	0
 1090 0fc8 01000000 		.word	1
 1091 0fcc CC080000 		.word	.LC139
 1092 0fd0 03       		.byte	3
 1093 0fd1 000000   		.space	3
 1094 0fd4 26000000 		.word	cfg+38
 1095 0fd8 B0B9FFFF 		.word	-18000
 1096 0fdc 50460000 		.word	18000
 1097 0fe0 DC080000 		.word	.LC140
 1098 0fe4 00       		.byte	0
 1099 0fe5 000000   		.space	3
 1100 0fe8 04000000 		.word	cfg+4
 1101 0fec 00000000 		.word	0
 1102 0ff0 C8000000 		.word	200
 1103 0ff4 E8080000 		.word	.LC141
 1104 0ff8 00       		.byte	0
 1105 0ff9 000000   		.space	3
 1106 0ffc 0E000000 		.word	cfg+14
 1107 1000 00000000 		.word	0
 1108 1004 C8000000 		.word	200
 1109 1008 F4080000 		.word	.LC142
 1110 100c 00       		.byte	0
 1111 100d 000000   		.space	3
 1112 1010 18000000 		.word	cfg+24
 1113 1014 00000000 		.word	0
 1114 1018 C8000000 		.word	200
 1115 101c 00090000 		.word	.LC143
 1116 1020 00       		.byte	0
 1117 1021 000000   		.space	3
 1118 1024 05000000 		.word	cfg+5
 1119 1028 00000000 		.word	0
 1120 102c C8000000 		.word	200
 1121 1030 0C090000 		.word	.LC144
 1122 1034 00       		.byte	0
 1123 1035 000000   		.space	3
 1124 1038 0F000000 		.word	cfg+15
 1125 103c 00000000 		.word	0
 1126 1040 C8000000 		.word	200
 1127 1044 18090000 		.word	.LC145
 1128 1048 00       		.byte	0
 1129 1049 000000   		.space	3
 1130 104c 19000000 		.word	cfg+25
 1131 1050 00000000 		.word	0
 1132 1054 C8000000 		.word	200
 1133 1058 24090000 		.word	.LC146
 1134 105c 00       		.byte	0
 1135 105d 000000   		.space	3
 1136 1060 06000000 		.word	cfg+6
 1137 1064 00000000 		.word	0
 1138 1068 C8000000 		.word	200
 1139 106c 30090000 		.word	.LC147
 1140 1070 00       		.byte	0
 1141 1071 000000   		.space	3
 1142 1074 10000000 		.word	cfg+16
 1143 1078 00000000 		.word	0
 1144 107c C8000000 		.word	200
 1145 1080 3C090000 		.word	.LC148
 1146 1084 00       		.byte	0
 1147 1085 000000   		.space	3
 1148 1088 1A000000 		.word	cfg+26
 1149 108c 00000000 		.word	0
 1150 1090 C8000000 		.word	200
 1151 1094 48090000 		.word	.LC149
 1152 1098 02       		.byte	2
 1153 1099 000000   		.space	3
 1154 109c 90000000 		.word	cfg+144
 1155 10a0 00000000 		.word	0
 1156 10a4 D0070000 		.word	2000
 1157 10a8 58090000 		.word	.LC150
 1158 10ac 00       		.byte	0
 1159 10ad 000000   		.space	3
 1160 10b0 94000000 		.word	cfg+148
 1161 10b4 00000000 		.word	0
 1162 10b8 01000000 		.word	1
 1163 10bc 70090000 		.word	.LC151
 1164 10c0 02       		.byte	2
 1165 10c1 000000   		.space	3
 1166 10c4 96000000 		.word	cfg+150
 1167 10c8 0A000000 		.word	10
 1168 10cc D0070000 		.word	2000
 1169 10d0 80090000 		.word	.LC152
 1170 10d4 02       		.byte	2
 1171 10d5 000000   		.space	3
 1172 10d8 98000000 		.word	cfg+152
 1173 10dc 0A000000 		.word	10
 1174 10e0 D0070000 		.word	2000
 1175 10e4 90090000 		.word	.LC153
 1176 10e8 00       		.byte	0
 1177 10e9 000000   		.space	3
 1178 10ec 93000000 		.word	cfg+147
 1179 10f0 00000000 		.word	0
 1180 10f4 64000000 		.word	100
 1181 10f8 A0090000 		.word	.LC154
 1182 10fc 00       		.byte	0
 1183 10fd 000000   		.space	3
 1184 1100 01000000 		.word	cfg+1
 1185 1104 00000000 		.word	0
 1186 1108 C8000000 		.word	200
 1187 110c A8090000 		.word	.LC155
 1188 1110 00       		.byte	0
 1189 1111 000000   		.space	3
 1190 1114 0B000000 		.word	cfg+11
 1191 1118 00000000 		.word	0
 1192 111c C8000000 		.word	200
 1193 1120 B0090000 		.word	.LC156
 1194 1124 00       		.byte	0
 1195 1125 000000   		.space	3
 1196 1128 15000000 		.word	cfg+21
 1197 112c 00000000 		.word	0
 1198 1130 C8000000 		.word	200
 1199 1134 B8090000 		.word	.LC157
 1200 1138 00       		.byte	0
 1201 1139 000000   		.space	3
 1202 113c 00000000 		.word	cfg
 1203 1140 00000000 		.word	0
 1204 1144 C8000000 		.word	200
 1205 1148 C0090000 		.word	.LC158
 1206 114c 00       		.byte	0
 1207 114d 000000   		.space	3
 1208 1150 0A000000 		.word	cfg+10
 1209 1154 00000000 		.word	0
 1210 1158 C8000000 		.word	200
 1211 115c C8090000 		.word	.LC159
 1212 1160 00       		.byte	0
 1213 1161 000000   		.space	3
 1214 1164 14000000 		.word	cfg+20
 1215 1168 00000000 		.word	0
 1216 116c C8000000 		.word	200
 1217 1170 D0090000 		.word	.LC160
 1218 1174 00       		.byte	0
 1219 1175 000000   		.space	3
 1220 1178 02000000 		.word	cfg+2
 1221 117c 00000000 		.word	0
 1222 1180 C8000000 		.word	200
 1223 1184 D8090000 		.word	.LC161
 1224 1188 00       		.byte	0
 1225 1189 000000   		.space	3
 1226 118c 0C000000 		.word	cfg+12
 1227 1190 00000000 		.word	0
 1228 1194 C8000000 		.word	200
 1229 1198 E0090000 		.word	.LC162
 1230 119c 00       		.byte	0
 1231 119d 000000   		.space	3
 1232 11a0 16000000 		.word	cfg+22
 1233 11a4 00000000 		.word	0
 1234 11a8 C8000000 		.word	200
 1235 11ac E8090000 		.word	.LC163
 1236 11b0 00       		.byte	0
 1237 11b1 000000   		.space	3
 1238 11b4 03000000 		.word	cfg+3
 1239 11b8 00000000 		.word	0
 1240 11bc C8000000 		.word	200
 1241 11c0 F0090000 		.word	.LC164
 1242 11c4 00       		.byte	0
 1243 11c5 000000   		.space	3
 1244 11c8 0D000000 		.word	cfg+13
 1245 11cc 00000000 		.word	0
 1246 11d0 C8000000 		.word	200
 1247 11d4 F8090000 		.word	.LC165
 1248 11d8 00       		.byte	0
 1249 11d9 000000   		.space	3
 1250 11dc 17000000 		.word	cfg+23
 1251 11e0 00000000 		.word	0
 1252 11e4 C8000000 		.word	200
 1253 11e8 000A0000 		.word	.LC166
 1254 11ec 00       		.byte	0
 1255 11ed 000000   		.space	3
 1256 11f0 07000000 		.word	cfg+7
 1257 11f4 00000000 		.word	0
 1258 11f8 C8000000 		.word	200
 1259 11fc 080A0000 		.word	.LC167
 1260 1200 00       		.byte	0
 1261 1201 000000   		.space	3
 1262 1204 11000000 		.word	cfg+17
 1263 1208 00000000 		.word	0
 1264 120c C8000000 		.word	200
 1265 1210 100A0000 		.word	.LC168
 1266 1214 00       		.byte	0
 1267 1215 000000   		.space	3
 1268 1218 1B000000 		.word	cfg+27
 1269 121c 00000000 		.word	0
 1270 1220 C8000000 		.word	200
 1271              		.align	2
 1272              	.LC169:
 1273 1224 30313233 		.ascii	"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\000"
 1273      34353637 
 1273      38394142 
 1273      43444546 
 1273      4748494A 
 1274              		.text
 1275              		.align	2
 1276              		.thumb
 1277              		.thumb_func
 1279              	i2a:
 1280              	.LFB29:
 1281              		.file 1 "../src/cli.c"
   1:../src/cli.c  **** #include "board.h"
   2:../src/cli.c  **** #include "mw.h"
   3:../src/cli.c  **** 
   4:../src/cli.c  **** // we unset this on 'exit'
   5:../src/cli.c  **** extern uint8_t cliMode;
   6:../src/cli.c  **** static void cliAux(char *cmdline);
   7:../src/cli.c  **** static void cliCMix(char *cmdline);
   8:../src/cli.c  **** static void cliDefaults(char *cmdline);
   9:../src/cli.c  **** static void cliDump(char *cmdLine);
  10:../src/cli.c  **** static void cliExit(char *cmdline);
  11:../src/cli.c  **** static void cliFeature(char *cmdline);
  12:../src/cli.c  **** static void cliHelp(char *cmdline);
  13:../src/cli.c  **** static void cliMap(char *cmdline);
  14:../src/cli.c  **** static void cliMixer(char *cmdline);
  15:../src/cli.c  **** static void cliProfile(char *cmdline);
  16:../src/cli.c  **** static void cliSave(char *cmdline);
  17:../src/cli.c  **** static void cliSet(char *cmdline);
  18:../src/cli.c  **** static void cliStatus(char *cmdline);
  19:../src/cli.c  **** static void cliVersion(char *cmdline);
  20:../src/cli.c  **** static void cliI2C(char *cmdline);
  21:../src/cli.c  **** 
  22:../src/cli.c  **** // from sensors.c
  23:../src/cli.c  **** extern uint8_t batteryCellCount;
  24:../src/cli.c  **** extern uint8_t accHardware;
  25:../src/cli.c  **** 
  26:../src/cli.c  **** // from config.c RC Channel mapping
  27:../src/cli.c  **** extern const char rcChannelLetters[];
  28:../src/cli.c  **** 
  29:../src/cli.c  **** // buffer
  30:../src/cli.c  **** static char cliBuffer[48];
  31:../src/cli.c  **** static uint32_t bufferIndex = 0;
  32:../src/cli.c  **** 
  33:../src/cli.c  **** static float _atof(const char *p);
  34:../src/cli.c  **** static char *ftoa(float x, char *floatString);
  35:../src/cli.c  **** 
  36:../src/cli.c  **** // sync this with MultiType enum from mw.h
  37:../src/cli.c  **** const char * const mixerNames[] = {
  38:../src/cli.c  ****     "TRI", "QUADP", "QUADX", "BI",
  39:../src/cli.c  ****     "GIMBAL", "Y6", "HEX6",
  40:../src/cli.c  ****     "FLYING_WING", "Y4", "HEX6X", "OCTOX8", "OCTOFLATP", "OCTOFLATX",
  41:../src/cli.c  ****     "AIRPLANE", "HELI_120_CCPM", "HELI_90_DEG", "VTAIL4", "CUSTOM", NULL
  42:../src/cli.c  **** };
  43:../src/cli.c  **** 
  44:../src/cli.c  **** // sync this with AvailableFeatures enum from board.h
  45:../src/cli.c  **** const char * const featureNames[] = {
  46:../src/cli.c  ****     "PPM", "VBAT", "INFLIGHT_ACC_CAL", "SPEKTRUM", "MOTOR_STOP",
  47:../src/cli.c  ****     "SERVO_TILT", "GYRO_SMOOTHING", "LED_RING", "GPS",
  48:../src/cli.c  ****     "FAILSAFE", "SONAR", "TELEMETRY", "POWERMETER", "VARIO",
  49:../src/cli.c  ****     NULL
  50:../src/cli.c  **** };
  51:../src/cli.c  **** 
  52:../src/cli.c  **** // sync this with AvailableSensors enum from board.h
  53:../src/cli.c  **** const char * const sensorNames[] = {
  54:../src/cli.c  ****     "ACC", "BARO", "MAG", "SONAR", "GPS", NULL
  55:../src/cli.c  **** };
  56:../src/cli.c  **** 
  57:../src/cli.c  **** //
  58:../src/cli.c  **** const char * const accNames[] = {
  59:../src/cli.c  ****     "", "ADXL345", "MPU6050", "MMA845x", NULL
  60:../src/cli.c  **** };
  61:../src/cli.c  **** 
  62:../src/cli.c  **** typedef struct {
  63:../src/cli.c  ****     char *name;
  64:../src/cli.c  ****     char *param;
  65:../src/cli.c  ****     void (*func)(char *cmdline);
  66:../src/cli.c  **** } clicmd_t;
  67:../src/cli.c  **** 
  68:../src/cli.c  **** // should be sorted a..z for bsearch()
  69:../src/cli.c  **** const clicmd_t cmdTable[] = {
  70:../src/cli.c  ****     { "aux", "feature_name auxflag or blank for list", cliAux },
  71:../src/cli.c  ****     { "cmix", "design custom mixer", cliCMix },
  72:../src/cli.c  ****     { "defaults", "reset to defaults and reboot", cliDefaults },
  73:../src/cli.c  ****     { "dump", "print configurable settings in a pastable form", cliDump },
  74:../src/cli.c  ****     { "exit", "", cliExit },
  75:../src/cli.c  ****     { "feature", "list or -val or val", cliFeature },
  76:../src/cli.c  ****     { "help", "", cliHelp },
  77:../src/cli.c  ****     { "i2c", "i2c bus tool", cliI2C },
  78:../src/cli.c  ****     { "map", "mapping of rc channel order", cliMap },
  79:../src/cli.c  ****     { "mixer", "mixer name or list", cliMixer },
  80:../src/cli.c  ****     { "profile", "index (0 to 2)", cliProfile },
  81:../src/cli.c  ****     { "save", "save and reboot", cliSave },
  82:../src/cli.c  ****     { "set", "name=value or blank or * for list", cliSet },
  83:../src/cli.c  ****     { "status", "show system status", cliStatus },
  84:../src/cli.c  ****     { "version", "", cliVersion },
  85:../src/cli.c  **** };
  86:../src/cli.c  **** #define CMD_COUNT (sizeof(cmdTable) / sizeof(cmdTable[0]))
  87:../src/cli.c  **** 
  88:../src/cli.c  **** typedef enum {
  89:../src/cli.c  ****     VAR_UINT8,
  90:../src/cli.c  ****     VAR_INT8,
  91:../src/cli.c  ****     VAR_UINT16,
  92:../src/cli.c  ****     VAR_INT16,
  93:../src/cli.c  ****     VAR_UINT32,
  94:../src/cli.c  ****     VAR_FLOAT
  95:../src/cli.c  **** } vartype_e;
  96:../src/cli.c  **** 
  97:../src/cli.c  **** typedef struct {
  98:../src/cli.c  ****     const char *name;
  99:../src/cli.c  ****     const uint8_t type; // vartype_e
 100:../src/cli.c  ****     void *ptr;
 101:../src/cli.c  ****     const int32_t min;
 102:../src/cli.c  ****     const int32_t max;
 103:../src/cli.c  **** } clivalue_t;
 104:../src/cli.c  **** 
 105:../src/cli.c  **** const clivalue_t valueTable[] = {
 106:../src/cli.c  ****     { "looptime", VAR_UINT16, &mcfg.looptime, 0, 9000 },
 107:../src/cli.c  ****     { "midrc", VAR_UINT16, &mcfg.midrc, 1200, 1700 },
 108:../src/cli.c  ****     { "minthrottle", VAR_UINT16, &mcfg.minthrottle, 0, 2000 },
 109:../src/cli.c  ****     { "maxthrottle", VAR_UINT16, &mcfg.maxthrottle, 0, 2000 },
 110:../src/cli.c  ****     { "mincommand", VAR_UINT16, &mcfg.mincommand, 0, 2000 },
 111:../src/cli.c  ****     { "mincheck", VAR_UINT16, &mcfg.mincheck, 0, 2000 },
 112:../src/cli.c  ****     { "maxcheck", VAR_UINT16, &mcfg.maxcheck, 0, 2000 },
 113:../src/cli.c  ****     { "retarded_arm", VAR_UINT8, &mcfg.retarded_arm, 0, 1 },
 114:../src/cli.c  ****     { "motor_pwm_rate", VAR_UINT16, &mcfg.motor_pwm_rate, 50, 498 },
 115:../src/cli.c  ****     { "servo_pwm_rate", VAR_UINT16, &mcfg.servo_pwm_rate, 50, 498 },
 116:../src/cli.c  ****     { "serial_baudrate", VAR_UINT32, &mcfg.serial_baudrate, 1200, 115200 },
 117:../src/cli.c  ****     { "gps_baudrate", VAR_UINT32, &mcfg.gps_baudrate, 1200, 115200 },
 118:../src/cli.c  ****     { "spektrum_hires", VAR_UINT8, &mcfg.spektrum_hires, 0, 1 },
 119:../src/cli.c  ****     { "vbatscale", VAR_UINT8, &mcfg.vbatscale, 10, 200 },
 120:../src/cli.c  ****     { "vbatmaxcellvoltage", VAR_UINT8, &mcfg.vbatmaxcellvoltage, 10, 50 },
 121:../src/cli.c  ****     { "vbatmincellvoltage", VAR_UINT8, &mcfg.vbatmincellvoltage, 10, 50 },
 122:../src/cli.c  ****     { "power_adc_channel", VAR_UINT8, &mcfg.power_adc_channel, 0, 9 },
 123:../src/cli.c  ****     { "align_gyro_x", VAR_INT8, &mcfg.align[ALIGN_GYRO][0], -3, 3 },
 124:../src/cli.c  ****     { "align_gyro_y", VAR_INT8, &mcfg.align[ALIGN_GYRO][1], -3, 3 },
 125:../src/cli.c  ****     { "align_gyro_z", VAR_INT8, &mcfg.align[ALIGN_GYRO][2], -3, 3 },
 126:../src/cli.c  ****     { "align_acc_x", VAR_INT8, &mcfg.align[ALIGN_ACCEL][0], -3, 3 },
 127:../src/cli.c  ****     { "align_acc_y", VAR_INT8, &mcfg.align[ALIGN_ACCEL][1], -3, 3 },
 128:../src/cli.c  ****     { "align_acc_z", VAR_INT8, &mcfg.align[ALIGN_ACCEL][2], -3, 3 },
 129:../src/cli.c  ****     { "align_mag_x", VAR_INT8, &mcfg.align[ALIGN_MAG][0], -3, 3 },
 130:../src/cli.c  ****     { "align_mag_y", VAR_INT8, &mcfg.align[ALIGN_MAG][1], -3, 3 },
 131:../src/cli.c  ****     { "align_mag_z", VAR_INT8, &mcfg.align[ALIGN_MAG][2], -3, 3 },
 132:../src/cli.c  ****     { "acc_hardware", VAR_UINT8, &mcfg.acc_hardware, 0, 3 },
 133:../src/cli.c  ****     { "moron_threshold", VAR_UINT8, &mcfg.moron_threshold, 0, 128 },
 134:../src/cli.c  ****     { "gyro_lpf", VAR_UINT16, &mcfg.gyro_lpf, 0, 256 },
 135:../src/cli.c  ****     { "gyro_cmpf_factor", VAR_UINT16, &mcfg.gyro_cmpf_factor, 100, 1000 },
 136:../src/cli.c  ****     { "gps_type", VAR_UINT8, &mcfg.gps_type, 0, 3 },
 137:../src/cli.c  **** 
 138:../src/cli.c  ****     { "deadband", VAR_UINT8, &cfg.deadband, 0, 32 },
 139:../src/cli.c  ****     { "yawdeadband", VAR_UINT8, &cfg.yawdeadband, 0, 100 },
 140:../src/cli.c  ****     { "alt_hold_throttle_neutral", VAR_UINT8, &cfg.alt_hold_throttle_neutral, 1, 250 },
 141:../src/cli.c  ****     { "rc_rate", VAR_UINT8, &cfg.rcRate8, 0, 250 },
 142:../src/cli.c  ****     { "rc_expo", VAR_UINT8, &cfg.rcExpo8, 0, 100 },
 143:../src/cli.c  ****     { "thr_mid", VAR_UINT8, &cfg.thrMid8, 0, 100 },
 144:../src/cli.c  ****     { "thr_expo", VAR_UINT8, &cfg.thrExpo8, 0, 250 },
 145:../src/cli.c  ****     { "roll_pitch_rate", VAR_UINT8, &cfg.rollPitchRate, 0, 100 },
 146:../src/cli.c  ****     { "yawrate", VAR_UINT8, &cfg.yawRate, 0, 100 },
 147:../src/cli.c  ****     { "failsafe_delay", VAR_UINT8, &cfg.failsafe_delay, 0, 200 },
 148:../src/cli.c  ****     { "failsafe_off_delay", VAR_UINT8, &cfg.failsafe_off_delay, 0, 200 },
 149:../src/cli.c  ****     { "failsafe_throttle", VAR_UINT16, &cfg.failsafe_throttle, 1000, 2000 },
 150:../src/cli.c  ****     { "yaw_direction", VAR_INT8, &cfg.yaw_direction, -1, 1 },
 151:../src/cli.c  ****     { "tri_yaw_middle", VAR_UINT16, &cfg.tri_yaw_middle, 0, 2000 },
 152:../src/cli.c  ****     { "tri_yaw_min", VAR_UINT16, &cfg.tri_yaw_min, 0, 2000 },
 153:../src/cli.c  ****     { "tri_yaw_max", VAR_UINT16, &cfg.tri_yaw_max, 0, 2000 },
 154:../src/cli.c  ****     { "wing_left_min", VAR_UINT16, &cfg.wing_left_min, 0, 2000 },
 155:../src/cli.c  ****     { "wing_left_mid", VAR_UINT16, &cfg.wing_left_mid, 0, 2000 },
 156:../src/cli.c  ****     { "wing_left_max", VAR_UINT16, &cfg.wing_left_max, 0, 2000 },
 157:../src/cli.c  ****     { "wing_right_min", VAR_UINT16, &cfg.wing_right_min, 0, 2000 },
 158:../src/cli.c  ****     { "wing_right_mid", VAR_UINT16, &cfg.wing_right_mid, 0, 2000 },
 159:../src/cli.c  ****     { "wing_right_max", VAR_UINT16, &cfg.wing_right_max, 0, 2000 },
 160:../src/cli.c  ****     { "pitch_direction_l", VAR_INT8, &cfg.pitch_direction_l, -1, 1 },
 161:../src/cli.c  ****     { "pitch_direction_r", VAR_INT8, &cfg.pitch_direction_r, -1, 1 },
 162:../src/cli.c  ****     { "roll_direction_l", VAR_INT8, &cfg.roll_direction_l, -1, 1 },
 163:../src/cli.c  ****     { "roll_direction_r", VAR_INT8, &cfg.roll_direction_r, -1, 1 },
 164:../src/cli.c  ****     { "gimbal_flags", VAR_UINT8, &cfg.gimbal_flags, 0, 255},
 165:../src/cli.c  ****     { "gimbal_pitch_gain", VAR_INT8, &cfg.gimbal_pitch_gain, -100, 100 },
 166:../src/cli.c  ****     { "gimbal_roll_gain", VAR_INT8, &cfg.gimbal_roll_gain, -100, 100 },
 167:../src/cli.c  ****     { "gimbal_pitch_min", VAR_UINT16, &cfg.gimbal_pitch_min, 100, 3000 },
 168:../src/cli.c  ****     { "gimbal_pitch_max", VAR_UINT16, &cfg.gimbal_pitch_max, 100, 3000 },
 169:../src/cli.c  ****     { "gimbal_pitch_mid", VAR_UINT16, &cfg.gimbal_pitch_mid, 100, 3000 },
 170:../src/cli.c  ****     { "gimbal_roll_min", VAR_UINT16, &cfg.gimbal_roll_min, 100, 3000 },
 171:../src/cli.c  ****     { "gimbal_roll_max", VAR_UINT16, &cfg.gimbal_roll_max, 100, 3000 },
 172:../src/cli.c  ****     { "gimbal_roll_mid", VAR_UINT16, &cfg.gimbal_roll_mid, 100, 3000 },
 173:../src/cli.c  ****     { "acc_lpf_factor", VAR_UINT8, &cfg.acc_lpf_factor, 0, 250 },
 174:../src/cli.c  ****     { "acc_lpf_for_velocity", VAR_UINT8, &cfg.acc_lpf_for_velocity, 1, 250 },
 175:../src/cli.c  ****     { "acc_trim_pitch", VAR_INT16, &cfg.angleTrim[PITCH], -300, 300 },
 176:../src/cli.c  ****     { "acc_trim_roll", VAR_INT16, &cfg.angleTrim[ROLL], -300, 300 },
 177:../src/cli.c  ****     { "baro_tab_size", VAR_UINT8, &cfg.baro_tab_size, 0, BARO_TAB_SIZE_MAX },
 178:../src/cli.c  ****     { "baro_noise_lpf", VAR_FLOAT, &cfg.baro_noise_lpf, 0, 1 },
 179:../src/cli.c  ****     { "baro_cf", VAR_FLOAT, &cfg.baro_cf, 0, 1 },
 180:../src/cli.c  ****     { "mag_declination", VAR_INT16, &cfg.mag_declination, -18000, 18000 },
 181:../src/cli.c  ****     { "gps_pos_p", VAR_UINT8, &cfg.P8[PIDPOS], 0, 200 },
 182:../src/cli.c  ****     { "gps_pos_i", VAR_UINT8, &cfg.I8[PIDPOS], 0, 200 },
 183:../src/cli.c  ****     { "gps_pos_d", VAR_UINT8, &cfg.D8[PIDPOS], 0, 200 },
 184:../src/cli.c  ****     { "gps_posr_p", VAR_UINT8, &cfg.P8[PIDPOSR], 0, 200 },
 185:../src/cli.c  ****     { "gps_posr_i", VAR_UINT8, &cfg.I8[PIDPOSR], 0, 200 },
 186:../src/cli.c  ****     { "gps_posr_d", VAR_UINT8, &cfg.D8[PIDPOSR], 0, 200 },
 187:../src/cli.c  ****     { "gps_nav_p", VAR_UINT8, &cfg.P8[PIDNAVR], 0, 200 },
 188:../src/cli.c  ****     { "gps_nav_i", VAR_UINT8, &cfg.I8[PIDNAVR], 0, 200 },
 189:../src/cli.c  ****     { "gps_nav_d", VAR_UINT8, &cfg.D8[PIDNAVR], 0, 200 },
 190:../src/cli.c  ****     { "gps_wp_radius", VAR_UINT16, &cfg.gps_wp_radius, 0, 2000 },
 191:../src/cli.c  ****     { "nav_controls_heading", VAR_UINT8, &cfg.nav_controls_heading, 0, 1 },
 192:../src/cli.c  ****     { "nav_speed_min", VAR_UINT16, &cfg.nav_speed_min, 10, 2000 },
 193:../src/cli.c  ****     { "nav_speed_max", VAR_UINT16, &cfg.nav_speed_max, 10, 2000 },
 194:../src/cli.c  ****     { "nav_slew_rate", VAR_UINT8, &cfg.nav_slew_rate, 0, 100 },
 195:../src/cli.c  ****     { "p_pitch", VAR_UINT8, &cfg.P8[PITCH], 0, 200 },
 196:../src/cli.c  ****     { "i_pitch", VAR_UINT8, &cfg.I8[PITCH], 0, 200 },
 197:../src/cli.c  ****     { "d_pitch", VAR_UINT8, &cfg.D8[PITCH], 0, 200 },
 198:../src/cli.c  ****     { "p_roll", VAR_UINT8, &cfg.P8[ROLL], 0, 200 },
 199:../src/cli.c  ****     { "i_roll", VAR_UINT8, &cfg.I8[ROLL], 0, 200 },
 200:../src/cli.c  ****     { "d_roll", VAR_UINT8, &cfg.D8[ROLL], 0, 200 },
 201:../src/cli.c  ****     { "p_yaw", VAR_UINT8, &cfg.P8[YAW], 0, 200 },
 202:../src/cli.c  ****     { "i_yaw", VAR_UINT8, &cfg.I8[YAW], 0, 200 },
 203:../src/cli.c  ****     { "d_yaw", VAR_UINT8, &cfg.D8[YAW], 0, 200 },
 204:../src/cli.c  ****     { "p_alt", VAR_UINT8, &cfg.P8[PIDALT], 0, 200 },
 205:../src/cli.c  ****     { "i_alt", VAR_UINT8, &cfg.I8[PIDALT], 0, 200 },
 206:../src/cli.c  ****     { "d_alt", VAR_UINT8, &cfg.D8[PIDALT], 0, 200 },
 207:../src/cli.c  ****     { "p_level", VAR_UINT8, &cfg.P8[PIDLEVEL], 0, 200 },
 208:../src/cli.c  ****     { "i_level", VAR_UINT8, &cfg.I8[PIDLEVEL], 0, 200 },
 209:../src/cli.c  ****     { "d_level", VAR_UINT8, &cfg.D8[PIDLEVEL], 0, 200 },
 210:../src/cli.c  **** };
 211:../src/cli.c  **** 
 212:../src/cli.c  **** #define VALUE_COUNT (sizeof(valueTable) / sizeof(valueTable[0]))
 213:../src/cli.c  **** 
 214:../src/cli.c  **** static void cliSetVar(const clivalue_t *var, const int32_t value);
 215:../src/cli.c  **** static void cliPrintVar(const clivalue_t *var, uint32_t full);
 216:../src/cli.c  **** 
 217:../src/cli.c  **** #ifndef HAVE_ITOA_FUNCTION
 218:../src/cli.c  **** 
 219:../src/cli.c  **** /*
 220:../src/cli.c  **** ** The following two functions together make up an itoa()
 221:../src/cli.c  **** ** implementation. Function i2a() is a 'private' function
 222:../src/cli.c  **** ** called by the public itoa() function.
 223:../src/cli.c  **** **
 224:../src/cli.c  **** ** itoa() takes three arguments:
 225:../src/cli.c  **** **        1) the integer to be converted,
 226:../src/cli.c  **** **        2) a pointer to a character conversion buffer,
 227:../src/cli.c  **** **        3) the radix for the conversion
 228:../src/cli.c  **** **           which can range between 2 and 36 inclusive
 229:../src/cli.c  **** **           range errors on the radix default it to base10
 230:../src/cli.c  **** ** Code from http://groups.google.com/group/comp.lang.c/msg/66552ef8b04fe1ab?pli=1
 231:../src/cli.c  **** */
 232:../src/cli.c  **** 
 233:../src/cli.c  **** static char *i2a(unsigned i, char *a, unsigned r)
 234:../src/cli.c  **** {
 1282              		.loc 1 234 0
 1283              		.cfi_startproc
 1284              		@ args = 0, pretend = 0, frame = 16
 1285              		@ frame_needed = 1, uses_anonymous_args = 0
 1286 0000 80B5     		push	{r7, lr}
 1287              	.LCFI0:
 1288              		.cfi_def_cfa_offset 8
 1289              		.cfi_offset 7, -8
 1290              		.cfi_offset 14, -4
 1291 0002 84B0     		sub	sp, sp, #16
 1292              	.LCFI1:
 1293              		.cfi_def_cfa_offset 24
 1294 0004 00AF     		add	r7, sp, #0
 1295              	.LCFI2:
 1296              		.cfi_def_cfa_register 7
 1297 0006 F860     		str	r0, [r7, #12]
 1298 0008 B960     		str	r1, [r7, #8]
 1299 000a 7A60     		str	r2, [r7, #4]
 235:../src/cli.c  ****     if (i / r > 0)
 1300              		.loc 1 235 0
 1301 000c FA68     		ldr	r2, [r7, #12]
 1302 000e 7B68     		ldr	r3, [r7, #4]
 1303 0010 B2FBF3F3 		udiv	r3, r2, r3
 1304 0014 002B     		cmp	r3, #0
 1305 0016 09D0     		beq	.L2
 236:../src/cli.c  ****         a = i2a(i / r, a, r);
 1306              		.loc 1 236 0
 1307 0018 FA68     		ldr	r2, [r7, #12]
 1308 001a 7B68     		ldr	r3, [r7, #4]
 1309 001c B2FBF3F3 		udiv	r3, r2, r3
 1310 0020 1846     		mov	r0, r3
 1311 0022 B968     		ldr	r1, [r7, #8]
 1312 0024 7A68     		ldr	r2, [r7, #4]
 1313 0026 FFF7EBFF 		bl	i2a
 1314 002a B860     		str	r0, [r7, #8]
 1315              	.L2:
 237:../src/cli.c  ****     *a = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"[i % r];
 1316              		.loc 1 237 0
 1317 002c FB68     		ldr	r3, [r7, #12]
 1318 002e 7A68     		ldr	r2, [r7, #4]
 1319 0030 B3FBF2F2 		udiv	r2, r3, r2
 1320 0034 7968     		ldr	r1, [r7, #4]
 1321 0036 01FB02F2 		mul	r2, r1, r2
 1322 003a 9B1A     		subs	r3, r3, r2
 1323 003c 054A     		ldr	r2, .L4
 1324 003e D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 1325 0040 BB68     		ldr	r3, [r7, #8]
 1326 0042 1A70     		strb	r2, [r3, #0]
 238:../src/cli.c  ****     return a + 1;
 1327              		.loc 1 238 0
 1328 0044 BB68     		ldr	r3, [r7, #8]
 1329 0046 03F10103 		add	r3, r3, #1
 239:../src/cli.c  **** }
 1330              		.loc 1 239 0
 1331 004a 1846     		mov	r0, r3
 1332 004c 07F11007 		add	r7, r7, #16
 1333 0050 BD46     		mov	sp, r7
 1334 0052 80BD     		pop	{r7, pc}
 1335              	.L5:
 1336              		.align	2
 1337              	.L4:
 1338 0054 24120000 		.word	.LC169
 1339              		.cfi_endproc
 1340              	.LFE29:
 1342              		.align	2
 1343              		.global	itoa
 1344              		.thumb
 1345              		.thumb_func
 1347              	itoa:
 1348              	.LFB30:
 240:../src/cli.c  **** 
 241:../src/cli.c  **** char *itoa(int i, char *a, int r)
 242:../src/cli.c  **** {
 1349              		.loc 1 242 0
 1350              		.cfi_startproc
 1351              		@ args = 0, pretend = 0, frame = 16
 1352              		@ frame_needed = 1, uses_anonymous_args = 0
 1353 0058 80B5     		push	{r7, lr}
 1354              	.LCFI3:
 1355              		.cfi_def_cfa_offset 8
 1356              		.cfi_offset 7, -8
 1357              		.cfi_offset 14, -4
 1358 005a 84B0     		sub	sp, sp, #16
 1359              	.LCFI4:
 1360              		.cfi_def_cfa_offset 24
 1361 005c 00AF     		add	r7, sp, #0
 1362              	.LCFI5:
 1363              		.cfi_def_cfa_register 7
 1364 005e F860     		str	r0, [r7, #12]
 1365 0060 B960     		str	r1, [r7, #8]
 1366 0062 7A60     		str	r2, [r7, #4]
 243:../src/cli.c  ****     if ((r < 2) || (r > 36))
 1367              		.loc 1 243 0
 1368 0064 7B68     		ldr	r3, [r7, #4]
 1369 0066 012B     		cmp	r3, #1
 1370 0068 02DD     		ble	.L7
 1371              		.loc 1 243 0 is_stmt 0 discriminator 1
 1372 006a 7B68     		ldr	r3, [r7, #4]
 1373 006c 242B     		cmp	r3, #36
 1374 006e 02DD     		ble	.L8
 1375              	.L7:
 244:../src/cli.c  ****         r = 10;
 1376              		.loc 1 244 0 is_stmt 1
 1377 0070 4FF00A03 		mov	r3, #10
 1378 0074 7B60     		str	r3, [r7, #4]
 1379              	.L8:
 245:../src/cli.c  ****     if (i < 0) {
 1380              		.loc 1 245 0
 1381 0076 FB68     		ldr	r3, [r7, #12]
 1382 0078 002B     		cmp	r3, #0
 1383 007a 14DA     		bge	.L9
 246:../src/cli.c  ****         *a = '-';
 1384              		.loc 1 246 0
 1385 007c BB68     		ldr	r3, [r7, #8]
 1386 007e 4FF02D02 		mov	r2, #45
 1387 0082 1A70     		strb	r2, [r3, #0]
 247:../src/cli.c  ****         *i2a(-(unsigned)i, a + 1, r) = 0;
 1388              		.loc 1 247 0
 1389 0084 FB68     		ldr	r3, [r7, #12]
 1390 0086 C3F10001 		rsb	r1, r3, #0
 1391 008a BB68     		ldr	r3, [r7, #8]
 1392 008c 03F10102 		add	r2, r3, #1
 1393 0090 7B68     		ldr	r3, [r7, #4]
 1394 0092 0846     		mov	r0, r1
 1395 0094 1146     		mov	r1, r2
 1396 0096 1A46     		mov	r2, r3
 1397 0098 FFF7B2FF 		bl	i2a
 1398 009c 0346     		mov	r3, r0
 1399 009e 4FF00002 		mov	r2, #0
 1400 00a2 1A70     		strb	r2, [r3, #0]
 1401 00a4 0AE0     		b	.L10
 1402              	.L9:
 248:../src/cli.c  ****     } else
 249:../src/cli.c  ****         *i2a(i, a, r) = 0;
 1403              		.loc 1 249 0
 1404 00a6 FA68     		ldr	r2, [r7, #12]
 1405 00a8 7B68     		ldr	r3, [r7, #4]
 1406 00aa 1046     		mov	r0, r2
 1407 00ac B968     		ldr	r1, [r7, #8]
 1408 00ae 1A46     		mov	r2, r3
 1409 00b0 FFF7A6FF 		bl	i2a
 1410 00b4 0346     		mov	r3, r0
 1411 00b6 4FF00002 		mov	r2, #0
 1412 00ba 1A70     		strb	r2, [r3, #0]
 1413              	.L10:
 250:../src/cli.c  ****     return a;
 1414              		.loc 1 250 0
 1415 00bc BB68     		ldr	r3, [r7, #8]
 251:../src/cli.c  **** }
 1416              		.loc 1 251 0
 1417 00be 1846     		mov	r0, r3
 1418 00c0 07F11007 		add	r7, r7, #16
 1419 00c4 BD46     		mov	sp, r7
 1420 00c6 80BD     		pop	{r7, pc}
 1421              		.cfi_endproc
 1422              	.LFE30:
 1424              		.global	__aeabi_dmul
 1425              		.global	__aeabi_i2d
 1426              		.global	__aeabi_dadd
 1427              		.global	__aeabi_ddiv
 1428              		.global	__aeabi_d2f
 1429              		.align	2
 1430              		.thumb
 1431              		.thumb_func
 1433              	_atof:
 1434              	.LFB31:
 252:../src/cli.c  **** 
 253:../src/cli.c  **** #endif
 254:../src/cli.c  **** 
 255:../src/cli.c  **** ////////////////////////////////////////////////////////////////////////////////
 256:../src/cli.c  **** // String to Float Conversion
 257:../src/cli.c  **** ///////////////////////////////////////////////////////////////////////////////
 258:../src/cli.c  **** // Simple and fast atof (ascii to float) function.
 259:../src/cli.c  **** //
 260:../src/cli.c  **** // - Executes about 5x faster than standard MSCRT library atof().
 261:../src/cli.c  **** // - An attractive alternative if the number of calls is in the millions.
 262:../src/cli.c  **** // - Assumes input is a proper integer, fraction, or scientific format.
 263:../src/cli.c  **** // - Matches library atof() to 15 digits (except at extreme exponents).
 264:../src/cli.c  **** // - Follows atof() precedent of essentially no error checking.
 265:../src/cli.c  **** //
 266:../src/cli.c  **** // 09-May-2009 Tom Van Baak (tvb) www.LeapSecond.com
 267:../src/cli.c  **** //
 268:../src/cli.c  **** #define white_space(c) ((c) == ' ' || (c) == '\t')
 269:../src/cli.c  **** #define valid_digit(c) ((c) >= '0' && (c) <= '9')
 270:../src/cli.c  **** static float _atof(const char *p)
 271:../src/cli.c  **** {
 1435              		.loc 1 271 0
 1436              		.cfi_startproc
 1437              		@ args = 0, pretend = 0, frame = 56
 1438              		@ frame_needed = 1, uses_anonymous_args = 0
 1439 00c8 B0B5     		push	{r4, r5, r7, lr}
 1440              	.LCFI6:
 1441              		.cfi_def_cfa_offset 16
 1442              		.cfi_offset 4, -16
 1443              		.cfi_offset 5, -12
 1444              		.cfi_offset 7, -8
 1445              		.cfi_offset 14, -4
 1446 00ca 8EB0     		sub	sp, sp, #56
 1447              	.LCFI7:
 1448              		.cfi_def_cfa_offset 72
 1449 00cc 00AF     		add	r7, sp, #0
 1450              	.LCFI8:
 1451              		.cfi_def_cfa_register 7
 1452 00ce 7860     		str	r0, [r7, #4]
 272:../src/cli.c  ****     int frac = 0;
 1453              		.loc 1 272 0
 1454 00d0 4FF00003 		mov	r3, #0
 1455 00d4 7B63     		str	r3, [r7, #52]
 273:../src/cli.c  ****     double sign, value, scale;
 274:../src/cli.c  **** 
 275:../src/cli.c  ****     // Skip leading white space, if any.
 276:../src/cli.c  ****     while (white_space(*p) ) {
 1456              		.loc 1 276 0
 1457 00d6 03E0     		b	.L13
 1458              	.L14:
 277:../src/cli.c  ****         p += 1;
 1459              		.loc 1 277 0
 1460 00d8 7B68     		ldr	r3, [r7, #4]
 1461 00da 03F10103 		add	r3, r3, #1
 1462 00de 7B60     		str	r3, [r7, #4]
 1463              	.L13:
 276:../src/cli.c  ****     while (white_space(*p) ) {
 1464              		.loc 1 276 0 discriminator 1
 1465 00e0 7B68     		ldr	r3, [r7, #4]
 1466 00e2 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1467 00e4 202B     		cmp	r3, #32
 1468 00e6 F7D0     		beq	.L14
 276:../src/cli.c  ****     while (white_space(*p) ) {
 1469              		.loc 1 276 0 is_stmt 0 discriminator 2
 1470 00e8 7B68     		ldr	r3, [r7, #4]
 1471 00ea 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1472 00ec 092B     		cmp	r3, #9
 1473 00ee F3D0     		beq	.L14
 278:../src/cli.c  ****     }
 279:../src/cli.c  **** 
 280:../src/cli.c  ****     // Get sign, if any.
 281:../src/cli.c  ****     sign = 1.0;
 1474              		.loc 1 281 0 is_stmt 1
 1475 00f0 4FF00002 		mov	r2, #0
 1476 00f4 4FF07F53 		mov	r3, #1069547520
 1477 00f8 03F54013 		add	r3, r3, #3145728
 1478 00fc C7E90A23 		strd	r2, [r7, #40]
 282:../src/cli.c  ****     if (*p == '-') {
 1479              		.loc 1 282 0
 1480 0100 7B68     		ldr	r3, [r7, #4]
 1481 0102 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1482 0104 2D2B     		cmp	r3, #45
 1483 0106 0CD1     		bne	.L15
 283:../src/cli.c  ****         sign = -1.0;
 1484              		.loc 1 283 0
 1485 0108 4FF00002 		mov	r2, #0
 1486 010c 4FF03F43 		mov	r3, #-1090519040
 1487 0110 03F57003 		add	r3, r3, #15728640
 1488 0114 C7E90A23 		strd	r2, [r7, #40]
 284:../src/cli.c  ****         p += 1;
 1489              		.loc 1 284 0
 1490 0118 7B68     		ldr	r3, [r7, #4]
 1491 011a 03F10103 		add	r3, r3, #1
 1492 011e 7B60     		str	r3, [r7, #4]
 1493 0120 07E0     		b	.L16
 1494              	.L15:
 285:../src/cli.c  **** 
 286:../src/cli.c  ****     } else if (*p == '+') {
 1495              		.loc 1 286 0
 1496 0122 7B68     		ldr	r3, [r7, #4]
 1497 0124 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1498 0126 2B2B     		cmp	r3, #43
 1499 0128 03D1     		bne	.L16
 287:../src/cli.c  ****         p += 1;
 1500              		.loc 1 287 0
 1501 012a 7B68     		ldr	r3, [r7, #4]
 1502 012c 03F10103 		add	r3, r3, #1
 1503 0130 7B60     		str	r3, [r7, #4]
 1504              	.L16:
 288:../src/cli.c  ****     }
 289:../src/cli.c  **** 
 290:../src/cli.c  ****     // Get digits before decimal point or exponent, if any.
 291:../src/cli.c  ****     value = 0.0;
 1505              		.loc 1 291 0
 1506 0132 4FF00002 		mov	r2, #0
 1507 0136 4FF00003 		mov	r3, #0
 1508 013a C7E90823 		strd	r2, [r7, #32]
 292:../src/cli.c  ****     while (valid_digit(*p)) {
 1509              		.loc 1 292 0
 1510 013e 22E0     		b	.L17
 1511              	.L19:
 293:../src/cli.c  ****         value = value * 10.0 + (*p - '0');
 1512              		.loc 1 293 0
 1513 0140 D7E90801 		ldrd	r0, [r7, #32]
 1514 0144 4FF00002 		mov	r2, #0
 1515 0148 4FF08043 		mov	r3, #1073741824
 1516 014c 03F51013 		add	r3, r3, #2359296
 1517 0150 FFF7FEFF 		bl	__aeabi_dmul
 1518 0154 0246     		mov	r2, r0
 1519 0156 0B46     		mov	r3, r1
 1520 0158 1446     		mov	r4, r2
 1521 015a 1D46     		mov	r5, r3
 1522 015c 7B68     		ldr	r3, [r7, #4]
 1523 015e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1524 0160 A3F13003 		sub	r3, r3, #48
 1525 0164 1846     		mov	r0, r3
 1526 0166 FFF7FEFF 		bl	__aeabi_i2d
 1527 016a 0246     		mov	r2, r0
 1528 016c 0B46     		mov	r3, r1
 1529 016e 2046     		mov	r0, r4
 1530 0170 2946     		mov	r1, r5
 1531 0172 FFF7FEFF 		bl	__aeabi_dadd
 1532 0176 0246     		mov	r2, r0
 1533 0178 0B46     		mov	r3, r1
 1534 017a C7E90823 		strd	r2, [r7, #32]
 294:../src/cli.c  ****         p += 1;
 1535              		.loc 1 294 0
 1536 017e 7B68     		ldr	r3, [r7, #4]
 1537 0180 03F10103 		add	r3, r3, #1
 1538 0184 7B60     		str	r3, [r7, #4]
 1539              	.L17:
 292:../src/cli.c  ****     while (valid_digit(*p)) {
 1540              		.loc 1 292 0 discriminator 1
 1541 0186 7B68     		ldr	r3, [r7, #4]
 1542 0188 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1543 018a 2F2B     		cmp	r3, #47
 1544 018c 03D9     		bls	.L18
 292:../src/cli.c  ****     while (valid_digit(*p)) {
 1545              		.loc 1 292 0 is_stmt 0 discriminator 2
 1546 018e 7B68     		ldr	r3, [r7, #4]
 1547 0190 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1548 0192 392B     		cmp	r3, #57
 1549 0194 D4D9     		bls	.L19
 1550              	.L18:
 295:../src/cli.c  ****     }
 296:../src/cli.c  **** 
 297:../src/cli.c  ****     // Get digits after decimal point, if any.
 298:../src/cli.c  ****     if (*p == '.') {
 1551              		.loc 1 298 0 is_stmt 1
 1552 0196 7B68     		ldr	r3, [r7, #4]
 1553 0198 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1554 019a 2E2B     		cmp	r3, #46
 1555 019c 3FD1     		bne	.L20
 1556              	.LBB2:
 299:../src/cli.c  ****         double pow10 = 10.0;
 1557              		.loc 1 299 0
 1558 019e 4FF00002 		mov	r2, #0
 1559 01a2 4FF08043 		mov	r3, #1073741824
 1560 01a6 03F51013 		add	r3, r3, #2359296
 1561 01aa C7E90423 		strd	r2, [r7, #16]
 300:../src/cli.c  ****         p += 1;
 1562              		.loc 1 300 0
 1563 01ae 7B68     		ldr	r3, [r7, #4]
 1564 01b0 03F10103 		add	r3, r3, #1
 1565 01b4 7B60     		str	r3, [r7, #4]
 301:../src/cli.c  **** 
 302:../src/cli.c  ****         while (valid_digit(*p)) {
 1566              		.loc 1 302 0
 1567 01b6 2AE0     		b	.L21
 1568              	.L22:
 303:../src/cli.c  ****             value += (*p - '0') / pow10;
 1569              		.loc 1 303 0
 1570 01b8 7B68     		ldr	r3, [r7, #4]
 1571 01ba 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1572 01bc A3F13003 		sub	r3, r3, #48
 1573 01c0 1846     		mov	r0, r3
 1574 01c2 FFF7FEFF 		bl	__aeabi_i2d
 1575 01c6 0246     		mov	r2, r0
 1576 01c8 0B46     		mov	r3, r1
 1577 01ca 1046     		mov	r0, r2
 1578 01cc 1946     		mov	r1, r3
 1579 01ce D7E90423 		ldrd	r2, [r7, #16]
 1580 01d2 FFF7FEFF 		bl	__aeabi_ddiv
 1581 01d6 0246     		mov	r2, r0
 1582 01d8 0B46     		mov	r3, r1
 1583 01da D7E90801 		ldrd	r0, [r7, #32]
 1584 01de FFF7FEFF 		bl	__aeabi_dadd
 1585 01e2 0246     		mov	r2, r0
 1586 01e4 0B46     		mov	r3, r1
 1587 01e6 C7E90823 		strd	r2, [r7, #32]
 304:../src/cli.c  ****             pow10 *= 10.0;
 1588              		.loc 1 304 0
 1589 01ea D7E90401 		ldrd	r0, [r7, #16]
 1590 01ee 4FF00002 		mov	r2, #0
 1591 01f2 4FF08043 		mov	r3, #1073741824
 1592 01f6 03F51013 		add	r3, r3, #2359296
 1593 01fa FFF7FEFF 		bl	__aeabi_dmul
 1594 01fe 0246     		mov	r2, r0
 1595 0200 0B46     		mov	r3, r1
 1596 0202 C7E90423 		strd	r2, [r7, #16]
 305:../src/cli.c  ****             p += 1;
 1597              		.loc 1 305 0
 1598 0206 7B68     		ldr	r3, [r7, #4]
 1599 0208 03F10103 		add	r3, r3, #1
 1600 020c 7B60     		str	r3, [r7, #4]
 1601              	.L21:
 302:../src/cli.c  ****         while (valid_digit(*p)) {
 1602              		.loc 1 302 0 discriminator 1
 1603 020e 7B68     		ldr	r3, [r7, #4]
 1604 0210 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1605 0212 2F2B     		cmp	r3, #47
 1606 0214 03D9     		bls	.L20
 302:../src/cli.c  ****         while (valid_digit(*p)) {
 1607              		.loc 1 302 0 is_stmt 0 discriminator 2
 1608 0216 7B68     		ldr	r3, [r7, #4]
 1609 0218 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1610 021a 392B     		cmp	r3, #57
 1611 021c CCD9     		bls	.L22
 1612              	.L20:
 1613              	.LBE2:
 306:../src/cli.c  ****         }
 307:../src/cli.c  ****     }
 308:../src/cli.c  **** 
 309:../src/cli.c  ****     // Handle exponent, if any.
 310:../src/cli.c  ****     scale = 1.0;
 1614              		.loc 1 310 0 is_stmt 1
 1615 021e 4FF00002 		mov	r2, #0
 1616 0222 4FF07F53 		mov	r3, #1069547520
 1617 0226 03F54013 		add	r3, r3, #3145728
 1618 022a C7E90623 		strd	r2, [r7, #24]
 311:../src/cli.c  ****     if ((*p == 'e') || (*p == 'E')) {
 1619              		.loc 1 311 0
 1620 022e 7B68     		ldr	r3, [r7, #4]
 1621 0230 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1622 0232 652B     		cmp	r3, #101
 1623 0234 03D0     		beq	.L23
 1624              		.loc 1 311 0 is_stmt 0 discriminator 1
 1625 0236 7B68     		ldr	r3, [r7, #4]
 1626 0238 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1627 023a 452B     		cmp	r3, #69
 1628 023c 7BD1     		bne	.L24
 1629              	.L23:
 1630              	.LBB3:
 312:../src/cli.c  ****         unsigned int expon;
 313:../src/cli.c  ****         p += 1;
 1631              		.loc 1 313 0 is_stmt 1
 1632 023e 7B68     		ldr	r3, [r7, #4]
 1633 0240 03F10103 		add	r3, r3, #1
 1634 0244 7B60     		str	r3, [r7, #4]
 314:../src/cli.c  **** 
 315:../src/cli.c  ****         // Get sign of exponent, if any.
 316:../src/cli.c  ****         frac = 0;
 1635              		.loc 1 316 0
 1636 0246 4FF00003 		mov	r3, #0
 1637 024a 7B63     		str	r3, [r7, #52]
 317:../src/cli.c  ****         if (*p == '-') {
 1638              		.loc 1 317 0
 1639 024c 7B68     		ldr	r3, [r7, #4]
 1640 024e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1641 0250 2D2B     		cmp	r3, #45
 1642 0252 07D1     		bne	.L25
 318:../src/cli.c  ****             frac = 1;
 1643              		.loc 1 318 0
 1644 0254 4FF00103 		mov	r3, #1
 1645 0258 7B63     		str	r3, [r7, #52]
 319:../src/cli.c  ****             p += 1;
 1646              		.loc 1 319 0
 1647 025a 7B68     		ldr	r3, [r7, #4]
 1648 025c 03F10103 		add	r3, r3, #1
 1649 0260 7B60     		str	r3, [r7, #4]
 1650 0262 07E0     		b	.L26
 1651              	.L25:
 320:../src/cli.c  **** 
 321:../src/cli.c  ****         } else if (*p == '+') {
 1652              		.loc 1 321 0
 1653 0264 7B68     		ldr	r3, [r7, #4]
 1654 0266 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1655 0268 2B2B     		cmp	r3, #43
 1656 026a 03D1     		bne	.L26
 322:../src/cli.c  ****             p += 1;
 1657              		.loc 1 322 0
 1658 026c 7B68     		ldr	r3, [r7, #4]
 1659 026e 03F10103 		add	r3, r3, #1
 1660 0272 7B60     		str	r3, [r7, #4]
 1661              	.L26:
 323:../src/cli.c  ****         }
 324:../src/cli.c  **** 
 325:../src/cli.c  ****         // Get digits of exponent, if any.
 326:../src/cli.c  ****         expon = 0;
 1662              		.loc 1 326 0
 1663 0274 4FF00003 		mov	r3, #0
 1664 0278 FB60     		str	r3, [r7, #12]
 327:../src/cli.c  ****         while (valid_digit(*p)) {
 1665              		.loc 1 327 0
 1666 027a 11E0     		b	.L27
 1667              	.L29:
 328:../src/cli.c  ****             expon = expon * 10 + (*p - '0');
 1668              		.loc 1 328 0
 1669 027c FA68     		ldr	r2, [r7, #12]
 1670 027e 1346     		mov	r3, r2
 1671 0280 4FEA8303 		lsl	r3, r3, #2
 1672 0284 9B18     		adds	r3, r3, r2
 1673 0286 4FEA4303 		lsl	r3, r3, #1
 1674 028a 1A46     		mov	r2, r3
 1675 028c 7B68     		ldr	r3, [r7, #4]
 1676 028e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1677 0290 D318     		adds	r3, r2, r3
 1678 0292 A3F13003 		sub	r3, r3, #48
 1679 0296 FB60     		str	r3, [r7, #12]
 329:../src/cli.c  ****             p += 1;
 1680              		.loc 1 329 0
 1681 0298 7B68     		ldr	r3, [r7, #4]
 1682 029a 03F10103 		add	r3, r3, #1
 1683 029e 7B60     		str	r3, [r7, #4]
 1684              	.L27:
 327:../src/cli.c  ****         while (valid_digit(*p)) {
 1685              		.loc 1 327 0 discriminator 1
 1686 02a0 7B68     		ldr	r3, [r7, #4]
 1687 02a2 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1688 02a4 2F2B     		cmp	r3, #47
 1689 02a6 03D9     		bls	.L28
 327:../src/cli.c  ****         while (valid_digit(*p)) {
 1690              		.loc 1 327 0 is_stmt 0 discriminator 2
 1691 02a8 7B68     		ldr	r3, [r7, #4]
 1692 02aa 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1693 02ac 392B     		cmp	r3, #57
 1694 02ae E5D9     		bls	.L29
 1695              	.L28:
 330:../src/cli.c  ****         }
 331:../src/cli.c  ****         if (expon > 308) expon = 308;
 1696              		.loc 1 331 0 is_stmt 1
 1697 02b0 FB68     		ldr	r3, [r7, #12]
 1698 02b2 B3F59A7F 		cmp	r3, #308
 1699 02b6 12D9     		bls	.L31
 1700              		.loc 1 331 0 is_stmt 0 discriminator 1
 1701 02b8 4FF49A73 		mov	r3, #308
 1702 02bc FB60     		str	r3, [r7, #12]
 332:../src/cli.c  **** 
 333:../src/cli.c  ****         // Calculate scaling factor.
 334:../src/cli.c  ****         while (expon >= 50) { scale *= 1E50; expon -= 50; }
 1703              		.loc 1 334 0 is_stmt 1 discriminator 1
 1704 02be 0EE0     		b	.L31
 1705              	.L32:
 1706              		.loc 1 334 0 is_stmt 0 discriminator 2
 1707 02c0 D7E90601 		ldrd	r0, [r7, #24]
 1708 02c4 30A3     		adr	r3, .L40
 1709 02c6 D3E90023 		ldrd	r2, [r3]
 1710 02ca FFF7FEFF 		bl	__aeabi_dmul
 1711 02ce 0246     		mov	r2, r0
 1712 02d0 0B46     		mov	r3, r1
 1713 02d2 C7E90623 		strd	r2, [r7, #24]
 1714 02d6 FB68     		ldr	r3, [r7, #12]
 1715 02d8 A3F13203 		sub	r3, r3, #50
 1716 02dc FB60     		str	r3, [r7, #12]
 1717              	.L31:
 1718              		.loc 1 334 0 discriminator 1
 1719 02de FB68     		ldr	r3, [r7, #12]
 1720 02e0 312B     		cmp	r3, #49
 1721 02e2 EDD8     		bhi	.L32
 335:../src/cli.c  ****         while (expon >=  8) { scale *= 1E8;  expon -=  8; }
 1722              		.loc 1 335 0 is_stmt 1
 1723 02e4 0EE0     		b	.L33
 1724              	.L34:
 1725              		.loc 1 335 0 is_stmt 0 discriminator 2
 1726 02e6 D7E90601 		ldrd	r0, [r7, #24]
 1727 02ea 29A3     		adr	r3, .L40+8
 1728 02ec D3E90023 		ldrd	r2, [r3]
 1729 02f0 FFF7FEFF 		bl	__aeabi_dmul
 1730 02f4 0246     		mov	r2, r0
 1731 02f6 0B46     		mov	r3, r1
 1732 02f8 C7E90623 		strd	r2, [r7, #24]
 1733 02fc FB68     		ldr	r3, [r7, #12]
 1734 02fe A3F10803 		sub	r3, r3, #8
 1735 0302 FB60     		str	r3, [r7, #12]
 1736              	.L33:
 1737              		.loc 1 335 0 discriminator 1
 1738 0304 FB68     		ldr	r3, [r7, #12]
 1739 0306 072B     		cmp	r3, #7
 1740 0308 EDD8     		bhi	.L34
 336:../src/cli.c  ****         while (expon >   0) { scale *= 10.0; expon -=  1; }
 1741              		.loc 1 336 0 is_stmt 1
 1742 030a 11E0     		b	.L35
 1743              	.L36:
 1744              		.loc 1 336 0 is_stmt 0 discriminator 2
 1745 030c D7E90601 		ldrd	r0, [r7, #24]
 1746 0310 4FF00002 		mov	r2, #0
 1747 0314 4FF08043 		mov	r3, #1073741824
 1748 0318 03F51013 		add	r3, r3, #2359296
 1749 031c FFF7FEFF 		bl	__aeabi_dmul
 1750 0320 0246     		mov	r2, r0
 1751 0322 0B46     		mov	r3, r1
 1752 0324 C7E90623 		strd	r2, [r7, #24]
 1753 0328 FB68     		ldr	r3, [r7, #12]
 1754 032a 03F1FF33 		add	r3, r3, #-1
 1755 032e FB60     		str	r3, [r7, #12]
 1756              	.L35:
 1757              		.loc 1 336 0 discriminator 1
 1758 0330 FB68     		ldr	r3, [r7, #12]
 1759 0332 002B     		cmp	r3, #0
 1760 0334 EAD1     		bne	.L36
 1761              	.L24:
 1762              	.LBE3:
 337:../src/cli.c  ****     }
 338:../src/cli.c  **** 
 339:../src/cli.c  ****     // Return signed and scaled floating point result.
 340:../src/cli.c  ****     return sign * (frac ? (value / scale) : (value * scale));
 1763              		.loc 1 340 0 is_stmt 1
 1764 0336 7B6B     		ldr	r3, [r7, #52]
 1765 0338 002B     		cmp	r3, #0
 1766 033a 08D0     		beq	.L37
 1767              		.loc 1 340 0 is_stmt 0 discriminator 1
 1768 033c D7E90801 		ldrd	r0, [r7, #32]
 1769 0340 D7E90623 		ldrd	r2, [r7, #24]
 1770 0344 FFF7FEFF 		bl	__aeabi_ddiv
 1771 0348 0246     		mov	r2, r0
 1772 034a 0B46     		mov	r3, r1
 1773 034c 07E0     		b	.L38
 1774              	.L37:
 1775              		.loc 1 340 0 discriminator 2
 1776 034e D7E90801 		ldrd	r0, [r7, #32]
 1777 0352 D7E90623 		ldrd	r2, [r7, #24]
 1778 0356 FFF7FEFF 		bl	__aeabi_dmul
 1779 035a 0246     		mov	r2, r0
 1780 035c 0B46     		mov	r3, r1
 1781              	.L38:
 1782              		.loc 1 340 0 discriminator 3
 1783 035e 1046     		mov	r0, r2
 1784 0360 1946     		mov	r1, r3
 1785 0362 D7E90A23 		ldrd	r2, [r7, #40]
 1786 0366 FFF7FEFF 		bl	__aeabi_dmul
 1787 036a 0246     		mov	r2, r0
 1788 036c 0B46     		mov	r3, r1
 1789 036e 1046     		mov	r0, r2
 1790 0370 1946     		mov	r1, r3
 1791 0372 FFF7FEFF 		bl	__aeabi_d2f
 1792 0376 0346     		mov	r3, r0
 341:../src/cli.c  **** }
 1793              		.loc 1 341 0 is_stmt 1 discriminator 3
 1794 0378 1846     		mov	r0, r3
 1795 037a 07F13807 		add	r7, r7, #56
 1796 037e BD46     		mov	sp, r7
 1797 0380 B0BD     		pop	{r4, r5, r7, pc}
 1798              	.L41:
 1799 0382 00BFAFF3 		.align	3
 1799      0080
 1800              	.L40:
 1801 0388 9A647EC5 		.word	-981572454
 1802 038c 0E1B514A 		.word	1246829326
 1803 0390 00000000 		.word	0
 1804 0394 84D79741 		.word	1100470148
 1805              		.cfi_endproc
 1806              	.LFE31:
 1808              		.section	.rodata
 1809 1249 000000   		.align	2
 1810              	.LC170:
 1811 124c 2E00     		.ascii	".\000"
 1812              		.global	__aeabi_fcmpgt
 1813              		.global	__aeabi_fadd
 1814              		.global	__aeabi_fsub
 1815              		.global	__aeabi_fmul
 1816              		.global	__aeabi_f2iz
 1817              		.text
 1818              		.align	2
 1819              		.thumb
 1820              		.thumb_func
 1822              	ftoa:
 1823              	.LFB32:
 342:../src/cli.c  **** 
 343:../src/cli.c  **** ///////////////////////////////////////////////////////////////////////////////
 344:../src/cli.c  **** // FTOA
 345:../src/cli.c  **** ///////////////////////////////////////////////////////////////////////////////
 346:../src/cli.c  **** static char *ftoa(float x, char *floatString)
 347:../src/cli.c  **** {
 1824              		.loc 1 347 0
 1825              		.cfi_startproc
 1826              		@ args = 0, pretend = 0, frame = 48
 1827              		@ frame_needed = 1, uses_anonymous_args = 0
 1828 0398 80B5     		push	{r7, lr}
 1829              	.LCFI9:
 1830              		.cfi_def_cfa_offset 8
 1831              		.cfi_offset 7, -8
 1832              		.cfi_offset 14, -4
 1833 039a 8CB0     		sub	sp, sp, #48
 1834              	.LCFI10:
 1835              		.cfi_def_cfa_offset 56
 1836 039c 00AF     		add	r7, sp, #0
 1837              	.LCFI11:
 1838              		.cfi_def_cfa_register 7
 1839 039e 7860     		str	r0, [r7, #4]	@ float
 1840 03a0 3960     		str	r1, [r7, #0]
 348:../src/cli.c  ****     int32_t value;
 349:../src/cli.c  ****     char intString1[12];
 350:../src/cli.c  ****     char intString2[12] = { 0, };
 1841              		.loc 1 350 0
 1842 03a2 07F10C03 		add	r3, r7, #12
 1843 03a6 4FF00002 		mov	r2, #0
 1844 03aa 1A60     		str	r2, [r3, #0]
 1845 03ac 03F10403 		add	r3, r3, #4
 1846 03b0 4FF00002 		mov	r2, #0
 1847 03b4 1A60     		str	r2, [r3, #0]
 1848 03b6 03F10403 		add	r3, r3, #4
 1849 03ba 4FF00002 		mov	r2, #0
 1850 03be 1A60     		str	r2, [r3, #0]
 1851 03c0 03F10403 		add	r3, r3, #4
 351:../src/cli.c  ****     char *decimalPoint = ".";
 1852              		.loc 1 351 0
 1853 03c4 584B     		ldr	r3, .L55
 1854 03c6 FB62     		str	r3, [r7, #44]
 352:../src/cli.c  ****     uint8_t dpLocation;
 353:../src/cli.c  **** 
 354:../src/cli.c  ****     if (x > 0)                  // Rounding for x.xxx display format
 1855              		.loc 1 354 0
 1856 03c8 7868     		ldr	r0, [r7, #4]	@ float
 1857 03ca 5849     		ldr	r1, .L55+4	@ float
 1858 03cc FFF7FEFF 		bl	__aeabi_fcmpgt
 1859 03d0 0346     		mov	r3, r0
 1860 03d2 002B     		cmp	r3, #0
 1861 03d4 06D0     		beq	.L54
 1862              	.L53:
 355:../src/cli.c  ****         x += 0.0005f;
 1863              		.loc 1 355 0
 1864 03d6 7868     		ldr	r0, [r7, #4]	@ float
 1865 03d8 5549     		ldr	r1, .L55+8	@ float
 1866 03da FFF7FEFF 		bl	__aeabi_fadd
 1867 03de 0346     		mov	r3, r0
 1868 03e0 7B60     		str	r3, [r7, #4]	@ float
 1869 03e2 05E0     		b	.L45
 1870              	.L54:
 356:../src/cli.c  ****     else
 357:../src/cli.c  ****         x -= 0.0005f;
 1871              		.loc 1 357 0
 1872 03e4 7868     		ldr	r0, [r7, #4]	@ float
 1873 03e6 5249     		ldr	r1, .L55+8	@ float
 1874 03e8 FFF7FEFF 		bl	__aeabi_fsub
 1875 03ec 0346     		mov	r3, r0
 1876 03ee 7B60     		str	r3, [r7, #4]	@ float
 1877              	.L45:
 358:../src/cli.c  **** 
 359:../src/cli.c  ****     value = (int32_t) (x * 1000.0f);    // Convert float * 1000 to an integer
 1878              		.loc 1 359 0
 1879 03f0 7868     		ldr	r0, [r7, #4]	@ float
 1880 03f2 5049     		ldr	r1, .L55+12	@ float
 1881 03f4 FFF7FEFF 		bl	__aeabi_fmul
 1882 03f8 0346     		mov	r3, r0
 1883 03fa 1846     		mov	r0, r3
 1884 03fc FFF7FEFF 		bl	__aeabi_f2iz
 1885 0400 0346     		mov	r3, r0
 1886 0402 BB62     		str	r3, [r7, #40]
 360:../src/cli.c  **** 
 361:../src/cli.c  ****     itoa(abs(value), intString1, 10);   // Create string from abs of integer value
 1887              		.loc 1 361 0
 1888 0404 BB6A     		ldr	r3, [r7, #40]
 1889 0406 83EAE372 		eor	r2, r3, r3, asr #31
 1890 040a A2EBE372 		sub	r2, r2, r3, asr #31
 1891 040e 07F11803 		add	r3, r7, #24
 1892 0412 1046     		mov	r0, r2
 1893 0414 1946     		mov	r1, r3
 1894 0416 4FF00A02 		mov	r2, #10
 1895 041a FFF7FEFF 		bl	itoa
 362:../src/cli.c  **** 
 363:../src/cli.c  ****     if (value >= 0)
 1896              		.loc 1 363 0
 1897 041e BB6A     		ldr	r3, [r7, #40]
 1898 0420 002B     		cmp	r3, #0
 1899 0422 03DB     		blt	.L46
 364:../src/cli.c  ****         intString2[0] = ' ';    // Positive number, add a pad space
 1900              		.loc 1 364 0
 1901 0424 4FF02003 		mov	r3, #32
 1902 0428 3B73     		strb	r3, [r7, #12]
 1903 042a 02E0     		b	.L47
 1904              	.L46:
 365:../src/cli.c  ****     else
 366:../src/cli.c  ****         intString2[0] = '-';    // Negative number, add a negative sign
 1905              		.loc 1 366 0
 1906 042c 4FF02D03 		mov	r3, #45
 1907 0430 3B73     		strb	r3, [r7, #12]
 1908              	.L47:
 367:../src/cli.c  **** 
 368:../src/cli.c  ****     if (strlen(intString1) == 1) {
 1909              		.loc 1 368 0
 1910 0432 07F11803 		add	r3, r7, #24
 1911 0436 1846     		mov	r0, r3
 1912 0438 FFF7FEFF 		bl	strlen
 1913 043c 0346     		mov	r3, r0
 1914 043e 012B     		cmp	r3, #1
 1915 0440 11D1     		bne	.L48
 369:../src/cli.c  ****         intString2[1] = '0';
 1916              		.loc 1 369 0
 1917 0442 4FF03003 		mov	r3, #48
 1918 0446 7B73     		strb	r3, [r7, #13]
 370:../src/cli.c  ****         intString2[2] = '0';
 1919              		.loc 1 370 0
 1920 0448 4FF03003 		mov	r3, #48
 1921 044c BB73     		strb	r3, [r7, #14]
 371:../src/cli.c  ****         intString2[3] = '0';
 1922              		.loc 1 371 0
 1923 044e 4FF03003 		mov	r3, #48
 1924 0452 FB73     		strb	r3, [r7, #15]
 372:../src/cli.c  ****         strcat(intString2, intString1);
 1925              		.loc 1 372 0
 1926 0454 07F10C02 		add	r2, r7, #12
 1927 0458 07F11803 		add	r3, r7, #24
 1928 045c 1046     		mov	r0, r2
 1929 045e 1946     		mov	r1, r3
 1930 0460 FFF7FEFF 		bl	strcat
 1931 0464 32E0     		b	.L49
 1932              	.L48:
 373:../src/cli.c  ****     } else if (strlen(intString1) == 2) {
 1933              		.loc 1 373 0
 1934 0466 07F11803 		add	r3, r7, #24
 1935 046a 1846     		mov	r0, r3
 1936 046c FFF7FEFF 		bl	strlen
 1937 0470 0346     		mov	r3, r0
 1938 0472 022B     		cmp	r3, #2
 1939 0474 0ED1     		bne	.L50
 374:../src/cli.c  ****         intString2[1] = '0';
 1940              		.loc 1 374 0
 1941 0476 4FF03003 		mov	r3, #48
 1942 047a 7B73     		strb	r3, [r7, #13]
 375:../src/cli.c  ****         intString2[2] = '0';
 1943              		.loc 1 375 0
 1944 047c 4FF03003 		mov	r3, #48
 1945 0480 BB73     		strb	r3, [r7, #14]
 376:../src/cli.c  ****         strcat(intString2, intString1);
 1946              		.loc 1 376 0
 1947 0482 07F10C02 		add	r2, r7, #12
 1948 0486 07F11803 		add	r3, r7, #24
 1949 048a 1046     		mov	r0, r2
 1950 048c 1946     		mov	r1, r3
 1951 048e FFF7FEFF 		bl	strcat
 1952 0492 1BE0     		b	.L49
 1953              	.L50:
 377:../src/cli.c  ****     } else if (strlen(intString1) == 3) {
 1954              		.loc 1 377 0
 1955 0494 07F11803 		add	r3, r7, #24
 1956 0498 1846     		mov	r0, r3
 1957 049a FFF7FEFF 		bl	strlen
 1958 049e 0346     		mov	r3, r0
 1959 04a0 032B     		cmp	r3, #3
 1960 04a2 0BD1     		bne	.L51
 378:../src/cli.c  ****         intString2[1] = '0';
 1961              		.loc 1 378 0
 1962 04a4 4FF03003 		mov	r3, #48
 1963 04a8 7B73     		strb	r3, [r7, #13]
 379:../src/cli.c  ****         strcat(intString2, intString1);
 1964              		.loc 1 379 0
 1965 04aa 07F10C02 		add	r2, r7, #12
 1966 04ae 07F11803 		add	r3, r7, #24
 1967 04b2 1046     		mov	r0, r2
 1968 04b4 1946     		mov	r1, r3
 1969 04b6 FFF7FEFF 		bl	strcat
 1970 04ba 07E0     		b	.L49
 1971              	.L51:
 380:../src/cli.c  ****     } else {
 381:../src/cli.c  ****         strcat(intString2, intString1);
 1972              		.loc 1 381 0
 1973 04bc 07F10C02 		add	r2, r7, #12
 1974 04c0 07F11803 		add	r3, r7, #24
 1975 04c4 1046     		mov	r0, r2
 1976 04c6 1946     		mov	r1, r3
 1977 04c8 FFF7FEFF 		bl	strcat
 1978              	.L49:
 382:../src/cli.c  ****     }
 383:../src/cli.c  **** 
 384:../src/cli.c  ****     dpLocation = strlen(intString2) - 3;
 1979              		.loc 1 384 0
 1980 04cc 07F10C03 		add	r3, r7, #12
 1981 04d0 1846     		mov	r0, r3
 1982 04d2 FFF7FEFF 		bl	strlen
 1983 04d6 0346     		mov	r3, r0
 1984 04d8 DBB2     		uxtb	r3, r3
 1985 04da A3F10303 		sub	r3, r3, #3
 1986 04de 87F82730 		strb	r3, [r7, #39]
 385:../src/cli.c  **** 
 386:../src/cli.c  ****     strncpy(floatString, intString2, dpLocation);
 1987              		.loc 1 386 0
 1988 04e2 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 1989 04e6 07F10C02 		add	r2, r7, #12
 1990 04ea 3868     		ldr	r0, [r7, #0]
 1991 04ec 1146     		mov	r1, r2
 1992 04ee 1A46     		mov	r2, r3
 1993 04f0 FFF7FEFF 		bl	strncpy
 387:../src/cli.c  ****     floatString[dpLocation] = '\0';
 1994              		.loc 1 387 0
 1995 04f4 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 1996 04f8 3A68     		ldr	r2, [r7, #0]
 1997 04fa D318     		adds	r3, r2, r3
 1998 04fc 4FF00002 		mov	r2, #0
 1999 0500 1A70     		strb	r2, [r3, #0]
 388:../src/cli.c  ****     strcat(floatString, decimalPoint);
 2000              		.loc 1 388 0
 2001 0502 3868     		ldr	r0, [r7, #0]
 2002 0504 F96A     		ldr	r1, [r7, #44]
 2003 0506 FFF7FEFF 		bl	strcat
 389:../src/cli.c  ****     strcat(floatString, intString2 + dpLocation);
 2004              		.loc 1 389 0
 2005 050a 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 2006 050e 07F10C02 		add	r2, r7, #12
 2007 0512 D318     		adds	r3, r2, r3
 2008 0514 3868     		ldr	r0, [r7, #0]
 2009 0516 1946     		mov	r1, r3
 2010 0518 FFF7FEFF 		bl	strcat
 390:../src/cli.c  **** 
 391:../src/cli.c  ****     return floatString;
 2011              		.loc 1 391 0
 2012 051c 3B68     		ldr	r3, [r7, #0]
 392:../src/cli.c  **** }
 2013              		.loc 1 392 0
 2014 051e 1846     		mov	r0, r3
 2015 0520 07F13007 		add	r7, r7, #48
 2016 0524 BD46     		mov	sp, r7
 2017 0526 80BD     		pop	{r7, pc}
 2018              	.L56:
 2019              		.align	2
 2020              	.L55:
 2021 0528 4C120000 		.word	.LC170
 2022 052c 00000000 		.word	0
 2023 0530 6F12033A 		.word	973279855
 2024 0534 00007A44 		.word	1148846080
 2025              		.cfi_endproc
 2026              	.LFE32:
 2028              		.section	.rodata
 2029 124e 0000     		.align	2
 2030              	.LC171:
 2031 1250 0D0A2320 		.ascii	"\015\012# \000"
 2031      00
 2032              		.text
 2033              		.align	2
 2034              		.thumb
 2035              		.thumb_func
 2037              	cliPrompt:
 2038              	.LFB33:
 393:../src/cli.c  **** 
 394:../src/cli.c  **** static void cliPrompt(void)
 395:../src/cli.c  **** {
 2039              		.loc 1 395 0
 2040              		.cfi_startproc
 2041              		@ args = 0, pretend = 0, frame = 0
 2042              		@ frame_needed = 1, uses_anonymous_args = 0
 2043 0538 80B5     		push	{r7, lr}
 2044              	.LCFI12:
 2045              		.cfi_def_cfa_offset 8
 2046              		.cfi_offset 7, -8
 2047              		.cfi_offset 14, -4
 2048 053a 00AF     		add	r7, sp, #0
 2049              	.LCFI13:
 2050              		.cfi_def_cfa_register 7
 396:../src/cli.c  ****     uartPrint("\r\n# ");
 2051              		.loc 1 396 0
 2052 053c 0148     		ldr	r0, .L58
 2053 053e FFF7FEFF 		bl	uartPrint
 397:../src/cli.c  **** }
 2054              		.loc 1 397 0
 2055 0542 80BD     		pop	{r7, pc}
 2056              	.L59:
 2057              		.align	2
 2058              	.L58:
 2059 0544 50120000 		.word	.LC171
 2060              		.cfi_endproc
 2061              	.LFE33:
 2063              		.align	2
 2064              		.thumb
 2065              		.thumb_func
 2067              	cliCompare:
 2068              	.LFB34:
 398:../src/cli.c  **** 
 399:../src/cli.c  **** static int cliCompare(const void *a, const void *b)
 400:../src/cli.c  **** {
 2069              		.loc 1 400 0
 2070              		.cfi_startproc
 2071              		@ args = 0, pretend = 0, frame = 16
 2072              		@ frame_needed = 1, uses_anonymous_args = 0
 2073 0548 B0B5     		push	{r4, r5, r7, lr}
 2074              	.LCFI14:
 2075              		.cfi_def_cfa_offset 16
 2076              		.cfi_offset 4, -16
 2077              		.cfi_offset 5, -12
 2078              		.cfi_offset 7, -8
 2079              		.cfi_offset 14, -4
 2080 054a 84B0     		sub	sp, sp, #16
 2081              	.LCFI15:
 2082              		.cfi_def_cfa_offset 32
 2083 054c 00AF     		add	r7, sp, #0
 2084              	.LCFI16:
 2085              		.cfi_def_cfa_register 7
 2086 054e 7860     		str	r0, [r7, #4]
 2087 0550 3960     		str	r1, [r7, #0]
 401:../src/cli.c  ****     const clicmd_t *ca = a, *cb = b;
 2088              		.loc 1 401 0
 2089 0552 7B68     		ldr	r3, [r7, #4]
 2090 0554 FB60     		str	r3, [r7, #12]
 2091 0556 3B68     		ldr	r3, [r7, #0]
 2092 0558 BB60     		str	r3, [r7, #8]
 402:../src/cli.c  ****     return strncasecmp(ca->name, cb->name, strlen(cb->name));
 2093              		.loc 1 402 0
 2094 055a FB68     		ldr	r3, [r7, #12]
 2095 055c 1D68     		ldr	r5, [r3, #0]
 2096 055e BB68     		ldr	r3, [r7, #8]
 2097 0560 1C68     		ldr	r4, [r3, #0]
 2098 0562 BB68     		ldr	r3, [r7, #8]
 2099 0564 1B68     		ldr	r3, [r3, #0]
 2100 0566 1846     		mov	r0, r3
 2101 0568 FFF7FEFF 		bl	strlen
 2102 056c 0346     		mov	r3, r0
 2103 056e 2846     		mov	r0, r5
 2104 0570 2146     		mov	r1, r4
 2105 0572 1A46     		mov	r2, r3
 2106 0574 FFF7FEFF 		bl	strncasecmp
 2107 0578 0346     		mov	r3, r0
 403:../src/cli.c  **** }
 2108              		.loc 1 403 0
 2109 057a 1846     		mov	r0, r3
 2110 057c 07F11007 		add	r7, r7, #16
 2111 0580 BD46     		mov	sp, r7
 2112 0582 B0BD     		pop	{r4, r5, r7, pc}
 2113              		.cfi_endproc
 2114              	.LFE34:
 2116              		.section	.rodata
 2117 1255 000000   		.align	2
 2118              	.LC172:
 2119 1258 61757820 		.ascii	"aux %u %u\015\012\000"
 2119      25752025 
 2119      750D0A00 
 2120              		.align	2
 2121              	.LC173:
 2122 1264 496E7661 		.ascii	"Invalid Feature index: must be < %u\015\012\000"
 2122      6C696420 
 2122      46656174 
 2122      75726520 
 2122      696E6465 
 2123              		.text
 2124              		.align	2
 2125              		.thumb
 2126              		.thumb_func
 2128              	cliAux:
 2129              	.LFB35:
 404:../src/cli.c  **** 
 405:../src/cli.c  **** static void cliAux(char *cmdline)
 406:../src/cli.c  **** {
 2130              		.loc 1 406 0
 2131              		.cfi_startproc
 2132              		@ args = 0, pretend = 0, frame = 24
 2133              		@ frame_needed = 1, uses_anonymous_args = 0
 2134 0584 80B5     		push	{r7, lr}
 2135              	.LCFI17:
 2136              		.cfi_def_cfa_offset 8
 2137              		.cfi_offset 7, -8
 2138              		.cfi_offset 14, -4
 2139 0586 86B0     		sub	sp, sp, #24
 2140              	.LCFI18:
 2141              		.cfi_def_cfa_offset 32
 2142 0588 00AF     		add	r7, sp, #0
 2143              	.LCFI19:
 2144              		.cfi_def_cfa_register 7
 2145 058a 7860     		str	r0, [r7, #4]
 407:../src/cli.c  ****     int i, val = 0;
 2146              		.loc 1 407 0
 2147 058c 4FF00003 		mov	r3, #0
 2148 0590 3B61     		str	r3, [r7, #16]
 408:../src/cli.c  ****     uint8_t len;
 409:../src/cli.c  ****     char *ptr;
 410:../src/cli.c  **** 
 411:../src/cli.c  ****     len = strlen(cmdline);
 2149              		.loc 1 411 0
 2150 0592 7868     		ldr	r0, [r7, #4]
 2151 0594 FFF7FEFF 		bl	strlen
 2152 0598 0346     		mov	r3, r0
 2153 059a FB73     		strb	r3, [r7, #15]
 412:../src/cli.c  ****     if (len == 0) {
 2154              		.loc 1 412 0
 2155 059c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2156 059e 002B     		cmp	r3, #0
 2157 05a0 16D1     		bne	.L63
 413:../src/cli.c  ****         // print out aux channel settings
 414:../src/cli.c  ****         for (i = 0; i < CHECKBOXITEMS; i++)
 2158              		.loc 1 414 0
 2159 05a2 4FF00003 		mov	r3, #0
 2160 05a6 7B61     		str	r3, [r7, #20]
 2161 05a8 0EE0     		b	.L64
 2162              	.L65:
 415:../src/cli.c  ****             printf("aux %u %u\r\n", i, cfg.activate[i]);
 2163              		.loc 1 415 0 discriminator 2
 2164 05aa 1C4B     		ldr	r3, .L68
 2165 05ac 7A69     		ldr	r2, [r7, #20]
 2166 05ae 02F11C02 		add	r2, r2, #28
 2167 05b2 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 2168 05b6 1A48     		ldr	r0, .L68+4
 2169 05b8 7969     		ldr	r1, [r7, #20]
 2170 05ba 1A46     		mov	r2, r3
 2171 05bc FFF7FEFF 		bl	tfp_printf
 414:../src/cli.c  ****         for (i = 0; i < CHECKBOXITEMS; i++)
 2172              		.loc 1 414 0 discriminator 2
 2173 05c0 7B69     		ldr	r3, [r7, #20]
 2174 05c2 03F10103 		add	r3, r3, #1
 2175 05c6 7B61     		str	r3, [r7, #20]
 2176              	.L64:
 414:../src/cli.c  ****         for (i = 0; i < CHECKBOXITEMS; i++)
 2177              		.loc 1 414 0 is_stmt 0 discriminator 1
 2178 05c8 7B69     		ldr	r3, [r7, #20]
 2179 05ca 132B     		cmp	r3, #19
 2180 05cc EDDD     		ble	.L65
 414:../src/cli.c  ****         for (i = 0; i < CHECKBOXITEMS; i++)
 2181              		.loc 1 414 0
 2182 05ce 20E0     		b	.L62
 2183              	.L63:
 416:../src/cli.c  ****     } else {
 417:../src/cli.c  ****         ptr = cmdline;
 2184              		.loc 1 417 0 is_stmt 1
 2185 05d0 7B68     		ldr	r3, [r7, #4]
 2186 05d2 BB60     		str	r3, [r7, #8]
 418:../src/cli.c  ****         i = atoi(ptr);
 2187              		.loc 1 418 0
 2188 05d4 B868     		ldr	r0, [r7, #8]
 2189 05d6 FFF7FEFF 		bl	atoi
 2190 05da 7861     		str	r0, [r7, #20]
 419:../src/cli.c  ****         if (i < CHECKBOXITEMS) {
 2191              		.loc 1 419 0
 2192 05dc 7B69     		ldr	r3, [r7, #20]
 2193 05de 132B     		cmp	r3, #19
 2194 05e0 12DC     		bgt	.L67
 420:../src/cli.c  ****             ptr = strchr(cmdline, ' ');
 2195              		.loc 1 420 0
 2196 05e2 7868     		ldr	r0, [r7, #4]
 2197 05e4 4FF02001 		mov	r1, #32
 2198 05e8 FFF7FEFF 		bl	strchr
 2199 05ec B860     		str	r0, [r7, #8]
 421:../src/cli.c  ****             val = atoi(ptr);
 2200              		.loc 1 421 0
 2201 05ee B868     		ldr	r0, [r7, #8]
 2202 05f0 FFF7FEFF 		bl	atoi
 2203 05f4 3861     		str	r0, [r7, #16]
 422:../src/cli.c  ****             cfg.activate[i] = val;
 2204              		.loc 1 422 0
 2205 05f6 3B69     		ldr	r3, [r7, #16]
 2206 05f8 99B2     		uxth	r1, r3
 2207 05fa 084B     		ldr	r3, .L68
 2208 05fc 7A69     		ldr	r2, [r7, #20]
 2209 05fe 02F11C02 		add	r2, r2, #28
 2210 0602 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 2211 0606 04E0     		b	.L62
 2212              	.L67:
 423:../src/cli.c  ****         } else {
 424:../src/cli.c  ****             printf("Invalid Feature index: must be < %u\r\n", CHECKBOXITEMS);
 2213              		.loc 1 424 0
 2214 0608 0648     		ldr	r0, .L68+8
 2215 060a 4FF01401 		mov	r1, #20
 2216 060e FFF7FEFF 		bl	tfp_printf
 2217              	.L62:
 425:../src/cli.c  ****         }
 426:../src/cli.c  ****     }
 427:../src/cli.c  **** }
 2218              		.loc 1 427 0
 2219 0612 07F11807 		add	r7, r7, #24
 2220 0616 BD46     		mov	sp, r7
 2221 0618 80BD     		pop	{r7, pc}
 2222              	.L69:
 2223 061a 00BF     		.align	2
 2224              	.L68:
 2225 061c 00000000 		.word	cfg
 2226 0620 58120000 		.word	.LC172
 2227 0624 64120000 		.word	.LC173
 2228              		.cfi_endproc
 2229              	.LFE35:
 2231              		.section	.rodata
 2232 128a 0000     		.align	2
 2233              	.LC174:
 2234 128c 43757374 		.ascii	"Custom mixer: \015\012Motor\011Thr\011Roll\011Pitch"
 2234      6F6D206D 
 2234      69786572 
 2234      3A200D0A 
 2234      4D6F746F 
 2235 12b0 09596177 		.ascii	"\011Yaw\015\012\000"
 2235      0D0A00
 2236              		.global	__aeabi_fcmpeq
 2237 12b7 00       		.align	2
 2238              	.LC175:
 2239 12b8 2325643A 		.ascii	"#%d:\011\000"
 2239      0900
 2240 12be 0000     		.align	2
 2241              	.LC176:
 2242 12c0 25730900 		.ascii	"%s\011\000"
 2243              		.align	2
 2244              	.LC177:
 2245 12c4 25730D0A 		.ascii	"%s\015\012\000"
 2245      00
 2246 12c9 000000   		.align	2
 2247              	.LC178:
 2248 12cc 53616E69 		.ascii	"Sanity check:\011\000"
 2248      74792063 
 2248      6865636B 
 2248      3A0900
 2249 12db 00       		.align	2
 2250              	.LC179:
 2251 12dc 4E470900 		.ascii	"NG\011\000"
 2252              		.align	2
 2253              	.LC180:
 2254 12e0 4F4B0900 		.ascii	"OK\011\000"
 2255              		.align	2
 2256              	.LC181:
 2257 12e4 0D0A00   		.ascii	"\015\012\000"
 2258 12e7 00       		.align	2
 2259              	.LC182:
 2260 12e8 72657365 		.ascii	"reset\000"
 2260      7400
 2261 12ee 0000     		.align	2
 2262              	.LC183:
 2263 12f0 6C6F6164 		.ascii	"load\000"
 2263      00
 2264 12f5 000000   		.align	2
 2265              	.LC184:
 2266 12f8 496E7661 		.ascii	"Invalid mixer type...\015\012\000"
 2266      6C696420 
 2266      6D697865 
 2266      72207479 
 2266      70652E2E 
 2267              		.align	2
 2268              	.LC185:
 2269 1310 4C6F6164 		.ascii	"Loaded %s mix...\015\012\000"
 2269      65642025 
 2269      73206D69 
 2269      782E2E2E 
 2269      0D0A00
 2270 1323 00       		.align	2
 2271              	.LC186:
 2272 1324 57726F6E 		.ascii	"Wrong number of arguments, needs idx thr roll pitch"
 2272      67206E75 
 2272      6D626572 
 2272      206F6620 
 2272      61726775 
 2273 1357 20796177 		.ascii	" yaw\015\012\000"
 2273      0D0A00
 2274 135e 0000     		.align	2
 2275              	.LC187:
 2276 1360 4D6F746F 		.ascii	"Motor number must be between 1 and %d\015\012\000"
 2276      72206E75 
 2276      6D626572 
 2276      206D7573 
 2276      74206265 
 2277              		.text
 2278              		.align	2
 2279              		.thumb
 2280              		.thumb_func
 2282              	cliCMix:
 2283              	.LFB36:
 428:../src/cli.c  **** 
 429:../src/cli.c  **** static void cliCMix(char *cmdline)
 430:../src/cli.c  **** {
 2284              		.loc 1 430 0
 2285              		.cfi_startproc
 2286              		@ args = 0, pretend = 0, frame = 56
 2287              		@ frame_needed = 1, uses_anonymous_args = 0
 2288 0628 80B5     		push	{r7, lr}
 2289              	.LCFI20:
 2290              		.cfi_def_cfa_offset 8
 2291              		.cfi_offset 7, -8
 2292              		.cfi_offset 14, -4
 2293 062a 8EB0     		sub	sp, sp, #56
 2294              	.LCFI21:
 2295              		.cfi_def_cfa_offset 64
 2296 062c 00AF     		add	r7, sp, #0
 2297              	.LCFI22:
 2298              		.cfi_def_cfa_register 7
 2299 062e 7860     		str	r0, [r7, #4]
 431:../src/cli.c  ****     int i, check = 0;
 2300              		.loc 1 431 0
 2301 0630 4FF00003 		mov	r3, #0
 2302 0634 3B63     		str	r3, [r7, #48]
 432:../src/cli.c  ****     int num_motors = 0;
 2303              		.loc 1 432 0
 2304 0636 4FF00003 		mov	r3, #0
 2305 063a FB62     		str	r3, [r7, #44]
 433:../src/cli.c  ****     uint8_t len;
 434:../src/cli.c  ****     char buf[16];
 435:../src/cli.c  ****     float mixsum[3];
 436:../src/cli.c  ****     char *ptr;
 437:../src/cli.c  **** 
 438:../src/cli.c  ****     len = strlen(cmdline);
 2306              		.loc 1 438 0
 2307 063c 7868     		ldr	r0, [r7, #4]
 2308 063e FFF7FEFF 		bl	strlen
 2309 0642 0346     		mov	r3, r0
 2310 0644 87F82730 		strb	r3, [r7, #39]
 439:../src/cli.c  **** 
 440:../src/cli.c  ****     if (len == 0) {
 2311              		.loc 1 440 0
 2312 0648 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 2313 064c 002B     		cmp	r3, #0
 2314 064e 40F0E280 		bne	.L71
 441:../src/cli.c  ****         uartPrint("Custom mixer: \r\nMotor\tThr\tRoll\tPitch\tYaw\r\n");
 2315              		.loc 1 441 0
 2316 0652 A648     		ldr	r0, .L104
 2317 0654 FFF7FEFF 		bl	uartPrint
 442:../src/cli.c  ****         for (i = 0; i < MAX_MOTORS; i++) {
 2318              		.loc 1 442 0
 2319 0658 4FF00003 		mov	r3, #0
 2320 065c 7B63     		str	r3, [r7, #52]
 2321 065e 6BE0     		b	.L72
 2322              	.L76:
 443:../src/cli.c  ****             if (mcfg.customMixer[i].throttle == 0.0f)
 2323              		.loc 1 443 0
 2324 0660 A34A     		ldr	r2, .L104+4
 2325 0662 7B6B     		ldr	r3, [r7, #52]
 2326 0664 03F10103 		add	r3, r3, #1
 2327 0668 4FEA0313 		lsl	r3, r3, #4
 2328 066c D318     		adds	r3, r2, r3
 2329 066e 1B68     		ldr	r3, [r3, #0]	@ float
 2330 0670 1846     		mov	r0, r3
 2331 0672 AD49     		ldr	r1, .L104+60	@ float
 2332 0674 FFF7FEFF 		bl	__aeabi_fcmpeq
 2333 0678 0346     		mov	r3, r0
 2334 067a 002B     		cmp	r3, #0
 2335 067c 60D1     		bne	.L102
 444:../src/cli.c  ****                 break;
 445:../src/cli.c  ****             num_motors++;
 2336              		.loc 1 445 0
 2337 067e FB6A     		ldr	r3, [r7, #44]
 2338 0680 03F10103 		add	r3, r3, #1
 2339 0684 FB62     		str	r3, [r7, #44]
 446:../src/cli.c  ****             printf("#%d:\t", i + 1);
 2340              		.loc 1 446 0
 2341 0686 7B6B     		ldr	r3, [r7, #52]
 2342 0688 03F10103 		add	r3, r3, #1
 2343 068c 9948     		ldr	r0, .L104+8
 2344 068e 1946     		mov	r1, r3
 2345 0690 FFF7FEFF 		bl	tfp_printf
 447:../src/cli.c  ****             printf("%s\t", ftoa(mcfg.customMixer[i].throttle, buf));
 2346              		.loc 1 447 0
 2347 0694 964A     		ldr	r2, .L104+4
 2348 0696 7B6B     		ldr	r3, [r7, #52]
 2349 0698 03F10103 		add	r3, r3, #1
 2350 069c 4FEA0313 		lsl	r3, r3, #4
 2351 06a0 D318     		adds	r3, r2, r3
 2352 06a2 1A68     		ldr	r2, [r3, #0]	@ float
 2353 06a4 07F11403 		add	r3, r7, #20
 2354 06a8 1046     		mov	r0, r2
 2355 06aa 1946     		mov	r1, r3
 2356 06ac FFF774FE 		bl	ftoa
 2357 06b0 0346     		mov	r3, r0
 2358 06b2 9148     		ldr	r0, .L104+12
 2359 06b4 1946     		mov	r1, r3
 2360 06b6 FFF7FEFF 		bl	tfp_printf
 448:../src/cli.c  ****             printf("%s\t", ftoa(mcfg.customMixer[i].roll, buf));
 2361              		.loc 1 448 0
 2362 06ba 8D4A     		ldr	r2, .L104+4
 2363 06bc 7B6B     		ldr	r3, [r7, #52]
 2364 06be 03F10103 		add	r3, r3, #1
 2365 06c2 4FEA0313 		lsl	r3, r3, #4
 2366 06c6 D318     		adds	r3, r2, r3
 2367 06c8 03F10403 		add	r3, r3, #4
 2368 06cc 1A68     		ldr	r2, [r3, #0]	@ float
 2369 06ce 07F11403 		add	r3, r7, #20
 2370 06d2 1046     		mov	r0, r2
 2371 06d4 1946     		mov	r1, r3
 2372 06d6 FFF75FFE 		bl	ftoa
 2373 06da 0346     		mov	r3, r0
 2374 06dc 8648     		ldr	r0, .L104+12
 2375 06de 1946     		mov	r1, r3
 2376 06e0 FFF7FEFF 		bl	tfp_printf
 449:../src/cli.c  ****             printf("%s\t", ftoa(mcfg.customMixer[i].pitch, buf));
 2377              		.loc 1 449 0
 2378 06e4 824A     		ldr	r2, .L104+4
 2379 06e6 7B6B     		ldr	r3, [r7, #52]
 2380 06e8 4FEA0313 		lsl	r3, r3, #4
 2381 06ec D318     		adds	r3, r2, r3
 2382 06ee 03F11803 		add	r3, r3, #24
 2383 06f2 1A68     		ldr	r2, [r3, #0]	@ float
 2384 06f4 07F11403 		add	r3, r7, #20
 2385 06f8 1046     		mov	r0, r2
 2386 06fa 1946     		mov	r1, r3
 2387 06fc FFF74CFE 		bl	ftoa
 2388 0700 0346     		mov	r3, r0
 2389 0702 7D48     		ldr	r0, .L104+12
 2390 0704 1946     		mov	r1, r3
 2391 0706 FFF7FEFF 		bl	tfp_printf
 450:../src/cli.c  ****             printf("%s\r\n", ftoa(mcfg.customMixer[i].yaw, buf));
 2392              		.loc 1 450 0
 2393 070a 794A     		ldr	r2, .L104+4
 2394 070c 7B6B     		ldr	r3, [r7, #52]
 2395 070e 4FEA0313 		lsl	r3, r3, #4
 2396 0712 D318     		adds	r3, r2, r3
 2397 0714 03F11C03 		add	r3, r3, #28
 2398 0718 1A68     		ldr	r2, [r3, #0]	@ float
 2399 071a 07F11403 		add	r3, r7, #20
 2400 071e 1046     		mov	r0, r2
 2401 0720 1946     		mov	r1, r3
 2402 0722 FFF739FE 		bl	ftoa
 2403 0726 0346     		mov	r3, r0
 2404 0728 7448     		ldr	r0, .L104+16
 2405 072a 1946     		mov	r1, r3
 2406 072c FFF7FEFF 		bl	tfp_printf
 442:../src/cli.c  ****         for (i = 0; i < MAX_MOTORS; i++) {
 2407              		.loc 1 442 0
 2408 0730 7B6B     		ldr	r3, [r7, #52]
 2409 0732 03F10103 		add	r3, r3, #1
 2410 0736 7B63     		str	r3, [r7, #52]
 2411              	.L72:
 442:../src/cli.c  ****         for (i = 0; i < MAX_MOTORS; i++) {
 2412              		.loc 1 442 0 is_stmt 0 discriminator 1
 2413 0738 7B6B     		ldr	r3, [r7, #52]
 2414 073a 0B2B     		cmp	r3, #11
 2415 073c 90DD     		ble	.L76
 2416 073e 00E0     		b	.L75
 2417              	.L102:
 444:../src/cli.c  ****                 break;
 2418              		.loc 1 444 0 is_stmt 1
 2419 0740 00BF     		nop
 2420              	.L75:
 451:../src/cli.c  ****         }
 452:../src/cli.c  ****         mixsum[0] = mixsum[1] = mixsum[2] = 0.0f;
 2421              		.loc 1 452 0
 2422 0742 794B     		ldr	r3, .L104+60	@ float
 2423 0744 3B61     		str	r3, [r7, #16]	@ float
 2424 0746 3B69     		ldr	r3, [r7, #16]	@ float
 2425 0748 FB60     		str	r3, [r7, #12]	@ float
 2426 074a FB68     		ldr	r3, [r7, #12]	@ float
 2427 074c BB60     		str	r3, [r7, #8]	@ float
 453:../src/cli.c  ****         for (i = 0; i < num_motors; i++) {
 2428              		.loc 1 453 0
 2429 074e 4FF00003 		mov	r3, #0
 2430 0752 7B63     		str	r3, [r7, #52]
 2431 0754 32E0     		b	.L77
 2432              	.L78:
 454:../src/cli.c  ****             mixsum[0] += mcfg.customMixer[i].roll;
 2433              		.loc 1 454 0 discriminator 2
 2434 0756 BA68     		ldr	r2, [r7, #8]	@ float
 2435 0758 6549     		ldr	r1, .L104+4
 2436 075a 7B6B     		ldr	r3, [r7, #52]
 2437 075c 03F10103 		add	r3, r3, #1
 2438 0760 4FEA0313 		lsl	r3, r3, #4
 2439 0764 CB18     		adds	r3, r1, r3
 2440 0766 03F10403 		add	r3, r3, #4
 2441 076a 1B68     		ldr	r3, [r3, #0]	@ float
 2442 076c 1046     		mov	r0, r2
 2443 076e 1946     		mov	r1, r3
 2444 0770 FFF7FEFF 		bl	__aeabi_fadd
 2445 0774 0346     		mov	r3, r0
 2446 0776 BB60     		str	r3, [r7, #8]	@ float
 455:../src/cli.c  ****             mixsum[1] += mcfg.customMixer[i].pitch;
 2447              		.loc 1 455 0 discriminator 2
 2448 0778 FA68     		ldr	r2, [r7, #12]	@ float
 2449 077a 5D49     		ldr	r1, .L104+4
 2450 077c 7B6B     		ldr	r3, [r7, #52]
 2451 077e 4FEA0313 		lsl	r3, r3, #4
 2452 0782 CB18     		adds	r3, r1, r3
 2453 0784 03F11803 		add	r3, r3, #24
 2454 0788 1B68     		ldr	r3, [r3, #0]	@ float
 2455 078a 1046     		mov	r0, r2
 2456 078c 1946     		mov	r1, r3
 2457 078e FFF7FEFF 		bl	__aeabi_fadd
 2458 0792 0346     		mov	r3, r0
 2459 0794 FB60     		str	r3, [r7, #12]	@ float
 456:../src/cli.c  ****             mixsum[2] += mcfg.customMixer[i].yaw;
 2460              		.loc 1 456 0 discriminator 2
 2461 0796 3A69     		ldr	r2, [r7, #16]	@ float
 2462 0798 5549     		ldr	r1, .L104+4
 2463 079a 7B6B     		ldr	r3, [r7, #52]
 2464 079c 4FEA0313 		lsl	r3, r3, #4
 2465 07a0 CB18     		adds	r3, r1, r3
 2466 07a2 03F11C03 		add	r3, r3, #28
 2467 07a6 1B68     		ldr	r3, [r3, #0]	@ float
 2468 07a8 1046     		mov	r0, r2
 2469 07aa 1946     		mov	r1, r3
 2470 07ac FFF7FEFF 		bl	__aeabi_fadd
 2471 07b0 0346     		mov	r3, r0
 2472 07b2 3B61     		str	r3, [r7, #16]	@ float
 453:../src/cli.c  ****         for (i = 0; i < num_motors; i++) {
 2473              		.loc 1 453 0 discriminator 2
 2474 07b4 7B6B     		ldr	r3, [r7, #52]
 2475 07b6 03F10103 		add	r3, r3, #1
 2476 07ba 7B63     		str	r3, [r7, #52]
 2477              	.L77:
 453:../src/cli.c  ****         for (i = 0; i < num_motors; i++) {
 2478              		.loc 1 453 0 is_stmt 0 discriminator 1
 2479 07bc 7A6B     		ldr	r2, [r7, #52]
 2480 07be FB6A     		ldr	r3, [r7, #44]
 2481 07c0 9A42     		cmp	r2, r3
 2482 07c2 C8DB     		blt	.L78
 457:../src/cli.c  ****         }
 458:../src/cli.c  ****         uartPrint("Sanity check:\t");
 2483              		.loc 1 458 0 is_stmt 1
 2484 07c4 4E48     		ldr	r0, .L104+20
 2485 07c6 FFF7FEFF 		bl	uartPrint
 459:../src/cli.c  ****         for (i = 0; i < 3; i++)
 2486              		.loc 1 459 0
 2487 07ca 4FF00003 		mov	r3, #0
 2488 07ce 7B63     		str	r3, [r7, #52]
 2489 07d0 1AE0     		b	.L79
 2490              	.L83:
 460:../src/cli.c  ****             uartPrint(fabs(mixsum[i]) > 0.01f ? "NG\t" : "OK\t");
 2491              		.loc 1 460 0
 2492 07d2 7B6B     		ldr	r3, [r7, #52]
 2493 07d4 4FEA8303 		lsl	r3, r3, #2
 2494 07d8 07F13802 		add	r2, r7, #56
 2495 07dc D318     		adds	r3, r2, r3
 2496 07de 53F8303C 		ldr	r3, [r3, #-48]	@ float
 2497 07e2 23F00043 		bic	r3, r3, #-2147483648
 2498 07e6 1846     		mov	r0, r3
 2499 07e8 5049     		ldr	r1, .L104+64	@ float
 2500 07ea FFF7FEFF 		bl	__aeabi_fcmpgt
 2501 07ee 0346     		mov	r3, r0
 2502 07f0 002B     		cmp	r3, #0
 2503 07f2 01D0     		beq	.L101
 2504              	.L100:
 2505              		.loc 1 460 0 is_stmt 0 discriminator 1
 2506 07f4 434B     		ldr	r3, .L104+24
 2507 07f6 00E0     		b	.L82
 2508              	.L101:
 2509              		.loc 1 460 0 discriminator 2
 2510 07f8 434B     		ldr	r3, .L104+28
 2511              	.L82:
 2512              		.loc 1 460 0 discriminator 3
 2513 07fa 1846     		mov	r0, r3
 2514 07fc FFF7FEFF 		bl	uartPrint
 459:../src/cli.c  ****         for (i = 0; i < 3; i++)
 2515              		.loc 1 459 0 is_stmt 1 discriminator 3
 2516 0800 7B6B     		ldr	r3, [r7, #52]
 2517 0802 03F10103 		add	r3, r3, #1
 2518 0806 7B63     		str	r3, [r7, #52]
 2519              	.L79:
 459:../src/cli.c  ****         for (i = 0; i < 3; i++)
 2520              		.loc 1 459 0 is_stmt 0 discriminator 1
 2521 0808 7B6B     		ldr	r3, [r7, #52]
 2522 080a 022B     		cmp	r3, #2
 2523 080c E1DD     		ble	.L83
 461:../src/cli.c  ****         uartPrint("\r\n");
 2524              		.loc 1 461 0 is_stmt 1
 2525 080e 3F48     		ldr	r0, .L104+32
 2526 0810 FFF7FEFF 		bl	uartPrint
 2527 0814 22E1     		b	.L70
 2528              	.L71:
 462:../src/cli.c  ****         return;
 463:../src/cli.c  ****     } else if (strncasecmp(cmdline, "reset", 5) == 0) {
 2529              		.loc 1 463 0
 2530 0816 7868     		ldr	r0, [r7, #4]
 2531 0818 3D49     		ldr	r1, .L104+36
 2532 081a 4FF00502 		mov	r2, #5
 2533 081e FFF7FEFF 		bl	strncasecmp
 2534 0822 0346     		mov	r3, r0
 2535 0824 002B     		cmp	r3, #0
 2536 0826 14D1     		bne	.L85
 464:../src/cli.c  ****         // erase custom mixer
 465:../src/cli.c  ****         for (i = 0; i < MAX_MOTORS; i++)
 2537              		.loc 1 465 0
 2538 0828 4FF00003 		mov	r3, #0
 2539 082c 7B63     		str	r3, [r7, #52]
 2540 082e 0CE0     		b	.L86
 2541              	.L87:
 466:../src/cli.c  ****             mcfg.customMixer[i].throttle = 0.0f;
 2542              		.loc 1 466 0 discriminator 2
 2543 0830 2F4A     		ldr	r2, .L104+4
 2544 0832 7B6B     		ldr	r3, [r7, #52]
 2545 0834 03F10103 		add	r3, r3, #1
 2546 0838 4FEA0313 		lsl	r3, r3, #4
 2547 083c D318     		adds	r3, r2, r3
 2548 083e 3A4A     		ldr	r2, .L104+60	@ float
 2549 0840 1A60     		str	r2, [r3, #0]	@ float
 465:../src/cli.c  ****         for (i = 0; i < MAX_MOTORS; i++)
 2550              		.loc 1 465 0 discriminator 2
 2551 0842 7B6B     		ldr	r3, [r7, #52]
 2552 0844 03F10103 		add	r3, r3, #1
 2553 0848 7B63     		str	r3, [r7, #52]
 2554              	.L86:
 465:../src/cli.c  ****         for (i = 0; i < MAX_MOTORS; i++)
 2555              		.loc 1 465 0 is_stmt 0 discriminator 1
 2556 084a 7B6B     		ldr	r3, [r7, #52]
 2557 084c 0B2B     		cmp	r3, #11
 2558 084e EFDD     		ble	.L87
 465:../src/cli.c  ****         for (i = 0; i < MAX_MOTORS; i++)
 2559              		.loc 1 465 0
 2560 0850 04E1     		b	.L70
 2561              	.L85:
 467:../src/cli.c  ****     } else if (strncasecmp(cmdline, "load", 4) == 0) {
 2562              		.loc 1 467 0 is_stmt 1
 2563 0852 7868     		ldr	r0, [r7, #4]
 2564 0854 2F49     		ldr	r1, .L104+40
 2565 0856 4FF00402 		mov	r2, #4
 2566 085a FFF7FEFF 		bl	strncasecmp
 2567 085e 0346     		mov	r3, r0
 2568 0860 002B     		cmp	r3, #0
 2569 0862 65D1     		bne	.L89
 468:../src/cli.c  ****         ptr = strchr(cmdline, ' ');
 2570              		.loc 1 468 0
 2571 0864 7868     		ldr	r0, [r7, #4]
 2572 0866 4FF02001 		mov	r1, #32
 2573 086a FFF7FEFF 		bl	strchr
 2574 086e B862     		str	r0, [r7, #40]
 469:../src/cli.c  ****         if (ptr) {
 2575              		.loc 1 469 0
 2576 0870 BB6A     		ldr	r3, [r7, #40]
 2577 0872 002B     		cmp	r3, #0
 2578 0874 00F0F180 		beq	.L103
 470:../src/cli.c  ****             len = strlen(++ptr);
 2579              		.loc 1 470 0
 2580 0878 BB6A     		ldr	r3, [r7, #40]
 2581 087a 03F10103 		add	r3, r3, #1
 2582 087e BB62     		str	r3, [r7, #40]
 2583 0880 B86A     		ldr	r0, [r7, #40]
 2584 0882 FFF7FEFF 		bl	strlen
 2585 0886 0346     		mov	r3, r0
 2586 0888 87F82730 		strb	r3, [r7, #39]
 471:../src/cli.c  ****             for (i = 0; ; i++) {
 2587              		.loc 1 471 0
 2588 088c 4FF00003 		mov	r3, #0
 2589 0890 7B63     		str	r3, [r7, #52]
 2590              	.L93:
 472:../src/cli.c  ****                 if (mixerNames[i] == NULL) {
 2591              		.loc 1 472 0
 2592 0892 214B     		ldr	r3, .L104+44
 2593 0894 7A6B     		ldr	r2, [r7, #52]
 2594 0896 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2595 089a 002B     		cmp	r3, #0
 2596 089c 03D1     		bne	.L91
 473:../src/cli.c  ****                     uartPrint("Invalid mixer type...\r\n");
 2597              		.loc 1 473 0
 2598 089e 1F48     		ldr	r0, .L104+48
 2599 08a0 FFF7FEFF 		bl	uartPrint
 474:../src/cli.c  ****                     break;
 2600              		.loc 1 474 0
 2601 08a4 DAE0     		b	.L70
 2602              	.L91:
 475:../src/cli.c  ****                 }
 476:../src/cli.c  ****                 if (strncasecmp(ptr, mixerNames[i], len) == 0) {
 2603              		.loc 1 476 0
 2604 08a6 1C4B     		ldr	r3, .L104+44
 2605 08a8 7A6B     		ldr	r2, [r7, #52]
 2606 08aa 53F82220 		ldr	r2, [r3, r2, lsl #2]
 2607 08ae 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 2608 08b2 B86A     		ldr	r0, [r7, #40]
 2609 08b4 1146     		mov	r1, r2
 2610 08b6 1A46     		mov	r2, r3
 2611 08b8 FFF7FEFF 		bl	strncasecmp
 2612 08bc 0346     		mov	r3, r0
 2613 08be 002B     		cmp	r3, #0
 2614 08c0 0FD1     		bne	.L92
 477:../src/cli.c  ****                     mixerLoadMix(i);
 2615              		.loc 1 477 0
 2616 08c2 786B     		ldr	r0, [r7, #52]
 2617 08c4 FFF7FEFF 		bl	mixerLoadMix
 478:../src/cli.c  ****                     printf("Loaded %s mix...\r\n", mixerNames[i]);
 2618              		.loc 1 478 0
 2619 08c8 134B     		ldr	r3, .L104+44
 2620 08ca 7A6B     		ldr	r2, [r7, #52]
 2621 08cc 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2622 08d0 1348     		ldr	r0, .L104+52
 2623 08d2 1946     		mov	r1, r3
 2624 08d4 FFF7FEFF 		bl	tfp_printf
 479:../src/cli.c  ****                     cliCMix("");
 2625              		.loc 1 479 0
 2626 08d8 1248     		ldr	r0, .L104+56
 2627 08da FFF7A5FE 		bl	cliCMix
 480:../src/cli.c  ****                     break;
 2628              		.loc 1 480 0
 2629 08de 00BF     		nop
 2630 08e0 BCE0     		b	.L70
 2631              	.L92:
 471:../src/cli.c  ****             for (i = 0; ; i++) {
 2632              		.loc 1 471 0
 2633 08e2 7B6B     		ldr	r3, [r7, #52]
 2634 08e4 03F10103 		add	r3, r3, #1
 2635 08e8 7B63     		str	r3, [r7, #52]
 481:../src/cli.c  ****                 }
 482:../src/cli.c  ****             }
 2636              		.loc 1 482 0
 2637 08ea D2E7     		b	.L93
 2638              	.L105:
 2639              		.align	2
 2640              	.L104:
 2641 08ec 8C120000 		.word	.LC174
 2642 08f0 00000000 		.word	mcfg
 2643 08f4 B8120000 		.word	.LC175
 2644 08f8 C0120000 		.word	.LC176
 2645 08fc C4120000 		.word	.LC177
 2646 0900 CC120000 		.word	.LC178
 2647 0904 DC120000 		.word	.LC179
 2648 0908 E0120000 		.word	.LC180
 2649 090c E4120000 		.word	.LC181
 2650 0910 E8120000 		.word	.LC182
 2651 0914 F0120000 		.word	.LC183
 2652 0918 00000000 		.word	mixerNames
 2653 091c F8120000 		.word	.LC184
 2654 0920 10130000 		.word	.LC185
 2655 0924 E4010000 		.word	.LC35
 2656 0928 00000000 		.word	0
 2657 092c 0AD7233C 		.word	1008981770
 2658              	.L89:
 483:../src/cli.c  ****         }
 484:../src/cli.c  ****     } else {
 485:../src/cli.c  ****         ptr = cmdline;
 2659              		.loc 1 485 0
 2660 0930 7B68     		ldr	r3, [r7, #4]
 2661 0932 BB62     		str	r3, [r7, #40]
 486:../src/cli.c  ****         i = atoi(ptr); // get motor number
 2662              		.loc 1 486 0
 2663 0934 B86A     		ldr	r0, [r7, #40]
 2664 0936 FFF7FEFF 		bl	atoi
 2665 093a 7863     		str	r0, [r7, #52]
 487:../src/cli.c  ****         if (--i < MAX_MOTORS) {
 2666              		.loc 1 487 0
 2667 093c 7B6B     		ldr	r3, [r7, #52]
 2668 093e 03F1FF33 		add	r3, r3, #-1
 2669 0942 7B63     		str	r3, [r7, #52]
 2670 0944 7B6B     		ldr	r3, [r7, #52]
 2671 0946 0B2B     		cmp	r3, #11
 2672 0948 00F38180 		bgt	.L94
 488:../src/cli.c  ****             ptr = strchr(ptr, ' ');
 2673              		.loc 1 488 0
 2674 094c B86A     		ldr	r0, [r7, #40]
 2675 094e 4FF02001 		mov	r1, #32
 2676 0952 FFF7FEFF 		bl	strchr
 2677 0956 B862     		str	r0, [r7, #40]
 489:../src/cli.c  ****             if (ptr) {
 2678              		.loc 1 489 0
 2679 0958 BB6A     		ldr	r3, [r7, #40]
 2680 095a 002B     		cmp	r3, #0
 2681 095c 13D0     		beq	.L95
 490:../src/cli.c  ****                 mcfg.customMixer[i].throttle = _atof(++ptr);
 2682              		.loc 1 490 0
 2683 095e BB6A     		ldr	r3, [r7, #40]
 2684 0960 03F10103 		add	r3, r3, #1
 2685 0964 BB62     		str	r3, [r7, #40]
 2686 0966 B86A     		ldr	r0, [r7, #40]
 2687 0968 FFF7AEFB 		bl	_atof
 2688 096c 0246     		mov	r2, r0
 2689 096e 3D49     		ldr	r1, .L106
 2690 0970 7B6B     		ldr	r3, [r7, #52]
 2691 0972 03F10103 		add	r3, r3, #1
 2692 0976 4FEA0313 		lsl	r3, r3, #4
 2693 097a CB18     		adds	r3, r1, r3
 2694 097c 1A60     		str	r2, [r3, #0]	@ float
 491:../src/cli.c  ****                 check++;
 2695              		.loc 1 491 0
 2696 097e 3B6B     		ldr	r3, [r7, #48]
 2697 0980 03F10103 		add	r3, r3, #1
 2698 0984 3B63     		str	r3, [r7, #48]
 2699              	.L95:
 492:../src/cli.c  ****             }
 493:../src/cli.c  ****             ptr = strchr(ptr, ' ');
 2700              		.loc 1 493 0
 2701 0986 B86A     		ldr	r0, [r7, #40]
 2702 0988 4FF02001 		mov	r1, #32
 2703 098c FFF7FEFF 		bl	strchr
 2704 0990 B862     		str	r0, [r7, #40]
 494:../src/cli.c  ****             if (ptr) {
 2705              		.loc 1 494 0
 2706 0992 BB6A     		ldr	r3, [r7, #40]
 2707 0994 002B     		cmp	r3, #0
 2708 0996 15D0     		beq	.L96
 495:../src/cli.c  ****                 mcfg.customMixer[i].roll = _atof(++ptr);
 2709              		.loc 1 495 0
 2710 0998 BB6A     		ldr	r3, [r7, #40]
 2711 099a 03F10103 		add	r3, r3, #1
 2712 099e BB62     		str	r3, [r7, #40]
 2713 09a0 B86A     		ldr	r0, [r7, #40]
 2714 09a2 FFF791FB 		bl	_atof
 2715 09a6 0246     		mov	r2, r0
 2716 09a8 2E49     		ldr	r1, .L106
 2717 09aa 7B6B     		ldr	r3, [r7, #52]
 2718 09ac 03F10103 		add	r3, r3, #1
 2719 09b0 4FEA0313 		lsl	r3, r3, #4
 2720 09b4 CB18     		adds	r3, r1, r3
 2721 09b6 03F10403 		add	r3, r3, #4
 2722 09ba 1A60     		str	r2, [r3, #0]	@ float
 496:../src/cli.c  ****                 check++;
 2723              		.loc 1 496 0
 2724 09bc 3B6B     		ldr	r3, [r7, #48]
 2725 09be 03F10103 		add	r3, r3, #1
 2726 09c2 3B63     		str	r3, [r7, #48]
 2727              	.L96:
 497:../src/cli.c  ****             }
 498:../src/cli.c  ****             ptr = strchr(ptr, ' ');
 2728              		.loc 1 498 0
 2729 09c4 B86A     		ldr	r0, [r7, #40]
 2730 09c6 4FF02001 		mov	r1, #32
 2731 09ca FFF7FEFF 		bl	strchr
 2732 09ce B862     		str	r0, [r7, #40]
 499:../src/cli.c  ****             if (ptr) {
 2733              		.loc 1 499 0
 2734 09d0 BB6A     		ldr	r3, [r7, #40]
 2735 09d2 002B     		cmp	r3, #0
 2736 09d4 13D0     		beq	.L97
 500:../src/cli.c  ****                 mcfg.customMixer[i].pitch = _atof(++ptr);
 2737              		.loc 1 500 0
 2738 09d6 BB6A     		ldr	r3, [r7, #40]
 2739 09d8 03F10103 		add	r3, r3, #1
 2740 09dc BB62     		str	r3, [r7, #40]
 2741 09de B86A     		ldr	r0, [r7, #40]
 2742 09e0 FFF772FB 		bl	_atof
 2743 09e4 0246     		mov	r2, r0
 2744 09e6 1F49     		ldr	r1, .L106
 2745 09e8 7B6B     		ldr	r3, [r7, #52]
 2746 09ea 4FEA0313 		lsl	r3, r3, #4
 2747 09ee CB18     		adds	r3, r1, r3
 2748 09f0 03F11803 		add	r3, r3, #24
 2749 09f4 1A60     		str	r2, [r3, #0]	@ float
 501:../src/cli.c  ****                 check++;
 2750              		.loc 1 501 0
 2751 09f6 3B6B     		ldr	r3, [r7, #48]
 2752 09f8 03F10103 		add	r3, r3, #1
 2753 09fc 3B63     		str	r3, [r7, #48]
 2754              	.L97:
 502:../src/cli.c  ****             }
 503:../src/cli.c  ****             ptr = strchr(ptr, ' ');
 2755              		.loc 1 503 0
 2756 09fe B86A     		ldr	r0, [r7, #40]
 2757 0a00 4FF02001 		mov	r1, #32
 2758 0a04 FFF7FEFF 		bl	strchr
 2759 0a08 B862     		str	r0, [r7, #40]
 504:../src/cli.c  ****             if (ptr) {
 2760              		.loc 1 504 0
 2761 0a0a BB6A     		ldr	r3, [r7, #40]
 2762 0a0c 002B     		cmp	r3, #0
 2763 0a0e 13D0     		beq	.L98
 505:../src/cli.c  ****                 mcfg.customMixer[i].yaw = _atof(++ptr);
 2764              		.loc 1 505 0
 2765 0a10 BB6A     		ldr	r3, [r7, #40]
 2766 0a12 03F10103 		add	r3, r3, #1
 2767 0a16 BB62     		str	r3, [r7, #40]
 2768 0a18 B86A     		ldr	r0, [r7, #40]
 2769 0a1a FFF755FB 		bl	_atof
 2770 0a1e 0246     		mov	r2, r0
 2771 0a20 1049     		ldr	r1, .L106
 2772 0a22 7B6B     		ldr	r3, [r7, #52]
 2773 0a24 4FEA0313 		lsl	r3, r3, #4
 2774 0a28 CB18     		adds	r3, r1, r3
 2775 0a2a 03F11C03 		add	r3, r3, #28
 2776 0a2e 1A60     		str	r2, [r3, #0]	@ float
 506:../src/cli.c  ****                 check++;
 2777              		.loc 1 506 0
 2778 0a30 3B6B     		ldr	r3, [r7, #48]
 2779 0a32 03F10103 		add	r3, r3, #1
 2780 0a36 3B63     		str	r3, [r7, #48]
 2781              	.L98:
 507:../src/cli.c  ****             }
 508:../src/cli.c  ****             if (check != 4) {
 2782              		.loc 1 508 0
 2783 0a38 3B6B     		ldr	r3, [r7, #48]
 2784 0a3a 042B     		cmp	r3, #4
 2785 0a3c 03D0     		beq	.L99
 509:../src/cli.c  ****                 uartPrint("Wrong number of arguments, needs idx thr roll pitch yaw\r\n");
 2786              		.loc 1 509 0
 2787 0a3e 0A48     		ldr	r0, .L106+4
 2788 0a40 FFF7FEFF 		bl	uartPrint
 2789 0a44 0AE0     		b	.L70
 2790              	.L99:
 510:../src/cli.c  ****             } else {
 511:../src/cli.c  ****                 cliCMix("");
 2791              		.loc 1 511 0
 2792 0a46 0948     		ldr	r0, .L106+8
 2793 0a48 FFF7EEFD 		bl	cliCMix
 2794 0a4c 06E0     		b	.L70
 2795              	.L94:
 512:../src/cli.c  ****             }
 513:../src/cli.c  ****         } else {
 514:../src/cli.c  ****             printf("Motor number must be between 1 and %d\r\n", MAX_MOTORS);
 2796              		.loc 1 514 0
 2797 0a4e 0848     		ldr	r0, .L106+12
 2798 0a50 4FF00C01 		mov	r1, #12
 2799 0a54 FFF7FEFF 		bl	tfp_printf
 2800 0a58 00E0     		b	.L70
 2801              	.L103:
 482:../src/cli.c  ****             }
 2802              		.loc 1 482 0
 2803 0a5a 00BF     		nop
 2804              	.L70:
 515:../src/cli.c  ****         }
 516:../src/cli.c  ****     }
 517:../src/cli.c  **** }
 2805              		.loc 1 517 0
 2806 0a5c 07F13807 		add	r7, r7, #56
 2807 0a60 BD46     		mov	sp, r7
 2808 0a62 80BD     		pop	{r7, pc}
 2809              	.L107:
 2810              		.align	2
 2811              	.L106:
 2812 0a64 00000000 		.word	mcfg
 2813 0a68 24130000 		.word	.LC186
 2814 0a6c E4010000 		.word	.LC35
 2815 0a70 60130000 		.word	.LC187
 2816              		.cfi_endproc
 2817              	.LFE36:
 2819              		.section	.rodata
 2820              		.align	2
 2821              	.LC188:
 2822 1388 436F6E6E 		.ascii	"Connecting to slave...\015\012\000"
 2822      65637469 
 2822      6E672074 
 2822      6F20736C 
 2822      6176652E 
 2823 13a1 000000   		.align	2
 2824              	.LC189:
 2825 13a4 52656164 		.ascii	"Read back: 0x%02x\015\012\000"
 2825      20626163 
 2825      6B3A2030 
 2825      78253032 
 2825      780D0A00 
 2826              		.text
 2827              		.align	2
 2828              		.thumb
 2829              		.thumb_func
 2831              	cliI2C:
 2832              	.LFB37:
 518:../src/cli.c  **** 
 519:../src/cli.c  **** static void cliI2C(char *cmdline)
 520:../src/cli.c  **** {   uint32_t len;
 2833              		.loc 1 520 0
 2834              		.cfi_startproc
 2835              		@ args = 0, pretend = 0, frame = 16
 2836              		@ frame_needed = 1, uses_anonymous_args = 0
 2837 0a74 80B5     		push	{r7, lr}
 2838              	.LCFI23:
 2839              		.cfi_def_cfa_offset 8
 2840              		.cfi_offset 7, -8
 2841              		.cfi_offset 14, -4
 2842 0a76 84B0     		sub	sp, sp, #16
 2843              	.LCFI24:
 2844              		.cfi_def_cfa_offset 24
 2845 0a78 00AF     		add	r7, sp, #0
 2846              	.LCFI25:
 2847              		.cfi_def_cfa_register 7
 2848 0a7a 7860     		str	r0, [r7, #4]
 521:../src/cli.c  ****     uint8_t reg;
 522:../src/cli.c  ****     uint8_t buffer;
 523:../src/cli.c  **** 
 524:../src/cli.c  ****     len = strlen(cmdline);
 2849              		.loc 1 524 0
 2850 0a7c 7868     		ldr	r0, [r7, #4]
 2851 0a7e FFF7FEFF 		bl	strlen
 2852 0a82 F860     		str	r0, [r7, #12]
 525:../src/cli.c  ****     if (len > 0)
 2853              		.loc 1 525 0
 2854 0a84 FB68     		ldr	r3, [r7, #12]
 2855 0a86 002B     		cmp	r3, #0
 2856 0a88 16D0     		beq	.L108
 526:../src/cli.c  ****     {
 527:../src/cli.c  ****     	uartPrint("Connecting to slave...\r\n");
 2857              		.loc 1 527 0
 2858 0a8a 0D48     		ldr	r0, .L110
 2859 0a8c FFF7FEFF 		bl	uartPrint
 528:../src/cli.c  ****     	reg = atoi(cmdline);
 2860              		.loc 1 528 0
 2861 0a90 7868     		ldr	r0, [r7, #4]
 2862 0a92 FFF7FEFF 		bl	atoi
 2863 0a96 0346     		mov	r3, r0
 2864 0a98 FB72     		strb	r3, [r7, #11]
 529:../src/cli.c  ****     	i2cRead(0x20, reg, 1, &buffer);
 2865              		.loc 1 529 0
 2866 0a9a FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 2867 0a9c 07F10A03 		add	r3, r7, #10
 2868 0aa0 4FF02000 		mov	r0, #32
 2869 0aa4 1146     		mov	r1, r2
 2870 0aa6 4FF00102 		mov	r2, #1
 2871 0aaa FFF7FEFF 		bl	i2cRead
 530:../src/cli.c  ****     	printf("Read back: 0x%02x\r\n", buffer);
 2872              		.loc 1 530 0
 2873 0aae BB7A     		ldrb	r3, [r7, #10]	@ zero_extendqisi2
 2874 0ab0 0448     		ldr	r0, .L110+4
 2875 0ab2 1946     		mov	r1, r3
 2876 0ab4 FFF7FEFF 		bl	tfp_printf
 2877              	.L108:
 531:../src/cli.c  ****     }
 532:../src/cli.c  **** }
 2878              		.loc 1 532 0
 2879 0ab8 07F11007 		add	r7, r7, #16
 2880 0abc BD46     		mov	sp, r7
 2881 0abe 80BD     		pop	{r7, pc}
 2882              	.L111:
 2883              		.align	2
 2884              	.L110:
 2885 0ac0 88130000 		.word	.LC188
 2886 0ac4 A4130000 		.word	.LC189
 2887              		.cfi_endproc
 2888              	.LFE37:
 2890              		.section	.rodata
 2891              		.align	2
 2892              	.LC190:
 2893 13b8 52657365 		.ascii	"Resetting to defaults...\015\012\000"
 2893      7474696E 
 2893      6720746F 
 2893      20646566 
 2893      61756C74 
 2894 13d3 00       		.align	2
 2895              	.LC191:
 2896 13d4 5265626F 		.ascii	"Rebooting...\000"
 2896      6F74696E 
 2896      672E2E2E 
 2896      00
 2897              		.text
 2898              		.align	2
 2899              		.thumb
 2900              		.thumb_func
 2902              	cliDefaults:
 2903              	.LFB38:
 533:../src/cli.c  **** 
 534:../src/cli.c  **** static void cliDefaults(char *cmdline)
 535:../src/cli.c  **** {
 2904              		.loc 1 535 0
 2905              		.cfi_startproc
 2906              		@ args = 0, pretend = 0, frame = 8
 2907              		@ frame_needed = 1, uses_anonymous_args = 0
 2908 0ac8 80B5     		push	{r7, lr}
 2909              	.LCFI26:
 2910              		.cfi_def_cfa_offset 8
 2911              		.cfi_offset 7, -8
 2912              		.cfi_offset 14, -4
 2913 0aca 82B0     		sub	sp, sp, #8
 2914              	.LCFI27:
 2915              		.cfi_def_cfa_offset 16
 2916 0acc 00AF     		add	r7, sp, #0
 2917              	.LCFI28:
 2918              		.cfi_def_cfa_register 7
 2919 0ace 7860     		str	r0, [r7, #4]
 536:../src/cli.c  ****     uartPrint("Resetting to defaults...\r\n");
 2920              		.loc 1 536 0
 2921 0ad0 0A48     		ldr	r0, .L113
 2922 0ad2 FFF7FEFF 		bl	uartPrint
 537:../src/cli.c  ****     checkFirstTime(true);
 2923              		.loc 1 537 0
 2924 0ad6 4FF00100 		mov	r0, #1
 2925 0ada FFF7FEFF 		bl	checkFirstTime
 538:../src/cli.c  ****     uartPrint("Rebooting...");
 2926              		.loc 1 538 0
 2927 0ade 0848     		ldr	r0, .L113+4
 2928 0ae0 FFF7FEFF 		bl	uartPrint
 539:../src/cli.c  ****     delay(10);
 2929              		.loc 1 539 0
 2930 0ae4 4FF00A00 		mov	r0, #10
 2931 0ae8 FFF7FEFF 		bl	delay
 540:../src/cli.c  ****     systemReset(false);
 2932              		.loc 1 540 0
 2933 0aec 4FF00000 		mov	r0, #0
 2934 0af0 FFF7FEFF 		bl	systemReset
 541:../src/cli.c  **** }
 2935              		.loc 1 541 0
 2936 0af4 07F10807 		add	r7, r7, #8
 2937 0af8 BD46     		mov	sp, r7
 2938 0afa 80BD     		pop	{r7, pc}
 2939              	.L114:
 2940              		.align	2
 2941              	.L113:
 2942 0afc B8130000 		.word	.LC190
 2943 0b00 D4130000 		.word	.LC191
 2944              		.cfi_endproc
 2945              	.LFE38:
 2947              		.section	.rodata
 2948 13e1 000000   		.align	2
 2949              	.LC192:
 2950 13e4 43757272 		.ascii	"Current Config: Copy everything below here...\015\012"
 2950      656E7420 
 2950      436F6E66 
 2950      69673A20 
 2950      436F7079 
 2951 1413 00       		.ascii	"\000"
 2952              		.align	2
 2953              	.LC193:
 2954 1414 6D697865 		.ascii	"mixer %s\015\012\000"
 2954      72202573 
 2954      0D0A00
 2955 141f 00       		.align	2
 2956              	.LC194:
 2957 1420 636D6978 		.ascii	"cmix %d\000"
 2957      20256400 
 2958              		.global	__aeabi_fcmplt
 2959              		.align	2
 2960              	.LC195:
 2961 1428 2000     		.ascii	" \000"
 2962 142a 0000     		.align	2
 2963              	.LC196:
 2964 142c 257300   		.ascii	"%s\000"
 2965 142f 00       		.align	2
 2966              	.LC197:
 2967 1430 636D6978 		.ascii	"cmix %d 0 0 0 0\015\012\000"
 2967      20256420 
 2967      30203020 
 2967      3020300D 
 2967      0A00
 2968 1442 0000     		.align	2
 2969              	.LC198:
 2970 1444 66656174 		.ascii	"feature -%s\015\012\000"
 2970      75726520 
 2970      2D25730D 
 2970      0A00
 2971 1452 0000     		.align	2
 2972              	.LC199:
 2973 1454 66656174 		.ascii	"feature %s\015\012\000"
 2973      75726520 
 2973      25730D0A 
 2973      00
 2974 1461 000000   		.align	2
 2975              	.LC200:
 2976 1464 6D617020 		.ascii	"map %s\015\012\000"
 2976      25730D0A 
 2976      00
 2977 146d 000000   		.align	2
 2978              	.LC201:
 2979 1470 73657420 		.ascii	"set %s = \000"
 2979      2573203D 
 2979      2000
 2980              		.text
 2981              		.align	2
 2982              		.thumb
 2983              		.thumb_func
 2985              	cliDump:
 2986              	.LFB39:
 542:../src/cli.c  **** 
 543:../src/cli.c  **** static void cliDump(char *cmdline)
 544:../src/cli.c  **** {
 2987              		.loc 1 544 0
 2988              		.cfi_startproc
 2989              		@ args = 0, pretend = 0, frame = 56
 2990              		@ frame_needed = 1, uses_anonymous_args = 0
 2991 0b04 80B5     		push	{r7, lr}
 2992              	.LCFI29:
 2993              		.cfi_def_cfa_offset 8
 2994              		.cfi_offset 7, -8
 2995              		.cfi_offset 14, -4
 2996 0b06 8EB0     		sub	sp, sp, #56
 2997              	.LCFI30:
 2998              		.cfi_def_cfa_offset 64
 2999 0b08 00AF     		add	r7, sp, #0
 3000              	.LCFI31:
 3001              		.cfi_def_cfa_register 7
 3002 0b0a 7860     		str	r0, [r7, #4]
 545:../src/cli.c  **** 
 546:../src/cli.c  ****     int i;
 547:../src/cli.c  ****     char buf[16];
 548:../src/cli.c  ****     float thr, roll, pitch, yaw;
 549:../src/cli.c  ****     uint32_t mask;
 550:../src/cli.c  ****     const clivalue_t *setval;
 551:../src/cli.c  **** 
 552:../src/cli.c  ****     printf("Current Config: Copy everything below here...\r\n");
 3003              		.loc 1 552 0
 3004 0b0c A848     		ldr	r0, .L152
 3005 0b0e FFF7FEFF 		bl	tfp_printf
 553:../src/cli.c  **** 
 554:../src/cli.c  ****     // print out aux switches
 555:../src/cli.c  ****     cliAux("");
 3006              		.loc 1 555 0
 3007 0b12 A848     		ldr	r0, .L152+4
 3008 0b14 FFF736FD 		bl	cliAux
 556:../src/cli.c  **** 
 557:../src/cli.c  ****     // print out current motor mix
 558:../src/cli.c  ****     printf("mixer %s\r\n", mixerNames[mcfg.mixerConfiguration - 1]);
 3009              		.loc 1 558 0
 3010 0b18 A74B     		ldr	r3, .L152+8
 3011 0b1a 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 3012 0b1c 03F1FF32 		add	r2, r3, #-1
 3013 0b20 A64B     		ldr	r3, .L152+12
 3014 0b22 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3015 0b26 A648     		ldr	r0, .L152+16
 3016 0b28 1946     		mov	r1, r3
 3017 0b2a FFF7FEFF 		bl	tfp_printf
 559:../src/cli.c  **** 
 560:../src/cli.c  ****     // print custom mix if exists
 561:../src/cli.c  ****     if (mcfg.customMixer[0].throttle != 0.0f) {
 3018              		.loc 1 561 0
 3019 0b2e A24B     		ldr	r3, .L152+8
 3020 0b30 1B69     		ldr	r3, [r3, #16]	@ float
 3021 0b32 1846     		mov	r0, r3
 3022 0b34 B049     		ldr	r1, .L152+72	@ float
 3023 0b36 FFF7FEFF 		bl	__aeabi_fcmpeq
 3024 0b3a 0346     		mov	r3, r0
 3025 0b3c 002B     		cmp	r3, #0
 3026 0b3e 40F0A680 		bne	.L116
 3027              	.L142:
 562:../src/cli.c  ****         for (i = 0; i < MAX_MOTORS; i++) {
 3028              		.loc 1 562 0
 3029 0b42 4FF00003 		mov	r3, #0
 3030 0b46 7B63     		str	r3, [r7, #52]
 3031 0b48 94E0     		b	.L118
 3032              	.L130:
 563:../src/cli.c  ****             if (mcfg.customMixer[i].throttle == 0.0f)
 3033              		.loc 1 563 0
 3034 0b4a 9B4A     		ldr	r2, .L152+8
 3035 0b4c 7B6B     		ldr	r3, [r7, #52]
 3036 0b4e 03F10103 		add	r3, r3, #1
 3037 0b52 4FEA0313 		lsl	r3, r3, #4
 3038 0b56 D318     		adds	r3, r2, r3
 3039 0b58 1B68     		ldr	r3, [r3, #0]	@ float
 3040 0b5a 1846     		mov	r0, r3
 3041 0b5c A649     		ldr	r1, .L152+72	@ float
 3042 0b5e FFF7FEFF 		bl	__aeabi_fcmpeq
 3043 0b62 0346     		mov	r3, r0
 3044 0b64 002B     		cmp	r3, #0
 3045 0b66 40F08A80 		bne	.L149
 564:../src/cli.c  ****                 break;
 565:../src/cli.c  ****             thr = mcfg.customMixer[i].throttle;
 3046              		.loc 1 565 0
 3047 0b6a 934A     		ldr	r2, .L152+8
 3048 0b6c 7B6B     		ldr	r3, [r7, #52]
 3049 0b6e 03F10103 		add	r3, r3, #1
 3050 0b72 4FEA0313 		lsl	r3, r3, #4
 3051 0b76 D318     		adds	r3, r2, r3
 3052 0b78 1B68     		ldr	r3, [r3, #0]	@ float
 3053 0b7a 3B63     		str	r3, [r7, #48]	@ float
 566:../src/cli.c  ****             roll = mcfg.customMixer[i].roll;
 3054              		.loc 1 566 0
 3055 0b7c 8E4A     		ldr	r2, .L152+8
 3056 0b7e 7B6B     		ldr	r3, [r7, #52]
 3057 0b80 03F10103 		add	r3, r3, #1
 3058 0b84 4FEA0313 		lsl	r3, r3, #4
 3059 0b88 D318     		adds	r3, r2, r3
 3060 0b8a 03F10403 		add	r3, r3, #4
 3061 0b8e 1B68     		ldr	r3, [r3, #0]	@ float
 3062 0b90 FB62     		str	r3, [r7, #44]	@ float
 567:../src/cli.c  ****             pitch = mcfg.customMixer[i].pitch;
 3063              		.loc 1 567 0
 3064 0b92 894A     		ldr	r2, .L152+8
 3065 0b94 7B6B     		ldr	r3, [r7, #52]
 3066 0b96 4FEA0313 		lsl	r3, r3, #4
 3067 0b9a D318     		adds	r3, r2, r3
 3068 0b9c 03F11803 		add	r3, r3, #24
 3069 0ba0 1B68     		ldr	r3, [r3, #0]	@ float
 3070 0ba2 BB62     		str	r3, [r7, #40]	@ float
 568:../src/cli.c  ****             yaw = mcfg.customMixer[i].yaw;
 3071              		.loc 1 568 0
 3072 0ba4 844A     		ldr	r2, .L152+8
 3073 0ba6 7B6B     		ldr	r3, [r7, #52]
 3074 0ba8 4FEA0313 		lsl	r3, r3, #4
 3075 0bac D318     		adds	r3, r2, r3
 3076 0bae 03F11C03 		add	r3, r3, #28
 3077 0bb2 1B68     		ldr	r3, [r3, #0]	@ float
 3078 0bb4 7B62     		str	r3, [r7, #36]	@ float
 569:../src/cli.c  ****             printf("cmix %d", i + 1);
 3079              		.loc 1 569 0
 3080 0bb6 7B6B     		ldr	r3, [r7, #52]
 3081 0bb8 03F10103 		add	r3, r3, #1
 3082 0bbc 8148     		ldr	r0, .L152+20
 3083 0bbe 1946     		mov	r1, r3
 3084 0bc0 FFF7FEFF 		bl	tfp_printf
 570:../src/cli.c  ****             if (thr < 0)
 3085              		.loc 1 570 0
 3086 0bc4 386B     		ldr	r0, [r7, #48]	@ float
 3087 0bc6 8C49     		ldr	r1, .L152+72	@ float
 3088 0bc8 FFF7FEFF 		bl	__aeabi_fcmplt
 3089 0bcc 0346     		mov	r3, r0
 3090 0bce 002B     		cmp	r3, #0
 3091 0bd0 02D0     		beq	.L122
 3092              	.L143:
 571:../src/cli.c  ****                 printf(" ");
 3093              		.loc 1 571 0
 3094 0bd2 7D48     		ldr	r0, .L152+24
 3095 0bd4 FFF7FEFF 		bl	tfp_printf
 3096              	.L122:
 572:../src/cli.c  ****             printf("%s", ftoa(thr, buf));
 3097              		.loc 1 572 0
 3098 0bd8 07F10C03 		add	r3, r7, #12
 3099 0bdc 386B     		ldr	r0, [r7, #48]	@ float
 3100 0bde 1946     		mov	r1, r3
 3101 0be0 FFF7DAFB 		bl	ftoa
 3102 0be4 0346     		mov	r3, r0
 3103 0be6 7948     		ldr	r0, .L152+28
 3104 0be8 1946     		mov	r1, r3
 3105 0bea FFF7FEFF 		bl	tfp_printf
 573:../src/cli.c  ****             if (roll < 0)
 3106              		.loc 1 573 0
 3107 0bee F86A     		ldr	r0, [r7, #44]	@ float
 3108 0bf0 8149     		ldr	r1, .L152+72	@ float
 3109 0bf2 FFF7FEFF 		bl	__aeabi_fcmplt
 3110 0bf6 0346     		mov	r3, r0
 3111 0bf8 002B     		cmp	r3, #0
 3112 0bfa 02D0     		beq	.L124
 3113              	.L144:
 574:../src/cli.c  ****                 printf(" ");
 3114              		.loc 1 574 0
 3115 0bfc 7248     		ldr	r0, .L152+24
 3116 0bfe FFF7FEFF 		bl	tfp_printf
 3117              	.L124:
 575:../src/cli.c  ****             printf("%s", ftoa(roll, buf));
 3118              		.loc 1 575 0
 3119 0c02 07F10C03 		add	r3, r7, #12
 3120 0c06 F86A     		ldr	r0, [r7, #44]	@ float
 3121 0c08 1946     		mov	r1, r3
 3122 0c0a FFF7C5FB 		bl	ftoa
 3123 0c0e 0346     		mov	r3, r0
 3124 0c10 6E48     		ldr	r0, .L152+28
 3125 0c12 1946     		mov	r1, r3
 3126 0c14 FFF7FEFF 		bl	tfp_printf
 576:../src/cli.c  ****             if (pitch < 0)
 3127              		.loc 1 576 0
 3128 0c18 B86A     		ldr	r0, [r7, #40]	@ float
 3129 0c1a 7749     		ldr	r1, .L152+72	@ float
 3130 0c1c FFF7FEFF 		bl	__aeabi_fcmplt
 3131 0c20 0346     		mov	r3, r0
 3132 0c22 002B     		cmp	r3, #0
 3133 0c24 02D0     		beq	.L126
 3134              	.L145:
 577:../src/cli.c  ****                 printf(" ");
 3135              		.loc 1 577 0
 3136 0c26 6848     		ldr	r0, .L152+24
 3137 0c28 FFF7FEFF 		bl	tfp_printf
 3138              	.L126:
 578:../src/cli.c  ****             printf("%s", ftoa(pitch, buf));
 3139              		.loc 1 578 0
 3140 0c2c 07F10C03 		add	r3, r7, #12
 3141 0c30 B86A     		ldr	r0, [r7, #40]	@ float
 3142 0c32 1946     		mov	r1, r3
 3143 0c34 FFF7B0FB 		bl	ftoa
 3144 0c38 0346     		mov	r3, r0
 3145 0c3a 6448     		ldr	r0, .L152+28
 3146 0c3c 1946     		mov	r1, r3
 3147 0c3e FFF7FEFF 		bl	tfp_printf
 579:../src/cli.c  ****             if (yaw < 0)
 3148              		.loc 1 579 0
 3149 0c42 786A     		ldr	r0, [r7, #36]	@ float
 3150 0c44 6C49     		ldr	r1, .L152+72	@ float
 3151 0c46 FFF7FEFF 		bl	__aeabi_fcmplt
 3152 0c4a 0346     		mov	r3, r0
 3153 0c4c 002B     		cmp	r3, #0
 3154 0c4e 02D0     		beq	.L128
 3155              	.L146:
 580:../src/cli.c  ****                 printf(" ");
 3156              		.loc 1 580 0
 3157 0c50 5D48     		ldr	r0, .L152+24
 3158 0c52 FFF7FEFF 		bl	tfp_printf
 3159              	.L128:
 581:../src/cli.c  ****             printf("%s\r\n", ftoa(yaw, buf));
 3160              		.loc 1 581 0
 3161 0c56 07F10C03 		add	r3, r7, #12
 3162 0c5a 786A     		ldr	r0, [r7, #36]	@ float
 3163 0c5c 1946     		mov	r1, r3
 3164 0c5e FFF79BFB 		bl	ftoa
 3165 0c62 0346     		mov	r3, r0
 3166 0c64 5A48     		ldr	r0, .L152+32
 3167 0c66 1946     		mov	r1, r3
 3168 0c68 FFF7FEFF 		bl	tfp_printf
 562:../src/cli.c  ****         for (i = 0; i < MAX_MOTORS; i++) {
 3169              		.loc 1 562 0
 3170 0c6c 7B6B     		ldr	r3, [r7, #52]
 3171 0c6e 03F10103 		add	r3, r3, #1
 3172 0c72 7B63     		str	r3, [r7, #52]
 3173              	.L118:
 562:../src/cli.c  ****         for (i = 0; i < MAX_MOTORS; i++) {
 3174              		.loc 1 562 0 is_stmt 0 discriminator 1
 3175 0c74 7B6B     		ldr	r3, [r7, #52]
 3176 0c76 0B2B     		cmp	r3, #11
 3177 0c78 7FF767AF 		ble	.L130
 3178 0c7c 00E0     		b	.L121
 3179              	.L149:
 564:../src/cli.c  ****                 break;
 3180              		.loc 1 564 0 is_stmt 1
 3181 0c7e 00BF     		nop
 3182              	.L121:
 582:../src/cli.c  ****         }
 583:../src/cli.c  ****         printf("cmix %d 0 0 0 0\r\n", i + 1);
 3183              		.loc 1 583 0
 3184 0c80 7B6B     		ldr	r3, [r7, #52]
 3185 0c82 03F10103 		add	r3, r3, #1
 3186 0c86 5348     		ldr	r0, .L152+36
 3187 0c88 1946     		mov	r1, r3
 3188 0c8a FFF7FEFF 		bl	tfp_printf
 3189              	.L116:
 584:../src/cli.c  ****     }
 585:../src/cli.c  **** 
 586:../src/cli.c  ****     // print enabled features
 587:../src/cli.c  ****     mask = featureMask();
 3190              		.loc 1 587 0
 3191 0c8e FFF7FEFF 		bl	featureMask
 3192 0c92 3862     		str	r0, [r7, #32]
 588:../src/cli.c  ****     for (i = 0; ; i++) { // disable all feature first
 3193              		.loc 1 588 0
 3194 0c94 4FF00003 		mov	r3, #0
 3195 0c98 7B63     		str	r3, [r7, #52]
 3196              	.L133:
 589:../src/cli.c  ****         if (featureNames[i] == NULL)
 3197              		.loc 1 589 0
 3198 0c9a 4F4B     		ldr	r3, .L152+40
 3199 0c9c 7A6B     		ldr	r2, [r7, #52]
 3200 0c9e 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3201 0ca2 002B     		cmp	r3, #0
 3202 0ca4 0CD0     		beq	.L150
 3203              	.L131:
 590:../src/cli.c  ****             break;
 591:../src/cli.c  ****         printf("feature -%s\r\n", featureNames[i]);
 3204              		.loc 1 591 0
 3205 0ca6 4C4B     		ldr	r3, .L152+40
 3206 0ca8 7A6B     		ldr	r2, [r7, #52]
 3207 0caa 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3208 0cae 4B48     		ldr	r0, .L152+44
 3209 0cb0 1946     		mov	r1, r3
 3210 0cb2 FFF7FEFF 		bl	tfp_printf
 588:../src/cli.c  ****     for (i = 0; ; i++) { // disable all feature first
 3211              		.loc 1 588 0
 3212 0cb6 7B6B     		ldr	r3, [r7, #52]
 3213 0cb8 03F10103 		add	r3, r3, #1
 3214 0cbc 7B63     		str	r3, [r7, #52]
 592:../src/cli.c  ****     }
 3215              		.loc 1 592 0
 3216 0cbe ECE7     		b	.L133
 3217              	.L150:
 590:../src/cli.c  ****             break;
 3218              		.loc 1 590 0
 3219 0cc0 00BF     		nop
 3220              	.L147:
 593:../src/cli.c  ****     for (i = 0; ; i++) {  // reenable what we want.
 3221              		.loc 1 593 0
 3222 0cc2 4FF00003 		mov	r3, #0
 3223 0cc6 7B63     		str	r3, [r7, #52]
 3224              	.L137:
 594:../src/cli.c  ****         if (featureNames[i] == NULL)
 3225              		.loc 1 594 0
 3226 0cc8 434B     		ldr	r3, .L152+40
 3227 0cca 7A6B     		ldr	r2, [r7, #52]
 3228 0ccc 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3229 0cd0 002B     		cmp	r3, #0
 3230 0cd2 16D0     		beq	.L151
 3231              	.L134:
 595:../src/cli.c  ****             break;
 596:../src/cli.c  ****         if (mask & (1 << i))
 3232              		.loc 1 596 0
 3233 0cd4 4FF00102 		mov	r2, #1
 3234 0cd8 7B6B     		ldr	r3, [r7, #52]
 3235 0cda 02FA03F3 		lsl	r3, r2, r3
 3236 0cde 1A46     		mov	r2, r3
 3237 0ce0 3B6A     		ldr	r3, [r7, #32]
 3238 0ce2 1340     		ands	r3, r3, r2
 3239 0ce4 002B     		cmp	r3, #0
 3240 0ce6 07D0     		beq	.L136
 597:../src/cli.c  ****             printf("feature %s\r\n", featureNames[i]);
 3241              		.loc 1 597 0
 3242 0ce8 3B4B     		ldr	r3, .L152+40
 3243 0cea 7A6B     		ldr	r2, [r7, #52]
 3244 0cec 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3245 0cf0 3B48     		ldr	r0, .L152+48
 3246 0cf2 1946     		mov	r1, r3
 3247 0cf4 FFF7FEFF 		bl	tfp_printf
 3248              	.L136:
 593:../src/cli.c  ****     for (i = 0; ; i++) {  // reenable what we want.
 3249              		.loc 1 593 0
 3250 0cf8 7B6B     		ldr	r3, [r7, #52]
 3251 0cfa 03F10103 		add	r3, r3, #1
 3252 0cfe 7B63     		str	r3, [r7, #52]
 598:../src/cli.c  ****     }
 3253              		.loc 1 598 0
 3254 0d00 E2E7     		b	.L137
 3255              	.L151:
 595:../src/cli.c  ****             break;
 3256              		.loc 1 595 0
 3257 0d02 00BF     		nop
 3258              	.L148:
 599:../src/cli.c  **** 
 600:../src/cli.c  ****     // print RC MAPPING
 601:../src/cli.c  ****     for (i = 0; i < 8; i++)
 3259              		.loc 1 601 0
 3260 0d04 4FF00003 		mov	r3, #0
 3261 0d08 7B63     		str	r3, [r7, #52]
 3262 0d0a 12E0     		b	.L138
 3263              	.L139:
 602:../src/cli.c  ****         buf[mcfg.rcmap[i]] = rcChannelLetters[i];
 3264              		.loc 1 602 0 discriminator 2
 3265 0d0c 2A4A     		ldr	r2, .L152+8
 3266 0d0e 7B6B     		ldr	r3, [r7, #52]
 3267 0d10 D318     		adds	r3, r2, r3
 3268 0d12 03F1F803 		add	r3, r3, #248
 3269 0d16 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 3270 0d18 3249     		ldr	r1, .L152+52
 3271 0d1a 7A6B     		ldr	r2, [r7, #52]
 3272 0d1c 8A18     		adds	r2, r1, r2
 3273 0d1e 1278     		ldrb	r2, [r2, #0]	@ zero_extendqisi2
 3274 0d20 07F13801 		add	r1, r7, #56
 3275 0d24 CB18     		adds	r3, r1, r3
 3276 0d26 03F82C2C 		strb	r2, [r3, #-44]
 601:../src/cli.c  ****     for (i = 0; i < 8; i++)
 3277              		.loc 1 601 0 discriminator 2
 3278 0d2a 7B6B     		ldr	r3, [r7, #52]
 3279 0d2c 03F10103 		add	r3, r3, #1
 3280 0d30 7B63     		str	r3, [r7, #52]
 3281              	.L138:
 601:../src/cli.c  ****     for (i = 0; i < 8; i++)
 3282              		.loc 1 601 0 is_stmt 0 discriminator 1
 3283 0d32 7B6B     		ldr	r3, [r7, #52]
 3284 0d34 072B     		cmp	r3, #7
 3285 0d36 E9DD     		ble	.L139
 603:../src/cli.c  ****     buf[i] = '\0';
 3286              		.loc 1 603 0 is_stmt 1
 3287 0d38 07F10C02 		add	r2, r7, #12
 3288 0d3c 7B6B     		ldr	r3, [r7, #52]
 3289 0d3e D318     		adds	r3, r2, r3
 3290 0d40 4FF00002 		mov	r2, #0
 3291 0d44 1A70     		strb	r2, [r3, #0]
 604:../src/cli.c  ****     printf("map %s\r\n", buf);
 3292              		.loc 1 604 0
 3293 0d46 07F10C03 		add	r3, r7, #12
 3294 0d4a 2748     		ldr	r0, .L152+56
 3295 0d4c 1946     		mov	r1, r3
 3296 0d4e FFF7FEFF 		bl	tfp_printf
 605:../src/cli.c  **** 
 606:../src/cli.c  ****     // print settings
 607:../src/cli.c  ****     for (i = 0; i < VALUE_COUNT; i++) {
 3297              		.loc 1 607 0
 3298 0d52 4FF00003 		mov	r3, #0
 3299 0d56 7B63     		str	r3, [r7, #52]
 3300 0d58 23E0     		b	.L140
 3301              	.L141:
 608:../src/cli.c  ****         setval = &valueTable[i];
 3302              		.loc 1 608 0 discriminator 2
 3303 0d5a 7A6B     		ldr	r2, [r7, #52]
 3304 0d5c 1346     		mov	r3, r2
 3305 0d5e 4FEA8303 		lsl	r3, r3, #2
 3306 0d62 9B18     		adds	r3, r3, r2
 3307 0d64 4FEA8303 		lsl	r3, r3, #2
 3308 0d68 204A     		ldr	r2, .L152+60
 3309 0d6a 9B18     		adds	r3, r3, r2
 3310 0d6c FB61     		str	r3, [r7, #28]
 609:../src/cli.c  ****         printf("set %s = ", valueTable[i].name);
 3311              		.loc 1 609 0 discriminator 2
 3312 0d6e 1F49     		ldr	r1, .L152+60
 3313 0d70 7A6B     		ldr	r2, [r7, #52]
 3314 0d72 1346     		mov	r3, r2
 3315 0d74 4FEA8303 		lsl	r3, r3, #2
 3316 0d78 9B18     		adds	r3, r3, r2
 3317 0d7a 4FEA8303 		lsl	r3, r3, #2
 3318 0d7e CB18     		adds	r3, r1, r3
 3319 0d80 1B68     		ldr	r3, [r3, #0]
 3320 0d82 1B48     		ldr	r0, .L152+64
 3321 0d84 1946     		mov	r1, r3
 3322 0d86 FFF7FEFF 		bl	tfp_printf
 610:../src/cli.c  ****         cliPrintVar(setval, 0);
 3323              		.loc 1 610 0 discriminator 2
 3324 0d8a F869     		ldr	r0, [r7, #28]
 3325 0d8c 4FF00001 		mov	r1, #0
 3326 0d90 00F0D0FA 		bl	cliPrintVar
 611:../src/cli.c  ****         uartPrint("\r\n");
 3327              		.loc 1 611 0 discriminator 2
 3328 0d94 1748     		ldr	r0, .L152+68
 3329 0d96 FFF7FEFF 		bl	uartPrint
 607:../src/cli.c  ****     for (i = 0; i < VALUE_COUNT; i++) {
 3330              		.loc 1 607 0 discriminator 2
 3331 0d9a 7B6B     		ldr	r3, [r7, #52]
 3332 0d9c 03F10103 		add	r3, r3, #1
 3333 0da0 7B63     		str	r3, [r7, #52]
 3334              	.L140:
 607:../src/cli.c  ****     for (i = 0; i < VALUE_COUNT; i++) {
 3335              		.loc 1 607 0 is_stmt 0 discriminator 1
 3336 0da2 7B6B     		ldr	r3, [r7, #52]
 3337 0da4 662B     		cmp	r3, #102
 3338 0da6 D8D9     		bls	.L141
 612:../src/cli.c  ****     }
 613:../src/cli.c  **** }
 3339              		.loc 1 613 0 is_stmt 1
 3340 0da8 07F13807 		add	r7, r7, #56
 3341 0dac BD46     		mov	sp, r7
 3342 0dae 80BD     		pop	{r7, pc}
 3343              	.L153:
 3344              		.align	2
 3345              	.L152:
 3346 0db0 E4130000 		.word	.LC192
 3347 0db4 E4010000 		.word	.LC35
 3348 0db8 00000000 		.word	mcfg
 3349 0dbc 00000000 		.word	mixerNames
 3350 0dc0 14140000 		.word	.LC193
 3351 0dc4 20140000 		.word	.LC194
 3352 0dc8 28140000 		.word	.LC195
 3353 0dcc 2C140000 		.word	.LC196
 3354 0dd0 C4120000 		.word	.LC177
 3355 0dd4 30140000 		.word	.LC197
 3356 0dd8 00000000 		.word	featureNames
 3357 0ddc 44140000 		.word	.LC198
 3358 0de0 54140000 		.word	.LC199
 3359 0de4 00000000 		.word	rcChannelLetters
 3360 0de8 64140000 		.word	.LC200
 3361 0dec 00000000 		.word	valueTable
 3362 0df0 70140000 		.word	.LC201
 3363 0df4 E4120000 		.word	.LC181
 3364 0df8 00000000 		.word	0
 3365              		.cfi_endproc
 3366              	.LFE39:
 3368              		.section	.rodata
 3369 147a 0000     		.align	2
 3370              	.LC202:
 3371 147c 0D0A4C65 		.ascii	"\015\012Leaving CLI mode...\015\012\000"
 3371      6176696E 
 3371      6720434C 
 3371      49206D6F 
 3371      64652E2E 
 3372              		.text
 3373              		.align	2
 3374              		.thumb
 3375              		.thumb_func
 3377              	cliExit:
 3378              	.LFB40:
 614:../src/cli.c  **** 
 615:../src/cli.c  **** static void cliExit(char *cmdline)
 616:../src/cli.c  **** {
 3379              		.loc 1 616 0
 3380              		.cfi_startproc
 3381              		@ args = 0, pretend = 0, frame = 8
 3382              		@ frame_needed = 1, uses_anonymous_args = 0
 3383 0dfc 80B5     		push	{r7, lr}
 3384              	.LCFI32:
 3385              		.cfi_def_cfa_offset 8
 3386              		.cfi_offset 7, -8
 3387              		.cfi_offset 14, -4
 3388 0dfe 82B0     		sub	sp, sp, #8
 3389              	.LCFI33:
 3390              		.cfi_def_cfa_offset 16
 3391 0e00 00AF     		add	r7, sp, #0
 3392              	.LCFI34:
 3393              		.cfi_def_cfa_register 7
 3394 0e02 7860     		str	r0, [r7, #4]
 617:../src/cli.c  ****     uartPrint("\r\nLeaving CLI mode...\r\n");
 3395              		.loc 1 617 0
 3396 0e04 0C48     		ldr	r0, .L155
 3397 0e06 FFF7FEFF 		bl	uartPrint
 618:../src/cli.c  ****     memset(cliBuffer, 0, sizeof(cliBuffer));
 3398              		.loc 1 618 0
 3399 0e0a 0C48     		ldr	r0, .L155+4
 3400 0e0c 4FF00001 		mov	r1, #0
 3401 0e10 4FF03002 		mov	r2, #48
 3402 0e14 FFF7FEFF 		bl	memset
 619:../src/cli.c  ****     bufferIndex = 0;
 3403              		.loc 1 619 0
 3404 0e18 094B     		ldr	r3, .L155+8
 3405 0e1a 4FF00002 		mov	r2, #0
 3406 0e1e 1A60     		str	r2, [r3, #0]
 620:../src/cli.c  ****     cliMode = 0;
 3407              		.loc 1 620 0
 3408 0e20 084B     		ldr	r3, .L155+12
 3409 0e22 4FF00002 		mov	r2, #0
 3410 0e26 1A70     		strb	r2, [r3, #0]
 621:../src/cli.c  ****     // save and reboot... I think this makes the most sense
 622:../src/cli.c  ****     cliSave(cmdline);
 3411              		.loc 1 622 0
 3412 0e28 7868     		ldr	r0, [r7, #4]
 3413 0e2a 00F063FA 		bl	cliSave
 623:../src/cli.c  **** }
 3414              		.loc 1 623 0
 3415 0e2e 07F10807 		add	r7, r7, #8
 3416 0e32 BD46     		mov	sp, r7
 3417 0e34 80BD     		pop	{r7, pc}
 3418              	.L156:
 3419 0e36 00BF     		.align	2
 3420              	.L155:
 3421 0e38 7C140000 		.word	.LC202
 3422 0e3c 00000000 		.word	cliBuffer
 3423 0e40 30000000 		.word	bufferIndex
 3424 0e44 00000000 		.word	cliMode
 3425              		.cfi_endproc
 3426              	.LFE40:
 3428              		.section	.rodata
 3429              		.align	2
 3430              	.LC203:
 3431 1494 456E6162 		.ascii	"Enabled features: \000"
 3431      6C656420 
 3431      66656174 
 3431      75726573 
 3431      3A2000
 3432 14a7 00       		.align	2
 3433              	.LC204:
 3434 14a8 25732000 		.ascii	"%s \000"
 3435              		.align	2
 3436              	.LC205:
 3437 14ac 6C697374 		.ascii	"list\000"
 3437      00
 3438 14b1 000000   		.align	2
 3439              	.LC206:
 3440 14b4 41766169 		.ascii	"Available features: \000"
 3440      6C61626C 
 3440      65206665 
 3440      61747572 
 3440      65733A20 
 3441 14c9 000000   		.align	2
 3442              	.LC207:
 3443 14cc 496E7661 		.ascii	"Invalid feature name...\015\012\000"
 3443      6C696420 
 3443      66656174 
 3443      75726520 
 3443      6E616D65 
 3444 14e6 0000     		.align	2
 3445              	.LC208:
 3446 14e8 44697361 		.ascii	"Disabled \000"
 3446      626C6564 
 3446      2000
 3447 14f2 0000     		.align	2
 3448              	.LC209:
 3449 14f4 456E6162 		.ascii	"Enabled \000"
 3449      6C656420 
 3449      00
 3450              		.text
 3451              		.align	2
 3452              		.thumb
 3453              		.thumb_func
 3455              	cliFeature:
 3456              	.LFB41:
 624:../src/cli.c  **** 
 625:../src/cli.c  **** static void cliFeature(char *cmdline)
 626:../src/cli.c  **** {
 3457              		.loc 1 626 0
 3458              		.cfi_startproc
 3459              		@ args = 0, pretend = 0, frame = 24
 3460              		@ frame_needed = 1, uses_anonymous_args = 0
 3461 0e48 80B5     		push	{r7, lr}
 3462              	.LCFI35:
 3463              		.cfi_def_cfa_offset 8
 3464              		.cfi_offset 7, -8
 3465              		.cfi_offset 14, -4
 3466 0e4a 86B0     		sub	sp, sp, #24
 3467              	.LCFI36:
 3468              		.cfi_def_cfa_offset 32
 3469 0e4c 00AF     		add	r7, sp, #0
 3470              	.LCFI37:
 3471              		.cfi_def_cfa_register 7
 3472 0e4e 7860     		str	r0, [r7, #4]
 627:../src/cli.c  ****     uint32_t i;
 628:../src/cli.c  ****     uint32_t len;
 629:../src/cli.c  ****     uint32_t mask;
 630:../src/cli.c  **** 
 631:../src/cli.c  ****     len = strlen(cmdline);
 3473              		.loc 1 631 0
 3474 0e50 7868     		ldr	r0, [r7, #4]
 3475 0e52 FFF7FEFF 		bl	strlen
 3476 0e56 3861     		str	r0, [r7, #16]
 632:../src/cli.c  ****     mask = featureMask();
 3477              		.loc 1 632 0
 3478 0e58 FFF7FEFF 		bl	featureMask
 3479 0e5c B860     		str	r0, [r7, #8]
 633:../src/cli.c  **** 
 634:../src/cli.c  ****     if (len == 0) {
 3480              		.loc 1 634 0
 3481 0e5e 3B69     		ldr	r3, [r7, #16]
 3482 0e60 002B     		cmp	r3, #0
 3483 0e62 27D1     		bne	.L158
 635:../src/cli.c  ****         uartPrint("Enabled features: ");
 3484              		.loc 1 635 0
 3485 0e64 5248     		ldr	r0, .L178
 3486 0e66 FFF7FEFF 		bl	uartPrint
 636:../src/cli.c  ****         for (i = 0; ; i++) {
 3487              		.loc 1 636 0
 3488 0e6a 4FF00003 		mov	r3, #0
 3489 0e6e 7B61     		str	r3, [r7, #20]
 3490              	.L162:
 637:../src/cli.c  ****             if (featureNames[i] == NULL)
 3491              		.loc 1 637 0
 3492 0e70 504B     		ldr	r3, .L178+4
 3493 0e72 7A69     		ldr	r2, [r7, #20]
 3494 0e74 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3495 0e78 002B     		cmp	r3, #0
 3496 0e7a 16D0     		beq	.L176
 3497              	.L159:
 638:../src/cli.c  ****                 break;
 639:../src/cli.c  ****             if (mask & (1 << i))
 3498              		.loc 1 639 0
 3499 0e7c 7B69     		ldr	r3, [r7, #20]
 3500 0e7e 4FF00102 		mov	r2, #1
 3501 0e82 02FA03F3 		lsl	r3, r2, r3
 3502 0e86 1A46     		mov	r2, r3
 3503 0e88 BB68     		ldr	r3, [r7, #8]
 3504 0e8a 1340     		ands	r3, r3, r2
 3505 0e8c 002B     		cmp	r3, #0
 3506 0e8e 07D0     		beq	.L161
 640:../src/cli.c  ****                 printf("%s ", featureNames[i]);
 3507              		.loc 1 640 0
 3508 0e90 484B     		ldr	r3, .L178+4
 3509 0e92 7A69     		ldr	r2, [r7, #20]
 3510 0e94 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3511 0e98 4748     		ldr	r0, .L178+8
 3512 0e9a 1946     		mov	r1, r3
 3513 0e9c FFF7FEFF 		bl	tfp_printf
 3514              	.L161:
 636:../src/cli.c  ****         for (i = 0; ; i++) {
 3515              		.loc 1 636 0
 3516 0ea0 7B69     		ldr	r3, [r7, #20]
 3517 0ea2 03F10103 		add	r3, r3, #1
 3518 0ea6 7B61     		str	r3, [r7, #20]
 641:../src/cli.c  ****         }
 3519              		.loc 1 641 0
 3520 0ea8 E2E7     		b	.L162
 3521              	.L176:
 638:../src/cli.c  ****                 break;
 3522              		.loc 1 638 0
 3523 0eaa 00BF     		nop
 3524              	.L174:
 642:../src/cli.c  ****         uartPrint("\r\n");
 3525              		.loc 1 642 0
 3526 0eac 4348     		ldr	r0, .L178+12
 3527 0eae FFF7FEFF 		bl	uartPrint
 3528 0eb2 79E0     		b	.L157
 3529              	.L158:
 643:../src/cli.c  ****     } else if (strncasecmp(cmdline, "list", len) == 0) {
 3530              		.loc 1 643 0
 3531 0eb4 7868     		ldr	r0, [r7, #4]
 3532 0eb6 4249     		ldr	r1, .L178+16
 3533 0eb8 3A69     		ldr	r2, [r7, #16]
 3534 0eba FFF7FEFF 		bl	strncasecmp
 3535 0ebe 0346     		mov	r3, r0
 3536 0ec0 002B     		cmp	r3, #0
 3537 0ec2 1DD1     		bne	.L164
 644:../src/cli.c  ****         uartPrint("Available features: ");
 3538              		.loc 1 644 0
 3539 0ec4 3F48     		ldr	r0, .L178+20
 3540 0ec6 FFF7FEFF 		bl	uartPrint
 645:../src/cli.c  ****         for (i = 0; ; i++) {
 3541              		.loc 1 645 0
 3542 0eca 4FF00003 		mov	r3, #0
 3543 0ece 7B61     		str	r3, [r7, #20]
 3544              	.L167:
 646:../src/cli.c  ****             if (featureNames[i] == NULL)
 3545              		.loc 1 646 0
 3546 0ed0 384B     		ldr	r3, .L178+4
 3547 0ed2 7A69     		ldr	r2, [r7, #20]
 3548 0ed4 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3549 0ed8 002B     		cmp	r3, #0
 3550 0eda 0CD0     		beq	.L177
 3551              	.L165:
 647:../src/cli.c  ****                 break;
 648:../src/cli.c  ****             printf("%s ", featureNames[i]);
 3552              		.loc 1 648 0
 3553 0edc 354B     		ldr	r3, .L178+4
 3554 0ede 7A69     		ldr	r2, [r7, #20]
 3555 0ee0 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3556 0ee4 3448     		ldr	r0, .L178+8
 3557 0ee6 1946     		mov	r1, r3
 3558 0ee8 FFF7FEFF 		bl	tfp_printf
 645:../src/cli.c  ****         for (i = 0; ; i++) {
 3559              		.loc 1 645 0
 3560 0eec 7B69     		ldr	r3, [r7, #20]
 3561 0eee 03F10103 		add	r3, r3, #1
 3562 0ef2 7B61     		str	r3, [r7, #20]
 649:../src/cli.c  ****         }
 3563              		.loc 1 649 0
 3564 0ef4 ECE7     		b	.L167
 3565              	.L177:
 647:../src/cli.c  ****                 break;
 3566              		.loc 1 647 0
 3567 0ef6 00BF     		nop
 3568              	.L175:
 650:../src/cli.c  ****         uartPrint("\r\n");
 3569              		.loc 1 650 0
 3570 0ef8 3048     		ldr	r0, .L178+12
 3571 0efa FFF7FEFF 		bl	uartPrint
 651:../src/cli.c  ****         return;
 3572              		.loc 1 651 0
 3573 0efe 53E0     		b	.L157
 3574              	.L164:
 3575              	.LBB4:
 652:../src/cli.c  ****     } else {
 653:../src/cli.c  ****         bool remove = false;
 3576              		.loc 1 653 0
 3577 0f00 4FF00003 		mov	r3, #0
 3578 0f04 FB73     		strb	r3, [r7, #15]
 654:../src/cli.c  ****         if (cmdline[0] == '-') {
 3579              		.loc 1 654 0
 3580 0f06 7B68     		ldr	r3, [r7, #4]
 3581 0f08 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3582 0f0a 2D2B     		cmp	r3, #45
 3583 0f0c 0AD1     		bne	.L168
 655:../src/cli.c  ****             // remove feature
 656:../src/cli.c  ****             remove = true;
 3584              		.loc 1 656 0
 3585 0f0e 4FF00103 		mov	r3, #1
 3586 0f12 FB73     		strb	r3, [r7, #15]
 657:../src/cli.c  ****             cmdline++; // skip over -
 3587              		.loc 1 657 0
 3588 0f14 7B68     		ldr	r3, [r7, #4]
 3589 0f16 03F10103 		add	r3, r3, #1
 3590 0f1a 7B60     		str	r3, [r7, #4]
 658:../src/cli.c  ****             len--;
 3591              		.loc 1 658 0
 3592 0f1c 3B69     		ldr	r3, [r7, #16]
 3593 0f1e 03F1FF33 		add	r3, r3, #-1
 3594 0f22 3B61     		str	r3, [r7, #16]
 3595              	.L168:
 659:../src/cli.c  ****         }
 660:../src/cli.c  **** 
 661:../src/cli.c  ****         for (i = 0; ; i++) {
 3596              		.loc 1 661 0
 3597 0f24 4FF00003 		mov	r3, #0
 3598 0f28 7B61     		str	r3, [r7, #20]
 3599              	.L173:
 662:../src/cli.c  ****             if (featureNames[i] == NULL) {
 3600              		.loc 1 662 0
 3601 0f2a 224B     		ldr	r3, .L178+4
 3602 0f2c 7A69     		ldr	r2, [r7, #20]
 3603 0f2e 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3604 0f32 002B     		cmp	r3, #0
 3605 0f34 03D1     		bne	.L169
 663:../src/cli.c  ****                 uartPrint("Invalid feature name...\r\n");
 3606              		.loc 1 663 0
 3607 0f36 2448     		ldr	r0, .L178+24
 3608 0f38 FFF7FEFF 		bl	uartPrint
 664:../src/cli.c  ****                 break;
 3609              		.loc 1 664 0
 3610 0f3c 34E0     		b	.L157
 3611              	.L169:
 665:../src/cli.c  ****             }
 666:../src/cli.c  ****             if (strncasecmp(cmdline, featureNames[i], len) == 0) {
 3612              		.loc 1 666 0
 3613 0f3e 1D4B     		ldr	r3, .L178+4
 3614 0f40 7A69     		ldr	r2, [r7, #20]
 3615 0f42 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3616 0f46 7868     		ldr	r0, [r7, #4]
 3617 0f48 1946     		mov	r1, r3
 3618 0f4a 3A69     		ldr	r2, [r7, #16]
 3619 0f4c FFF7FEFF 		bl	strncasecmp
 3620 0f50 0346     		mov	r3, r0
 3621 0f52 002B     		cmp	r3, #0
 3622 0f54 23D1     		bne	.L170
 667:../src/cli.c  ****                 if (remove) {
 3623              		.loc 1 667 0
 3624 0f56 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3625 0f58 002B     		cmp	r3, #0
 3626 0f5a 0BD0     		beq	.L171
 668:../src/cli.c  ****                     featureClear(1 << i);
 3627              		.loc 1 668 0
 3628 0f5c 7B69     		ldr	r3, [r7, #20]
 3629 0f5e 4FF00102 		mov	r2, #1
 3630 0f62 02FA03F3 		lsl	r3, r2, r3
 3631 0f66 1846     		mov	r0, r3
 3632 0f68 FFF7FEFF 		bl	featureClear
 669:../src/cli.c  ****                     uartPrint("Disabled ");
 3633              		.loc 1 669 0
 3634 0f6c 1748     		ldr	r0, .L178+28
 3635 0f6e FFF7FEFF 		bl	uartPrint
 3636 0f72 0AE0     		b	.L172
 3637              	.L171:
 670:../src/cli.c  ****                 } else {
 671:../src/cli.c  ****                     featureSet(1 << i);
 3638              		.loc 1 671 0
 3639 0f74 7B69     		ldr	r3, [r7, #20]
 3640 0f76 4FF00102 		mov	r2, #1
 3641 0f7a 02FA03F3 		lsl	r3, r2, r3
 3642 0f7e 1846     		mov	r0, r3
 3643 0f80 FFF7FEFF 		bl	featureSet
 672:../src/cli.c  ****                     uartPrint("Enabled ");
 3644              		.loc 1 672 0
 3645 0f84 1248     		ldr	r0, .L178+32
 3646 0f86 FFF7FEFF 		bl	uartPrint
 3647              	.L172:
 673:../src/cli.c  ****                 }
 674:../src/cli.c  ****                 printf("%s\r\n", featureNames[i]);
 3648              		.loc 1 674 0
 3649 0f8a 0A4B     		ldr	r3, .L178+4
 3650 0f8c 7A69     		ldr	r2, [r7, #20]
 3651 0f8e 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3652 0f92 1048     		ldr	r0, .L178+36
 3653 0f94 1946     		mov	r1, r3
 3654 0f96 FFF7FEFF 		bl	tfp_printf
 675:../src/cli.c  ****                 break;
 3655              		.loc 1 675 0
 3656 0f9a 00BF     		nop
 3657 0f9c 04E0     		b	.L157
 3658              	.L170:
 661:../src/cli.c  ****         for (i = 0; ; i++) {
 3659              		.loc 1 661 0
 3660 0f9e 7B69     		ldr	r3, [r7, #20]
 3661 0fa0 03F10103 		add	r3, r3, #1
 3662 0fa4 7B61     		str	r3, [r7, #20]
 676:../src/cli.c  ****             }
 677:../src/cli.c  ****         }
 3663              		.loc 1 677 0
 3664 0fa6 C0E7     		b	.L173
 3665              	.L157:
 3666              	.LBE4:
 678:../src/cli.c  ****     }
 679:../src/cli.c  **** }
 3667              		.loc 1 679 0
 3668 0fa8 07F11807 		add	r7, r7, #24
 3669 0fac BD46     		mov	sp, r7
 3670 0fae 80BD     		pop	{r7, pc}
 3671              	.L179:
 3672              		.align	2
 3673              	.L178:
 3674 0fb0 94140000 		.word	.LC203
 3675 0fb4 00000000 		.word	featureNames
 3676 0fb8 A8140000 		.word	.LC204
 3677 0fbc E4120000 		.word	.LC181
 3678 0fc0 AC140000 		.word	.LC205
 3679 0fc4 B4140000 		.word	.LC206
 3680 0fc8 CC140000 		.word	.LC207
 3681 0fcc E8140000 		.word	.LC208
 3682 0fd0 F4140000 		.word	.LC209
 3683 0fd4 C4120000 		.word	.LC177
 3684              		.cfi_endproc
 3685              	.LFE41:
 3687              		.section	.rodata
 3688 14fd 000000   		.align	2
 3689              	.LC210:
 3690 1500 41766169 		.ascii	"Available commands:\015\012\000"
 3690      6C61626C 
 3690      6520636F 
 3690      6D6D616E 
 3690      64733A0D 
 3691 1516 0000     		.align	2
 3692              	.LC211:
 3693 1518 25730925 		.ascii	"%s\011%s\015\012\000"
 3693      730D0A00 
 3694              		.text
 3695              		.align	2
 3696              		.thumb
 3697              		.thumb_func
 3699              	cliHelp:
 3700              	.LFB42:
 680:../src/cli.c  **** 
 681:../src/cli.c  **** static void cliHelp(char *cmdline)
 682:../src/cli.c  **** {
 3701              		.loc 1 682 0
 3702              		.cfi_startproc
 3703              		@ args = 0, pretend = 0, frame = 16
 3704              		@ frame_needed = 1, uses_anonymous_args = 0
 3705 0fd8 80B5     		push	{r7, lr}
 3706              	.LCFI38:
 3707              		.cfi_def_cfa_offset 8
 3708              		.cfi_offset 7, -8
 3709              		.cfi_offset 14, -4
 3710 0fda 84B0     		sub	sp, sp, #16
 3711              	.LCFI39:
 3712              		.cfi_def_cfa_offset 24
 3713 0fdc 00AF     		add	r7, sp, #0
 3714              	.LCFI40:
 3715              		.cfi_def_cfa_register 7
 3716 0fde 7860     		str	r0, [r7, #4]
 683:../src/cli.c  ****     uint32_t i = 0;
 3717              		.loc 1 683 0
 3718 0fe0 4FF00003 		mov	r3, #0
 3719 0fe4 FB60     		str	r3, [r7, #12]
 684:../src/cli.c  **** 
 685:../src/cli.c  ****     uartPrint("Available commands:\r\n");
 3720              		.loc 1 685 0
 3721 0fe6 1648     		ldr	r0, .L183
 3722 0fe8 FFF7FEFF 		bl	uartPrint
 686:../src/cli.c  ****     for (i = 0; i < CMD_COUNT; i++)
 3723              		.loc 1 686 0
 3724 0fec 4FF00003 		mov	r3, #0
 3725 0ff0 FB60     		str	r3, [r7, #12]
 3726 0ff2 1DE0     		b	.L181
 3727              	.L182:
 687:../src/cli.c  ****         printf("%s\t%s\r\n", cmdTable[i].name, cmdTable[i].param);
 3728              		.loc 1 687 0 discriminator 2
 3729 0ff4 1349     		ldr	r1, .L183+4
 3730 0ff6 FA68     		ldr	r2, [r7, #12]
 3731 0ff8 1346     		mov	r3, r2
 3732 0ffa 4FEA4303 		lsl	r3, r3, #1
 3733 0ffe 9B18     		adds	r3, r3, r2
 3734 1000 4FEA8303 		lsl	r3, r3, #2
 3735 1004 CB18     		adds	r3, r1, r3
 3736 1006 1968     		ldr	r1, [r3, #0]
 3737 1008 0E48     		ldr	r0, .L183+4
 3738 100a FA68     		ldr	r2, [r7, #12]
 3739 100c 1346     		mov	r3, r2
 3740 100e 4FEA4303 		lsl	r3, r3, #1
 3741 1012 9B18     		adds	r3, r3, r2
 3742 1014 4FEA8303 		lsl	r3, r3, #2
 3743 1018 C318     		adds	r3, r0, r3
 3744 101a 03F10403 		add	r3, r3, #4
 3745 101e 1B68     		ldr	r3, [r3, #0]
 3746 1020 0948     		ldr	r0, .L183+8
 3747 1022 1A46     		mov	r2, r3
 3748 1024 FFF7FEFF 		bl	tfp_printf
 686:../src/cli.c  ****     for (i = 0; i < CMD_COUNT; i++)
 3749              		.loc 1 686 0 discriminator 2
 3750 1028 FB68     		ldr	r3, [r7, #12]
 3751 102a 03F10103 		add	r3, r3, #1
 3752 102e FB60     		str	r3, [r7, #12]
 3753              	.L181:
 686:../src/cli.c  ****     for (i = 0; i < CMD_COUNT; i++)
 3754              		.loc 1 686 0 is_stmt 0 discriminator 1
 3755 1030 FB68     		ldr	r3, [r7, #12]
 3756 1032 0E2B     		cmp	r3, #14
 3757 1034 DED9     		bls	.L182
 688:../src/cli.c  **** }
 3758              		.loc 1 688 0 is_stmt 1
 3759 1036 07F11007 		add	r7, r7, #16
 3760 103a BD46     		mov	sp, r7
 3761 103c 80BD     		pop	{r7, pc}
 3762              	.L184:
 3763 103e 00BF     		.align	2
 3764              	.L183:
 3765 1040 00150000 		.word	.LC210
 3766 1044 00000000 		.word	cmdTable
 3767 1048 18150000 		.word	.LC211
 3768              		.cfi_endproc
 3769              	.LFE42:
 3771              		.section	.rodata
 3772              		.align	2
 3773              	.LC212:
 3774 1520 4D757374 		.ascii	"Must be any order of AETR1234\015\012\000"
 3774      20626520 
 3774      616E7920 
 3774      6F726465 
 3774      72206F66 
 3775              		.align	2
 3776              	.LC213:
 3777 1540 43757272 		.ascii	"Current assignment: \000"
 3777      656E7420 
 3777      61737369 
 3777      676E6D65 
 3777      6E743A20 
 3778              		.text
 3779              		.align	2
 3780              		.thumb
 3781              		.thumb_func
 3783              	cliMap:
 3784              	.LFB43:
 689:../src/cli.c  **** 
 690:../src/cli.c  **** static void cliMap(char *cmdline)
 691:../src/cli.c  **** {
 3785              		.loc 1 691 0
 3786              		.cfi_startproc
 3787              		@ args = 0, pretend = 0, frame = 32
 3788              		@ frame_needed = 1, uses_anonymous_args = 0
 3789 104c 80B5     		push	{r7, lr}
 3790              	.LCFI41:
 3791              		.cfi_def_cfa_offset 8
 3792              		.cfi_offset 7, -8
 3793              		.cfi_offset 14, -4
 3794 104e 88B0     		sub	sp, sp, #32
 3795              	.LCFI42:
 3796              		.cfi_def_cfa_offset 40
 3797 1050 00AF     		add	r7, sp, #0
 3798              	.LCFI43:
 3799              		.cfi_def_cfa_register 7
 3800 1052 7860     		str	r0, [r7, #4]
 692:../src/cli.c  ****     uint32_t len;
 693:../src/cli.c  ****     uint32_t i;
 694:../src/cli.c  ****     char out[9];
 695:../src/cli.c  **** 
 696:../src/cli.c  ****     len = strlen(cmdline);
 3801              		.loc 1 696 0
 3802 1054 7868     		ldr	r0, [r7, #4]
 3803 1056 FFF7FEFF 		bl	strlen
 3804 105a B861     		str	r0, [r7, #24]
 697:../src/cli.c  **** 
 698:../src/cli.c  ****     if (len == 8) {
 3805              		.loc 1 698 0
 3806 105c BB69     		ldr	r3, [r7, #24]
 3807 105e 082B     		cmp	r3, #8
 3808 1060 52D1     		bne	.L186
 699:../src/cli.c  ****         // uppercase it
 700:../src/cli.c  ****         for (i = 0; i < 8; i++)
 3809              		.loc 1 700 0
 3810 1062 4FF00003 		mov	r3, #0
 3811 1066 FB61     		str	r3, [r7, #28]
 3812 1068 1DE0     		b	.L187
 3813              	.L190:
 701:../src/cli.c  ****             cmdline[i] = toupper(cmdline[i]);
 3814              		.loc 1 701 0
 3815 106a 7A68     		ldr	r2, [r7, #4]
 3816 106c FB69     		ldr	r3, [r7, #28]
 3817 106e D218     		adds	r2, r2, r3
 3818              	.LBB5:
 3819 1070 7968     		ldr	r1, [r7, #4]
 3820 1072 FB69     		ldr	r3, [r7, #28]
 3821 1074 CB18     		adds	r3, r1, r3
 3822 1076 1B78     		ldrb	r3, [r3, #0]
 3823 1078 FB75     		strb	r3, [r7, #23]
 3824 107a 3A4B     		ldr	r3, .L197
 3825 107c 1968     		ldr	r1, [r3, #0]
 3826 107e FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 3827 1080 03F10103 		add	r3, r3, #1
 3828 1084 CB18     		adds	r3, r1, r3
 3829 1086 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3830 1088 03F00303 		and	r3, r3, #3
 3831 108c 022B     		cmp	r3, #2
 3832 108e 03D1     		bne	.L188
 3833              		.loc 1 701 0 is_stmt 0 discriminator 1
 3834 1090 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 3835 1092 A3F12003 		sub	r3, r3, #32
 3836 1096 00E0     		b	.L189
 3837              	.L188:
 3838              		.loc 1 701 0 discriminator 2
 3839 1098 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 3840              	.L189:
 3841              	.LBE5:
 3842              		.loc 1 701 0 discriminator 3
 3843 109a DBB2     		uxtb	r3, r3
 3844 109c 1370     		strb	r3, [r2, #0]
 700:../src/cli.c  ****         for (i = 0; i < 8; i++)
 3845              		.loc 1 700 0 is_stmt 1 discriminator 3
 3846 109e FB69     		ldr	r3, [r7, #28]
 3847 10a0 03F10103 		add	r3, r3, #1
 3848 10a4 FB61     		str	r3, [r7, #28]
 3849              	.L187:
 700:../src/cli.c  ****         for (i = 0; i < 8; i++)
 3850              		.loc 1 700 0 is_stmt 0 discriminator 1
 3851 10a6 FB69     		ldr	r3, [r7, #28]
 3852 10a8 072B     		cmp	r3, #7
 3853 10aa DED9     		bls	.L190
 702:../src/cli.c  ****         for (i = 0; i < 8; i++) {
 3854              		.loc 1 702 0 is_stmt 1
 3855 10ac 4FF00003 		mov	r3, #0
 3856 10b0 FB61     		str	r3, [r7, #28]
 3857 10b2 23E0     		b	.L191
 3858              	.L194:
 703:../src/cli.c  ****             if (strchr(rcChannelLetters, cmdline[i]) && !strchr(cmdline + i + 1, cmdline[i]))
 3859              		.loc 1 703 0
 3860 10b4 7A68     		ldr	r2, [r7, #4]
 3861 10b6 FB69     		ldr	r3, [r7, #28]
 3862 10b8 D318     		adds	r3, r2, r3
 3863 10ba 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3864 10bc 2A48     		ldr	r0, .L197+4
 3865 10be 1946     		mov	r1, r3
 3866 10c0 FFF7FEFF 		bl	strchr
 3867 10c4 0346     		mov	r3, r0
 3868 10c6 002B     		cmp	r3, #0
 3869 10c8 14D0     		beq	.L192
 3870              		.loc 1 703 0 is_stmt 0 discriminator 1
 3871 10ca FB69     		ldr	r3, [r7, #28]
 3872 10cc 03F10103 		add	r3, r3, #1
 3873 10d0 7A68     		ldr	r2, [r7, #4]
 3874 10d2 D218     		adds	r2, r2, r3
 3875 10d4 7968     		ldr	r1, [r7, #4]
 3876 10d6 FB69     		ldr	r3, [r7, #28]
 3877 10d8 CB18     		adds	r3, r1, r3
 3878 10da 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3879 10dc 1046     		mov	r0, r2
 3880 10de 1946     		mov	r1, r3
 3881 10e0 FFF7FEFF 		bl	strchr
 3882 10e4 0346     		mov	r3, r0
 3883 10e6 002B     		cmp	r3, #0
 3884 10e8 04D1     		bne	.L192
 702:../src/cli.c  ****         for (i = 0; i < 8; i++) {
 3885              		.loc 1 702 0 is_stmt 1
 3886 10ea FB69     		ldr	r3, [r7, #28]
 3887 10ec 03F10103 		add	r3, r3, #1
 3888 10f0 FB61     		str	r3, [r7, #28]
 3889 10f2 03E0     		b	.L191
 3890              	.L192:
 704:../src/cli.c  ****                 continue;
 705:../src/cli.c  ****             uartPrint("Must be any order of AETR1234\r\n");
 3891              		.loc 1 705 0
 3892 10f4 1D48     		ldr	r0, .L197+8
 3893 10f6 FFF7FEFF 		bl	uartPrint
 3894 10fa 2FE0     		b	.L185
 3895              	.L191:
 702:../src/cli.c  ****         for (i = 0; i < 8; i++) {
 3896              		.loc 1 702 0 discriminator 1
 3897 10fc FB69     		ldr	r3, [r7, #28]
 3898 10fe 072B     		cmp	r3, #7
 3899 1100 D8D9     		bls	.L194
 706:../src/cli.c  ****             return;
 707:../src/cli.c  ****         }
 708:../src/cli.c  ****         parseRcChannels(cmdline);
 3900              		.loc 1 708 0
 3901 1102 7868     		ldr	r0, [r7, #4]
 3902 1104 FFF7FEFF 		bl	parseRcChannels
 3903              	.L186:
 709:../src/cli.c  ****     }
 710:../src/cli.c  ****     uartPrint("Current assignment: ");
 3904              		.loc 1 710 0
 3905 1108 1948     		ldr	r0, .L197+12
 3906 110a FFF7FEFF 		bl	uartPrint
 711:../src/cli.c  ****     for (i = 0; i < 8; i++)
 3907              		.loc 1 711 0
 3908 110e 4FF00003 		mov	r3, #0
 3909 1112 FB61     		str	r3, [r7, #28]
 3910 1114 12E0     		b	.L195
 3911              	.L196:
 712:../src/cli.c  ****         out[mcfg.rcmap[i]] = rcChannelLetters[i];
 3912              		.loc 1 712 0 discriminator 2
 3913 1116 174A     		ldr	r2, .L197+16
 3914 1118 FB69     		ldr	r3, [r7, #28]
 3915 111a D318     		adds	r3, r2, r3
 3916 111c 03F1F803 		add	r3, r3, #248
 3917 1120 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 3918 1122 1149     		ldr	r1, .L197+4
 3919 1124 FA69     		ldr	r2, [r7, #28]
 3920 1126 8A18     		adds	r2, r1, r2
 3921 1128 1278     		ldrb	r2, [r2, #0]	@ zero_extendqisi2
 3922 112a 07F12001 		add	r1, r7, #32
 3923 112e CB18     		adds	r3, r1, r3
 3924 1130 03F8142C 		strb	r2, [r3, #-20]
 711:../src/cli.c  ****     for (i = 0; i < 8; i++)
 3925              		.loc 1 711 0 discriminator 2
 3926 1134 FB69     		ldr	r3, [r7, #28]
 3927 1136 03F10103 		add	r3, r3, #1
 3928 113a FB61     		str	r3, [r7, #28]
 3929              	.L195:
 711:../src/cli.c  ****     for (i = 0; i < 8; i++)
 3930              		.loc 1 711 0 is_stmt 0 discriminator 1
 3931 113c FB69     		ldr	r3, [r7, #28]
 3932 113e 072B     		cmp	r3, #7
 3933 1140 E9D9     		bls	.L196
 713:../src/cli.c  ****     out[i] = '\0';
 3934              		.loc 1 713 0 is_stmt 1
 3935 1142 07F10C02 		add	r2, r7, #12
 3936 1146 FB69     		ldr	r3, [r7, #28]
 3937 1148 D318     		adds	r3, r2, r3
 3938 114a 4FF00002 		mov	r2, #0
 3939 114e 1A70     		strb	r2, [r3, #0]
 714:../src/cli.c  ****     printf("%s\r\n", out);
 3940              		.loc 1 714 0
 3941 1150 07F10C03 		add	r3, r7, #12
 3942 1154 0848     		ldr	r0, .L197+20
 3943 1156 1946     		mov	r1, r3
 3944 1158 FFF7FEFF 		bl	tfp_printf
 3945              	.L185:
 715:../src/cli.c  **** }
 3946              		.loc 1 715 0
 3947 115c 07F12007 		add	r7, r7, #32
 3948 1160 BD46     		mov	sp, r7
 3949 1162 80BD     		pop	{r7, pc}
 3950              	.L198:
 3951              		.align	2
 3952              	.L197:
 3953 1164 00000000 		.word	__ctype_ptr__
 3954 1168 00000000 		.word	rcChannelLetters
 3955 116c 20150000 		.word	.LC212
 3956 1170 40150000 		.word	.LC213
 3957 1174 00000000 		.word	mcfg
 3958 1178 C4120000 		.word	.LC177
 3959              		.cfi_endproc
 3960              	.LFE43:
 3962              		.section	.rodata
 3963 1555 000000   		.align	2
 3964              	.LC214:
 3965 1558 43757272 		.ascii	"Current mixer: %s\015\012\000"
 3965      656E7420 
 3965      6D697865 
 3965      723A2025 
 3965      730D0A00 
 3966              		.align	2
 3967              	.LC215:
 3968 156c 41766169 		.ascii	"Available mixers: \000"
 3968      6C61626C 
 3968      65206D69 
 3968      78657273 
 3968      3A2000
 3969 157f 00       		.align	2
 3970              	.LC216:
 3971 1580 4D697865 		.ascii	"Mixer set to %s\015\012\000"
 3971      72207365 
 3971      7420746F 
 3971      2025730D 
 3971      0A00
 3972              		.text
 3973              		.align	2
 3974              		.thumb
 3975              		.thumb_func
 3977              	cliMixer:
 3978              	.LFB44:
 716:../src/cli.c  **** 
 717:../src/cli.c  **** static void cliMixer(char *cmdline)
 718:../src/cli.c  **** {
 3979              		.loc 1 718 0
 3980              		.cfi_startproc
 3981              		@ args = 0, pretend = 0, frame = 16
 3982              		@ frame_needed = 1, uses_anonymous_args = 0
 3983 117c 80B5     		push	{r7, lr}
 3984              	.LCFI44:
 3985              		.cfi_def_cfa_offset 8
 3986              		.cfi_offset 7, -8
 3987              		.cfi_offset 14, -4
 3988 117e 84B0     		sub	sp, sp, #16
 3989              	.LCFI45:
 3990              		.cfi_def_cfa_offset 24
 3991 1180 00AF     		add	r7, sp, #0
 3992              	.LCFI46:
 3993              		.cfi_def_cfa_register 7
 3994 1182 7860     		str	r0, [r7, #4]
 719:../src/cli.c  ****     int i;
 720:../src/cli.c  ****     int len;
 721:../src/cli.c  **** 
 722:../src/cli.c  ****     len = strlen(cmdline);
 3995              		.loc 1 722 0
 3996 1184 7868     		ldr	r0, [r7, #4]
 3997 1186 FFF7FEFF 		bl	strlen
 3998 118a 0346     		mov	r3, r0
 3999 118c BB60     		str	r3, [r7, #8]
 723:../src/cli.c  **** 
 724:../src/cli.c  ****     if (len == 0) {
 4000              		.loc 1 724 0
 4001 118e BB68     		ldr	r3, [r7, #8]
 4002 1190 002B     		cmp	r3, #0
 4003 1192 0BD1     		bne	.L200
 725:../src/cli.c  ****         printf("Current mixer: %s\r\n", mixerNames[mcfg.mixerConfiguration - 1]);
 4004              		.loc 1 725 0
 4005 1194 334B     		ldr	r3, .L211
 4006 1196 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 4007 1198 03F1FF32 		add	r2, r3, #-1
 4008 119c 324B     		ldr	r3, .L211+4
 4009 119e 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4010 11a2 3248     		ldr	r0, .L211+8
 4011 11a4 1946     		mov	r1, r3
 4012 11a6 FFF7FEFF 		bl	tfp_printf
 726:../src/cli.c  ****         return;
 4013              		.loc 1 726 0
 4014 11aa 56E0     		b	.L199
 4015              	.L200:
 727:../src/cli.c  ****     } else if (strncasecmp(cmdline, "list", len) == 0) {
 4016              		.loc 1 727 0
 4017 11ac BB68     		ldr	r3, [r7, #8]
 4018 11ae 7868     		ldr	r0, [r7, #4]
 4019 11b0 2F49     		ldr	r1, .L211+12
 4020 11b2 1A46     		mov	r2, r3
 4021 11b4 FFF7FEFF 		bl	strncasecmp
 4022 11b8 0346     		mov	r3, r0
 4023 11ba 002B     		cmp	r3, #0
 4024 11bc 1DD1     		bne	.L202
 728:../src/cli.c  ****         uartPrint("Available mixers: ");
 4025              		.loc 1 728 0
 4026 11be 2D48     		ldr	r0, .L211+16
 4027 11c0 FFF7FEFF 		bl	uartPrint
 729:../src/cli.c  ****         for (i = 0; ; i++) {
 4028              		.loc 1 729 0
 4029 11c4 4FF00003 		mov	r3, #0
 4030 11c8 FB60     		str	r3, [r7, #12]
 4031              	.L205:
 730:../src/cli.c  ****             if (mixerNames[i] == NULL)
 4032              		.loc 1 730 0
 4033 11ca 274B     		ldr	r3, .L211+4
 4034 11cc FA68     		ldr	r2, [r7, #12]
 4035 11ce 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4036 11d2 002B     		cmp	r3, #0
 4037 11d4 0CD0     		beq	.L210
 4038              	.L203:
 731:../src/cli.c  ****                 break;
 732:../src/cli.c  ****             printf("%s ", mixerNames[i]);
 4039              		.loc 1 732 0
 4040 11d6 244B     		ldr	r3, .L211+4
 4041 11d8 FA68     		ldr	r2, [r7, #12]
 4042 11da 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4043 11de 2648     		ldr	r0, .L211+20
 4044 11e0 1946     		mov	r1, r3
 4045 11e2 FFF7FEFF 		bl	tfp_printf
 729:../src/cli.c  ****         for (i = 0; ; i++) {
 4046              		.loc 1 729 0
 4047 11e6 FB68     		ldr	r3, [r7, #12]
 4048 11e8 03F10103 		add	r3, r3, #1
 4049 11ec FB60     		str	r3, [r7, #12]
 733:../src/cli.c  ****         }
 4050              		.loc 1 733 0
 4051 11ee ECE7     		b	.L205
 4052              	.L210:
 731:../src/cli.c  ****                 break;
 4053              		.loc 1 731 0
 4054 11f0 00BF     		nop
 4055              	.L209:
 734:../src/cli.c  ****         uartPrint("\r\n");
 4056              		.loc 1 734 0
 4057 11f2 2248     		ldr	r0, .L211+24
 4058 11f4 FFF7FEFF 		bl	uartPrint
 735:../src/cli.c  ****         return;
 4059              		.loc 1 735 0
 4060 11f8 2FE0     		b	.L199
 4061              	.L202:
 736:../src/cli.c  ****     }
 737:../src/cli.c  **** 
 738:../src/cli.c  ****     for (i = 0; ; i++) {
 4062              		.loc 1 738 0
 4063 11fa 4FF00003 		mov	r3, #0
 4064 11fe FB60     		str	r3, [r7, #12]
 4065              	.L208:
 739:../src/cli.c  ****         if (mixerNames[i] == NULL) {
 4066              		.loc 1 739 0
 4067 1200 194B     		ldr	r3, .L211+4
 4068 1202 FA68     		ldr	r2, [r7, #12]
 4069 1204 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4070 1208 002B     		cmp	r3, #0
 4071 120a 03D1     		bne	.L206
 740:../src/cli.c  ****             uartPrint("Invalid mixer type...\r\n");
 4072              		.loc 1 740 0
 4073 120c 1C48     		ldr	r0, .L211+28
 4074 120e FFF7FEFF 		bl	uartPrint
 741:../src/cli.c  ****             break;
 4075              		.loc 1 741 0
 4076 1212 22E0     		b	.L199
 4077              	.L206:
 742:../src/cli.c  ****         }
 743:../src/cli.c  ****         if (strncasecmp(cmdline, mixerNames[i], len) == 0) {
 4078              		.loc 1 743 0
 4079 1214 144B     		ldr	r3, .L211+4
 4080 1216 FA68     		ldr	r2, [r7, #12]
 4081 1218 53F82220 		ldr	r2, [r3, r2, lsl #2]
 4082 121c BB68     		ldr	r3, [r7, #8]
 4083 121e 7868     		ldr	r0, [r7, #4]
 4084 1220 1146     		mov	r1, r2
 4085 1222 1A46     		mov	r2, r3
 4086 1224 FFF7FEFF 		bl	strncasecmp
 4087 1228 0346     		mov	r3, r0
 4088 122a 002B     		cmp	r3, #0
 4089 122c 10D1     		bne	.L207
 744:../src/cli.c  ****             mcfg.mixerConfiguration = i + 1;
 4090              		.loc 1 744 0
 4091 122e FB68     		ldr	r3, [r7, #12]
 4092 1230 DBB2     		uxtb	r3, r3
 4093 1232 03F10103 		add	r3, r3, #1
 4094 1236 DAB2     		uxtb	r2, r3
 4095 1238 0A4B     		ldr	r3, .L211
 4096 123a 5A71     		strb	r2, [r3, #5]
 745:../src/cli.c  ****             printf("Mixer set to %s\r\n", mixerNames[i]);
 4097              		.loc 1 745 0
 4098 123c 0A4B     		ldr	r3, .L211+4
 4099 123e FA68     		ldr	r2, [r7, #12]
 4100 1240 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4101 1244 0F48     		ldr	r0, .L211+32
 4102 1246 1946     		mov	r1, r3
 4103 1248 FFF7FEFF 		bl	tfp_printf
 746:../src/cli.c  ****             break;
 4104              		.loc 1 746 0
 4105 124c 00BF     		nop
 4106 124e 04E0     		b	.L199
 4107              	.L207:
 738:../src/cli.c  ****     for (i = 0; ; i++) {
 4108              		.loc 1 738 0
 4109 1250 FB68     		ldr	r3, [r7, #12]
 4110 1252 03F10103 		add	r3, r3, #1
 4111 1256 FB60     		str	r3, [r7, #12]
 747:../src/cli.c  ****         }
 748:../src/cli.c  ****     }
 4112              		.loc 1 748 0
 4113 1258 D2E7     		b	.L208
 4114              	.L199:
 749:../src/cli.c  **** }
 4115              		.loc 1 749 0
 4116 125a 07F11007 		add	r7, r7, #16
 4117 125e BD46     		mov	sp, r7
 4118 1260 80BD     		pop	{r7, pc}
 4119              	.L212:
 4120 1262 00BF     		.align	2
 4121              	.L211:
 4122 1264 00000000 		.word	mcfg
 4123 1268 00000000 		.word	mixerNames
 4124 126c 58150000 		.word	.LC214
 4125 1270 AC140000 		.word	.LC205
 4126 1274 6C150000 		.word	.LC215
 4127 1278 A8140000 		.word	.LC204
 4128 127c E4120000 		.word	.LC181
 4129 1280 F8120000 		.word	.LC184
 4130 1284 80150000 		.word	.LC216
 4131              		.cfi_endproc
 4132              	.LFE44:
 4134              		.section	.rodata
 4135 1592 0000     		.align	2
 4136              	.LC217:
 4137 1594 43757272 		.ascii	"Current profile: %d\015\012\000"
 4137      656E7420 
 4137      70726F66 
 4137      696C653A 
 4137      2025640D 
 4138              		.text
 4139              		.align	2
 4140              		.thumb
 4141              		.thumb_func
 4143              	cliProfile:
 4144              	.LFB45:
 750:../src/cli.c  **** 
 751:../src/cli.c  **** static void cliProfile(char *cmdline)
 752:../src/cli.c  **** {
 4145              		.loc 1 752 0
 4146              		.cfi_startproc
 4147              		@ args = 0, pretend = 0, frame = 16
 4148              		@ frame_needed = 1, uses_anonymous_args = 0
 4149 1288 80B5     		push	{r7, lr}
 4150              	.LCFI47:
 4151              		.cfi_def_cfa_offset 8
 4152              		.cfi_offset 7, -8
 4153              		.cfi_offset 14, -4
 4154 128a 84B0     		sub	sp, sp, #16
 4155              	.LCFI48:
 4156              		.cfi_def_cfa_offset 24
 4157 128c 00AF     		add	r7, sp, #0
 4158              	.LCFI49:
 4159              		.cfi_def_cfa_register 7
 4160 128e 7860     		str	r0, [r7, #4]
 753:../src/cli.c  ****     uint8_t len;
 754:../src/cli.c  ****     int i;
 755:../src/cli.c  **** 
 756:../src/cli.c  ****     len = strlen(cmdline);
 4161              		.loc 1 756 0
 4162 1290 7868     		ldr	r0, [r7, #4]
 4163 1292 FFF7FEFF 		bl	strlen
 4164 1296 0346     		mov	r3, r0
 4165 1298 FB73     		strb	r3, [r7, #15]
 757:../src/cli.c  ****     if (len == 0) {
 4166              		.loc 1 757 0
 4167 129a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4168 129c 002B     		cmp	r3, #0
 4169 129e 07D1     		bne	.L214
 758:../src/cli.c  ****         printf("Current profile: %d\r\n", mcfg.current_profile);
 4170              		.loc 1 758 0
 4171 12a0 114B     		ldr	r3, .L216
 4172 12a2 93F8EC32 		ldrb	r3, [r3, #748]	@ zero_extendqisi2
 4173 12a6 1148     		ldr	r0, .L216+4
 4174 12a8 1946     		mov	r1, r3
 4175 12aa FFF7FEFF 		bl	tfp_printf
 759:../src/cli.c  ****         return;
 4176              		.loc 1 759 0
 4177 12ae 17E0     		b	.L213
 4178              	.L214:
 760:../src/cli.c  ****     } else {
 761:../src/cli.c  ****         i = atoi(cmdline);
 4179              		.loc 1 761 0
 4180 12b0 7868     		ldr	r0, [r7, #4]
 4181 12b2 FFF7FEFF 		bl	atoi
 4182 12b6 B860     		str	r0, [r7, #8]
 762:../src/cli.c  ****         if (i >= 0 && i <= 2) {
 4183              		.loc 1 762 0
 4184 12b8 BB68     		ldr	r3, [r7, #8]
 4185 12ba 002B     		cmp	r3, #0
 4186 12bc 10DB     		blt	.L213
 4187              		.loc 1 762 0 is_stmt 0 discriminator 1
 4188 12be BB68     		ldr	r3, [r7, #8]
 4189 12c0 022B     		cmp	r3, #2
 4190 12c2 0DDC     		bgt	.L213
 763:../src/cli.c  ****             mcfg.current_profile = i;
 4191              		.loc 1 763 0 is_stmt 1
 4192 12c4 BB68     		ldr	r3, [r7, #8]
 4193 12c6 DAB2     		uxtb	r2, r3
 4194 12c8 074B     		ldr	r3, .L216
 4195 12ca 83F8EC22 		strb	r2, [r3, #748]
 764:../src/cli.c  ****             writeEEPROM(0, false);
 4196              		.loc 1 764 0
 4197 12ce 4FF00000 		mov	r0, #0
 4198 12d2 4FF00001 		mov	r1, #0
 4199 12d6 FFF7FEFF 		bl	writeEEPROM
 765:../src/cli.c  ****             cliProfile("");
 4200              		.loc 1 765 0
 4201 12da 0548     		ldr	r0, .L216+8
 4202 12dc FFF7D4FF 		bl	cliProfile
 4203              	.L213:
 766:../src/cli.c  ****         }
 767:../src/cli.c  ****     }
 768:../src/cli.c  **** }
 4204              		.loc 1 768 0
 4205 12e0 07F11007 		add	r7, r7, #16
 4206 12e4 BD46     		mov	sp, r7
 4207 12e6 80BD     		pop	{r7, pc}
 4208              	.L217:
 4209              		.align	2
 4210              	.L216:
 4211 12e8 00000000 		.word	mcfg
 4212 12ec 94150000 		.word	.LC217
 4213 12f0 E4010000 		.word	.LC35
 4214              		.cfi_endproc
 4215              	.LFE45:
 4217              		.section	.rodata
 4218 15aa 0000     		.align	2
 4219              	.LC218:
 4220 15ac 53617669 		.ascii	"Saving...\000"
 4220      6E672E2E 
 4220      2E00
 4221 15b6 0000     		.align	2
 4222              	.LC219:
 4223 15b8 0D0A5265 		.ascii	"\015\012Rebooting...\000"
 4223      626F6F74 
 4223      696E672E 
 4223      2E2E00
 4224              		.text
 4225              		.align	2
 4226              		.thumb
 4227              		.thumb_func
 4229              	cliSave:
 4230              	.LFB46:
 769:../src/cli.c  **** 
 770:../src/cli.c  **** static void cliSave(char *cmdline)
 771:../src/cli.c  **** {
 4231              		.loc 1 771 0
 4232              		.cfi_startproc
 4233              		@ args = 0, pretend = 0, frame = 8
 4234              		@ frame_needed = 1, uses_anonymous_args = 0
 4235 12f4 80B5     		push	{r7, lr}
 4236              	.LCFI50:
 4237              		.cfi_def_cfa_offset 8
 4238              		.cfi_offset 7, -8
 4239              		.cfi_offset 14, -4
 4240 12f6 82B0     		sub	sp, sp, #8
 4241              	.LCFI51:
 4242              		.cfi_def_cfa_offset 16
 4243 12f8 00AF     		add	r7, sp, #0
 4244              	.LCFI52:
 4245              		.cfi_def_cfa_register 7
 4246 12fa 7860     		str	r0, [r7, #4]
 772:../src/cli.c  ****     uartPrint("Saving...");
 4247              		.loc 1 772 0
 4248 12fc 0B48     		ldr	r0, .L219
 4249 12fe FFF7FEFF 		bl	uartPrint
 773:../src/cli.c  ****     writeEEPROM(0, true);
 4250              		.loc 1 773 0
 4251 1302 4FF00000 		mov	r0, #0
 4252 1306 4FF00101 		mov	r1, #1
 4253 130a FFF7FEFF 		bl	writeEEPROM
 774:../src/cli.c  ****     uartPrint("\r\nRebooting...");
 4254              		.loc 1 774 0
 4255 130e 0848     		ldr	r0, .L219+4
 4256 1310 FFF7FEFF 		bl	uartPrint
 775:../src/cli.c  ****     delay(10);
 4257              		.loc 1 775 0
 4258 1314 4FF00A00 		mov	r0, #10
 4259 1318 FFF7FEFF 		bl	delay
 776:../src/cli.c  ****     systemReset(false);
 4260              		.loc 1 776 0
 4261 131c 4FF00000 		mov	r0, #0
 4262 1320 FFF7FEFF 		bl	systemReset
 777:../src/cli.c  **** }
 4263              		.loc 1 777 0
 4264 1324 07F10807 		add	r7, r7, #8
 4265 1328 BD46     		mov	sp, r7
 4266 132a 80BD     		pop	{r7, pc}
 4267              	.L220:
 4268              		.align	2
 4269              	.L219:
 4270 132c AC150000 		.word	.LC218
 4271 1330 B8150000 		.word	.LC219
 4272              		.cfi_endproc
 4273              	.LFE46:
 4275              		.global	__aeabi_i2f
 4276              		.section	.rodata
 4277 15c7 00       		.align	2
 4278              	.LC220:
 4279 15c8 20257300 		.ascii	" %s\000"
 4280              		.align	2
 4281              	.LC221:
 4282 15cc 256400   		.ascii	"%d\000"
 4283 15cf 00       		.align	2
 4284              	.LC222:
 4285 15d0 20256420 		.ascii	" %d %d\000"
 4285      256400
 4286              		.text
 4287              		.align	2
 4288              		.thumb
 4289              		.thumb_func
 4291              	cliPrintVar:
 4292              	.LFB47:
 778:../src/cli.c  **** 
 779:../src/cli.c  **** static void cliPrintVar(const clivalue_t *var, uint32_t full)
 780:../src/cli.c  **** {
 4293              		.loc 1 780 0
 4294              		.cfi_startproc
 4295              		@ args = 0, pretend = 0, frame = 24
 4296              		@ frame_needed = 1, uses_anonymous_args = 0
 4297 1334 80B5     		push	{r7, lr}
 4298              	.LCFI53:
 4299              		.cfi_def_cfa_offset 8
 4300              		.cfi_offset 7, -8
 4301              		.cfi_offset 14, -4
 4302 1336 86B0     		sub	sp, sp, #24
 4303              	.LCFI54:
 4304              		.cfi_def_cfa_offset 32
 4305 1338 00AF     		add	r7, sp, #0
 4306              	.LCFI55:
 4307              		.cfi_def_cfa_register 7
 4308 133a 7860     		str	r0, [r7, #4]
 4309 133c 3960     		str	r1, [r7, #0]
 781:../src/cli.c  ****     int32_t value = 0;
 4310              		.loc 1 781 0
 4311 133e 4FF00003 		mov	r3, #0
 4312 1342 7B61     		str	r3, [r7, #20]
 782:../src/cli.c  ****     char buf[8];
 783:../src/cli.c  **** 
 784:../src/cli.c  ****     switch (var->type) {
 4313              		.loc 1 784 0
 4314 1344 7B68     		ldr	r3, [r7, #4]
 4315 1346 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 4316 1348 052B     		cmp	r3, #5
 4317 134a 5ED8     		bhi	.L222
 4318 134c 01A2     		adr	r2, .L229
 4319 134e 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 4320 1352 00BF     		.align	2
 4321              	.L229:
 4322 1354 6D130000 		.word	.L223+1
 4323 1358 77130000 		.word	.L224+1
 4324 135c 83130000 		.word	.L225+1
 4325 1360 8D130000 		.word	.L226+1
 4326 1364 99130000 		.word	.L227+1
 4327 1368 A3130000 		.word	.L228+1
 4328              	.L223:
 785:../src/cli.c  ****         case VAR_UINT8:
 786:../src/cli.c  ****             value = *(uint8_t *)var->ptr;
 4329              		.loc 1 786 0
 4330 136c 7B68     		ldr	r3, [r7, #4]
 4331 136e 9B68     		ldr	r3, [r3, #8]
 4332 1370 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4333 1372 7B61     		str	r3, [r7, #20]
 787:../src/cli.c  ****             break;
 4334              		.loc 1 787 0
 4335 1374 49E0     		b	.L222
 4336              	.L224:
 788:../src/cli.c  **** 
 789:../src/cli.c  ****         case VAR_INT8:
 790:../src/cli.c  ****             value = *(int8_t *)var->ptr;
 4337              		.loc 1 790 0
 4338 1376 7B68     		ldr	r3, [r7, #4]
 4339 1378 9B68     		ldr	r3, [r3, #8]
 4340 137a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4341 137c 5BB2     		sxtb	r3, r3
 4342 137e 7B61     		str	r3, [r7, #20]
 791:../src/cli.c  ****             break;
 4343              		.loc 1 791 0
 4344 1380 43E0     		b	.L222
 4345              	.L225:
 792:../src/cli.c  **** 
 793:../src/cli.c  ****         case VAR_UINT16:
 794:../src/cli.c  ****             value = *(uint16_t *)var->ptr;
 4346              		.loc 1 794 0
 4347 1382 7B68     		ldr	r3, [r7, #4]
 4348 1384 9B68     		ldr	r3, [r3, #8]
 4349 1386 1B88     		ldrh	r3, [r3, #0]
 4350 1388 7B61     		str	r3, [r7, #20]
 795:../src/cli.c  ****             break;
 4351              		.loc 1 795 0
 4352 138a 3EE0     		b	.L222
 4353              	.L226:
 796:../src/cli.c  **** 
 797:../src/cli.c  ****         case VAR_INT16:
 798:../src/cli.c  ****             value = *(int16_t *)var->ptr;
 4354              		.loc 1 798 0
 4355 138c 7B68     		ldr	r3, [r7, #4]
 4356 138e 9B68     		ldr	r3, [r3, #8]
 4357 1390 1B88     		ldrh	r3, [r3, #0]
 4358 1392 1BB2     		sxth	r3, r3
 4359 1394 7B61     		str	r3, [r7, #20]
 799:../src/cli.c  ****             break;
 4360              		.loc 1 799 0
 4361 1396 38E0     		b	.L222
 4362              	.L227:
 800:../src/cli.c  **** 
 801:../src/cli.c  ****         case VAR_UINT32:
 802:../src/cli.c  ****             value = *(uint32_t *)var->ptr;
 4363              		.loc 1 802 0
 4364 1398 7B68     		ldr	r3, [r7, #4]
 4365 139a 9B68     		ldr	r3, [r3, #8]
 4366 139c 1B68     		ldr	r3, [r3, #0]
 4367 139e 7B61     		str	r3, [r7, #20]
 803:../src/cli.c  ****             break;
 4368              		.loc 1 803 0
 4369 13a0 33E0     		b	.L222
 4370              	.L228:
 804:../src/cli.c  **** 
 805:../src/cli.c  ****         case VAR_FLOAT:
 806:../src/cli.c  ****             printf("%s", ftoa(*(float *)var->ptr, buf));
 4371              		.loc 1 806 0
 4372 13a2 7B68     		ldr	r3, [r7, #4]
 4373 13a4 9B68     		ldr	r3, [r3, #8]
 4374 13a6 1A68     		ldr	r2, [r3, #0]	@ float
 4375 13a8 07F10C03 		add	r3, r7, #12
 4376 13ac 1046     		mov	r0, r2
 4377 13ae 1946     		mov	r1, r3
 4378 13b0 FEF7F2FF 		bl	ftoa
 4379 13b4 0346     		mov	r3, r0
 4380 13b6 1F48     		ldr	r0, .L233
 4381 13b8 1946     		mov	r1, r3
 4382 13ba FFF7FEFF 		bl	tfp_printf
 807:../src/cli.c  ****             if (full) {
 4383              		.loc 1 807 0
 4384 13be 3B68     		ldr	r3, [r7, #0]
 4385 13c0 002B     		cmp	r3, #0
 4386 13c2 32D0     		beq	.L221
 808:../src/cli.c  ****                 printf(" %s", ftoa((float)var->min, buf));
 4387              		.loc 1 808 0
 4388 13c4 7B68     		ldr	r3, [r7, #4]
 4389 13c6 DB68     		ldr	r3, [r3, #12]
 4390 13c8 1846     		mov	r0, r3
 4391 13ca FFF7FEFF 		bl	__aeabi_i2f
 4392 13ce 0246     		mov	r2, r0
 4393 13d0 07F10C03 		add	r3, r7, #12
 4394 13d4 1046     		mov	r0, r2
 4395 13d6 1946     		mov	r1, r3
 4396 13d8 FEF7DEFF 		bl	ftoa
 4397 13dc 0346     		mov	r3, r0
 4398 13de 1648     		ldr	r0, .L233+4
 4399 13e0 1946     		mov	r1, r3
 4400 13e2 FFF7FEFF 		bl	tfp_printf
 809:../src/cli.c  ****                 printf(" %s", ftoa((float)var->max, buf));
 4401              		.loc 1 809 0
 4402 13e6 7B68     		ldr	r3, [r7, #4]
 4403 13e8 1B69     		ldr	r3, [r3, #16]
 4404 13ea 1846     		mov	r0, r3
 4405 13ec FFF7FEFF 		bl	__aeabi_i2f
 4406 13f0 0246     		mov	r2, r0
 4407 13f2 07F10C03 		add	r3, r7, #12
 4408 13f6 1046     		mov	r0, r2
 4409 13f8 1946     		mov	r1, r3
 4410 13fa FEF7CDFF 		bl	ftoa
 4411 13fe 0346     		mov	r3, r0
 4412 1400 0D48     		ldr	r0, .L233+4
 4413 1402 1946     		mov	r1, r3
 4414 1404 FFF7FEFF 		bl	tfp_printf
 4415 1408 0FE0     		b	.L221
 4416              	.L222:
 810:../src/cli.c  ****             }
 811:../src/cli.c  ****             return; // return from case for float only
 812:../src/cli.c  ****     }
 813:../src/cli.c  ****     printf("%d", value);
 4417              		.loc 1 813 0
 4418 140a 0C48     		ldr	r0, .L233+8
 4419 140c 7969     		ldr	r1, [r7, #20]
 4420 140e FFF7FEFF 		bl	tfp_printf
 814:../src/cli.c  ****     if (full)
 4421              		.loc 1 814 0
 4422 1412 3B68     		ldr	r3, [r7, #0]
 4423 1414 002B     		cmp	r3, #0
 4424 1416 08D0     		beq	.L221
 815:../src/cli.c  ****         printf(" %d %d", var->min, var->max);
 4425              		.loc 1 815 0
 4426 1418 7B68     		ldr	r3, [r7, #4]
 4427 141a DA68     		ldr	r2, [r3, #12]
 4428 141c 7B68     		ldr	r3, [r7, #4]
 4429 141e 1B69     		ldr	r3, [r3, #16]
 4430 1420 0748     		ldr	r0, .L233+12
 4431 1422 1146     		mov	r1, r2
 4432 1424 1A46     		mov	r2, r3
 4433 1426 FFF7FEFF 		bl	tfp_printf
 4434              	.L221:
 816:../src/cli.c  **** }
 4435              		.loc 1 816 0
 4436 142a 07F11807 		add	r7, r7, #24
 4437 142e BD46     		mov	sp, r7
 4438 1430 80BD     		pop	{r7, pc}
 4439              	.L234:
 4440 1432 00BF     		.align	2
 4441              	.L233:
 4442 1434 2C140000 		.word	.LC196
 4443 1438 C8150000 		.word	.LC220
 4444 143c CC150000 		.word	.LC221
 4445 1440 D0150000 		.word	.LC222
 4446              		.cfi_endproc
 4447              	.LFE47:
 4449              		.align	2
 4450              		.thumb
 4451              		.thumb_func
 4453              	cliSetVar:
 4454              	.LFB48:
 817:../src/cli.c  **** 
 818:../src/cli.c  **** static void cliSetVar(const clivalue_t *var, const int32_t value)
 819:../src/cli.c  **** {
 4455              		.loc 1 819 0
 4456              		.cfi_startproc
 4457              		@ args = 0, pretend = 0, frame = 8
 4458              		@ frame_needed = 1, uses_anonymous_args = 0
 4459              		@ link register save eliminated.
 4460 1444 80B4     		push	{r7}
 4461              	.LCFI56:
 4462              		.cfi_def_cfa_offset 4
 4463              		.cfi_offset 7, -4
 4464 1446 83B0     		sub	sp, sp, #12
 4465              	.LCFI57:
 4466              		.cfi_def_cfa_offset 16
 4467 1448 00AF     		add	r7, sp, #0
 4468              	.LCFI58:
 4469              		.cfi_def_cfa_register 7
 4470 144a 7860     		str	r0, [r7, #4]
 4471 144c 3960     		str	r1, [r7, #0]
 820:../src/cli.c  ****     switch (var->type) {
 4472              		.loc 1 820 0
 4473 144e 7B68     		ldr	r3, [r7, #4]
 4474 1450 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 4475 1452 052B     		cmp	r3, #5
 4476 1454 25D8     		bhi	.L235
 4477 1456 01A2     		adr	r2, .L241
 4478 1458 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 4479              		.align	2
 4480              	.L241:
 4481 145c 75140000 		.word	.L237+1
 4482 1460 75140000 		.word	.L237+1
 4483 1464 81140000 		.word	.L238+1
 4484 1468 81140000 		.word	.L238+1
 4485 146c 8D140000 		.word	.L239+1
 4486 1470 97140000 		.word	.L240+1
 4487              	.L237:
 821:../src/cli.c  ****         case VAR_UINT8:
 822:../src/cli.c  ****         case VAR_INT8:
 823:../src/cli.c  ****             *(char *)var->ptr = (char)value;
 4488              		.loc 1 823 0
 4489 1474 7B68     		ldr	r3, [r7, #4]
 4490 1476 9B68     		ldr	r3, [r3, #8]
 4491 1478 3A68     		ldr	r2, [r7, #0]
 4492 147a D2B2     		uxtb	r2, r2
 4493 147c 1A70     		strb	r2, [r3, #0]
 824:../src/cli.c  ****             break;
 4494              		.loc 1 824 0
 4495 147e 10E0     		b	.L235
 4496              	.L238:
 825:../src/cli.c  **** 
 826:../src/cli.c  ****         case VAR_UINT16:
 827:../src/cli.c  ****         case VAR_INT16:
 828:../src/cli.c  ****             *(short *)var->ptr = (short)value;
 4497              		.loc 1 828 0
 4498 1480 7B68     		ldr	r3, [r7, #4]
 4499 1482 9B68     		ldr	r3, [r3, #8]
 4500 1484 3A68     		ldr	r2, [r7, #0]
 4501 1486 92B2     		uxth	r2, r2
 4502 1488 1A80     		strh	r2, [r3, #0]	@ movhi
 829:../src/cli.c  ****             break;
 4503              		.loc 1 829 0
 4504 148a 0AE0     		b	.L235
 4505              	.L239:
 830:../src/cli.c  **** 
 831:../src/cli.c  ****         case VAR_UINT32:
 832:../src/cli.c  ****             *(int *)var->ptr = (int)value;
 4506              		.loc 1 832 0
 4507 148c 7B68     		ldr	r3, [r7, #4]
 4508 148e 9B68     		ldr	r3, [r3, #8]
 4509 1490 3A68     		ldr	r2, [r7, #0]
 4510 1492 1A60     		str	r2, [r3, #0]
 833:../src/cli.c  ****             break;
 4511              		.loc 1 833 0
 4512 1494 05E0     		b	.L235
 4513              	.L240:
 834:../src/cli.c  **** 
 835:../src/cli.c  ****         case VAR_FLOAT:
 836:../src/cli.c  ****             *(float *)var->ptr = *(float *)&value;
 4514              		.loc 1 836 0
 4515 1496 7B68     		ldr	r3, [r7, #4]
 4516 1498 9B68     		ldr	r3, [r3, #8]
 4517 149a 3A46     		mov	r2, r7
 4518 149c 1268     		ldr	r2, [r2, #0]	@ float
 4519 149e 1A60     		str	r2, [r3, #0]	@ float
 837:../src/cli.c  ****             break;
 4520              		.loc 1 837 0
 4521 14a0 00BF     		nop
 4522              	.L235:
 838:../src/cli.c  ****     }
 839:../src/cli.c  **** }
 4523              		.loc 1 839 0
 4524 14a2 07F10C07 		add	r7, r7, #12
 4525 14a6 BD46     		mov	sp, r7
 4526 14a8 80BC     		pop	{r7}
 4527 14aa 7047     		bx	lr
 4528              		.cfi_endproc
 4529              	.LFE48:
 4531              		.section	.rodata
 4532 15d7 00       		.align	2
 4533              	.LC223:
 4534 15d8 43757272 		.ascii	"Current settings: \015\012\000"
 4534      656E7420 
 4534      73657474 
 4534      696E6773 
 4534      3A200D0A 
 4535 15ed 000000   		.align	2
 4536              	.LC224:
 4537 15f0 2573203D 		.ascii	"%s = \000"
 4537      2000
 4538              		.global	__aeabi_fcmple
 4539              		.global	__aeabi_fcmpge
 4540 15f6 0000     		.align	2
 4541              	.LC225:
 4542 15f8 25732073 		.ascii	"%s set to \000"
 4542      65742074 
 4542      6F2000
 4543 1603 00       		.align	2
 4544              	.LC226:
 4545 1604 4552523A 		.ascii	"ERR: Value assignment out of range\015\012\000"
 4545      2056616C 
 4545      75652061 
 4545      73736967 
 4545      6E6D656E 
 4546 1629 000000   		.align	2
 4547              	.LC227:
 4548 162c 4552523A 		.ascii	"ERR: Unknown variable name\015\012\000"
 4548      20556E6B 
 4548      6E6F776E 
 4548      20766172 
 4548      6961626C 
 4549              		.text
 4550              		.align	2
 4551              		.thumb
 4552              		.thumb_func
 4554              	cliSet:
 4555              	.LFB49:
 840:../src/cli.c  **** 
 841:../src/cli.c  **** static void cliSet(char *cmdline)
 842:../src/cli.c  **** {
 4556              		.loc 1 842 0
 4557              		.cfi_startproc
 4558              		@ args = 0, pretend = 0, frame = 32
 4559              		@ frame_needed = 1, uses_anonymous_args = 0
 4560 14ac 90B5     		push	{r4, r7, lr}
 4561              	.LCFI59:
 4562              		.cfi_def_cfa_offset 12
 4563              		.cfi_offset 4, -12
 4564              		.cfi_offset 7, -8
 4565              		.cfi_offset 14, -4
 4566 14ae 89B0     		sub	sp, sp, #36
 4567              	.LCFI60:
 4568              		.cfi_def_cfa_offset 48
 4569 14b0 00AF     		add	r7, sp, #0
 4570              	.LCFI61:
 4571              		.cfi_def_cfa_register 7
 4572 14b2 7860     		str	r0, [r7, #4]
 843:../src/cli.c  ****     uint32_t i;
 844:../src/cli.c  ****     uint32_t len;
 845:../src/cli.c  ****     const clivalue_t *val;
 846:../src/cli.c  ****     char *eqptr = NULL;
 4573              		.loc 1 846 0
 4574 14b4 4FF00003 		mov	r3, #0
 4575 14b8 BB61     		str	r3, [r7, #24]
 847:../src/cli.c  ****     int32_t value = 0;
 4576              		.loc 1 847 0
 4577 14ba 4FF00003 		mov	r3, #0
 4578 14be 7B61     		str	r3, [r7, #20]
 848:../src/cli.c  ****     float valuef = 0;
 4579              		.loc 1 848 0
 4580 14c0 804B     		ldr	r3, .L260+28	@ float
 4581 14c2 BB60     		str	r3, [r7, #8]	@ float
 849:../src/cli.c  **** 
 850:../src/cli.c  ****     len = strlen(cmdline);
 4582              		.loc 1 850 0
 4583 14c4 7868     		ldr	r0, [r7, #4]
 4584 14c6 FFF7FEFF 		bl	strlen
 4585 14ca 3861     		str	r0, [r7, #16]
 851:../src/cli.c  **** 
 852:../src/cli.c  ****     if (len == 0 || (len == 1 && cmdline[0] == '*')) {
 4586              		.loc 1 852 0
 4587 14cc 3B69     		ldr	r3, [r7, #16]
 4588 14ce 002B     		cmp	r3, #0
 4589 14d0 06D0     		beq	.L243
 4590              		.loc 1 852 0 is_stmt 0 discriminator 1
 4591 14d2 3B69     		ldr	r3, [r7, #16]
 4592 14d4 012B     		cmp	r3, #1
 4593 14d6 31D1     		bne	.L244
 4594 14d8 7B68     		ldr	r3, [r7, #4]
 4595 14da 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4596 14dc 2A2B     		cmp	r3, #42
 4597 14de 2DD1     		bne	.L244
 4598              	.L243:
 853:../src/cli.c  ****         uartPrint("Current settings: \r\n");
 4599              		.loc 1 853 0 is_stmt 1
 4600 14e0 7148     		ldr	r0, .L260
 4601 14e2 FFF7FEFF 		bl	uartPrint
 854:../src/cli.c  ****         for (i = 0; i < VALUE_COUNT; i++) {
 4602              		.loc 1 854 0
 4603 14e6 4FF00003 		mov	r3, #0
 4604 14ea FB61     		str	r3, [r7, #28]
 4605 14ec 22E0     		b	.L245
 4606              	.L246:
 855:../src/cli.c  ****             val = &valueTable[i];
 4607              		.loc 1 855 0 discriminator 2
 4608 14ee FA69     		ldr	r2, [r7, #28]
 4609 14f0 1346     		mov	r3, r2
 4610 14f2 4FEA8303 		lsl	r3, r3, #2
 4611 14f6 9B18     		adds	r3, r3, r2
 4612 14f8 4FEA8303 		lsl	r3, r3, #2
 4613 14fc 6B4A     		ldr	r2, .L260+4
 4614 14fe 9B18     		adds	r3, r3, r2
 4615 1500 FB60     		str	r3, [r7, #12]
 856:../src/cli.c  ****             printf("%s = ", valueTable[i].name);
 4616              		.loc 1 856 0 discriminator 2
 4617 1502 6A49     		ldr	r1, .L260+4
 4618 1504 FA69     		ldr	r2, [r7, #28]
 4619 1506 1346     		mov	r3, r2
 4620 1508 4FEA8303 		lsl	r3, r3, #2
 4621 150c 9B18     		adds	r3, r3, r2
 4622 150e 4FEA8303 		lsl	r3, r3, #2
 4623 1512 CB18     		adds	r3, r1, r3
 4624 1514 1B68     		ldr	r3, [r3, #0]
 4625 1516 6648     		ldr	r0, .L260+8
 4626 1518 1946     		mov	r1, r3
 4627 151a FFF7FEFF 		bl	tfp_printf
 857:../src/cli.c  ****             cliPrintVar(val, len); // when len is 1 (when * is passed as argument), it will print m
 4628              		.loc 1 857 0 discriminator 2
 4629 151e F868     		ldr	r0, [r7, #12]
 4630 1520 3969     		ldr	r1, [r7, #16]
 4631 1522 FFF707FF 		bl	cliPrintVar
 858:../src/cli.c  ****             uartPrint("\r\n");
 4632              		.loc 1 858 0 discriminator 2
 4633 1526 6348     		ldr	r0, .L260+12
 4634 1528 FFF7FEFF 		bl	uartPrint
 854:../src/cli.c  ****         for (i = 0; i < VALUE_COUNT; i++) {
 4635              		.loc 1 854 0 discriminator 2
 4636 152c FB69     		ldr	r3, [r7, #28]
 4637 152e 03F10103 		add	r3, r3, #1
 4638 1532 FB61     		str	r3, [r7, #28]
 4639              	.L245:
 854:../src/cli.c  ****         for (i = 0; i < VALUE_COUNT; i++) {
 4640              		.loc 1 854 0 is_stmt 0 discriminator 1
 4641 1534 FB69     		ldr	r3, [r7, #28]
 4642 1536 662B     		cmp	r3, #102
 4643 1538 D9D9     		bls	.L246
 852:../src/cli.c  ****     if (len == 0 || (len == 1 && cmdline[0] == '*')) {
 4644              		.loc 1 852 0 is_stmt 1
 4645 153a B0E0     		b	.L242
 4646              	.L244:
 859:../src/cli.c  ****         }
 860:../src/cli.c  ****     } else if ((eqptr = strstr(cmdline, "="))) {
 4647              		.loc 1 860 0
 4648 153c 7868     		ldr	r0, [r7, #4]
 4649 153e 4FF03D01 		mov	r1, #61
 4650 1542 FFF7FEFF 		bl	strchr
 4651 1546 B861     		str	r0, [r7, #24]
 4652 1548 BB69     		ldr	r3, [r7, #24]
 4653 154a 002B     		cmp	r3, #0
 4654 154c 00F0A780 		beq	.L242
 861:../src/cli.c  ****         // has equal, set var
 862:../src/cli.c  ****         eqptr++;
 4655              		.loc 1 862 0
 4656 1550 BB69     		ldr	r3, [r7, #24]
 4657 1552 03F10103 		add	r3, r3, #1
 4658 1556 BB61     		str	r3, [r7, #24]
 863:../src/cli.c  ****         len--;
 4659              		.loc 1 863 0
 4660 1558 3B69     		ldr	r3, [r7, #16]
 4661 155a 03F1FF33 		add	r3, r3, #-1
 4662 155e 3B61     		str	r3, [r7, #16]
 864:../src/cli.c  ****         value = atoi(eqptr);
 4663              		.loc 1 864 0
 4664 1560 B869     		ldr	r0, [r7, #24]
 4665 1562 FFF7FEFF 		bl	atoi
 4666 1566 7861     		str	r0, [r7, #20]
 865:../src/cli.c  ****         valuef = _atof(eqptr);
 4667              		.loc 1 865 0
 4668 1568 B869     		ldr	r0, [r7, #24]
 4669 156a FEF7ADFD 		bl	_atof
 4670 156e 0346     		mov	r3, r0
 4671 1570 BB60     		str	r3, [r7, #8]	@ float
 866:../src/cli.c  ****         for (i = 0; i < VALUE_COUNT; i++) {
 4672              		.loc 1 866 0
 4673 1572 4FF00003 		mov	r3, #0
 4674 1576 FB61     		str	r3, [r7, #28]
 4675 1578 8AE0     		b	.L248
 4676              	.L257:
 867:../src/cli.c  ****             val = &valueTable[i];
 4677              		.loc 1 867 0
 4678 157a FA69     		ldr	r2, [r7, #28]
 4679 157c 1346     		mov	r3, r2
 4680 157e 4FEA8303 		lsl	r3, r3, #2
 4681 1582 9B18     		adds	r3, r3, r2
 4682 1584 4FEA8303 		lsl	r3, r3, #2
 4683 1588 484A     		ldr	r2, .L260+4
 4684 158a 9B18     		adds	r3, r3, r2
 4685 158c FB60     		str	r3, [r7, #12]
 868:../src/cli.c  ****             if (strncasecmp(cmdline, valueTable[i].name, strlen(valueTable[i].name)) == 0) {
 4686              		.loc 1 868 0
 4687 158e 4749     		ldr	r1, .L260+4
 4688 1590 FA69     		ldr	r2, [r7, #28]
 4689 1592 1346     		mov	r3, r2
 4690 1594 4FEA8303 		lsl	r3, r3, #2
 4691 1598 9B18     		adds	r3, r3, r2
 4692 159a 4FEA8303 		lsl	r3, r3, #2
 4693 159e CB18     		adds	r3, r1, r3
 4694 15a0 1C68     		ldr	r4, [r3, #0]
 4695 15a2 4249     		ldr	r1, .L260+4
 4696 15a4 FA69     		ldr	r2, [r7, #28]
 4697 15a6 1346     		mov	r3, r2
 4698 15a8 4FEA8303 		lsl	r3, r3, #2
 4699 15ac 9B18     		adds	r3, r3, r2
 4700 15ae 4FEA8303 		lsl	r3, r3, #2
 4701 15b2 CB18     		adds	r3, r1, r3
 4702 15b4 1B68     		ldr	r3, [r3, #0]
 4703 15b6 1846     		mov	r0, r3
 4704 15b8 FFF7FEFF 		bl	strlen
 4705 15bc 0346     		mov	r3, r0
 4706 15be 7868     		ldr	r0, [r7, #4]
 4707 15c0 2146     		mov	r1, r4
 4708 15c2 1A46     		mov	r2, r3
 4709 15c4 FFF7FEFF 		bl	strncasecmp
 4710 15c8 0346     		mov	r3, r0
 4711 15ca 002B     		cmp	r3, #0
 4712 15cc 5CD1     		bne	.L249
 869:../src/cli.c  ****                 if (valuef >= valueTable[i].min && valuef <= valueTable[i].max) { // here we compar
 4713              		.loc 1 869 0
 4714 15ce 3749     		ldr	r1, .L260+4
 4715 15d0 FA69     		ldr	r2, [r7, #28]
 4716 15d2 1346     		mov	r3, r2
 4717 15d4 4FEA8303 		lsl	r3, r3, #2
 4718 15d8 9B18     		adds	r3, r3, r2
 4719 15da 4FEA8303 		lsl	r3, r3, #2
 4720 15de CB18     		adds	r3, r1, r3
 4721 15e0 03F10C03 		add	r3, r3, #12
 4722 15e4 1B68     		ldr	r3, [r3, #0]
 4723 15e6 1846     		mov	r0, r3
 4724 15e8 FFF7FEFF 		bl	__aeabi_i2f
 4725 15ec 0246     		mov	r2, r0
 4726 15ee BB68     		ldr	r3, [r7, #8]	@ float
 4727 15f0 1046     		mov	r0, r2
 4728 15f2 1946     		mov	r1, r3
 4729 15f4 FFF7FEFF 		bl	__aeabi_fcmple
 4730 15f8 0346     		mov	r3, r0
 4731 15fa 002B     		cmp	r3, #0
 4732 15fc 40D0     		beq	.L250
 4733              	.L258:
 4734              		.loc 1 869 0 is_stmt 0 discriminator 1
 4735 15fe 2B49     		ldr	r1, .L260+4
 4736 1600 FA69     		ldr	r2, [r7, #28]
 4737 1602 1346     		mov	r3, r2
 4738 1604 4FEA8303 		lsl	r3, r3, #2
 4739 1608 9B18     		adds	r3, r3, r2
 4740 160a 4FEA8303 		lsl	r3, r3, #2
 4741 160e CB18     		adds	r3, r1, r3
 4742 1610 03F11003 		add	r3, r3, #16
 4743 1614 1B68     		ldr	r3, [r3, #0]
 4744 1616 1846     		mov	r0, r3
 4745 1618 FFF7FEFF 		bl	__aeabi_i2f
 4746 161c 0246     		mov	r2, r0
 4747 161e BB68     		ldr	r3, [r7, #8]	@ float
 4748 1620 1046     		mov	r0, r2
 4749 1622 1946     		mov	r1, r3
 4750 1624 FFF7FEFF 		bl	__aeabi_fcmpge
 4751 1628 0346     		mov	r3, r0
 4752 162a 002B     		cmp	r3, #0
 4753 162c 28D0     		beq	.L250
 4754              	.L259:
 870:../src/cli.c  ****                     cliSetVar(val, valueTable[i].type == VAR_FLOAT ? *(uint32_t *)&valuef : value);
 4755              		.loc 1 870 0 is_stmt 1
 4756 162e 1F49     		ldr	r1, .L260+4
 4757 1630 FA69     		ldr	r2, [r7, #28]
 4758 1632 1346     		mov	r3, r2
 4759 1634 4FEA8303 		lsl	r3, r3, #2
 4760 1638 9B18     		adds	r3, r3, r2
 4761 163a 4FEA8303 		lsl	r3, r3, #2
 4762 163e CB18     		adds	r3, r1, r3
 4763 1640 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 4764 1642 052B     		cmp	r3, #5
 4765 1644 03D1     		bne	.L253
 4766              		.loc 1 870 0 is_stmt 0 discriminator 1
 4767 1646 07F10803 		add	r3, r7, #8
 4768 164a 1B68     		ldr	r3, [r3, #0]
 4769 164c 00E0     		b	.L254
 4770              	.L253:
 4771              		.loc 1 870 0 discriminator 2
 4772 164e 7B69     		ldr	r3, [r7, #20]
 4773              	.L254:
 4774              		.loc 1 870 0 discriminator 3
 4775 1650 F868     		ldr	r0, [r7, #12]
 4776 1652 1946     		mov	r1, r3
 4777 1654 FFF7F6FE 		bl	cliSetVar
 871:../src/cli.c  ****                     printf("%s set to ", valueTable[i].name);
 4778              		.loc 1 871 0 is_stmt 1 discriminator 3
 4779 1658 1449     		ldr	r1, .L260+4
 4780 165a FA69     		ldr	r2, [r7, #28]
 4781 165c 1346     		mov	r3, r2
 4782 165e 4FEA8303 		lsl	r3, r3, #2
 4783 1662 9B18     		adds	r3, r3, r2
 4784 1664 4FEA8303 		lsl	r3, r3, #2
 4785 1668 CB18     		adds	r3, r1, r3
 4786 166a 1B68     		ldr	r3, [r3, #0]
 4787 166c 1248     		ldr	r0, .L260+16
 4788 166e 1946     		mov	r1, r3
 4789 1670 FFF7FEFF 		bl	tfp_printf
 872:../src/cli.c  ****                     cliPrintVar(val, 0);
 4790              		.loc 1 872 0 discriminator 3
 4791 1674 F868     		ldr	r0, [r7, #12]
 4792 1676 4FF00001 		mov	r1, #0
 4793 167a FFF75BFE 		bl	cliPrintVar
 4794 167e 0EE0     		b	.L242
 4795              	.L250:
 873:../src/cli.c  ****                 } else {
 874:../src/cli.c  ****                     uartPrint("ERR: Value assignment out of range\r\n");
 4796              		.loc 1 874 0
 4797 1680 0E48     		ldr	r0, .L260+20
 4798 1682 FFF7FEFF 		bl	uartPrint
 4799 1686 0AE0     		b	.L242
 4800              	.L249:
 866:../src/cli.c  ****         for (i = 0; i < VALUE_COUNT; i++) {
 4801              		.loc 1 866 0
 4802 1688 FB69     		ldr	r3, [r7, #28]
 4803 168a 03F10103 		add	r3, r3, #1
 4804 168e FB61     		str	r3, [r7, #28]
 4805              	.L248:
 866:../src/cli.c  ****         for (i = 0; i < VALUE_COUNT; i++) {
 4806              		.loc 1 866 0 is_stmt 0 discriminator 1
 4807 1690 FB69     		ldr	r3, [r7, #28]
 4808 1692 662B     		cmp	r3, #102
 4809 1694 7FF671AF 		bls	.L257
 875:../src/cli.c  ****                 }
 876:../src/cli.c  ****                 return;
 877:../src/cli.c  ****             }
 878:../src/cli.c  ****         }
 879:../src/cli.c  ****         uartPrint("ERR: Unknown variable name\r\n");
 4810              		.loc 1 879 0 is_stmt 1
 4811 1698 0948     		ldr	r0, .L260+24
 4812 169a FFF7FEFF 		bl	uartPrint
 4813              	.L242:
 880:../src/cli.c  ****     }
 881:../src/cli.c  **** }
 4814              		.loc 1 881 0
 4815 169e 07F12407 		add	r7, r7, #36
 4816 16a2 BD46     		mov	sp, r7
 4817 16a4 90BD     		pop	{r4, r7, pc}
 4818              	.L261:
 4819 16a6 00BF     		.align	2
 4820              	.L260:
 4821 16a8 D8150000 		.word	.LC223
 4822 16ac 00000000 		.word	valueTable
 4823 16b0 F0150000 		.word	.LC224
 4824 16b4 E4120000 		.word	.LC181
 4825 16b8 F8150000 		.word	.LC225
 4826 16bc 04160000 		.word	.LC226
 4827 16c0 2C160000 		.word	.LC227
 4828 16c4 00000000 		.word	0
 4829              		.cfi_endproc
 4830              	.LFE49:
 4832              		.section	.rodata
 4833 1649 000000   		.align	2
 4834              	.LC228:
 4835 164c 53797374 		.ascii	"System Uptime: %d seconds, Voltage: %d * 0.1V (%dS "
 4835      656D2055 
 4835      7074696D 
 4835      653A2025 
 4835      64207365 
 4836 167f 62617474 		.ascii	"battery)\015\012\000"
 4836      65727929 
 4836      0D0A00
 4837 168a 0000     		.align	2
 4838              	.LC229:
 4839 168c 43505520 		.ascii	"CPU %dMHz, detected sensors: \000"
 4839      25644D48 
 4839      7A2C2064 
 4839      65746563 
 4839      74656420 
 4840 16aa 0000     		.align	2
 4841              	.LC230:
 4842 16ac 41434348 		.ascii	"ACCHW: %s\000"
 4842      573A2025 
 4842      7300
 4843 16b6 0000     		.align	2
 4844              	.LC231:
 4845 16b8 2E256300 		.ascii	".%c\000"
 4846              		.align	2
 4847              	.LC232:
 4848 16bc 4379636C 		.ascii	"Cycle Time: %d, I2C Errors: %d, config size: %d\015"
 4848      65205469 
 4848      6D653A20 
 4848      25642C20 
 4848      49324320 
 4849 16ec 0A00     		.ascii	"\012\000"
 4850              		.text
 4851              		.align	2
 4852              		.thumb
 4853              		.thumb_func
 4855              	cliStatus:
 4856              	.LFB50:
 882:../src/cli.c  **** 
 883:../src/cli.c  **** static void cliStatus(char *cmdline)
 884:../src/cli.c  **** {
 4857              		.loc 1 884 0
 4858              		.cfi_startproc
 4859              		@ args = 0, pretend = 0, frame = 16
 4860              		@ frame_needed = 1, uses_anonymous_args = 0
 4861 16c8 90B5     		push	{r4, r7, lr}
 4862              	.LCFI62:
 4863              		.cfi_def_cfa_offset 12
 4864              		.cfi_offset 4, -12
 4865              		.cfi_offset 7, -8
 4866              		.cfi_offset 14, -4
 4867 16ca 85B0     		sub	sp, sp, #20
 4868              	.LCFI63:
 4869              		.cfi_def_cfa_offset 32
 4870 16cc 00AF     		add	r7, sp, #0
 4871              	.LCFI64:
 4872              		.cfi_def_cfa_register 7
 4873 16ce 7860     		str	r0, [r7, #4]
 885:../src/cli.c  ****     uint8_t i;
 886:../src/cli.c  ****     uint32_t mask;
 887:../src/cli.c  **** 
 888:../src/cli.c  ****     printf("System Uptime: %d seconds, Voltage: %d * 0.1V (%dS battery)\r\n",
 889:../src/cli.c  ****         millis() / 1000, vbat, batteryCellCount);
 4874              		.loc 1 889 0
 4875 16d0 FFF7FEFF 		bl	millis
 4876 16d4 0246     		mov	r2, r0
 888:../src/cli.c  ****     printf("System Uptime: %d seconds, Voltage: %d * 0.1V (%dS battery)\r\n",
 4877              		.loc 1 888 0
 4878 16d6 394B     		ldr	r3, .L272
 4879 16d8 A3FB0213 		umull	r1, r3, r3, r2
 4880 16dc 4FEA9311 		lsr	r1, r3, #6
 4881 16e0 374B     		ldr	r3, .L272+4
 4882 16e2 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4883 16e4 1A46     		mov	r2, r3
 4884 16e6 374B     		ldr	r3, .L272+8
 4885 16e8 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4886 16ea 3748     		ldr	r0, .L272+12
 4887 16ec FFF7FEFF 		bl	tfp_printf
 890:../src/cli.c  ****     mask = sensorsMask();
 4888              		.loc 1 890 0
 4889 16f0 FFF7FEFF 		bl	sensorsMask
 4890 16f4 B860     		str	r0, [r7, #8]
 891:../src/cli.c  **** 
 892:../src/cli.c  ****     printf("CPU %dMHz, detected sensors: ", (SystemCoreClock / 1000000));
 4891              		.loc 1 892 0
 4892 16f6 354B     		ldr	r3, .L272+16
 4893 16f8 1A68     		ldr	r2, [r3, #0]
 4894 16fa 354B     		ldr	r3, .L272+20
 4895 16fc A3FB0213 		umull	r1, r3, r3, r2
 4896 1700 4FEA9343 		lsr	r3, r3, #18
 4897 1704 3348     		ldr	r0, .L272+24
 4898 1706 1946     		mov	r1, r3
 4899 1708 FFF7FEFF 		bl	tfp_printf
 893:../src/cli.c  ****     for (i = 0; ; i++) {
 4900              		.loc 1 893 0
 4901 170c 4FF00003 		mov	r3, #0
 4902 1710 FB73     		strb	r3, [r7, #15]
 4903              	.L266:
 894:../src/cli.c  ****         if (sensorNames[i] == NULL)
 4904              		.loc 1 894 0
 4905 1712 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 4906 1714 304B     		ldr	r3, .L272+28
 4907 1716 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4908 171a 002B     		cmp	r3, #0
 4909 171c 16D0     		beq	.L271
 4910              	.L263:
 895:../src/cli.c  ****             break;
 896:../src/cli.c  ****         if (mask & (1 << i))
 4911              		.loc 1 896 0
 4912 171e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4913 1720 4FF00102 		mov	r2, #1
 4914 1724 02FA03F3 		lsl	r3, r2, r3
 4915 1728 1A46     		mov	r2, r3
 4916 172a BB68     		ldr	r3, [r7, #8]
 4917 172c 1340     		ands	r3, r3, r2
 4918 172e 002B     		cmp	r3, #0
 4919 1730 07D0     		beq	.L265
 897:../src/cli.c  ****             printf("%s ", sensorNames[i]);
 4920              		.loc 1 897 0
 4921 1732 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 4922 1734 284B     		ldr	r3, .L272+28
 4923 1736 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4924 173a 2848     		ldr	r0, .L272+32
 4925 173c 1946     		mov	r1, r3
 4926 173e FFF7FEFF 		bl	tfp_printf
 4927              	.L265:
 893:../src/cli.c  ****     for (i = 0; ; i++) {
 4928              		.loc 1 893 0
 4929 1742 FB7B     		ldrb	r3, [r7, #15]
 4930 1744 03F10103 		add	r3, r3, #1
 4931 1748 FB73     		strb	r3, [r7, #15]
 898:../src/cli.c  ****     }
 4932              		.loc 1 898 0
 4933 174a E2E7     		b	.L266
 4934              	.L271:
 895:../src/cli.c  ****             break;
 4935              		.loc 1 895 0
 4936 174c 00BF     		nop
 4937              	.L270:
 899:../src/cli.c  ****     if (sensors(SENSOR_ACC)) {
 4938              		.loc 1 899 0
 4939 174e 4FF00100 		mov	r0, #1
 4940 1752 FFF7FEFF 		bl	sensors
 4941 1756 0346     		mov	r3, r0
 4942 1758 002B     		cmp	r3, #0
 4943 175a 1BD0     		beq	.L267
 900:../src/cli.c  ****         printf("ACCHW: %s", accNames[accHardware]);
 4944              		.loc 1 900 0
 4945 175c 204B     		ldr	r3, .L272+36
 4946 175e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4947 1760 1A46     		mov	r2, r3
 4948 1762 204B     		ldr	r3, .L272+40
 4949 1764 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4950 1768 1F48     		ldr	r0, .L272+44
 4951 176a 1946     		mov	r1, r3
 4952 176c FFF7FEFF 		bl	tfp_printf
 901:../src/cli.c  ****         if (accHardware == ACC_MPU6050)
 4953              		.loc 1 901 0
 4954 1770 1B4B     		ldr	r3, .L272+36
 4955 1772 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4956 1774 022B     		cmp	r3, #2
 4957 1776 0DD1     		bne	.L267
 902:../src/cli.c  ****             printf(".%c", mcfg.mpu6050_scale ? 'o' : 'n');
 4958              		.loc 1 902 0
 4959 1778 1C4B     		ldr	r3, .L272+48
 4960 177a 93F8ED30 		ldrb	r3, [r3, #237]	@ zero_extendqisi2
 4961 177e 002B     		cmp	r3, #0
 4962 1780 02D0     		beq	.L268
 4963              		.loc 1 902 0 is_stmt 0 discriminator 1
 4964 1782 4FF06F03 		mov	r3, #111
 4965 1786 01E0     		b	.L269
 4966              	.L268:
 4967              		.loc 1 902 0 discriminator 2
 4968 1788 4FF06E03 		mov	r3, #110
 4969              	.L269:
 4970              		.loc 1 902 0 discriminator 3
 4971 178c 1848     		ldr	r0, .L272+52
 4972 178e 1946     		mov	r1, r3
 4973 1790 FFF7FEFF 		bl	tfp_printf
 4974              	.L267:
 903:../src/cli.c  ****     }
 904:../src/cli.c  ****     uartPrint("\r\n");
 4975              		.loc 1 904 0 is_stmt 1
 4976 1794 1748     		ldr	r0, .L272+56
 4977 1796 FFF7FEFF 		bl	uartPrint
 905:../src/cli.c  **** 
 906:../src/cli.c  ****     printf("Cycle Time: %d, I2C Errors: %d, config size: %d\r\n", cycleTime, i2cGetErrorCounter(), 
 4978              		.loc 1 906 0
 4979 179a 174B     		ldr	r3, .L272+60
 4980 179c 1B88     		ldrh	r3, [r3, #0]
 4981 179e 1C46     		mov	r4, r3
 4982 17a0 FFF7FEFF 		bl	i2cGetErrorCounter
 4983 17a4 0346     		mov	r3, r0
 4984 17a6 1548     		ldr	r0, .L272+64
 4985 17a8 2146     		mov	r1, r4
 4986 17aa 1A46     		mov	r2, r3
 4987 17ac 4FF43C73 		mov	r3, #752
 4988 17b0 FFF7FEFF 		bl	tfp_printf
 907:../src/cli.c  **** }
 4989              		.loc 1 907 0
 4990 17b4 07F11407 		add	r7, r7, #20
 4991 17b8 BD46     		mov	sp, r7
 4992 17ba 90BD     		pop	{r4, r7, pc}
 4993              	.L273:
 4994              		.align	2
 4995              	.L272:
 4996 17bc D34D6210 		.word	274877907
 4997 17c0 00000000 		.word	vbat
 4998 17c4 00000000 		.word	batteryCellCount
 4999 17c8 4C160000 		.word	.LC228
 5000 17cc 00000000 		.word	SystemCoreClock
 5001 17d0 83DE1B43 		.word	1125899907
 5002 17d4 8C160000 		.word	.LC229
 5003 17d8 00000000 		.word	sensorNames
 5004 17dc A8140000 		.word	.LC204
 5005 17e0 00000000 		.word	accHardware
 5006 17e4 00000000 		.word	accNames
 5007 17e8 AC160000 		.word	.LC230
 5008 17ec 00000000 		.word	mcfg
 5009 17f0 B8160000 		.word	.LC231
 5010 17f4 E4120000 		.word	.LC181
 5011 17f8 00000000 		.word	cycleTime
 5012 17fc BC160000 		.word	.LC232
 5013              		.cfi_endproc
 5014              	.LFE50:
 5016              		.section	.rodata
 5017 16ee 0000     		.align	2
 5018              	.LC233:
 5019 16f0 4166726F 		.ascii	"Afro32 CLI version 2.1a Apr 22 2013 / 22:47:48\000"
 5019      33322043 
 5019      4C492076 
 5019      65727369 
 5019      6F6E2032 
 5020              		.text
 5021              		.align	2
 5022              		.thumb
 5023              		.thumb_func
 5025              	cliVersion:
 5026              	.LFB51:
 908:../src/cli.c  **** 
 909:../src/cli.c  **** static void cliVersion(char *cmdline)
 910:../src/cli.c  **** {
 5027              		.loc 1 910 0
 5028              		.cfi_startproc
 5029              		@ args = 0, pretend = 0, frame = 8
 5030              		@ frame_needed = 1, uses_anonymous_args = 0
 5031 1800 80B5     		push	{r7, lr}
 5032              	.LCFI65:
 5033              		.cfi_def_cfa_offset 8
 5034              		.cfi_offset 7, -8
 5035              		.cfi_offset 14, -4
 5036 1802 82B0     		sub	sp, sp, #8
 5037              	.LCFI66:
 5038              		.cfi_def_cfa_offset 16
 5039 1804 00AF     		add	r7, sp, #0
 5040              	.LCFI67:
 5041              		.cfi_def_cfa_register 7
 5042 1806 7860     		str	r0, [r7, #4]
 911:../src/cli.c  ****     uartPrint("Afro32 CLI version 2.1a " __DATE__ " / " __TIME__);
 5043              		.loc 1 911 0
 5044 1808 0348     		ldr	r0, .L275
 5045 180a FFF7FEFF 		bl	uartPrint
 912:../src/cli.c  **** }
 5046              		.loc 1 912 0
 5047 180e 07F10807 		add	r7, r7, #8
 5048 1812 BD46     		mov	sp, r7
 5049 1814 80BD     		pop	{r7, pc}
 5050              	.L276:
 5051 1816 00BF     		.align	2
 5052              	.L275:
 5053 1818 F0160000 		.word	.LC233
 5054              		.cfi_endproc
 5055              	.LFE51:
 5057              		.section	.rodata
 5058 171f 00       		.align	2
 5059              	.LC234:
 5060 1720 0D0A456E 		.ascii	"\015\012Entering CLI Mode, type 'exit' to return, o"
 5060      74657269 
 5060      6E672043 
 5060      4C49204D 
 5060      6F64652C 
 5061 174d 72202768 		.ascii	"r 'help'\015\012\000"
 5061      656C7027 
 5061      0D0A00
 5062              		.align	2
 5063              	.LC235:
 5064 1758 0D1B5B4B 		.ascii	"\015\033[K\000"
 5064      00
 5065 175d 000000   		.align	2
 5066              	.LC236:
 5067 1760 1B5B324A 		.ascii	"\033[2J\033[1;1H\000"
 5067      1B5B313B 
 5067      314800
 5068 176b 00       		.align	2
 5069              	.LC237:
 5070 176c 4552523A 		.ascii	"ERR: Unknown command, try 'help'\000"
 5070      20556E6B 
 5070      6E6F776E 
 5070      20636F6D 
 5070      6D616E64 
 5071 178d 000000   		.align	2
 5072              	.LC238:
 5073 1790 08200800 		.ascii	"\010 \010\000"
 5074              		.text
 5075              		.align	2
 5076              		.global	cliProcess
 5077              		.thumb
 5078              		.thumb_func
 5080              	cliProcess:
 5081              	.LFB52:
 913:../src/cli.c  **** 
 914:../src/cli.c  **** void cliProcess(void)
 915:../src/cli.c  **** {
 5082              		.loc 1 915 0
 5083              		.cfi_startproc
 5084              		@ args = 0, pretend = 0, frame = 40
 5085              		@ frame_needed = 1, uses_anonymous_args = 0
 5086 181c 90B5     		push	{r4, r7, lr}
 5087              	.LCFI68:
 5088              		.cfi_def_cfa_offset 12
 5089              		.cfi_offset 4, -12
 5090              		.cfi_offset 7, -8
 5091              		.cfi_offset 14, -4
 5092 181e 8DB0     		sub	sp, sp, #52
 5093              	.LCFI69:
 5094              		.cfi_def_cfa_offset 64
 5095 1820 02AF     		add	r7, sp, #8
 5096              	.LCFI70:
 5097              		.cfi_def_cfa 7, 56
 916:../src/cli.c  ****     if (!cliMode) {
 5098              		.loc 1 916 0
 5099 1822 974B     		ldr	r3, .L313
 5100 1824 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 5101 1826 002B     		cmp	r3, #0
 5102 1828 40F06181 		bne	.L308
 917:../src/cli.c  ****         cliMode = 1;
 5103              		.loc 1 917 0
 5104 182c 944B     		ldr	r3, .L313
 5105 182e 4FF00102 		mov	r2, #1
 5106 1832 1A70     		strb	r2, [r3, #0]
 918:../src/cli.c  ****         uartPrint("\r\nEntering CLI Mode, type 'exit' to return, or 'help'\r\n");
 5107              		.loc 1 918 0
 5108 1834 9348     		ldr	r0, .L313+4
 5109 1836 FFF7FEFF 		bl	uartPrint
 919:../src/cli.c  ****         cliPrompt();
 5110              		.loc 1 919 0
 5111 183a FEF77DFE 		bl	cliPrompt
 920:../src/cli.c  ****     }
 921:../src/cli.c  **** 
 922:../src/cli.c  ****     while (uartAvailable()) {
 5112              		.loc 1 922 0
 5113 183e 56E1     		b	.L308
 5114              	.L307:
 5115              	.LBB6:
 923:../src/cli.c  ****         uint8_t c = uartRead();
 5116              		.loc 1 923 0
 5117 1840 FFF7FEFF 		bl	uartRead
 5118 1844 0346     		mov	r3, r0
 5119 1846 FB75     		strb	r3, [r7, #23]
 924:../src/cli.c  ****         if (c == '\t' || c == '?') {
 5120              		.loc 1 924 0
 5121 1848 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 5122 184a 092B     		cmp	r3, #9
 5123 184c 03D0     		beq	.L280
 5124              		.loc 1 924 0 is_stmt 0 discriminator 1
 5125 184e FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 5126 1850 3F2B     		cmp	r3, #63
 5127 1852 40F09B80 		bne	.L281
 5128              	.L280:
 5129              	.LBB7:
 925:../src/cli.c  ****             // do tab completion
 926:../src/cli.c  ****             const clicmd_t *cmd, *pstart = NULL, *pend = NULL;
 5130              		.loc 1 926 0 is_stmt 1
 5131 1856 4FF00003 		mov	r3, #0
 5132 185a 3B62     		str	r3, [r7, #32]
 5133 185c 4FF00003 		mov	r3, #0
 5134 1860 FB61     		str	r3, [r7, #28]
 927:../src/cli.c  ****             int i = bufferIndex;
 5135              		.loc 1 927 0
 5136 1862 894B     		ldr	r3, .L313+8
 5137 1864 1B68     		ldr	r3, [r3, #0]
 5138 1866 BB61     		str	r3, [r7, #24]
 928:../src/cli.c  ****             for (cmd = cmdTable; cmd < cmdTable + CMD_COUNT; cmd++) {
 5139              		.loc 1 928 0
 5140 1868 884B     		ldr	r3, .L313+12
 5141 186a 7B62     		str	r3, [r7, #36]
 5142 186c 1CE0     		b	.L282
 5143              	.L286:
 929:../src/cli.c  ****                 if (bufferIndex && (strncasecmp(cliBuffer, cmd->name, bufferIndex) != 0))
 5144              		.loc 1 929 0
 5145 186e 864B     		ldr	r3, .L313+8
 5146 1870 1B68     		ldr	r3, [r3, #0]
 5147 1872 002B     		cmp	r3, #0
 5148 1874 0BD0     		beq	.L283
 5149              		.loc 1 929 0 is_stmt 0 discriminator 1
 5150 1876 7B6A     		ldr	r3, [r7, #36]
 5151 1878 1A68     		ldr	r2, [r3, #0]
 5152 187a 834B     		ldr	r3, .L313+8
 5153 187c 1B68     		ldr	r3, [r3, #0]
 5154 187e 8448     		ldr	r0, .L313+16
 5155 1880 1146     		mov	r1, r2
 5156 1882 1A46     		mov	r2, r3
 5157 1884 FFF7FEFF 		bl	strncasecmp
 5158 1888 0346     		mov	r3, r0
 5159 188a 002B     		cmp	r3, #0
 5160 188c 07D1     		bne	.L309
 5161              	.L283:
 930:../src/cli.c  ****                     continue;
 931:../src/cli.c  ****                 if (!pstart)
 5162              		.loc 1 931 0 is_stmt 1
 5163 188e 3B6A     		ldr	r3, [r7, #32]
 5164 1890 002B     		cmp	r3, #0
 5165 1892 01D1     		bne	.L285
 932:../src/cli.c  ****                     pstart = cmd;
 5166              		.loc 1 932 0
 5167 1894 7B6A     		ldr	r3, [r7, #36]
 5168 1896 3B62     		str	r3, [r7, #32]
 5169              	.L285:
 933:../src/cli.c  ****                 pend = cmd;
 5170              		.loc 1 933 0
 5171 1898 7B6A     		ldr	r3, [r7, #36]
 5172 189a FB61     		str	r3, [r7, #28]
 5173 189c 00E0     		b	.L284
 5174              	.L309:
 930:../src/cli.c  ****                     continue;
 5175              		.loc 1 930 0
 5176 189e 00BF     		nop
 5177              	.L284:
 928:../src/cli.c  ****             for (cmd = cmdTable; cmd < cmdTable + CMD_COUNT; cmd++) {
 5178              		.loc 1 928 0
 5179 18a0 7B6A     		ldr	r3, [r7, #36]
 5180 18a2 03F10C03 		add	r3, r3, #12
 5181 18a6 7B62     		str	r3, [r7, #36]
 5182              	.L282:
 928:../src/cli.c  ****             for (cmd = cmdTable; cmd < cmdTable + CMD_COUNT; cmd++) {
 5183              		.loc 1 928 0 is_stmt 0 discriminator 1
 5184 18a8 7A6A     		ldr	r2, [r7, #36]
 5185 18aa 7A4B     		ldr	r3, .L313+20
 5186 18ac 9A42     		cmp	r2, r3
 5187 18ae DED3     		bcc	.L286
 934:../src/cli.c  ****             }
 935:../src/cli.c  ****             if (pstart) {    /* Buffer matches one or more commands */
 5188              		.loc 1 935 0 is_stmt 1
 5189 18b0 3B6A     		ldr	r3, [r7, #32]
 5190 18b2 002B     		cmp	r3, #0
 5191 18b4 32D0     		beq	.L287
 5192              	.L290:
 936:../src/cli.c  ****                 for (; ; bufferIndex++) {
 937:../src/cli.c  ****                     if (pstart->name[bufferIndex] != pend->name[bufferIndex])
 5193              		.loc 1 937 0
 5194 18b6 3B6A     		ldr	r3, [r7, #32]
 5195 18b8 1A68     		ldr	r2, [r3, #0]
 5196 18ba 734B     		ldr	r3, .L313+8
 5197 18bc 1B68     		ldr	r3, [r3, #0]
 5198 18be D318     		adds	r3, r2, r3
 5199 18c0 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 5200 18c2 FB69     		ldr	r3, [r7, #28]
 5201 18c4 1968     		ldr	r1, [r3, #0]
 5202 18c6 704B     		ldr	r3, .L313+8
 5203 18c8 1B68     		ldr	r3, [r3, #0]
 5204 18ca CB18     		adds	r3, r1, r3
 5205 18cc 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 5206 18ce 9A42     		cmp	r2, r3
 5207 18d0 23D1     		bne	.L310
 5208              	.L288:
 938:../src/cli.c  ****                         break;
 939:../src/cli.c  ****                     if (!pstart->name[bufferIndex]) {
 5209              		.loc 1 939 0
 5210 18d2 3B6A     		ldr	r3, [r7, #32]
 5211 18d4 1A68     		ldr	r2, [r3, #0]
 5212 18d6 6C4B     		ldr	r3, .L313+8
 5213 18d8 1B68     		ldr	r3, [r3, #0]
 5214 18da D318     		adds	r3, r2, r3
 5215 18dc 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 5216 18de 002B     		cmp	r3, #0
 5217 18e0 0AD1     		bne	.L289
 940:../src/cli.c  ****                         /* Unambiguous -- append a space */
 941:../src/cli.c  ****                         cliBuffer[bufferIndex++] = ' ';
 5218              		.loc 1 941 0
 5219 18e2 694B     		ldr	r3, .L313+8
 5220 18e4 1B68     		ldr	r3, [r3, #0]
 5221 18e6 6A4A     		ldr	r2, .L313+16
 5222 18e8 4FF02001 		mov	r1, #32
 5223 18ec D154     		strb	r1, [r2, r3]
 5224 18ee 03F10102 		add	r2, r3, #1
 5225 18f2 654B     		ldr	r3, .L313+8
 5226 18f4 1A60     		str	r2, [r3, #0]
 942:../src/cli.c  ****                         break;
 5227              		.loc 1 942 0
 5228 18f6 11E0     		b	.L287
 5229              	.L289:
 943:../src/cli.c  ****                     }
 944:../src/cli.c  ****                     cliBuffer[bufferIndex] = pstart->name[bufferIndex];
 5230              		.loc 1 944 0
 5231 18f8 634B     		ldr	r3, .L313+8
 5232 18fa 1B68     		ldr	r3, [r3, #0]
 5233 18fc 3A6A     		ldr	r2, [r7, #32]
 5234 18fe 1168     		ldr	r1, [r2, #0]
 5235 1900 614A     		ldr	r2, .L313+8
 5236 1902 1268     		ldr	r2, [r2, #0]
 5237 1904 8A18     		adds	r2, r1, r2
 5238 1906 1178     		ldrb	r1, [r2, #0]	@ zero_extendqisi2
 5239 1908 614A     		ldr	r2, .L313+16
 5240 190a D154     		strb	r1, [r2, r3]
 936:../src/cli.c  ****                 for (; ; bufferIndex++) {
 5241              		.loc 1 936 0
 5242 190c 5E4B     		ldr	r3, .L313+8
 5243 190e 1B68     		ldr	r3, [r3, #0]
 5244 1910 03F10102 		add	r2, r3, #1
 5245 1914 5C4B     		ldr	r3, .L313+8
 5246 1916 1A60     		str	r2, [r3, #0]
 945:../src/cli.c  ****                 }
 5247              		.loc 1 945 0
 5248 1918 CDE7     		b	.L290
 5249              	.L310:
 938:../src/cli.c  ****                         break;
 5250              		.loc 1 938 0
 5251 191a 00BF     		nop
 5252              	.L287:
 946:../src/cli.c  ****             }
 947:../src/cli.c  ****             if (!bufferIndex || pstart != pend) {
 5253              		.loc 1 947 0
 5254 191c 5A4B     		ldr	r3, .L313+8
 5255 191e 1B68     		ldr	r3, [r3, #0]
 5256 1920 002B     		cmp	r3, #0
 5257 1922 03D0     		beq	.L291
 5258              		.loc 1 947 0 is_stmt 0 discriminator 1
 5259 1924 3A6A     		ldr	r2, [r7, #32]
 5260 1926 FB69     		ldr	r3, [r7, #28]
 5261 1928 9A42     		cmp	r2, r3
 5262 192a 28D0     		beq	.L311
 5263              	.L291:
 948:../src/cli.c  ****                 /* Print list of ambiguous matches */
 949:../src/cli.c  ****                 uartPrint("\r\033[K");
 5264              		.loc 1 949 0 is_stmt 1
 5265 192c 5A48     		ldr	r0, .L313+24
 5266 192e FFF7FEFF 		bl	uartPrint
 950:../src/cli.c  ****                 for (cmd = pstart; cmd <= pend; cmd++) {
 5267              		.loc 1 950 0
 5268 1932 3B6A     		ldr	r3, [r7, #32]
 5269 1934 7B62     		str	r3, [r7, #36]
 5270 1936 0CE0     		b	.L293
 5271              	.L294:
 951:../src/cli.c  ****                     uartPrint(cmd->name);
 5272              		.loc 1 951 0 discriminator 2
 5273 1938 7B6A     		ldr	r3, [r7, #36]
 5274 193a 1B68     		ldr	r3, [r3, #0]
 5275 193c 1846     		mov	r0, r3
 5276 193e FFF7FEFF 		bl	uartPrint
 952:../src/cli.c  ****                     uartWrite('\t');
 5277              		.loc 1 952 0 discriminator 2
 5278 1942 4FF00900 		mov	r0, #9
 5279 1946 FFF7FEFF 		bl	uartWrite
 950:../src/cli.c  ****                 for (cmd = pstart; cmd <= pend; cmd++) {
 5280              		.loc 1 950 0 discriminator 2
 5281 194a 7B6A     		ldr	r3, [r7, #36]
 5282 194c 03F10C03 		add	r3, r3, #12
 5283 1950 7B62     		str	r3, [r7, #36]
 5284              	.L293:
 950:../src/cli.c  ****                 for (cmd = pstart; cmd <= pend; cmd++) {
 5285              		.loc 1 950 0 is_stmt 0 discriminator 1
 5286 1952 7A6A     		ldr	r2, [r7, #36]
 5287 1954 FB69     		ldr	r3, [r7, #28]
 5288 1956 9A42     		cmp	r2, r3
 5289 1958 EED9     		bls	.L294
 953:../src/cli.c  ****                 }
 954:../src/cli.c  ****                 cliPrompt();
 5290              		.loc 1 954 0 is_stmt 1
 5291 195a FEF7EDFD 		bl	cliPrompt
 955:../src/cli.c  ****                 i = 0;    /* Redraw prompt */
 5292              		.loc 1 955 0
 5293 195e 4FF00003 		mov	r3, #0
 5294 1962 BB61     		str	r3, [r7, #24]
 956:../src/cli.c  ****             }
 957:../src/cli.c  ****             for (; i < bufferIndex; i++)
 5295              		.loc 1 957 0
 5296 1964 0BE0     		b	.L311
 5297              	.L296:
 958:../src/cli.c  ****                 uartWrite(cliBuffer[i]);
 5298              		.loc 1 958 0 discriminator 2
 5299 1966 4A4A     		ldr	r2, .L313+16
 5300 1968 BB69     		ldr	r3, [r7, #24]
 5301 196a D318     		adds	r3, r2, r3
 5302 196c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 5303 196e 1846     		mov	r0, r3
 5304 1970 FFF7FEFF 		bl	uartWrite
 957:../src/cli.c  ****             for (; i < bufferIndex; i++)
 5305              		.loc 1 957 0 discriminator 2
 5306 1974 BB69     		ldr	r3, [r7, #24]
 5307 1976 03F10103 		add	r3, r3, #1
 5308 197a BB61     		str	r3, [r7, #24]
 5309 197c 00E0     		b	.L295
 5310              	.L311:
 957:../src/cli.c  ****             for (; i < bufferIndex; i++)
 5311              		.loc 1 957 0 is_stmt 0
 5312 197e 00BF     		nop
 5313              	.L295:
 957:../src/cli.c  ****             for (; i < bufferIndex; i++)
 5314              		.loc 1 957 0 discriminator 1
 5315 1980 BA69     		ldr	r2, [r7, #24]
 5316 1982 414B     		ldr	r3, .L313+8
 5317 1984 1B68     		ldr	r3, [r3, #0]
 5318 1986 9A42     		cmp	r2, r3
 5319 1988 EDD3     		bcc	.L296
 5320              	.LBE7:
 924:../src/cli.c  ****         if (c == '\t' || c == '?') {
 5321              		.loc 1 924 0 is_stmt 1
 5322 198a B3E0     		b	.L279
 5323              	.L281:
 959:../src/cli.c  ****         } else if (!bufferIndex && c == 4) {
 5324              		.loc 1 959 0
 5325 198c 3E4B     		ldr	r3, .L313+8
 5326 198e 1B68     		ldr	r3, [r3, #0]
 5327 1990 002B     		cmp	r3, #0
 5328 1992 06D1     		bne	.L297
 5329              		.loc 1 959 0 is_stmt 0 discriminator 1
 5330 1994 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 5331 1996 042B     		cmp	r3, #4
 5332 1998 03D1     		bne	.L297
 960:../src/cli.c  ****             cliExit(cliBuffer);
 5333              		.loc 1 960 0 is_stmt 1
 5334 199a 3D48     		ldr	r0, .L313+16
 5335 199c FFF72EFA 		bl	cliExit
 961:../src/cli.c  ****             return;
 5336              		.loc 1 961 0
 5337 19a0 AEE0     		b	.L277
 5338              	.L297:
 962:../src/cli.c  ****         } else if (c == 12) {
 5339              		.loc 1 962 0
 5340 19a2 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 5341 19a4 0C2B     		cmp	r3, #12
 5342 19a6 05D1     		bne	.L299
 963:../src/cli.c  ****             // clear screen
 964:../src/cli.c  ****             uartPrint("\033[2J\033[1;1H");
 5343              		.loc 1 964 0
 5344 19a8 3C48     		ldr	r0, .L313+28
 5345 19aa FFF7FEFF 		bl	uartPrint
 965:../src/cli.c  ****             cliPrompt();
 5346              		.loc 1 965 0
 5347 19ae FEF7C3FD 		bl	cliPrompt
 5348 19b2 9FE0     		b	.L279
 5349              	.L299:
 966:../src/cli.c  ****         } else if (bufferIndex && (c == '\n' || c == '\r')) {
 5350              		.loc 1 966 0
 5351 19b4 344B     		ldr	r3, .L313+8
 5352 19b6 1B68     		ldr	r3, [r3, #0]
 5353 19b8 002B     		cmp	r3, #0
 5354 19ba 4AD0     		beq	.L300
 5355              		.loc 1 966 0 is_stmt 0 discriminator 1
 5356 19bc FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 5357 19be 0A2B     		cmp	r3, #10
 5358 19c0 02D0     		beq	.L301
 5359 19c2 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 5360 19c4 0D2B     		cmp	r3, #13
 5361 19c6 44D1     		bne	.L300
 5362              	.L301:
 5363              	.LBB8:
 967:../src/cli.c  ****             // enter pressed
 968:../src/cli.c  ****             clicmd_t *cmd = NULL;
 5364              		.loc 1 968 0 is_stmt 1
 5365 19c8 4FF00003 		mov	r3, #0
 5366 19cc 3B61     		str	r3, [r7, #16]
 969:../src/cli.c  ****             clicmd_t target;
 970:../src/cli.c  ****             uartPrint("\r\n");
 5367              		.loc 1 970 0
 5368 19ce 3448     		ldr	r0, .L313+32
 5369 19d0 FFF7FEFF 		bl	uartPrint
 971:../src/cli.c  ****             cliBuffer[bufferIndex] = 0; // null terminate
 5370              		.loc 1 971 0
 5371 19d4 2C4B     		ldr	r3, .L313+8
 5372 19d6 1B68     		ldr	r3, [r3, #0]
 5373 19d8 2D4A     		ldr	r2, .L313+16
 5374 19da 4FF00001 		mov	r1, #0
 5375 19de D154     		strb	r1, [r2, r3]
 972:../src/cli.c  **** 
 973:../src/cli.c  ****             target.name = cliBuffer;
 5376              		.loc 1 973 0
 5377 19e0 2B4B     		ldr	r3, .L313+16
 5378 19e2 7B60     		str	r3, [r7, #4]
 974:../src/cli.c  ****             target.param = NULL;
 5379              		.loc 1 974 0
 5380 19e4 4FF00003 		mov	r3, #0
 5381 19e8 BB60     		str	r3, [r7, #8]
 975:../src/cli.c  **** 
 976:../src/cli.c  ****             cmd = bsearch(&target, cmdTable, CMD_COUNT, sizeof cmdTable[0], cliCompare);
 5382              		.loc 1 976 0
 5383 19ea 07F10403 		add	r3, r7, #4
 5384 19ee 2D4A     		ldr	r2, .L313+36
 5385 19f0 0092     		str	r2, [sp, #0]
 5386 19f2 1846     		mov	r0, r3
 5387 19f4 2549     		ldr	r1, .L313+12
 5388 19f6 4FF00F02 		mov	r2, #15
 5389 19fa 4FF00C03 		mov	r3, #12
 5390 19fe FFF7FEFF 		bl	bsearch
 5391 1a02 3861     		str	r0, [r7, #16]
 977:../src/cli.c  ****             if (cmd)
 5392              		.loc 1 977 0
 5393 1a04 3B69     		ldr	r3, [r7, #16]
 5394 1a06 002B     		cmp	r3, #0
 5395 1a08 0ED0     		beq	.L302
 978:../src/cli.c  ****                 cmd->func(cliBuffer + strlen(cmd->name) + 1);
 5396              		.loc 1 978 0
 5397 1a0a 3B69     		ldr	r3, [r7, #16]
 5398 1a0c 9C68     		ldr	r4, [r3, #8]
 5399 1a0e 3B69     		ldr	r3, [r7, #16]
 5400 1a10 1B68     		ldr	r3, [r3, #0]
 5401 1a12 1846     		mov	r0, r3
 5402 1a14 FFF7FEFF 		bl	strlen
 5403 1a18 0346     		mov	r3, r0
 5404 1a1a 03F10102 		add	r2, r3, #1
 5405 1a1e 1C4B     		ldr	r3, .L313+16
 5406 1a20 D318     		adds	r3, r2, r3
 5407 1a22 1846     		mov	r0, r3
 5408 1a24 A047     		blx	r4
 5409 1a26 02E0     		b	.L303
 5410              	.L302:
 979:../src/cli.c  ****             else
 980:../src/cli.c  ****                 uartPrint("ERR: Unknown command, try 'help'");
 5411              		.loc 1 980 0
 5412 1a28 1F48     		ldr	r0, .L313+40
 5413 1a2a FFF7FEFF 		bl	uartPrint
 5414              	.L303:
 981:../src/cli.c  **** 
 982:../src/cli.c  ****             memset(cliBuffer, 0, sizeof(cliBuffer));
 5415              		.loc 1 982 0
 5416 1a2e 1848     		ldr	r0, .L313+16
 5417 1a30 4FF00001 		mov	r1, #0
 5418 1a34 4FF03002 		mov	r2, #48
 5419 1a38 FFF7FEFF 		bl	memset
 983:../src/cli.c  ****             bufferIndex = 0;
 5420              		.loc 1 983 0
 5421 1a3c 124B     		ldr	r3, .L313+8
 5422 1a3e 4FF00002 		mov	r2, #0
 5423 1a42 1A60     		str	r2, [r3, #0]
 984:../src/cli.c  **** 
 985:../src/cli.c  ****             // 'exit' will reset this flag, so we don't need to print prompt again
 986:../src/cli.c  ****             if (!cliMode)
 5424              		.loc 1 986 0
 5425 1a44 0E4B     		ldr	r3, .L313
 5426 1a46 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 5427 1a48 002B     		cmp	r3, #0
 5428 1a4a 59D0     		beq	.L277
 987:../src/cli.c  ****                 return;
 988:../src/cli.c  ****             cliPrompt();
 5429              		.loc 1 988 0
 5430 1a4c FEF774FD 		bl	cliPrompt
 5431              	.LBE8:
 966:../src/cli.c  ****         } else if (bufferIndex && (c == '\n' || c == '\r')) {
 5432              		.loc 1 966 0
 5433 1a50 50E0     		b	.L279
 5434              	.L300:
 989:../src/cli.c  ****         } else if (c == 127) {
 5435              		.loc 1 989 0
 5436 1a52 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 5437 1a54 7F2B     		cmp	r3, #127
 5438 1a56 2BD1     		bne	.L305
 990:../src/cli.c  ****             // backspace
 991:../src/cli.c  ****             if (bufferIndex) {
 5439              		.loc 1 991 0
 5440 1a58 0B4B     		ldr	r3, .L313+8
 5441 1a5a 1B68     		ldr	r3, [r3, #0]
 5442 1a5c 002B     		cmp	r3, #0
 5443 1a5e 49D0     		beq	.L279
 992:../src/cli.c  ****                 cliBuffer[--bufferIndex] = 0;
 5444              		.loc 1 992 0
 5445 1a60 094B     		ldr	r3, .L313+8
 5446 1a62 1B68     		ldr	r3, [r3, #0]
 5447 1a64 03F1FF32 		add	r2, r3, #-1
 5448 1a68 074B     		ldr	r3, .L313+8
 5449 1a6a 1A60     		str	r2, [r3, #0]
 5450 1a6c 064B     		ldr	r3, .L313+8
 5451 1a6e 1B68     		ldr	r3, [r3, #0]
 5452 1a70 074A     		ldr	r2, .L313+16
 5453 1a72 4FF00001 		mov	r1, #0
 5454 1a76 D154     		strb	r1, [r2, r3]
 993:../src/cli.c  ****                 uartPrint("\010 \010");
 5455              		.loc 1 993 0
 5456 1a78 0C48     		ldr	r0, .L313+44
 5457 1a7a FFF7FEFF 		bl	uartPrint
 5458 1a7e 39E0     		b	.L279
 5459              	.L314:
 5460              		.align	2
 5461              	.L313:
 5462 1a80 00000000 		.word	cliMode
 5463 1a84 20170000 		.word	.LC234
 5464 1a88 30000000 		.word	bufferIndex
 5465 1a8c 00000000 		.word	cmdTable
 5466 1a90 00000000 		.word	cliBuffer
 5467 1a94 B4000000 		.word	cmdTable+180
 5468 1a98 58170000 		.word	.LC235
 5469 1a9c 60170000 		.word	.LC236
 5470 1aa0 E4120000 		.word	.LC181
 5471 1aa4 00000000 		.word	cliCompare
 5472 1aa8 6C170000 		.word	.LC237
 5473 1aac 90170000 		.word	.LC238
 5474              	.L305:
 994:../src/cli.c  ****             }
 995:../src/cli.c  ****         } else if (bufferIndex < sizeof(cliBuffer) && c >= 32 && c <= 126) {
 5475              		.loc 1 995 0
 5476 1ab0 154B     		ldr	r3, .L315
 5477 1ab2 1B68     		ldr	r3, [r3, #0]
 5478 1ab4 2F2B     		cmp	r3, #47
 5479 1ab6 1DD8     		bhi	.L279
 5480              		.loc 1 995 0 is_stmt 0 discriminator 1
 5481 1ab8 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 5482 1aba 1F2B     		cmp	r3, #31
 5483 1abc 1AD9     		bls	.L279
 5484 1abe FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 5485 1ac0 7E2B     		cmp	r3, #126
 5486 1ac2 17D8     		bhi	.L279
 996:../src/cli.c  ****             if (!bufferIndex && c == 32)
 5487              		.loc 1 996 0 is_stmt 1
 5488 1ac4 104B     		ldr	r3, .L315
 5489 1ac6 1B68     		ldr	r3, [r3, #0]
 5490 1ac8 002B     		cmp	r3, #0
 5491 1aca 02D1     		bne	.L306
 5492              		.loc 1 996 0 is_stmt 0 discriminator 1
 5493 1acc FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 5494 1ace 202B     		cmp	r3, #32
 5495 1ad0 0FD0     		beq	.L312
 5496              	.L306:
 997:../src/cli.c  ****                 continue;
 998:../src/cli.c  ****             cliBuffer[bufferIndex++] = c;
 5497              		.loc 1 998 0 is_stmt 1
 5498 1ad2 0D4B     		ldr	r3, .L315
 5499 1ad4 1B68     		ldr	r3, [r3, #0]
 5500 1ad6 0D4A     		ldr	r2, .L315+4
 5501 1ad8 F97D     		ldrb	r1, [r7, #23]
 5502 1ada D154     		strb	r1, [r2, r3]
 5503 1adc 03F10102 		add	r2, r3, #1
 5504 1ae0 094B     		ldr	r3, .L315
 5505 1ae2 1A60     		str	r2, [r3, #0]
 999:../src/cli.c  ****             uartWrite(c);
 5506              		.loc 1 999 0
 5507 1ae4 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 5508 1ae6 1846     		mov	r0, r3
 5509 1ae8 FFF7FEFF 		bl	uartWrite
 5510 1aec 02E0     		b	.L279
 5511              	.L308:
 5512              	.LBE6:
 922:../src/cli.c  ****     while (uartAvailable()) {
 5513              		.loc 1 922 0
 5514 1aee 00BF     		nop
 5515 1af0 00E0     		b	.L279
 5516              	.L312:
 5517              	.LBB9:
 997:../src/cli.c  ****                 continue;
 5518              		.loc 1 997 0
 5519 1af2 00BF     		nop
 5520              	.L279:
 5521              	.LBE9:
 922:../src/cli.c  ****     while (uartAvailable()) {
 5522              		.loc 1 922 0 discriminator 1
 5523 1af4 FFF7FEFF 		bl	uartAvailable
 5524 1af8 0346     		mov	r3, r0
 5525 1afa 002B     		cmp	r3, #0
 5526 1afc 7FF4A0AE 		bne	.L307
 5527              	.L277:
1000:../src/cli.c  ****         }
1001:../src/cli.c  ****     }
1002:../src/cli.c  **** }
 5528              		.loc 1 1002 0
 5529 1b00 07F12C07 		add	r7, r7, #44
 5530 1b04 BD46     		mov	sp, r7
 5531 1b06 90BD     		pop	{r4, r7, pc}
 5532              	.L316:
 5533              		.align	2
 5534              	.L315:
 5535 1b08 30000000 		.word	bufferIndex
 5536 1b0c 00000000 		.word	cliBuffer
 5537              		.cfi_endproc
 5538              	.LFE52:
 5540              	.Letext0:
 5541              		.file 2 "/home/oni/ARM_EABI/bin/../lib/gcc/arm-none-eabi/4.7.2/../../../../arm-none-eabi/include/s
 5542              		.file 3 "../src/board.h"
 5543              		.file 4 "../src/mw.h"
 5544              		.file 5 "/home/oni/ARM_EABI/bin/../lib/gcc/arm-none-eabi/4.7.2/../../../../arm-none-eabi/include/c
 5545              		.file 6 "/home/oni/workspace/Naze32/lib/CMSIS/CM3/CoreSupport/core_cm3.h"
 5546              		.file 7 "/home/oni/workspace/Naze32/lib/CMSIS/CM3/DeviceSupport/ST/STM32F10x/system_stm32f10x.h"
DEFINED SYMBOLS
                            *ABS*:00000000 cli.c
     /tmp/ccG0ghTx.s:19     .bss:00000000 $d
     /tmp/ccG0ghTx.s:20     .bss:00000000 cliBuffer
     /tmp/ccG0ghTx.s:23     .bss:00000030 bufferIndex
     /tmp/ccG0ghTx.s:84     .rodata:0000009c mixerNames
     /tmp/ccG0ghTx.s:27     .rodata:00000000 $d
     /tmp/ccG0ghTx.s:150    .rodata:00000180 featureNames
     /tmp/ccG0ghTx.s:179    .rodata:000001cc sensorNames
     /tmp/ccG0ghTx.s:202    .rodata:00000200 accNames
     /tmp/ccG0ghTx.s:293    .rodata:000003b8 cmdTable
     /tmp/ccG0ghTx.s:2128   .text:00000584 cliAux
     /tmp/ccG0ghTx.s:2282   .text:00000628 cliCMix
     /tmp/ccG0ghTx.s:2902   .text:00000ac8 cliDefaults
     /tmp/ccG0ghTx.s:2985   .text:00000b04 cliDump
     /tmp/ccG0ghTx.s:3377   .text:00000dfc cliExit
     /tmp/ccG0ghTx.s:3455   .text:00000e48 cliFeature
     /tmp/ccG0ghTx.s:3699   .text:00000fd8 cliHelp
     /tmp/ccG0ghTx.s:2831   .text:00000a74 cliI2C
     /tmp/ccG0ghTx.s:3783   .text:0000104c cliMap
     /tmp/ccG0ghTx.s:3977   .text:0000117c cliMixer
     /tmp/ccG0ghTx.s:4143   .text:00001288 cliProfile
     /tmp/ccG0ghTx.s:4229   .text:000012f4 cliSave
     /tmp/ccG0ghTx.s:4554   .text:000014ac cliSet
     /tmp/ccG0ghTx.s:4855   .text:000016c8 cliStatus
     /tmp/ccG0ghTx.s:5025   .text:00001800 cliVersion
     /tmp/ccG0ghTx.s:652    .rodata:00000a18 valueTable
     /tmp/ccG0ghTx.s:1275   .text:00000000 $t
     /tmp/ccG0ghTx.s:1279   .text:00000000 i2a
     /tmp/ccG0ghTx.s:1338   .text:00000054 $d
     /tmp/ccG0ghTx.s:1342   .text:00000058 $t
     /tmp/ccG0ghTx.s:1347   .text:00000058 itoa
     /tmp/ccG0ghTx.s:1433   .text:000000c8 _atof
     /tmp/ccG0ghTx.s:1801   .text:00000388 $d
     /tmp/ccG0ghTx.s:1818   .text:00000398 $t
     /tmp/ccG0ghTx.s:1822   .text:00000398 ftoa
     /tmp/ccG0ghTx.s:2021   .text:00000528 $d
     /tmp/ccG0ghTx.s:2033   .text:00000538 $t
     /tmp/ccG0ghTx.s:2037   .text:00000538 cliPrompt
     /tmp/ccG0ghTx.s:2059   .text:00000544 $d
     /tmp/ccG0ghTx.s:2063   .text:00000548 $t
     /tmp/ccG0ghTx.s:2067   .text:00000548 cliCompare
     /tmp/ccG0ghTx.s:2225   .text:0000061c $d
     /tmp/ccG0ghTx.s:2278   .text:00000628 $t
     /tmp/ccG0ghTx.s:2641   .text:000008ec $d
     /tmp/ccG0ghTx.s:2660   .text:00000930 $t
     /tmp/ccG0ghTx.s:2812   .text:00000a64 $d
     /tmp/ccG0ghTx.s:2827   .text:00000a74 $t
     /tmp/ccG0ghTx.s:2885   .text:00000ac0 $d
     /tmp/ccG0ghTx.s:2898   .text:00000ac8 $t
     /tmp/ccG0ghTx.s:2942   .text:00000afc $d
     /tmp/ccG0ghTx.s:2981   .text:00000b04 $t
     /tmp/ccG0ghTx.s:4291   .text:00001334 cliPrintVar
     /tmp/ccG0ghTx.s:3346   .text:00000db0 $d
     /tmp/ccG0ghTx.s:3373   .text:00000dfc $t
     /tmp/ccG0ghTx.s:3421   .text:00000e38 $d
     /tmp/ccG0ghTx.s:3451   .text:00000e48 $t
     /tmp/ccG0ghTx.s:3674   .text:00000fb0 $d
     /tmp/ccG0ghTx.s:3695   .text:00000fd8 $t
     /tmp/ccG0ghTx.s:3765   .text:00001040 $d
     /tmp/ccG0ghTx.s:3779   .text:0000104c $t
     /tmp/ccG0ghTx.s:3953   .text:00001164 $d
     /tmp/ccG0ghTx.s:3973   .text:0000117c $t
     /tmp/ccG0ghTx.s:4122   .text:00001264 $d
     /tmp/ccG0ghTx.s:4139   .text:00001288 $t
     /tmp/ccG0ghTx.s:4211   .text:000012e8 $d
     /tmp/ccG0ghTx.s:4225   .text:000012f4 $t
     /tmp/ccG0ghTx.s:4270   .text:0000132c $d
     /tmp/ccG0ghTx.s:4287   .text:00001334 $t
     /tmp/ccG0ghTx.s:4322   .text:00001354 $d
     /tmp/ccG0ghTx.s:4330   .text:0000136c $t
     /tmp/ccG0ghTx.s:4442   .text:00001434 $d
     /tmp/ccG0ghTx.s:4449   .text:00001444 $t
     /tmp/ccG0ghTx.s:4453   .text:00001444 cliSetVar
     /tmp/ccG0ghTx.s:4481   .text:0000145c $d
     /tmp/ccG0ghTx.s:4489   .text:00001474 $t
     /tmp/ccG0ghTx.s:4821   .text:000016a8 $d
     /tmp/ccG0ghTx.s:4851   .text:000016c8 $t
     /tmp/ccG0ghTx.s:4996   .text:000017bc $d
     /tmp/ccG0ghTx.s:5021   .text:00001800 $t
     /tmp/ccG0ghTx.s:5053   .text:00001818 $d
     /tmp/ccG0ghTx.s:5075   .text:0000181c $t
     /tmp/ccG0ghTx.s:5080   .text:0000181c cliProcess
     /tmp/ccG0ghTx.s:5462   .text:00001a80 $d
     /tmp/ccG0ghTx.s:5476   .text:00001ab0 $t
     /tmp/ccG0ghTx.s:5535   .text:00001b08 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.809c0ff785d6d6219236c5d51f444c16
                           .group:00000000 wm4.stdbool.h.29.1c9ee6859ce8145f7838a4f2549ccec2
                           .group:00000000 wm4.newlib.h.8.e1d498e57c12962fc6d7be5061a6981a
                           .group:00000000 wm4.config.h.148.52fe83653334d06815a0c57b59a3e584
                           .group:00000000 wm4._ansi.h.23.95dee4059009fe3ab635a191bb73dc66
                           .group:00000000 wm4.stdlib.h.18.6f6153fd5cb89acd58c0f0ab1f77e147
                           .group:00000000 wm4.stddef.h.187.40b3a084f9bc2c020a9e00b9eabe9c14
                           .group:00000000 wm4._default_types.h.6.1dbd2e581fd590860c7c17f21d147e91
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.349.31f4c5baff3fa2689010b32028da9c47
                           .group:00000000 wm4.reent.h.16.58b23a9f0faf0e7f2dfe7e2d33154afd
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.55.22eafe60f8565d898cbb44515781114b
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.math.h.49.5da716593b937b9fb02bef6ed6537c13
                           .group:00000000 wm4.ctype.h.2.fecd14bb6f4e162ef31748cc97760e21
                           .group:00000000 wm4.string.h.8.ef946ad0bc9ad5c970c365dcd1fc4b0a
                           .group:00000000 wm4.stddef.h.235.d9f4f80b8c4429535175712282cda6a6
                           .group:00000000 wm4.string.h.86.d5c872ff52e2712c985b588a0ef39f3c
                           .group:00000000 wm4.stdio.h.27.f2ac352bab34f31f9f478442827b2ba6
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.types.h.23.0d949686bbcadd1621462d4fa1f884f9
                           .group:00000000 wm4.stddef.h.40.b60a1c1ee3f272eef5327a730cbabca6
                           .group:00000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:00000000 wm4.types.h.80.f2bfdfeee9f340633702c07fad9b5e01
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.63.1f4bc553faa62c5c69dd9cb47f9f1417
                           .group:00000000 wm4.stm32f10x.h.51.b859cb68ed44ee02c916b41cb8c68f1c
                           .group:00000000 wm4.core_cm3.h.25.119fe996be41b62fbd915b59177e39d1
                           .group:00000000 wm4.stm32f10x.h.522.9a9f642c8c562acb4a63ad5d933b7c01
                           .group:00000000 wm4.stm32f10x.h.8304.f7d8ad90959e99679b3257267c3aadfe
                           .group:00000000 wm4.stm32f10x_adc.h.83.4d35a50d598070ecea6f33bcef02c922
                           .group:00000000 wm4.stm32f10x_bkp.h.25.4622919f1e30efdad5eb44e12edd5513
                           .group:00000000 wm4.stm32f10x_can.h.25.48aab46fcce6d08400bf960b028e4698
                           .group:00000000 wm4.stm32f10x_cec.h.25.8f03450e7bbb704d96e7bc73ec0f66a7
                           .group:00000000 wm4.stm32f10x_dac.h.25.6e7f2924f39c60c10815105b99b8b446
                           .group:00000000 wm4.stm32f10x_dbgmcu.h.25.d3351200fc7f9c8615d1ae81d40db08a
                           .group:00000000 wm4.stm32f10x_dma.h.25.94e36204daa98cae5dcc70a10a9694d5
                           .group:00000000 wm4.stm32f10x_exti.h.25.b9064155c5c006b5154b39788c79001a
                           .group:00000000 wm4.stm32f10x_flash.h.25.4be61fcb02863962a1e006449d310650
                           .group:00000000 wm4.stm32f10x_fsmc.h.25.bca154da2699cdb6024c0c6c4fc5aa89
                           .group:00000000 wm4.stm32f10x_gpio.h.25.80c981af0e637567395034c576cfb3ce
                           .group:00000000 wm4.stm32f10x_i2c.h.25.7b6cbaea24c6f25f538f8516d1814cb2
                           .group:00000000 wm4.stm32f10x_iwdg.h.25.da9374ab9856795610487f312ccf3122
                           .group:00000000 wm4.stm32f10x_pwr.h.25.37ef75009f751ef5fe27910e0bf00a62
                           .group:00000000 wm4.stm32f10x_rcc.h.25.968bcf08d813e68e57c280a4da69fa5a
                           .group:00000000 wm4.stm32f10x_rtc.h.25.361142606ba98ddcd10369f321f6e636
                           .group:00000000 wm4.stm32f10x_sdio.h.25.1fb5280a7690ef99070096bf8c866b3a
                           .group:00000000 wm4.stm32f10x_spi.h.25.68b3d5ccfcf895f9fe505ce20c0c300f
                           .group:00000000 wm4.stm32f10x_tim.h.25.21c6ec062f1e74898cb96a57da276fec
                           .group:00000000 wm4.stm32f10x_usart.h.25.29629c699b65db3f3efd3561f66b0bf6
                           .group:00000000 wm4.stm32f10x_wwdg.h.25.dde12201d86b5aa9ecaafb5eccdc6549
                           .group:00000000 wm4.misc.h.25.068e106f368fa5369a681ef57c106f4b
                           .group:00000000 wm4.stdarg.h.31.fa591a4b1df9e413e9f5b8097f9ae89d
                           .group:00000000 wm4.printf.h.118.ab3672ee221610a07496c11f46394049
                           .group:00000000 wm4.board.h.22.3e17243136ce51e89ad1cec38a12dc6f
                           .group:00000000 wm4.drv_adc.h.3.0c1a2a90f0739aca31cc38e66ffab3f5
                           .group:00000000 wm4.drv_pwm.h.3.1f878ba1925c00079825df97e09db15d
                           .group:00000000 wm4.mw.h.4.b0e233e0e6ae9c4c07b142ad41413d4c

UNDEFINED SYMBOLS
mcfg
cfg
__aeabi_dmul
__aeabi_i2d
__aeabi_dadd
__aeabi_ddiv
__aeabi_d2f
__aeabi_fcmpgt
__aeabi_fadd
__aeabi_fsub
__aeabi_fmul
__aeabi_f2iz
strlen
strcat
strncpy
uartPrint
strncasecmp
tfp_printf
atoi
strchr
__aeabi_fcmpeq
mixerLoadMix
i2cRead
checkFirstTime
delay
systemReset
__aeabi_fcmplt
featureMask
rcChannelLetters
memset
cliMode
featureClear
featureSet
parseRcChannels
__ctype_ptr__
writeEEPROM
__aeabi_i2f
__aeabi_fcmple
__aeabi_fcmpge
millis
sensorsMask
sensors
i2cGetErrorCounter
vbat
batteryCellCount
SystemCoreClock
accHardware
cycleTime
uartRead
uartWrite
bsearch
uartAvailable
