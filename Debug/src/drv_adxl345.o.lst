   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"drv_adxl345.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.bss
  19              	useFifo:
  20 0000 00       		.space	1
  21              		.text
  22              		.align	2
  23              		.global	adxl345Detect
  24              		.thumb
  25              		.thumb_func
  27              	adxl345Detect:
  28              	.LFB29:
  29              		.file 1 "../src/drv_adxl345.c"
   1:../src/drv_adxl345.c **** #include "board.h"
   2:../src/drv_adxl345.c **** 
   3:../src/drv_adxl345.c **** // ADXL345, Alternative address mode 0x53
   4:../src/drv_adxl345.c **** #define ADXL345_ADDRESS     0x53
   5:../src/drv_adxl345.c **** 
   6:../src/drv_adxl345.c **** // Registers
   7:../src/drv_adxl345.c **** #define ADXL345_BW_RATE     0x2C
   8:../src/drv_adxl345.c **** #define ADXL345_POWER_CTL   0x2D
   9:../src/drv_adxl345.c **** #define ADXL345_INT_ENABLE  0x2E
  10:../src/drv_adxl345.c **** #define ADXL345_DATA_FORMAT 0x31
  11:../src/drv_adxl345.c **** #define ADXL345_DATA_OUT    0x32
  12:../src/drv_adxl345.c **** #define ADXL345_FIFO_CTL    0x38
  13:../src/drv_adxl345.c **** 
  14:../src/drv_adxl345.c **** // BW_RATE values
  15:../src/drv_adxl345.c **** #define ADXL345_RATE_50     0x09
  16:../src/drv_adxl345.c **** #define ADXL345_RATE_100    0x0A
  17:../src/drv_adxl345.c **** #define ADXL345_RATE_200    0x0B
  18:../src/drv_adxl345.c **** #define ADXL345_RATE_400    0x0C
  19:../src/drv_adxl345.c **** #define ADXL345_RATE_800    0x0D
  20:../src/drv_adxl345.c **** #define ADXL345_RATE_1600   0x0E
  21:../src/drv_adxl345.c **** #define ADXL345_RATE_3200   0x0F
  22:../src/drv_adxl345.c **** 
  23:../src/drv_adxl345.c **** // various register values
  24:../src/drv_adxl345.c **** #define ADXL345_POWER_MEAS  0x08
  25:../src/drv_adxl345.c **** #define ADXL345_FULL_RANGE  0x08
  26:../src/drv_adxl345.c **** #define ADXL345_RANGE_2G    0x00
  27:../src/drv_adxl345.c **** #define ADXL345_RANGE_4G    0x01
  28:../src/drv_adxl345.c **** #define ADXL345_RANGE_8G    0x02
  29:../src/drv_adxl345.c **** #define ADXL345_RANGE_16G   0x03
  30:../src/drv_adxl345.c **** #define ADXL345_FIFO_STREAM 0x80
  31:../src/drv_adxl345.c **** 
  32:../src/drv_adxl345.c **** extern uint16_t acc_1G;
  33:../src/drv_adxl345.c **** 
  34:../src/drv_adxl345.c **** static void adxl345Init(void);
  35:../src/drv_adxl345.c **** static void adxl345Read(int16_t *accelData);
  36:../src/drv_adxl345.c **** static void adxl345Align(int16_t *accelData);
  37:../src/drv_adxl345.c **** 
  38:../src/drv_adxl345.c **** static bool useFifo = false;
  39:../src/drv_adxl345.c **** 
  40:../src/drv_adxl345.c **** bool adxl345Detect(drv_adxl345_config_t *init, sensor_t *acc)
  41:../src/drv_adxl345.c **** {
  30              		.loc 1 41 0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 16
  33              		@ frame_needed = 1, uses_anonymous_args = 0
  34 0000 80B5     		push	{r7, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 7, -8
  38              		.cfi_offset 14, -4
  39 0002 84B0     		sub	sp, sp, #16
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 24
  42 0004 00AF     		add	r7, sp, #0
  43              	.LCFI2:
  44              		.cfi_def_cfa_register 7
  45 0006 7860     		str	r0, [r7, #4]
  46 0008 3960     		str	r1, [r7, #0]
  42:../src/drv_adxl345.c ****     bool ack = false;
  47              		.loc 1 42 0
  48 000a 4FF00003 		mov	r3, #0
  49 000e FB73     		strb	r3, [r7, #15]
  43:../src/drv_adxl345.c ****     uint8_t sig = 0;
  50              		.loc 1 43 0
  51 0010 4FF00003 		mov	r3, #0
  52 0014 BB73     		strb	r3, [r7, #14]
  44:../src/drv_adxl345.c **** 
  45:../src/drv_adxl345.c ****     ack = i2cRead(ADXL345_ADDRESS, 0x00, 1, &sig);
  53              		.loc 1 45 0
  54 0016 07F10E03 		add	r3, r7, #14
  55 001a 4FF05300 		mov	r0, #83
  56 001e 4FF00001 		mov	r1, #0
  57 0022 4FF00102 		mov	r2, #1
  58 0026 FFF7FEFF 		bl	i2cRead
  59 002a 0346     		mov	r3, r0
  60 002c FB73     		strb	r3, [r7, #15]
  46:../src/drv_adxl345.c ****     if (!ack || sig != 0xE5)
  61              		.loc 1 46 0
  62 002e FB7B     		ldrb	r3, [r7, #15]
  63 0030 83F00103 		eor	r3, r3, #1
  64 0034 DBB2     		uxtb	r3, r3
  65 0036 002B     		cmp	r3, #0
  66 0038 02D1     		bne	.L2
  67              		.loc 1 46 0 is_stmt 0 discriminator 1
  68 003a BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
  69 003c E52B     		cmp	r3, #229
  70 003e 02D0     		beq	.L3
  71              	.L2:
  47:../src/drv_adxl345.c ****         return false;
  72              		.loc 1 47 0 is_stmt 1
  73 0040 4FF00003 		mov	r3, #0
  74 0044 0EE0     		b	.L5
  75              	.L3:
  48:../src/drv_adxl345.c **** 
  49:../src/drv_adxl345.c ****     // use ADXL345's fifo to filter data or not
  50:../src/drv_adxl345.c ****     useFifo = init->useFifo;
  76              		.loc 1 50 0
  77 0046 7B68     		ldr	r3, [r7, #4]
  78 0048 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
  79 004a 094B     		ldr	r3, .L6
  80 004c 1A70     		strb	r2, [r3, #0]
  51:../src/drv_adxl345.c **** 
  52:../src/drv_adxl345.c ****     acc->init = adxl345Init;
  81              		.loc 1 52 0
  82 004e 3B68     		ldr	r3, [r7, #0]
  83 0050 084A     		ldr	r2, .L6+4
  84 0052 1A60     		str	r2, [r3, #0]
  53:../src/drv_adxl345.c ****     acc->read = adxl345Read;
  85              		.loc 1 53 0
  86 0054 3B68     		ldr	r3, [r7, #0]
  87 0056 084A     		ldr	r2, .L6+8
  88 0058 5A60     		str	r2, [r3, #4]
  54:../src/drv_adxl345.c ****     acc->align = adxl345Align;
  89              		.loc 1 54 0
  90 005a 3B68     		ldr	r3, [r7, #0]
  91 005c 074A     		ldr	r2, .L6+12
  92 005e 9A60     		str	r2, [r3, #8]
  55:../src/drv_adxl345.c ****     return true;
  93              		.loc 1 55 0
  94 0060 4FF00103 		mov	r3, #1
  95              	.L5:
  56:../src/drv_adxl345.c **** }
  96              		.loc 1 56 0
  97 0064 1846     		mov	r0, r3
  98 0066 07F11007 		add	r7, r7, #16
  99 006a BD46     		mov	sp, r7
 100 006c 80BD     		pop	{r7, pc}
 101              	.L7:
 102 006e 00BF     		.align	2
 103              	.L6:
 104 0070 00000000 		.word	useFifo
 105 0074 00000000 		.word	adxl345Init
 106 0078 00000000 		.word	adxl345Read
 107 007c 00000000 		.word	adxl345Align
 108              		.cfi_endproc
 109              	.LFE29:
 111              		.align	2
 112              		.thumb
 113              		.thumb_func
 115              	adxl345Init:
 116              	.LFB30:
  57:../src/drv_adxl345.c **** 
  58:../src/drv_adxl345.c **** static void adxl345Init(void)
  59:../src/drv_adxl345.c **** {
 117              		.loc 1 59 0
 118              		.cfi_startproc
 119              		@ args = 0, pretend = 0, frame = 8
 120              		@ frame_needed = 1, uses_anonymous_args = 0
 121 0080 80B5     		push	{r7, lr}
 122              	.LCFI3:
 123              		.cfi_def_cfa_offset 8
 124              		.cfi_offset 7, -8
 125              		.cfi_offset 14, -4
 126 0082 82B0     		sub	sp, sp, #8
 127              	.LCFI4:
 128              		.cfi_def_cfa_offset 16
 129 0084 00AF     		add	r7, sp, #0
 130              	.LCFI5:
 131              		.cfi_def_cfa_register 7
  60:../src/drv_adxl345.c ****    if (useFifo) {
 132              		.loc 1 60 0
 133 0086 274B     		ldr	r3, .L11
 134 0088 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 135 008a 002B     		cmp	r3, #0
 136 008c 2AD0     		beq	.L9
 137              	.LBB2:
  61:../src/drv_adxl345.c ****         uint8_t fifoDepth = 16;
 138              		.loc 1 61 0
 139 008e 4FF01003 		mov	r3, #16
 140 0092 FB71     		strb	r3, [r7, #7]
  62:../src/drv_adxl345.c ****         i2cWrite(ADXL345_ADDRESS, ADXL345_POWER_CTL, ADXL345_POWER_MEAS);
 141              		.loc 1 62 0
 142 0094 4FF05300 		mov	r0, #83
 143 0098 4FF02D01 		mov	r1, #45
 144 009c 4FF00802 		mov	r2, #8
 145 00a0 FFF7FEFF 		bl	i2cWrite
  63:../src/drv_adxl345.c ****         i2cWrite(ADXL345_ADDRESS, ADXL345_DATA_FORMAT, ADXL345_FULL_RANGE | ADXL345_RANGE_8G);
 146              		.loc 1 63 0
 147 00a4 4FF05300 		mov	r0, #83
 148 00a8 4FF03101 		mov	r1, #49
 149 00ac 4FF00A02 		mov	r2, #10
 150 00b0 FFF7FEFF 		bl	i2cWrite
  64:../src/drv_adxl345.c ****         i2cWrite(ADXL345_ADDRESS, ADXL345_BW_RATE, ADXL345_RATE_400);
 151              		.loc 1 64 0
 152 00b4 4FF05300 		mov	r0, #83
 153 00b8 4FF02C01 		mov	r1, #44
 154 00bc 4FF00C02 		mov	r2, #12
 155 00c0 FFF7FEFF 		bl	i2cWrite
  65:../src/drv_adxl345.c ****         i2cWrite(ADXL345_ADDRESS, ADXL345_FIFO_CTL, (fifoDepth & 0x1F) | ADXL345_FIFO_STREAM);
 156              		.loc 1 65 0
 157 00c4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 158 00c6 03F01F03 		and	r3, r3, #31
 159 00ca DBB2     		uxtb	r3, r3
 160 00cc 63F07F03 		orn	r3, r3, #127
 161 00d0 DBB2     		uxtb	r3, r3
 162 00d2 DBB2     		uxtb	r3, r3
 163 00d4 4FF05300 		mov	r0, #83
 164 00d8 4FF03801 		mov	r1, #56
 165 00dc 1A46     		mov	r2, r3
 166 00de FFF7FEFF 		bl	i2cWrite
 167 00e2 17E0     		b	.L10
 168              	.L9:
 169              	.LBE2:
  66:../src/drv_adxl345.c ****     } else {
  67:../src/drv_adxl345.c ****         i2cWrite(ADXL345_ADDRESS, ADXL345_POWER_CTL, ADXL345_POWER_MEAS);
 170              		.loc 1 67 0
 171 00e4 4FF05300 		mov	r0, #83
 172 00e8 4FF02D01 		mov	r1, #45
 173 00ec 4FF00802 		mov	r2, #8
 174 00f0 FFF7FEFF 		bl	i2cWrite
  68:../src/drv_adxl345.c ****         i2cWrite(ADXL345_ADDRESS, ADXL345_DATA_FORMAT, ADXL345_FULL_RANGE | ADXL345_RANGE_8G);
 175              		.loc 1 68 0
 176 00f4 4FF05300 		mov	r0, #83
 177 00f8 4FF03101 		mov	r1, #49
 178 00fc 4FF00A02 		mov	r2, #10
 179 0100 FFF7FEFF 		bl	i2cWrite
  69:../src/drv_adxl345.c ****         i2cWrite(ADXL345_ADDRESS, ADXL345_BW_RATE, ADXL345_RATE_100);
 180              		.loc 1 69 0
 181 0104 4FF05300 		mov	r0, #83
 182 0108 4FF02C01 		mov	r1, #44
 183 010c 4FF00A02 		mov	r2, #10
 184 0110 FFF7FEFF 		bl	i2cWrite
 185              	.L10:
  70:../src/drv_adxl345.c ****     }
  71:../src/drv_adxl345.c ****     acc_1G = 265; // 3.3V operation
 186              		.loc 1 71 0
 187 0114 044B     		ldr	r3, .L11+4
 188 0116 40F20912 		movw	r2, #265
 189 011a 1A80     		strh	r2, [r3, #0]	@ movhi
  72:../src/drv_adxl345.c **** }
 190              		.loc 1 72 0
 191 011c 07F10807 		add	r7, r7, #8
 192 0120 BD46     		mov	sp, r7
 193 0122 80BD     		pop	{r7, pc}
 194              	.L12:
 195              		.align	2
 196              	.L11:
 197 0124 00000000 		.word	useFifo
 198 0128 00000000 		.word	acc_1G
 199              		.cfi_endproc
 200              	.LFE30:
 202              		.global	acc_samples
 203              		.bss
 206              	acc_samples:
 207 0001 00       		.space	1
 208              		.text
 209              		.align	2
 210              		.thumb
 211              		.thumb_func
 213              	adxl345Read:
 214              	.LFB31:
  73:../src/drv_adxl345.c **** 
  74:../src/drv_adxl345.c **** uint8_t acc_samples = 0;
  75:../src/drv_adxl345.c **** 
  76:../src/drv_adxl345.c **** static void adxl345Read(int16_t *accelData)
  77:../src/drv_adxl345.c **** {
 215              		.loc 1 77 0
 216              		.cfi_startproc
 217              		@ args = 0, pretend = 0, frame = 32
 218              		@ frame_needed = 1, uses_anonymous_args = 0
 219 012c 80B5     		push	{r7, lr}
 220              	.LCFI6:
 221              		.cfi_def_cfa_offset 8
 222              		.cfi_offset 7, -8
 223              		.cfi_offset 14, -4
 224 012e 88B0     		sub	sp, sp, #32
 225              	.LCFI7:
 226              		.cfi_def_cfa_offset 40
 227 0130 00AF     		add	r7, sp, #0
 228              	.LCFI8:
 229              		.cfi_def_cfa_register 7
 230 0132 7860     		str	r0, [r7, #4]
  78:../src/drv_adxl345.c ****     uint8_t buf[8];
  79:../src/drv_adxl345.c **** 
  80:../src/drv_adxl345.c ****     if (useFifo) {
 231              		.loc 1 80 0
 232 0134 4F4B     		ldr	r3, .L18
 233 0136 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 234 0138 002B     		cmp	r3, #0
 235 013a 67D0     		beq	.L14
 236              	.LBB3:
  81:../src/drv_adxl345.c ****         int32_t x = 0;
 237              		.loc 1 81 0
 238 013c 4FF00003 		mov	r3, #0
 239 0140 FB61     		str	r3, [r7, #28]
  82:../src/drv_adxl345.c ****         int32_t y = 0;
 240              		.loc 1 82 0
 241 0142 4FF00003 		mov	r3, #0
 242 0146 BB61     		str	r3, [r7, #24]
  83:../src/drv_adxl345.c ****         int32_t z = 0;
 243              		.loc 1 83 0
 244 0148 4FF00003 		mov	r3, #0
 245 014c 7B61     		str	r3, [r7, #20]
  84:../src/drv_adxl345.c ****         uint8_t i = 0;
 246              		.loc 1 84 0
 247 014e 4FF00003 		mov	r3, #0
 248 0152 FB74     		strb	r3, [r7, #19]
 249              	.L16:
  85:../src/drv_adxl345.c ****         uint8_t samples_remaining;
  86:../src/drv_adxl345.c **** 
  87:../src/drv_adxl345.c ****         do {
  88:../src/drv_adxl345.c ****             i++;
 250              		.loc 1 88 0 discriminator 1
 251 0154 FB7C     		ldrb	r3, [r7, #19]
 252 0156 03F10103 		add	r3, r3, #1
 253 015a FB74     		strb	r3, [r7, #19]
  89:../src/drv_adxl345.c ****             i2cRead(ADXL345_ADDRESS, ADXL345_DATA_OUT, 8, buf);
 254              		.loc 1 89 0 discriminator 1
 255 015c 07F10803 		add	r3, r7, #8
 256 0160 4FF05300 		mov	r0, #83
 257 0164 4FF03201 		mov	r1, #50
 258 0168 4FF00802 		mov	r2, #8
 259 016c FFF7FEFF 		bl	i2cRead
  90:../src/drv_adxl345.c ****             x += (int16_t)(buf[0] + (buf[1] << 8));
 260              		.loc 1 90 0 discriminator 1
 261 0170 3B7A     		ldrb	r3, [r7, #8]	@ zero_extendqisi2
 262 0172 1A46     		mov	r2, r3
 263 0174 7B7A     		ldrb	r3, [r7, #9]	@ zero_extendqisi2
 264 0176 4FEA0323 		lsl	r3, r3, #8
 265 017a 9BB2     		uxth	r3, r3
 266 017c D318     		adds	r3, r2, r3
 267 017e 9BB2     		uxth	r3, r3
 268 0180 9BB2     		uxth	r3, r3
 269 0182 1BB2     		sxth	r3, r3
 270 0184 FA69     		ldr	r2, [r7, #28]
 271 0186 D318     		adds	r3, r2, r3
 272 0188 FB61     		str	r3, [r7, #28]
  91:../src/drv_adxl345.c ****             y += (int16_t)(buf[2] + (buf[3] << 8));
 273              		.loc 1 91 0 discriminator 1
 274 018a BB7A     		ldrb	r3, [r7, #10]	@ zero_extendqisi2
 275 018c 1A46     		mov	r2, r3
 276 018e FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 277 0190 4FEA0323 		lsl	r3, r3, #8
 278 0194 9BB2     		uxth	r3, r3
 279 0196 D318     		adds	r3, r2, r3
 280 0198 9BB2     		uxth	r3, r3
 281 019a 9BB2     		uxth	r3, r3
 282 019c 1BB2     		sxth	r3, r3
 283 019e BA69     		ldr	r2, [r7, #24]
 284 01a0 D318     		adds	r3, r2, r3
 285 01a2 BB61     		str	r3, [r7, #24]
  92:../src/drv_adxl345.c ****             z += (int16_t)(buf[4] + (buf[5] << 8));
 286              		.loc 1 92 0 discriminator 1
 287 01a4 3B7B     		ldrb	r3, [r7, #12]	@ zero_extendqisi2
 288 01a6 1A46     		mov	r2, r3
 289 01a8 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 290 01aa 4FEA0323 		lsl	r3, r3, #8
 291 01ae 9BB2     		uxth	r3, r3
 292 01b0 D318     		adds	r3, r2, r3
 293 01b2 9BB2     		uxth	r3, r3
 294 01b4 9BB2     		uxth	r3, r3
 295 01b6 1BB2     		sxth	r3, r3
 296 01b8 7A69     		ldr	r2, [r7, #20]
 297 01ba D318     		adds	r3, r2, r3
 298 01bc 7B61     		str	r3, [r7, #20]
  93:../src/drv_adxl345.c ****             samples_remaining = buf[7] & 0x7F;
 299              		.loc 1 93 0 discriminator 1
 300 01be FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 301 01c0 03F07F03 		and	r3, r3, #127
 302 01c4 BB74     		strb	r3, [r7, #18]
  94:../src/drv_adxl345.c ****         } while ((i < 32) && (samples_remaining > 0));
 303              		.loc 1 94 0 discriminator 1
 304 01c6 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 305 01c8 1F2B     		cmp	r3, #31
 306 01ca 02D8     		bhi	.L15
 307 01cc BB7C     		ldrb	r3, [r7, #18]	@ zero_extendqisi2
 308 01ce 002B     		cmp	r3, #0
 309 01d0 C0D1     		bne	.L16
 310              	.L15:
  95:../src/drv_adxl345.c ****         accelData[0] = x / i;
 311              		.loc 1 95 0
 312 01d2 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 313 01d4 FA69     		ldr	r2, [r7, #28]
 314 01d6 92FBF3F3 		sdiv	r3, r2, r3
 315 01da 9AB2     		uxth	r2, r3
 316 01dc 7B68     		ldr	r3, [r7, #4]
 317 01de 1A80     		strh	r2, [r3, #0]	@ movhi
  96:../src/drv_adxl345.c ****         accelData[1] = y / i;
 318              		.loc 1 96 0
 319 01e0 7B68     		ldr	r3, [r7, #4]
 320 01e2 03F10203 		add	r3, r3, #2
 321 01e6 FA7C     		ldrb	r2, [r7, #19]	@ zero_extendqisi2
 322 01e8 B969     		ldr	r1, [r7, #24]
 323 01ea 91FBF2F2 		sdiv	r2, r1, r2
 324 01ee 92B2     		uxth	r2, r2
 325 01f0 1A80     		strh	r2, [r3, #0]	@ movhi
  97:../src/drv_adxl345.c ****         accelData[2] = z / i;
 326              		.loc 1 97 0
 327 01f2 7B68     		ldr	r3, [r7, #4]
 328 01f4 03F10403 		add	r3, r3, #4
 329 01f8 FA7C     		ldrb	r2, [r7, #19]	@ zero_extendqisi2
 330 01fa 7969     		ldr	r1, [r7, #20]
 331 01fc 91FBF2F2 		sdiv	r2, r1, r2
 332 0200 92B2     		uxth	r2, r2
 333 0202 1A80     		strh	r2, [r3, #0]	@ movhi
  98:../src/drv_adxl345.c ****         acc_samples = i;
 334              		.loc 1 98 0
 335 0204 1C4B     		ldr	r3, .L18+4
 336 0206 FA7C     		ldrb	r2, [r7, #19]
 337 0208 1A70     		strb	r2, [r3, #0]
 338 020a 2EE0     		b	.L13
 339              	.L14:
 340              	.LBE3:
  99:../src/drv_adxl345.c ****     } else {
 100:../src/drv_adxl345.c ****         i2cRead(ADXL345_ADDRESS, ADXL345_DATA_OUT, 6, buf);
 341              		.loc 1 100 0
 342 020c 07F10803 		add	r3, r7, #8
 343 0210 4FF05300 		mov	r0, #83
 344 0214 4FF03201 		mov	r1, #50
 345 0218 4FF00602 		mov	r2, #6
 346 021c FFF7FEFF 		bl	i2cRead
 101:../src/drv_adxl345.c ****         accelData[0] = buf[0] + (buf[1] << 8);
 347              		.loc 1 101 0
 348 0220 3B7A     		ldrb	r3, [r7, #8]	@ zero_extendqisi2
 349 0222 1A46     		mov	r2, r3
 350 0224 7B7A     		ldrb	r3, [r7, #9]	@ zero_extendqisi2
 351 0226 4FEA0323 		lsl	r3, r3, #8
 352 022a 9BB2     		uxth	r3, r3
 353 022c D318     		adds	r3, r2, r3
 354 022e 9BB2     		uxth	r3, r3
 355 0230 9AB2     		uxth	r2, r3
 356 0232 7B68     		ldr	r3, [r7, #4]
 357 0234 1A80     		strh	r2, [r3, #0]	@ movhi
 102:../src/drv_adxl345.c ****         accelData[1] = buf[2] + (buf[3] << 8);
 358              		.loc 1 102 0
 359 0236 7B68     		ldr	r3, [r7, #4]
 360 0238 03F10203 		add	r3, r3, #2
 361 023c BA7A     		ldrb	r2, [r7, #10]	@ zero_extendqisi2
 362 023e 1146     		mov	r1, r2
 363 0240 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 364 0242 4FEA0222 		lsl	r2, r2, #8
 365 0246 92B2     		uxth	r2, r2
 366 0248 8A18     		adds	r2, r1, r2
 367 024a 92B2     		uxth	r2, r2
 368 024c 92B2     		uxth	r2, r2
 369 024e 1A80     		strh	r2, [r3, #0]	@ movhi
 103:../src/drv_adxl345.c ****         accelData[2] = buf[4] + (buf[5] << 8);
 370              		.loc 1 103 0
 371 0250 7B68     		ldr	r3, [r7, #4]
 372 0252 03F10403 		add	r3, r3, #4
 373 0256 3A7B     		ldrb	r2, [r7, #12]	@ zero_extendqisi2
 374 0258 1146     		mov	r1, r2
 375 025a 7A7B     		ldrb	r2, [r7, #13]	@ zero_extendqisi2
 376 025c 4FEA0222 		lsl	r2, r2, #8
 377 0260 92B2     		uxth	r2, r2
 378 0262 8A18     		adds	r2, r1, r2
 379 0264 92B2     		uxth	r2, r2
 380 0266 92B2     		uxth	r2, r2
 381 0268 1A80     		strh	r2, [r3, #0]	@ movhi
 382              	.L13:
 104:../src/drv_adxl345.c ****     }
 105:../src/drv_adxl345.c **** }
 383              		.loc 1 105 0
 384 026a 07F12007 		add	r7, r7, #32
 385 026e BD46     		mov	sp, r7
 386 0270 80BD     		pop	{r7, pc}
 387              	.L19:
 388 0272 00BF     		.align	2
 389              	.L18:
 390 0274 00000000 		.word	useFifo
 391 0278 00000000 		.word	acc_samples
 392              		.cfi_endproc
 393              	.LFE31:
 395              		.align	2
 396              		.thumb
 397              		.thumb_func
 399              	adxl345Align:
 400              	.LFB32:
 106:../src/drv_adxl345.c **** 
 107:../src/drv_adxl345.c **** static void adxl345Align(int16_t *accData)
 108:../src/drv_adxl345.c **** {
 401              		.loc 1 108 0
 402              		.cfi_startproc
 403              		@ args = 0, pretend = 0, frame = 8
 404              		@ frame_needed = 1, uses_anonymous_args = 0
 405              		@ link register save eliminated.
 406 027c 80B4     		push	{r7}
 407              	.LCFI9:
 408              		.cfi_def_cfa_offset 4
 409              		.cfi_offset 7, -4
 410 027e 83B0     		sub	sp, sp, #12
 411              	.LCFI10:
 412              		.cfi_def_cfa_offset 16
 413 0280 00AF     		add	r7, sp, #0
 414              	.LCFI11:
 415              		.cfi_def_cfa_register 7
 416 0282 7860     		str	r0, [r7, #4]
 109:../src/drv_adxl345.c ****     // official direction is RPY, nothing to change here.
 110:../src/drv_adxl345.c **** }
 417              		.loc 1 110 0
 418 0284 07F10C07 		add	r7, r7, #12
 419 0288 BD46     		mov	sp, r7
 420 028a 80BC     		pop	{r7}
 421 028c 7047     		bx	lr
 422              		.cfi_endproc
 423              	.LFE32:
 425              	.Letext0:
 426              		.file 2 "/home/oni/ARM_EABI/bin/../lib/gcc/arm-none-eabi/4.7.2/../../../../arm-none-eabi/include/s
 427              		.file 3 "../src/board.h"
 428              		.file 4 "../src/drv_adxl345.h"
 429              		.file 5 "/home/oni/workspace/Naze32/lib/CMSIS/CM3/CoreSupport/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:00000000 drv_adxl345.c
     /tmp/cc9R1vU2.s:19     .bss:00000000 useFifo
     /tmp/cc9R1vU2.s:20     .bss:00000000 $d
     /tmp/cc9R1vU2.s:22     .text:00000000 $t
     /tmp/cc9R1vU2.s:27     .text:00000000 adxl345Detect
     /tmp/cc9R1vU2.s:104    .text:00000070 $d
     /tmp/cc9R1vU2.s:115    .text:00000080 adxl345Init
     /tmp/cc9R1vU2.s:213    .text:0000012c adxl345Read
     /tmp/cc9R1vU2.s:399    .text:0000027c adxl345Align
     /tmp/cc9R1vU2.s:111    .text:00000080 $t
     /tmp/cc9R1vU2.s:197    .text:00000124 $d
     /tmp/cc9R1vU2.s:206    .bss:00000001 acc_samples
     /tmp/cc9R1vU2.s:209    .text:0000012c $t
     /tmp/cc9R1vU2.s:390    .text:00000274 $d
     /tmp/cc9R1vU2.s:395    .text:0000027c $t
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.809c0ff785d6d6219236c5d51f444c16
                           .group:00000000 wm4.stdbool.h.29.1c9ee6859ce8145f7838a4f2549ccec2
                           .group:00000000 wm4.newlib.h.8.e1d498e57c12962fc6d7be5061a6981a
                           .group:00000000 wm4.config.h.148.52fe83653334d06815a0c57b59a3e584
                           .group:00000000 wm4._ansi.h.23.95dee4059009fe3ab635a191bb73dc66
                           .group:00000000 wm4.stdlib.h.18.6f6153fd5cb89acd58c0f0ab1f77e147
                           .group:00000000 wm4.stddef.h.187.40b3a084f9bc2c020a9e00b9eabe9c14
                           .group:00000000 wm4._default_types.h.6.1dbd2e581fd590860c7c17f21d147e91
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.349.31f4c5baff3fa2689010b32028da9c47
                           .group:00000000 wm4.reent.h.16.58b23a9f0faf0e7f2dfe7e2d33154afd
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.55.22eafe60f8565d898cbb44515781114b
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.math.h.49.5da716593b937b9fb02bef6ed6537c13
                           .group:00000000 wm4.ctype.h.2.fecd14bb6f4e162ef31748cc97760e21
                           .group:00000000 wm4.string.h.8.ef946ad0bc9ad5c970c365dcd1fc4b0a
                           .group:00000000 wm4.stddef.h.235.d9f4f80b8c4429535175712282cda6a6
                           .group:00000000 wm4.string.h.86.d5c872ff52e2712c985b588a0ef39f3c
                           .group:00000000 wm4.stdio.h.27.f2ac352bab34f31f9f478442827b2ba6
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.types.h.23.0d949686bbcadd1621462d4fa1f884f9
                           .group:00000000 wm4.stddef.h.40.b60a1c1ee3f272eef5327a730cbabca6
                           .group:00000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:00000000 wm4.types.h.80.f2bfdfeee9f340633702c07fad9b5e01
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.63.1f4bc553faa62c5c69dd9cb47f9f1417
                           .group:00000000 wm4.stm32f10x.h.51.b859cb68ed44ee02c916b41cb8c68f1c
                           .group:00000000 wm4.core_cm3.h.25.119fe996be41b62fbd915b59177e39d1
                           .group:00000000 wm4.stm32f10x.h.522.9a9f642c8c562acb4a63ad5d933b7c01
                           .group:00000000 wm4.stm32f10x.h.8304.f7d8ad90959e99679b3257267c3aadfe
                           .group:00000000 wm4.stm32f10x_adc.h.83.4d35a50d598070ecea6f33bcef02c922
                           .group:00000000 wm4.stm32f10x_bkp.h.25.4622919f1e30efdad5eb44e12edd5513
                           .group:00000000 wm4.stm32f10x_can.h.25.48aab46fcce6d08400bf960b028e4698
                           .group:00000000 wm4.stm32f10x_cec.h.25.8f03450e7bbb704d96e7bc73ec0f66a7
                           .group:00000000 wm4.stm32f10x_dac.h.25.6e7f2924f39c60c10815105b99b8b446
                           .group:00000000 wm4.stm32f10x_dbgmcu.h.25.d3351200fc7f9c8615d1ae81d40db08a
                           .group:00000000 wm4.stm32f10x_dma.h.25.94e36204daa98cae5dcc70a10a9694d5
                           .group:00000000 wm4.stm32f10x_exti.h.25.b9064155c5c006b5154b39788c79001a
                           .group:00000000 wm4.stm32f10x_flash.h.25.4be61fcb02863962a1e006449d310650
                           .group:00000000 wm4.stm32f10x_fsmc.h.25.bca154da2699cdb6024c0c6c4fc5aa89
                           .group:00000000 wm4.stm32f10x_gpio.h.25.80c981af0e637567395034c576cfb3ce
                           .group:00000000 wm4.stm32f10x_i2c.h.25.7b6cbaea24c6f25f538f8516d1814cb2
                           .group:00000000 wm4.stm32f10x_iwdg.h.25.da9374ab9856795610487f312ccf3122
                           .group:00000000 wm4.stm32f10x_pwr.h.25.37ef75009f751ef5fe27910e0bf00a62
                           .group:00000000 wm4.stm32f10x_rcc.h.25.968bcf08d813e68e57c280a4da69fa5a
                           .group:00000000 wm4.stm32f10x_rtc.h.25.361142606ba98ddcd10369f321f6e636
                           .group:00000000 wm4.stm32f10x_sdio.h.25.1fb5280a7690ef99070096bf8c866b3a
                           .group:00000000 wm4.stm32f10x_spi.h.25.68b3d5ccfcf895f9fe505ce20c0c300f
                           .group:00000000 wm4.stm32f10x_tim.h.25.21c6ec062f1e74898cb96a57da276fec
                           .group:00000000 wm4.stm32f10x_usart.h.25.29629c699b65db3f3efd3561f66b0bf6
                           .group:00000000 wm4.stm32f10x_wwdg.h.25.dde12201d86b5aa9ecaafb5eccdc6549
                           .group:00000000 wm4.misc.h.25.068e106f368fa5369a681ef57c106f4b
                           .group:00000000 wm4.stdarg.h.31.fa591a4b1df9e413e9f5b8097f9ae89d
                           .group:00000000 wm4.printf.h.118.ab3672ee221610a07496c11f46394049
                           .group:00000000 wm4.board.h.22.3e17243136ce51e89ad1cec38a12dc6f
                           .group:00000000 wm4.drv_adc.h.3.0c1a2a90f0739aca31cc38e66ffab3f5
                           .group:00000000 wm4.drv_pwm.h.3.1f878ba1925c00079825df97e09db15d

UNDEFINED SYMBOLS
i2cRead
i2cWrite
acc_1G
