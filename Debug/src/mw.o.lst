   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"mw.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.comm	f,16,4
  19              		.comm	debug,8,4
  20              		.global	toggleBeep
  21              		.bss
  24              	toggleBeep:
  25 0000 00       		.space	1
  26              		.global	currentTime
  27 0001 000000   		.align	2
  30              	currentTime:
  31 0004 00000000 		.space	4
  32              		.global	previousTime
  33              		.align	2
  36              	previousTime:
  37 0008 00000000 		.space	4
  38              		.global	cycleTime
  39              		.align	1
  42              	cycleTime:
  43 000c 0000     		.space	2
  44              		.comm	headFreeModeHold,2,2
  45              		.global	annex650_overrun_count
  46              		.align	1
  49              	annex650_overrun_count:
  50 000e 0000     		.space	2
  51              		.comm	vbat,1,1
  52              		.comm	telemTemperature1,2,2
  53              		.global	failsafeCnt
  54              		.align	1
  57              	failsafeCnt:
  58 0010 0000     		.space	2
  59              		.global	failsafeEvents
  60              		.align	1
  63              	failsafeEvents:
  64 0012 0000     		.space	2
  65              		.global	rcData
  66              		.data
  67              		.align	2
  70              	rcData:
  71 0000 DE05     		.short	1502
  72 0002 DE05     		.short	1502
  73 0004 DE05     		.short	1502
  74 0006 DE05     		.short	1502
  75 0008 DE05     		.short	1502
  76 000a DE05     		.short	1502
  77 000c DE05     		.short	1502
  78 000e DE05     		.short	1502
  79              		.comm	rcCommand,8,4
  80              		.comm	lookupPitchRollRC,12,4
  81              		.comm	lookupThrottleRC,22,4
  82              		.comm	rssi,2,2
  83              		.global	rcReadRawFunc
  84              		.bss
  85              		.align	2
  88              	rcReadRawFunc:
  89 0014 00000000 		.space	4
  90              		.comm	dynP8,3,4
  91              		.comm	dynI8,3,4
  92              		.comm	dynD8,3,4
  93              		.comm	rcOptions,20,4
  94              		.comm	axisPID,6,4
  95              		.comm	GPS_coord,8,4
  96              		.comm	GPS_home,8,4
  97              		.comm	GPS_hold,8,4
  98              		.comm	GPS_numSat,1,1
  99              		.comm	GPS_distanceToHome,2,2
 100              		.comm	GPS_directionToHome,2,2
 101              		.comm	GPS_altitude,2,2
 102              		.comm	GPS_speed,2,2
 103              		.global	GPS_update
 106              	GPS_update:
 107 0018 00       		.space	1
 108              		.global	GPS_angle
 109 0019 000000   		.align	2
 112              	GPS_angle:
 113 001c 00000000 		.space	4
 114              		.global	GPS_ground_course
 115              		.align	1
 118              	GPS_ground_course:
 119 0020 0000     		.space	2
 120              		.global	GPS_Present
 123              	GPS_Present:
 124 0022 00       		.space	1
 125              		.global	GPS_Enable
 128              	GPS_Enable:
 129 0023 00       		.space	1
 130              		.comm	nav,4,4
 131              		.comm	nav_rated,4,4
 132              		.global	nav_mode
 135              	nav_mode:
 136 0024 00       		.space	1
 137              		.global	InflightcalibratingA
 138 0025 00       		.align	1
 141              	InflightcalibratingA:
 142 0026 0000     		.space	2
 143              		.comm	AccInflightCalibrationArmed,2,2
 144              		.global	AccInflightCalibrationMeasurementDone
 145              		.align	1
 148              	AccInflightCalibrationMeasurementDone:
 149 0028 0000     		.space	2
 150              		.global	AccInflightCalibrationSavetoEEProm
 151              		.align	1
 154              	AccInflightCalibrationSavetoEEProm:
 155 002a 0000     		.space	2
 156              		.global	AccInflightCalibrationActive
 157              		.align	1
 160              	AccInflightCalibrationActive:
 161 002c 0000     		.space	2
 162              		.global	batteryCellCount
 163              		.data
 166              	batteryCellCount:
 167 0010 03       		.byte	3
 168              		.comm	batteryWarningVoltage,2,2
 169              		.text
 170              		.align	2
 171              		.global	blinkLED
 172              		.thumb
 173              		.thumb_func
 175              	blinkLED:
 176              	.LFB29:
 177              		.file 1 "../src/mw.c"
   1:../src/mw.c   **** #include "board.h"
   2:../src/mw.c   **** #include "mw.h"
   3:../src/mw.c   **** 
   4:../src/mw.c   **** // October 2012     V2.1-dev
   5:../src/mw.c   **** 
   6:../src/mw.c   **** flags_t f;
   7:../src/mw.c   **** int16_t debug[4];
   8:../src/mw.c   **** uint8_t toggleBeep = 0;
   9:../src/mw.c   **** uint32_t currentTime = 0;
  10:../src/mw.c   **** uint32_t previousTime = 0;
  11:../src/mw.c   **** uint16_t cycleTime = 0;         // this is the number in micro second to achieve a full loop, it ca
  12:../src/mw.c   **** int16_t headFreeModeHold;
  13:../src/mw.c   **** 
  14:../src/mw.c   **** int16_t annex650_overrun_count = 0;
  15:../src/mw.c   **** uint8_t vbat;                   // battery voltage in 0.1V steps
  16:../src/mw.c   **** int16_t telemTemperature1;      // gyro sensor temperature
  17:../src/mw.c   **** 
  18:../src/mw.c   **** int16_t failsafeCnt = 0;
  19:../src/mw.c   **** int16_t failsafeEvents = 0;
  20:../src/mw.c   **** int16_t rcData[8] = { 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502 }; // interval [1000;2000]
  21:../src/mw.c   **** int16_t rcCommand[4];           // interval [1000;2000] for THROTTLE and [-500;+500] for ROLL/PITCH
  22:../src/mw.c   **** int16_t lookupPitchRollRC[6];   // lookup table for expo & RC rate PITCH+ROLL
  23:../src/mw.c   **** int16_t lookupThrottleRC[11];   // lookup table for expo & mid THROTTLE
  24:../src/mw.c   **** uint16_t rssi;                  // range: [0;1023]
  25:../src/mw.c   **** rcReadRawDataPtr rcReadRawFunc = NULL;  // receive data from default (pwm/ppm) or additional (spek/
  26:../src/mw.c   **** 
  27:../src/mw.c   **** uint8_t dynP8[3], dynI8[3], dynD8[3];
  28:../src/mw.c   **** uint8_t rcOptions[CHECKBOXITEMS];
  29:../src/mw.c   **** 
  30:../src/mw.c   **** int16_t axisPID[3];
  31:../src/mw.c   **** 
  32:../src/mw.c   **** // **********************
  33:../src/mw.c   **** // GPS
  34:../src/mw.c   **** // **********************
  35:../src/mw.c   **** int32_t GPS_coord[2];
  36:../src/mw.c   **** int32_t GPS_home[2];
  37:../src/mw.c   **** int32_t GPS_hold[2];
  38:../src/mw.c   **** uint8_t GPS_numSat;
  39:../src/mw.c   **** uint16_t GPS_distanceToHome;        // distance to home point in meters
  40:../src/mw.c   **** int16_t GPS_directionToHome;        // direction to home or hol point in degrees
  41:../src/mw.c   **** uint16_t GPS_altitude, GPS_speed;   // altitude in 0.1m and speed in 0.1m/s
  42:../src/mw.c   **** uint8_t GPS_update = 0;             // it's a binary toogle to distinct a GPS position update
  43:../src/mw.c   **** int16_t GPS_angle[2] = { 0, 0 };    // it's the angles that must be applied for GPS correction
  44:../src/mw.c   **** uint16_t GPS_ground_course = 0;     // degrees * 10
  45:../src/mw.c   **** uint8_t GPS_Present = 0;            // Checksum from Gps serial
  46:../src/mw.c   **** uint8_t GPS_Enable = 0;
  47:../src/mw.c   **** int16_t nav[2];
  48:../src/mw.c   **** int16_t nav_rated[2];               // Adding a rate controller to the navigation to make it smooth
  49:../src/mw.c   **** int8_t nav_mode = NAV_MODE_NONE;    // Navigation mode
  50:../src/mw.c   **** 
  51:../src/mw.c   **** // Automatic ACC Offset Calibration
  52:../src/mw.c   **** uint16_t InflightcalibratingA = 0;
  53:../src/mw.c   **** int16_t AccInflightCalibrationArmed;
  54:../src/mw.c   **** uint16_t AccInflightCalibrationMeasurementDone = 0;
  55:../src/mw.c   **** uint16_t AccInflightCalibrationSavetoEEProm = 0;
  56:../src/mw.c   **** uint16_t AccInflightCalibrationActive = 0;
  57:../src/mw.c   **** 
  58:../src/mw.c   **** // Battery monitoring stuff
  59:../src/mw.c   **** uint8_t batteryCellCount = 3;       // cell count
  60:../src/mw.c   **** uint16_t batteryWarningVoltage;     // annoying buzzer after this one, battery ready to be dead
  61:../src/mw.c   **** 
  62:../src/mw.c   **** extern void GPS_NewData(uint16_t c);
  63:../src/mw.c   **** 
  64:../src/mw.c   **** void blinkLED(uint8_t num, uint8_t wait, uint8_t repeat)
  65:../src/mw.c   **** {
 178              		.loc 1 65 0
 179              		.cfi_startproc
 180              		@ args = 0, pretend = 0, frame = 16
 181              		@ frame_needed = 1, uses_anonymous_args = 0
 182 0000 80B5     		push	{r7, lr}
 183              	.LCFI0:
 184              		.cfi_def_cfa_offset 8
 185              		.cfi_offset 7, -8
 186              		.cfi_offset 14, -4
 187 0002 84B0     		sub	sp, sp, #16
 188              	.LCFI1:
 189              		.cfi_def_cfa_offset 24
 190 0004 00AF     		add	r7, sp, #0
 191              	.LCFI2:
 192              		.cfi_def_cfa_register 7
 193 0006 1346     		mov	r3, r2
 194 0008 0246     		mov	r2, r0
 195 000a FA71     		strb	r2, [r7, #7]
 196 000c 0A46     		mov	r2, r1
 197 000e BA71     		strb	r2, [r7, #6]
 198 0010 7B71     		strb	r3, [r7, #5]
  66:../src/mw.c   ****     uint8_t i, r;
  67:../src/mw.c   **** 
  68:../src/mw.c   ****     for (r = 0; r < repeat; r++) {
 199              		.loc 1 68 0
 200 0012 4FF00003 		mov	r3, #0
 201 0016 BB73     		strb	r3, [r7, #14]
 202 0018 25E0     		b	.L2
 203              	.L5:
  69:../src/mw.c   ****         for (i = 0; i < num; i++) {
 204              		.loc 1 69 0
 205 001a 4FF00003 		mov	r3, #0
 206 001e FB73     		strb	r3, [r7, #15]
 207 0020 15E0     		b	.L3
 208              	.L4:
  70:../src/mw.c   ****             LED0_TOGGLE;            // switch LEDPIN state
 209              		.loc 1 70 0 discriminator 2
 210 0022 154B     		ldr	r3, .L6
 211 0024 144A     		ldr	r2, .L6
 212 0026 D268     		ldr	r2, [r2, #12]
 213 0028 82F00802 		eor	r2, r2, #8
 214 002c DA60     		str	r2, [r3, #12]
  71:../src/mw.c   ****             BEEP_ON;
 215              		.loc 1 71 0 discriminator 2
 216 002e 134B     		ldr	r3, .L6+4
 217 0030 4FF48052 		mov	r2, #4096
 218 0034 5A61     		str	r2, [r3, #20]
  72:../src/mw.c   ****             delay(wait);
 219              		.loc 1 72 0 discriminator 2
 220 0036 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 221 0038 1846     		mov	r0, r3
 222 003a FFF7FEFF 		bl	delay
  73:../src/mw.c   ****             BEEP_OFF;
 223              		.loc 1 73 0 discriminator 2
 224 003e 0F4B     		ldr	r3, .L6+4
 225 0040 4FF48052 		mov	r2, #4096
 226 0044 1A61     		str	r2, [r3, #16]
  69:../src/mw.c   ****         for (i = 0; i < num; i++) {
 227              		.loc 1 69 0 discriminator 2
 228 0046 FB7B     		ldrb	r3, [r7, #15]
 229 0048 03F10103 		add	r3, r3, #1
 230 004c FB73     		strb	r3, [r7, #15]
 231              	.L3:
  69:../src/mw.c   ****         for (i = 0; i < num; i++) {
 232              		.loc 1 69 0 is_stmt 0 discriminator 1
 233 004e FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 234 0050 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 235 0052 9A42     		cmp	r2, r3
 236 0054 E5D3     		bcc	.L4
  74:../src/mw.c   ****         }
  75:../src/mw.c   ****         delay(60);
 237              		.loc 1 75 0 is_stmt 1
 238 0056 4FF03C00 		mov	r0, #60
 239 005a FFF7FEFF 		bl	delay
  68:../src/mw.c   ****     for (r = 0; r < repeat; r++) {
 240              		.loc 1 68 0
 241 005e BB7B     		ldrb	r3, [r7, #14]
 242 0060 03F10103 		add	r3, r3, #1
 243 0064 BB73     		strb	r3, [r7, #14]
 244              	.L2:
  68:../src/mw.c   ****     for (r = 0; r < repeat; r++) {
 245              		.loc 1 68 0 is_stmt 0 discriminator 1
 246 0066 BA7B     		ldrb	r2, [r7, #14]	@ zero_extendqisi2
 247 0068 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 248 006a 9A42     		cmp	r2, r3
 249 006c D5D3     		bcc	.L5
  76:../src/mw.c   ****     }
  77:../src/mw.c   **** }
 250              		.loc 1 77 0 is_stmt 1
 251 006e 07F11007 		add	r7, r7, #16
 252 0072 BD46     		mov	sp, r7
 253 0074 80BD     		pop	{r7, pc}
 254              	.L7:
 255 0076 00BF     		.align	2
 256              	.L6:
 257 0078 000C0140 		.word	1073810432
 258 007c 00080140 		.word	1073809408
 259              		.cfi_endproc
 260              	.LFE29:
 262              		.global	__aeabi_i2d
 263              		.global	__aeabi_dmul
 264              		.global	__aeabi_ddiv
 265              		.global	__aeabi_d2f
 266              		.global	__aeabi_i2f
 267              		.global	__aeabi_fmul
 268              		.global	__aeabi_fadd
 269              		.global	__aeabi_f2iz
 270              		.global	__aeabi_fsub
 271              		.align	2
 272              		.global	annexCode
 273              		.thumb
 274              		.thumb_func
 276              	annexCode:
 277              	.LFB30:
  78:../src/mw.c   **** 
  79:../src/mw.c   **** #define BREAKPOINT 1500
  80:../src/mw.c   **** 
  81:../src/mw.c   **** // this code is executed at each loop and won't interfere with control loop if it lasts less than 6
  82:../src/mw.c   **** void annexCode(void)
  83:../src/mw.c   **** {
 278              		.loc 1 83 0
 279              		.cfi_startproc
 280              		@ args = 0, pretend = 0, frame = 32
 281              		@ frame_needed = 1, uses_anonymous_args = 0
 282 0080 B0B5     		push	{r4, r5, r7, lr}
 283              	.LCFI3:
 284              		.cfi_def_cfa_offset 16
 285              		.cfi_offset 4, -16
 286              		.cfi_offset 5, -12
 287              		.cfi_offset 7, -8
 288              		.cfi_offset 14, -4
 289 0082 88B0     		sub	sp, sp, #32
 290              	.LCFI4:
 291              		.cfi_def_cfa_offset 48
 292 0084 00AF     		add	r7, sp, #0
 293              	.LCFI5:
 294              		.cfi_def_cfa_register 7
  84:../src/mw.c   ****     static uint32_t calibratedAccTime;
  85:../src/mw.c   ****     uint16_t tmp, tmp2;
  86:../src/mw.c   ****     static uint8_t buzzerFreq;  //delay between buzzer ring
  87:../src/mw.c   ****     static uint8_t vbatTimer = 0;
  88:../src/mw.c   ****     uint8_t axis, prop1, prop2;
  89:../src/mw.c   ****     static uint8_t ind = 0;
  90:../src/mw.c   ****     uint16_t vbatRaw = 0;
 295              		.loc 1 90 0
 296 0086 4FF00003 		mov	r3, #0
 297 008a 3B83     		strh	r3, [r7, #24]	@ movhi
  91:../src/mw.c   ****     static uint16_t vbatRawArray[8];
  92:../src/mw.c   ****     uint8_t i;
  93:../src/mw.c   **** 
  94:../src/mw.c   ****     // PITCH & ROLL only dynamic PID adjustemnt,  depending on throttle value
  95:../src/mw.c   ****     if (rcData[THROTTLE] < BREAKPOINT) {
 298              		.loc 1 95 0
 299 008c A14B     		ldr	r3, .L43
 300 008e DB88     		ldrh	r3, [r3, #6]
 301 0090 1AB2     		sxth	r2, r3
 302 0092 40F2DB53 		movw	r3, #1499
 303 0096 9A42     		cmp	r2, r3
 304 0098 03DC     		bgt	.L9
  96:../src/mw.c   ****         prop2 = 100;
 305              		.loc 1 96 0
 306 009a 4FF06403 		mov	r3, #100
 307 009e FB76     		strb	r3, [r7, #27]
 308 00a0 23E0     		b	.L10
 309              	.L9:
  97:../src/mw.c   ****     } else {
  98:../src/mw.c   ****         if (rcData[THROTTLE] < 2000) {
 310              		.loc 1 98 0
 311 00a2 9C4B     		ldr	r3, .L43
 312 00a4 DB88     		ldrh	r3, [r3, #6]
 313 00a6 1AB2     		sxth	r2, r3
 314 00a8 40F2CF73 		movw	r3, #1999
 315 00ac 9A42     		cmp	r2, r3
 316 00ae 16DC     		bgt	.L11
  99:../src/mw.c   ****             prop2 = 100 - (uint16_t) cfg.dynThrPID * (rcData[THROTTLE] - BREAKPOINT) / (2000 - BREA
 317              		.loc 1 99 0
 318 00b0 994B     		ldr	r3, .L43+4
 319 00b2 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 320 00b6 974A     		ldr	r2, .L43
 321 00b8 D288     		ldrh	r2, [r2, #6]
 322 00ba 12B2     		sxth	r2, r2
 323 00bc A2F2DC52 		subw	r2, r2, #1500
 324 00c0 02FB03F3 		mul	r3, r2, r3
 325 00c4 954A     		ldr	r2, .L43+8
 326 00c6 82FB0302 		smull	r0, r2, r2, r3
 327 00ca 4FEA6212 		asr	r2, r2, #5
 328 00ce 4FEAE373 		asr	r3, r3, #31
 329 00d2 D31A     		subs	r3, r2, r3
 330 00d4 DBB2     		uxtb	r3, r3
 331 00d6 C3F16403 		rsb	r3, r3, #100
 332 00da FB76     		strb	r3, [r7, #27]
 333 00dc 05E0     		b	.L10
 334              	.L11:
 100:../src/mw.c   ****         } else {
 101:../src/mw.c   ****             prop2 = 100 - cfg.dynThrPID;
 335              		.loc 1 101 0
 336 00de 8E4B     		ldr	r3, .L43+4
 337 00e0 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 338 00e4 C3F16403 		rsb	r3, r3, #100
 339 00e8 FB76     		strb	r3, [r7, #27]
 340              	.L10:
 102:../src/mw.c   ****         }
 103:../src/mw.c   ****     }
 104:../src/mw.c   **** 
 105:../src/mw.c   ****     for (axis = 0; axis < 3; axis++) {
 341              		.loc 1 105 0
 342 00ea 4FF00003 		mov	r3, #0
 343 00ee 7B77     		strb	r3, [r7, #29]
 344 00f0 00E1     		b	.L12
 345              	.L22:
 106:../src/mw.c   ****         tmp = min(abs(rcData[axis] - mcfg.midrc), 500);
 346              		.loc 1 106 0
 347 00f2 7A7F     		ldrb	r2, [r7, #29]	@ zero_extendqisi2
 348 00f4 874B     		ldr	r3, .L43
 349 00f6 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 350 00fa 1AB2     		sxth	r2, r3
 351 00fc 884B     		ldr	r3, .L43+12
 352 00fe B3F80831 		ldrh	r3, [r3, #264]
 353 0102 D21A     		subs	r2, r2, r3
 354 0104 6FF4F973 		mvn	r3, #498
 355 0108 9A42     		cmp	r2, r3
 356 010a 1ADB     		blt	.L13
 357              		.loc 1 106 0 is_stmt 0 discriminator 1
 358 010c 7A7F     		ldrb	r2, [r7, #29]	@ zero_extendqisi2
 359 010e 814B     		ldr	r3, .L43
 360 0110 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 361 0114 1AB2     		sxth	r2, r3
 362 0116 824B     		ldr	r3, .L43+12
 363 0118 B3F80831 		ldrh	r3, [r3, #264]
 364 011c D21A     		subs	r2, r2, r3
 365 011e 40F2F313 		movw	r3, #499
 366 0122 9A42     		cmp	r2, r3
 367 0124 0DDC     		bgt	.L13
 368 0126 7A7F     		ldrb	r2, [r7, #29]	@ zero_extendqisi2
 369 0128 7A4B     		ldr	r3, .L43
 370 012a 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 371 012e 1AB2     		sxth	r2, r3
 372 0130 7B4B     		ldr	r3, .L43+12
 373 0132 B3F80831 		ldrh	r3, [r3, #264]
 374 0136 D31A     		subs	r3, r2, r3
 375 0138 002B     		cmp	r3, #0
 376 013a B8BF     		it	lt
 377 013c 5B42     		rsblt	r3, r3, #0
 378 013e 9BB2     		uxth	r3, r3
 379 0140 01E0     		b	.L14
 380              	.L13:
 381              		.loc 1 106 0 discriminator 2
 382 0142 4FF4FA73 		mov	r3, #500
 383              	.L14:
 384              		.loc 1 106 0 discriminator 3
 385 0146 FB83     		strh	r3, [r7, #30]	@ movhi
 107:../src/mw.c   ****         if (axis != 2) {        // ROLL & PITCH
 386              		.loc 1 107 0 is_stmt 1 discriminator 3
 387 0148 7B7F     		ldrb	r3, [r7, #29]	@ zero_extendqisi2
 388 014a 022B     		cmp	r3, #2
 389 014c 66D0     		beq	.L15
 108:../src/mw.c   ****             if (cfg.deadband) {
 390              		.loc 1 108 0
 391 014e 724B     		ldr	r3, .L43+4
 392 0150 93F86030 		ldrb	r3, [r3, #96]	@ zero_extendqisi2
 393 0154 002B     		cmp	r3, #0
 394 0156 0FD0     		beq	.L16
 109:../src/mw.c   ****                 if (tmp > cfg.deadband) {
 395              		.loc 1 109 0
 396 0158 6F4B     		ldr	r3, .L43+4
 397 015a 93F86030 		ldrb	r3, [r3, #96]	@ zero_extendqisi2
 398 015e FA8B     		ldrh	r2, [r7, #30]
 399 0160 9A42     		cmp	r2, r3
 400 0162 06D9     		bls	.L17
 110:../src/mw.c   ****                     tmp -= cfg.deadband;
 401              		.loc 1 110 0
 402 0164 6C4B     		ldr	r3, .L43+4
 403 0166 93F86030 		ldrb	r3, [r3, #96]	@ zero_extendqisi2
 404 016a FA8B     		ldrh	r2, [r7, #30]	@ movhi
 405 016c D31A     		subs	r3, r2, r3
 406 016e FB83     		strh	r3, [r7, #30]	@ movhi
 407 0170 02E0     		b	.L16
 408              	.L17:
 111:../src/mw.c   ****                 } else {
 112:../src/mw.c   ****                     tmp = 0;
 409              		.loc 1 112 0
 410 0172 4FF00003 		mov	r3, #0
 411 0176 FB83     		strh	r3, [r7, #30]	@ movhi
 412              	.L16:
 113:../src/mw.c   ****                 }
 114:../src/mw.c   ****             }
 115:../src/mw.c   **** 
 116:../src/mw.c   ****             tmp2 = tmp / 100;
 413              		.loc 1 116 0
 414 0178 FA8B     		ldrh	r2, [r7, #30]
 415 017a 6A4B     		ldr	r3, .L43+16
 416 017c A3FB0213 		umull	r1, r3, r3, r2
 417 0180 4FEA5313 		lsr	r3, r3, #5
 418 0184 BB82     		strh	r3, [r7, #20]	@ movhi
 117:../src/mw.c   ****             rcCommand[axis] = lookupPitchRollRC[tmp2] + (tmp - tmp2 * 100) * (lookupPitchRollRC[tmp
 419              		.loc 1 117 0
 420 0186 7A7F     		ldrb	r2, [r7, #29]	@ zero_extendqisi2
 421 0188 B98A     		ldrh	r1, [r7, #20]
 422 018a 674B     		ldr	r3, .L43+20
 423 018c 33F81130 		ldrh	r3, [r3, r1, lsl #1]
 424 0190 99B2     		uxth	r1, r3
 425 0192 F88B     		ldrh	r0, [r7, #30]
 426 0194 BB8A     		ldrh	r3, [r7, #20]
 427 0196 6FF06304 		mvn	r4, #99
 428 019a 04FB03F3 		mul	r3, r4, r3
 429 019e C318     		adds	r3, r0, r3
 430 01a0 B88A     		ldrh	r0, [r7, #20]
 431 01a2 00F10104 		add	r4, r0, #1
 432 01a6 6048     		ldr	r0, .L43+20
 433 01a8 30F81400 		ldrh	r0, [r0, r4, lsl #1]
 434 01ac 04B2     		sxth	r4, r0
 435 01ae BD8A     		ldrh	r5, [r7, #20]
 436 01b0 5D48     		ldr	r0, .L43+20
 437 01b2 30F81500 		ldrh	r0, [r0, r5, lsl #1]
 438 01b6 00B2     		sxth	r0, r0
 439 01b8 201A     		subs	r0, r4, r0
 440 01ba 00FB03F3 		mul	r3, r0, r3
 441 01be 5948     		ldr	r0, .L43+16
 442 01c0 80FB03C0 		smull	ip, r0, r0, r3
 443 01c4 4FEA6010 		asr	r0, r0, #5
 444 01c8 4FEAE373 		asr	r3, r3, #31
 445 01cc C31A     		subs	r3, r0, r3
 446 01ce 9BB2     		uxth	r3, r3
 447 01d0 CB18     		adds	r3, r1, r3
 448 01d2 9BB2     		uxth	r3, r3
 449 01d4 99B2     		uxth	r1, r3
 450 01d6 554B     		ldr	r3, .L43+24
 451 01d8 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 118:../src/mw.c   ****             prop1 = 100 - (uint16_t) cfg.rollPitchRate * tmp / 500;
 452              		.loc 1 118 0
 453 01dc 4E4B     		ldr	r3, .L43+4
 454 01de 93F82230 		ldrb	r3, [r3, #34]	@ zero_extendqisi2
 455 01e2 FA8B     		ldrh	r2, [r7, #30]
 456 01e4 02FB03F3 		mul	r3, r2, r3
 457 01e8 4C4A     		ldr	r2, .L43+8
 458 01ea 82FB0302 		smull	r0, r2, r2, r3
 459 01ee 4FEA6212 		asr	r2, r2, #5
 460 01f2 4FEAE373 		asr	r3, r3, #31
 461 01f6 D31A     		subs	r3, r2, r3
 462 01f8 DBB2     		uxtb	r3, r3
 463 01fa C3F16403 		rsb	r3, r3, #100
 464 01fe 3B77     		strb	r3, [r7, #28]
 119:../src/mw.c   ****             prop1 = (uint16_t) prop1 *prop2 / 100;
 465              		.loc 1 119 0
 466 0200 3B7F     		ldrb	r3, [r7, #28]	@ zero_extendqisi2
 467 0202 FA7E     		ldrb	r2, [r7, #27]	@ zero_extendqisi2
 468 0204 02FB03F3 		mul	r3, r2, r3
 469 0208 464A     		ldr	r2, .L43+16
 470 020a 82FB0312 		smull	r1, r2, r2, r3
 471 020e 4FEA6212 		asr	r2, r2, #5
 472 0212 4FEAE373 		asr	r3, r3, #31
 473 0216 D31A     		subs	r3, r2, r3
 474 0218 3B77     		strb	r3, [r7, #28]
 475 021a 2BE0     		b	.L18
 476              	.L15:
 120:../src/mw.c   ****         } else {                // YAW
 121:../src/mw.c   ****             if (cfg.yawdeadband) {
 477              		.loc 1 121 0
 478 021c 3E4B     		ldr	r3, .L43+4
 479 021e 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
 480 0222 002B     		cmp	r3, #0
 481 0224 0FD0     		beq	.L19
 122:../src/mw.c   ****                 if (tmp > cfg.yawdeadband) {
 482              		.loc 1 122 0
 483 0226 3C4B     		ldr	r3, .L43+4
 484 0228 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
 485 022c FA8B     		ldrh	r2, [r7, #30]
 486 022e 9A42     		cmp	r2, r3
 487 0230 06D9     		bls	.L20
 123:../src/mw.c   ****                     tmp -= cfg.yawdeadband;
 488              		.loc 1 123 0
 489 0232 394B     		ldr	r3, .L43+4
 490 0234 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
 491 0238 FA8B     		ldrh	r2, [r7, #30]	@ movhi
 492 023a D31A     		subs	r3, r2, r3
 493 023c FB83     		strh	r3, [r7, #30]	@ movhi
 494 023e 02E0     		b	.L19
 495              	.L20:
 124:../src/mw.c   ****                 } else {
 125:../src/mw.c   ****                     tmp = 0;
 496              		.loc 1 125 0
 497 0240 4FF00003 		mov	r3, #0
 498 0244 FB83     		strh	r3, [r7, #30]	@ movhi
 499              	.L19:
 126:../src/mw.c   ****                 }
 127:../src/mw.c   ****             }
 128:../src/mw.c   ****             rcCommand[axis] = tmp;
 500              		.loc 1 128 0
 501 0246 7A7F     		ldrb	r2, [r7, #29]	@ zero_extendqisi2
 502 0248 F98B     		ldrh	r1, [r7, #30]
 503 024a 384B     		ldr	r3, .L43+24
 504 024c 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 129:../src/mw.c   ****             prop1 = 100 - (uint16_t) cfg.yawRate * tmp / 500;
 505              		.loc 1 129 0
 506 0250 314B     		ldr	r3, .L43+4
 507 0252 93F82330 		ldrb	r3, [r3, #35]	@ zero_extendqisi2
 508 0256 FA8B     		ldrh	r2, [r7, #30]
 509 0258 02FB03F3 		mul	r3, r2, r3
 510 025c 2F4A     		ldr	r2, .L43+8
 511 025e 82FB03C2 		smull	ip, r2, r2, r3
 512 0262 4FEA6212 		asr	r2, r2, #5
 513 0266 4FEAE373 		asr	r3, r3, #31
 514 026a D31A     		subs	r3, r2, r3
 515 026c DBB2     		uxtb	r3, r3
 516 026e C3F16403 		rsb	r3, r3, #100
 517 0272 3B77     		strb	r3, [r7, #28]
 518              	.L18:
 130:../src/mw.c   ****         }
 131:../src/mw.c   ****         dynP8[axis] = (uint16_t) cfg.P8[axis] * prop1 / 100;
 519              		.loc 1 131 0
 520 0274 7A7F     		ldrb	r2, [r7, #29]	@ zero_extendqisi2
 521 0276 7B7F     		ldrb	r3, [r7, #29]	@ zero_extendqisi2
 522 0278 2749     		ldr	r1, .L43+4
 523 027a CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 524 027c 397F     		ldrb	r1, [r7, #28]	@ zero_extendqisi2
 525 027e 01FB03F3 		mul	r3, r1, r3
 526 0282 2849     		ldr	r1, .L43+16
 527 0284 81FB0301 		smull	r0, r1, r1, r3
 528 0288 4FEA6111 		asr	r1, r1, #5
 529 028c 4FEAE373 		asr	r3, r3, #31
 530 0290 CB1A     		subs	r3, r1, r3
 531 0292 D9B2     		uxtb	r1, r3
 532 0294 264B     		ldr	r3, .L43+28
 533 0296 9954     		strb	r1, [r3, r2]
 132:../src/mw.c   ****         dynD8[axis] = (uint16_t) cfg.D8[axis] * prop1 / 100;
 534              		.loc 1 132 0
 535 0298 7A7F     		ldrb	r2, [r7, #29]	@ zero_extendqisi2
 536 029a 7B7F     		ldrb	r3, [r7, #29]	@ zero_extendqisi2
 537 029c 1E49     		ldr	r1, .L43+4
 538 029e CB18     		adds	r3, r1, r3
 539 02a0 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 540 02a2 397F     		ldrb	r1, [r7, #28]	@ zero_extendqisi2
 541 02a4 01FB03F3 		mul	r3, r1, r3
 542 02a8 1E49     		ldr	r1, .L43+16
 543 02aa 81FB03C1 		smull	ip, r1, r1, r3
 544 02ae 4FEA6111 		asr	r1, r1, #5
 545 02b2 4FEAE373 		asr	r3, r3, #31
 546 02b6 CB1A     		subs	r3, r1, r3
 547 02b8 D9B2     		uxtb	r1, r3
 548 02ba 1E4B     		ldr	r3, .L43+32
 549 02bc 9954     		strb	r1, [r3, r2]
 133:../src/mw.c   ****         if (rcData[axis] < mcfg.midrc)
 550              		.loc 1 133 0
 551 02be 7A7F     		ldrb	r2, [r7, #29]	@ zero_extendqisi2
 552 02c0 144B     		ldr	r3, .L43
 553 02c2 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 554 02c6 1AB2     		sxth	r2, r3
 555 02c8 154B     		ldr	r3, .L43+12
 556 02ca B3F80831 		ldrh	r3, [r3, #264]
 557 02ce 9A42     		cmp	r2, r3
 558 02d0 0CDA     		bge	.L21
 134:../src/mw.c   ****             rcCommand[axis] = -rcCommand[axis];
 559              		.loc 1 134 0
 560 02d2 7A7F     		ldrb	r2, [r7, #29]	@ zero_extendqisi2
 561 02d4 797F     		ldrb	r1, [r7, #29]	@ zero_extendqisi2
 562 02d6 154B     		ldr	r3, .L43+24
 563 02d8 33F81130 		ldrh	r3, [r3, r1, lsl #1]
 564 02dc 9BB2     		uxth	r3, r3
 565 02de C3F10003 		rsb	r3, r3, #0
 566 02e2 9BB2     		uxth	r3, r3
 567 02e4 99B2     		uxth	r1, r3
 568 02e6 114B     		ldr	r3, .L43+24
 569 02e8 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 570              	.L21:
 105:../src/mw.c   ****     for (axis = 0; axis < 3; axis++) {
 571              		.loc 1 105 0
 572 02ec 7B7F     		ldrb	r3, [r7, #29]
 573 02ee 03F10103 		add	r3, r3, #1
 574 02f2 7B77     		strb	r3, [r7, #29]
 575              	.L12:
 105:../src/mw.c   ****     for (axis = 0; axis < 3; axis++) {
 576              		.loc 1 105 0 is_stmt 0 discriminator 1
 577 02f4 7B7F     		ldrb	r3, [r7, #29]	@ zero_extendqisi2
 578 02f6 022B     		cmp	r3, #2
 579 02f8 7FF6FBAE 		bls	.L22
 135:../src/mw.c   ****     }
 136:../src/mw.c   **** 
 137:../src/mw.c   ****     tmp = constrain(rcData[THROTTLE], mcfg.mincheck, 2000);
 580              		.loc 1 137 0 is_stmt 1
 581 02fc 054B     		ldr	r3, .L43
 582 02fe DB88     		ldrh	r3, [r3, #6]
 583 0300 1AB2     		sxth	r2, r3
 584 0302 074B     		ldr	r3, .L43+12
 585 0304 B3F80A31 		ldrh	r3, [r3, #266]
 586 0308 9A42     		cmp	r2, r3
 587 030a 15DA     		bge	.L23
 588              		.loc 1 137 0 is_stmt 0 discriminator 1
 589 030c 044B     		ldr	r3, .L43+12
 590 030e B3F80A31 		ldrh	r3, [r3, #266]
 591 0312 1BE0     		b	.L24
 592              	.L44:
 593              		.align	2
 594              	.L43:
 595 0314 00000000 		.word	rcData
 596 0318 00000000 		.word	cfg
 597 031c D34D6210 		.word	274877907
 598 0320 00000000 		.word	mcfg
 599 0324 1F85EB51 		.word	1374389535
 600 0328 00000000 		.word	lookupPitchRollRC
 601 032c 00000000 		.word	rcCommand
 602 0330 00000000 		.word	dynP8
 603 0334 00000000 		.word	dynD8
 604              	.L23:
 605              		.loc 1 137 0 discriminator 2
 606 0338 994B     		ldr	r3, .L45+8
 607 033a DB88     		ldrh	r3, [r3, #6]
 608 033c 1BB2     		sxth	r3, r3
 609 033e B3F5FA6F 		cmp	r3, #2000
 610 0342 A8BF     		it	ge
 611 0344 4FF4FA63 		movge	r3, #2000
 612 0348 9BB2     		uxth	r3, r3
 613 034a 9BB2     		uxth	r3, r3
 614              	.L24:
 615              		.loc 1 137 0 discriminator 3
 616 034c FB83     		strh	r3, [r7, #30]	@ movhi
 138:../src/mw.c   ****     tmp = (uint32_t) (tmp - mcfg.mincheck) * 1000 / (2000 - mcfg.mincheck);       // [MINCHECK;2000
 617              		.loc 1 138 0 is_stmt 1 discriminator 3
 618 034e FA8B     		ldrh	r2, [r7, #30]
 619 0350 944B     		ldr	r3, .L45+12
 620 0352 B3F80A31 		ldrh	r3, [r3, #266]
 621 0356 D31A     		subs	r3, r2, r3
 622 0358 4FF47A72 		mov	r2, #1000
 623 035c 02FB03F2 		mul	r2, r2, r3
 624 0360 904B     		ldr	r3, .L45+12
 625 0362 B3F80A31 		ldrh	r3, [r3, #266]
 626 0366 C3F5FA63 		rsb	r3, r3, #2000
 627 036a B2FBF3F3 		udiv	r3, r2, r3
 628 036e FB83     		strh	r3, [r7, #30]	@ movhi
 139:../src/mw.c   ****     tmp2 = tmp / 100;
 629              		.loc 1 139 0 discriminator 3
 630 0370 FA8B     		ldrh	r2, [r7, #30]
 631 0372 8D4B     		ldr	r3, .L45+16
 632 0374 A3FB0203 		umull	r0, r3, r3, r2
 633 0378 4FEA5313 		lsr	r3, r3, #5
 634 037c BB82     		strh	r3, [r7, #20]	@ movhi
 140:../src/mw.c   ****     rcCommand[THROTTLE] = lookupThrottleRC[tmp2] + (tmp - tmp2 * 100) * (lookupThrottleRC[tmp2 + 1]
 635              		.loc 1 140 0 discriminator 3
 636 037e BA8A     		ldrh	r2, [r7, #20]
 637 0380 8A4B     		ldr	r3, .L45+20
 638 0382 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 639 0386 9AB2     		uxth	r2, r3
 640 0388 F98B     		ldrh	r1, [r7, #30]
 641 038a BB8A     		ldrh	r3, [r7, #20]
 642 038c 6FF06300 		mvn	r0, #99
 643 0390 00FB03F3 		mul	r3, r0, r3
 644 0394 CB18     		adds	r3, r1, r3
 645 0396 B98A     		ldrh	r1, [r7, #20]
 646 0398 01F10100 		add	r0, r1, #1
 647 039c 8349     		ldr	r1, .L45+20
 648 039e 31F81010 		ldrh	r1, [r1, r0, lsl #1]
 649 03a2 08B2     		sxth	r0, r1
 650 03a4 BC8A     		ldrh	r4, [r7, #20]
 651 03a6 8149     		ldr	r1, .L45+20
 652 03a8 31F81410 		ldrh	r1, [r1, r4, lsl #1]
 653 03ac 09B2     		sxth	r1, r1
 654 03ae 411A     		subs	r1, r0, r1
 655 03b0 01FB03F3 		mul	r3, r1, r3
 656 03b4 7C49     		ldr	r1, .L45+16
 657 03b6 81FB03C1 		smull	ip, r1, r1, r3
 658 03ba 4FEA6111 		asr	r1, r1, #5
 659 03be 4FEAE373 		asr	r3, r3, #31
 660 03c2 CB1A     		subs	r3, r1, r3
 661 03c4 9BB2     		uxth	r3, r3
 662 03c6 D318     		adds	r3, r2, r3
 663 03c8 9BB2     		uxth	r3, r3
 664 03ca 9AB2     		uxth	r2, r3
 665 03cc 784B     		ldr	r3, .L45+24
 666 03ce DA80     		strh	r2, [r3, #6]	@ movhi
 141:../src/mw.c   **** 
 142:../src/mw.c   ****     if(f.HEADFREE_MODE) {
 667              		.loc 1 142 0 discriminator 3
 668 03d0 784B     		ldr	r3, .L45+28
 669 03d2 5B7A     		ldrb	r3, [r3, #9]	@ zero_extendqisi2
 670 03d4 002B     		cmp	r3, #0
 671 03d6 79D0     		beq	.L25
 672              	.LBB2:
 143:../src/mw.c   ****         float radDiff = (heading - headFreeModeHold) * M_PI / 180.0f;
 673              		.loc 1 143 0
 674 03d8 774B     		ldr	r3, .L45+32
 675 03da 1B88     		ldrh	r3, [r3, #0]
 676 03dc 1AB2     		sxth	r2, r3
 677 03de 774B     		ldr	r3, .L45+36
 678 03e0 1B88     		ldrh	r3, [r3, #0]
 679 03e2 1BB2     		sxth	r3, r3
 680 03e4 D31A     		subs	r3, r2, r3
 681 03e6 1846     		mov	r0, r3
 682 03e8 FFF7FEFF 		bl	__aeabi_i2d
 683 03ec 0246     		mov	r2, r0
 684 03ee 0B46     		mov	r3, r1
 685 03f0 1046     		mov	r0, r2
 686 03f2 1946     		mov	r1, r3
 687 03f4 68A3     		adr	r3, .L45
 688 03f6 D3E90023 		ldrd	r2, [r3]
 689 03fa FFF7FEFF 		bl	__aeabi_dmul
 690 03fe 0246     		mov	r2, r0
 691 0400 0B46     		mov	r3, r1
 692 0402 1046     		mov	r0, r2
 693 0404 1946     		mov	r1, r3
 694 0406 4FF00002 		mov	r2, #0
 695 040a 4FF08043 		mov	r3, #1073741824
 696 040e 03F5CD03 		add	r3, r3, #6717440
 697 0412 FFF7FEFF 		bl	__aeabi_ddiv
 698 0416 0246     		mov	r2, r0
 699 0418 0B46     		mov	r3, r1
 700 041a 1046     		mov	r0, r2
 701 041c 1946     		mov	r1, r3
 702 041e FFF7FEFF 		bl	__aeabi_d2f
 703 0422 0346     		mov	r3, r0
 704 0424 3B61     		str	r3, [r7, #16]	@ float
 144:../src/mw.c   ****         float cosDiff = cosf(radDiff);
 705              		.loc 1 144 0
 706 0426 3869     		ldr	r0, [r7, #16]	@ float
 707 0428 FFF7FEFF 		bl	cosf
 708 042c F860     		str	r0, [r7, #12]	@ float
 145:../src/mw.c   ****         float sinDiff = sinf(radDiff);
 709              		.loc 1 145 0
 710 042e 3869     		ldr	r0, [r7, #16]	@ float
 711 0430 FFF7FEFF 		bl	sinf
 712 0434 B860     		str	r0, [r7, #8]	@ float
 146:../src/mw.c   ****         int16_t rcCommand_PITCH = rcCommand[PITCH] * cosDiff + rcCommand[ROLL] * sinDiff;
 713              		.loc 1 146 0
 714 0436 5E4B     		ldr	r3, .L45+24
 715 0438 5B88     		ldrh	r3, [r3, #2]
 716 043a 1BB2     		sxth	r3, r3
 717 043c 1846     		mov	r0, r3
 718 043e FFF7FEFF 		bl	__aeabi_i2f
 719 0442 0346     		mov	r3, r0
 720 0444 1846     		mov	r0, r3
 721 0446 F968     		ldr	r1, [r7, #12]	@ float
 722 0448 FFF7FEFF 		bl	__aeabi_fmul
 723 044c 0346     		mov	r3, r0
 724 044e 1C46     		mov	r4, r3
 725 0450 574B     		ldr	r3, .L45+24
 726 0452 1B88     		ldrh	r3, [r3, #0]
 727 0454 1BB2     		sxth	r3, r3
 728 0456 1846     		mov	r0, r3
 729 0458 FFF7FEFF 		bl	__aeabi_i2f
 730 045c 0346     		mov	r3, r0
 731 045e 1846     		mov	r0, r3
 732 0460 B968     		ldr	r1, [r7, #8]	@ float
 733 0462 FFF7FEFF 		bl	__aeabi_fmul
 734 0466 0346     		mov	r3, r0
 735 0468 2046     		mov	r0, r4
 736 046a 1946     		mov	r1, r3
 737 046c FFF7FEFF 		bl	__aeabi_fadd
 738 0470 0346     		mov	r3, r0
 739 0472 1846     		mov	r0, r3
 740 0474 FFF7FEFF 		bl	__aeabi_f2iz
 741 0478 0346     		mov	r3, r0
 742 047a FB80     		strh	r3, [r7, #6]	@ movhi
 147:../src/mw.c   ****         rcCommand[ROLL] = rcCommand[ROLL] * cosDiff - rcCommand[PITCH] * sinDiff;
 743              		.loc 1 147 0
 744 047c 4C4B     		ldr	r3, .L45+24
 745 047e 1B88     		ldrh	r3, [r3, #0]
 746 0480 1BB2     		sxth	r3, r3
 747 0482 1846     		mov	r0, r3
 748 0484 FFF7FEFF 		bl	__aeabi_i2f
 749 0488 0346     		mov	r3, r0
 750 048a 1846     		mov	r0, r3
 751 048c F968     		ldr	r1, [r7, #12]	@ float
 752 048e FFF7FEFF 		bl	__aeabi_fmul
 753 0492 0346     		mov	r3, r0
 754 0494 1C46     		mov	r4, r3
 755 0496 464B     		ldr	r3, .L45+24
 756 0498 5B88     		ldrh	r3, [r3, #2]
 757 049a 1BB2     		sxth	r3, r3
 758 049c 1846     		mov	r0, r3
 759 049e FFF7FEFF 		bl	__aeabi_i2f
 760 04a2 0346     		mov	r3, r0
 761 04a4 1846     		mov	r0, r3
 762 04a6 B968     		ldr	r1, [r7, #8]	@ float
 763 04a8 FFF7FEFF 		bl	__aeabi_fmul
 764 04ac 0346     		mov	r3, r0
 765 04ae 2046     		mov	r0, r4
 766 04b0 1946     		mov	r1, r3
 767 04b2 FFF7FEFF 		bl	__aeabi_fsub
 768 04b6 0346     		mov	r3, r0
 769 04b8 1846     		mov	r0, r3
 770 04ba FFF7FEFF 		bl	__aeabi_f2iz
 771 04be 0346     		mov	r3, r0
 772 04c0 9AB2     		uxth	r2, r3
 773 04c2 3B4B     		ldr	r3, .L45+24
 774 04c4 1A80     		strh	r2, [r3, #0]	@ movhi
 148:../src/mw.c   ****         rcCommand[PITCH] = rcCommand_PITCH;
 775              		.loc 1 148 0
 776 04c6 3A4B     		ldr	r3, .L45+24
 777 04c8 FA88     		ldrh	r2, [r7, #6]	@ movhi
 778 04ca 5A80     		strh	r2, [r3, #2]	@ movhi
 779              	.L25:
 780              	.LBE2:
 149:../src/mw.c   ****     }
 150:../src/mw.c   **** 
 151:../src/mw.c   ****     if (feature(FEATURE_VBAT)) {
 781              		.loc 1 151 0
 782 04cc 4FF00200 		mov	r0, #2
 783 04d0 FFF7FEFF 		bl	feature
 784 04d4 0346     		mov	r3, r0
 785 04d6 002B     		cmp	r3, #0
 786 04d8 00F08480 		beq	.L26
 152:../src/mw.c   ****         if (!(++vbatTimer % VBATFREQ)) {
 787              		.loc 1 152 0
 788 04dc 384B     		ldr	r3, .L45+40
 789 04de 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 790 04e0 03F10103 		add	r3, r3, #1
 791 04e4 DAB2     		uxtb	r2, r3
 792 04e6 364B     		ldr	r3, .L45+40
 793 04e8 1A70     		strb	r2, [r3, #0]
 794 04ea 354B     		ldr	r3, .L45+40
 795 04ec 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 796 04ee 354B     		ldr	r3, .L45+44
 797 04f0 A3FB0203 		umull	r0, r3, r3, r2
 798 04f4 4FEA9301 		lsr	r1, r3, #2
 799 04f8 0B46     		mov	r3, r1
 800 04fa 4FEA4303 		lsl	r3, r3, #1
 801 04fe 5B18     		adds	r3, r3, r1
 802 0500 4FEA4303 		lsl	r3, r3, #1
 803 0504 D31A     		subs	r3, r2, r3
 804 0506 DBB2     		uxtb	r3, r3
 805 0508 002B     		cmp	r3, #0
 806 050a 2FD1     		bne	.L27
 153:../src/mw.c   ****             vbatRawArray[(ind++) % 8] = adcGetChannel(ADC_BATTERY);
 807              		.loc 1 153 0
 808 050c 2E4B     		ldr	r3, .L45+48
 809 050e 1C78     		ldrb	r4, [r3, #0]	@ zero_extendqisi2
 810 0510 2346     		mov	r3, r4
 811 0512 03F00705 		and	r5, r3, #7
 812 0516 4FF00000 		mov	r0, #0
 813 051a FFF7FEFF 		bl	adcGetChannel
 814 051e 0346     		mov	r3, r0
 815 0520 1A46     		mov	r2, r3
 816 0522 2A4B     		ldr	r3, .L45+52
 817 0524 23F81520 		strh	r2, [r3, r5, lsl #1]	@ movhi
 818 0528 04F10103 		add	r3, r4, #1
 819 052c DAB2     		uxtb	r2, r3
 820 052e 264B     		ldr	r3, .L45+48
 821 0530 1A70     		strb	r2, [r3, #0]
 154:../src/mw.c   ****             for (i = 0; i < 8; i++)
 822              		.loc 1 154 0
 823 0532 4FF00003 		mov	r3, #0
 824 0536 FB75     		strb	r3, [r7, #23]
 825 0538 0AE0     		b	.L28
 826              	.L29:
 155:../src/mw.c   ****                 vbatRaw += vbatRawArray[i];
 827              		.loc 1 155 0 discriminator 2
 828 053a FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 829 053c 234B     		ldr	r3, .L45+52
 830 053e 33F81220 		ldrh	r2, [r3, r2, lsl #1]
 831 0542 3B8B     		ldrh	r3, [r7, #24]	@ movhi
 832 0544 D318     		adds	r3, r2, r3
 833 0546 3B83     		strh	r3, [r7, #24]	@ movhi
 154:../src/mw.c   ****             for (i = 0; i < 8; i++)
 834              		.loc 1 154 0 discriminator 2
 835 0548 FB7D     		ldrb	r3, [r7, #23]
 836 054a 03F10103 		add	r3, r3, #1
 837 054e FB75     		strb	r3, [r7, #23]
 838              	.L28:
 154:../src/mw.c   ****             for (i = 0; i < 8; i++)
 839              		.loc 1 154 0 is_stmt 0 discriminator 1
 840 0550 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 841 0552 072B     		cmp	r3, #7
 842 0554 F1D9     		bls	.L29
 156:../src/mw.c   ****             vbat = batteryAdcToVoltage(vbatRaw / 8);
 843              		.loc 1 156 0 is_stmt 1
 844 0556 3B8B     		ldrh	r3, [r7, #24]
 845 0558 4FEAD303 		lsr	r3, r3, #3
 846 055c 9BB2     		uxth	r3, r3
 847 055e 1846     		mov	r0, r3
 848 0560 FFF7FEFF 		bl	batteryAdcToVoltage
 849 0564 0346     		mov	r3, r0
 850 0566 DAB2     		uxtb	r2, r3
 851 0568 194B     		ldr	r3, .L45+56
 852 056a 1A70     		strb	r2, [r3, #0]
 853              	.L27:
 157:../src/mw.c   ****         }
 158:../src/mw.c   ****         if ((vbat > batteryWarningVoltage) || (vbat < mcfg.vbatmincellvoltage)) { // VBAT ok, buzze
 854              		.loc 1 158 0
 855 056c 184B     		ldr	r3, .L45+56
 856 056e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 857 0570 1A46     		mov	r2, r3
 858 0572 184B     		ldr	r3, .L45+60
 859 0574 1B88     		ldrh	r3, [r3, #0]
 860 0576 9A42     		cmp	r2, r3
 861 0578 06D8     		bhi	.L30
 862              		.loc 1 158 0 is_stmt 0 discriminator 1
 863 057a 0A4B     		ldr	r3, .L45+12
 864 057c 93F8FC20 		ldrb	r2, [r3, #252]	@ zero_extendqisi2
 865 0580 134B     		ldr	r3, .L45+56
 866 0582 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 867 0584 9A42     		cmp	r2, r3
 868 0586 29D9     		bls	.L31
 869              	.L30:
 159:../src/mw.c   ****             buzzerFreq = 0;
 870              		.loc 1 159 0 is_stmt 1
 871 0588 134B     		ldr	r3, .L45+64
 872 058a 4FF00002 		mov	r2, #0
 873 058e 1A70     		strb	r2, [r3, #0]
 874 0590 28E0     		b	.L26
 875              	.L46:
 876 0592 00BFAFF3 		.align	3
 876      0080
 877              	.L45:
 878 0598 182D4454 		.word	1413754136
 879 059c FB210940 		.word	1074340347
 880 05a0 00000000 		.word	rcData
 881 05a4 00000000 		.word	mcfg
 882 05a8 1F85EB51 		.word	1374389535
 883 05ac 00000000 		.word	lookupThrottleRC
 884 05b0 00000000 		.word	rcCommand
 885 05b4 00000000 		.word	f
 886 05b8 00000000 		.word	heading
 887 05bc 00000000 		.word	headFreeModeHold
 888 05c0 BC000000 		.word	vbatTimer.9095
 889 05c4 ABAAAAAA 		.word	-1431655765
 890 05c8 BD000000 		.word	ind.9099
 891 05cc C0000000 		.word	vbatRawArray.9101
 892 05d0 00000000 		.word	vbat
 893 05d4 00000000 		.word	batteryWarningVoltage
 894 05d8 D0000000 		.word	buzzerFreq.9094
 895              	.L31:
 160:../src/mw.c   ****         } else
 161:../src/mw.c   ****             buzzerFreq = 4;     // low battery
 896              		.loc 1 161 0
 897 05dc 534B     		ldr	r3, .L47
 898 05de 4FF00402 		mov	r2, #4
 899 05e2 1A70     		strb	r2, [r3, #0]
 900              	.L26:
 162:../src/mw.c   ****     }
 163:../src/mw.c   **** 
 164:../src/mw.c   ****     buzzer(buzzerFreq);         // external buzzer routine that handles buzzer events globally now
 901              		.loc 1 164 0
 902 05e4 514B     		ldr	r3, .L47
 903 05e6 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 904 05e8 1846     		mov	r0, r3
 905 05ea FFF7FEFF 		bl	buzzer
 165:../src/mw.c   **** 
 166:../src/mw.c   ****     if ((calibratingA > 0 && sensors(SENSOR_ACC)) || (calibratingG > 0)) {      // Calibration phas
 906              		.loc 1 166 0
 907 05ee 504B     		ldr	r3, .L47+4
 908 05f0 1B88     		ldrh	r3, [r3, #0]
 909 05f2 002B     		cmp	r3, #0
 910 05f4 06D0     		beq	.L32
 911              		.loc 1 166 0 is_stmt 0 discriminator 1
 912 05f6 4FF00100 		mov	r0, #1
 913 05fa FFF7FEFF 		bl	sensors
 914 05fe 0346     		mov	r3, r0
 915 0600 002B     		cmp	r3, #0
 916 0602 03D1     		bne	.L33
 917              	.L32:
 918              		.loc 1 166 0 discriminator 2
 919 0604 4B4B     		ldr	r3, .L47+8
 920 0606 1B88     		ldrh	r3, [r3, #0]
 921 0608 002B     		cmp	r3, #0
 922 060a 06D0     		beq	.L34
 923              	.L33:
 167:../src/mw.c   ****         LED0_TOGGLE;
 924              		.loc 1 167 0 is_stmt 1
 925 060c 4A4B     		ldr	r3, .L47+12
 926 060e 4A4A     		ldr	r2, .L47+12
 927 0610 D268     		ldr	r2, [r2, #12]
 928 0612 82F00802 		eor	r2, r2, #8
 929 0616 DA60     		str	r2, [r3, #12]
 930 0618 20E0     		b	.L35
 931              	.L34:
 168:../src/mw.c   ****     } else {
 169:../src/mw.c   ****         if (f.ACC_CALIBRATED)
 932              		.loc 1 169 0
 933 061a 484B     		ldr	r3, .L47+16
 934 061c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 935 061e 002B     		cmp	r3, #0
 936 0620 03D0     		beq	.L36
 170:../src/mw.c   ****             LED0_OFF;
 937              		.loc 1 170 0
 938 0622 454B     		ldr	r3, .L47+12
 939 0624 4FF00802 		mov	r2, #8
 940 0628 1A61     		str	r2, [r3, #16]
 941              	.L36:
 171:../src/mw.c   ****         if (f.ARMED)
 942              		.loc 1 171 0
 943 062a 444B     		ldr	r3, .L47+16
 944 062c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 945 062e 002B     		cmp	r3, #0
 946 0630 03D0     		beq	.L37
 172:../src/mw.c   ****             LED0_ON;
 947              		.loc 1 172 0
 948 0632 414B     		ldr	r3, .L47+12
 949 0634 4FF00802 		mov	r2, #8
 950 0638 5A61     		str	r2, [r3, #20]
 951              	.L37:
 173:../src/mw.c   ****         // This will switch to/from 9600 or 115200 baud depending on state. Of course, it should on
 174:../src/mw.c   ****         if (feature(FEATURE_TELEMETRY))
 952              		.loc 1 174 0
 953 063a 4FF40060 		mov	r0, #2048
 954 063e FFF7FEFF 		bl	feature
 955 0642 0346     		mov	r3, r0
 956 0644 002B     		cmp	r3, #0
 957 0646 09D0     		beq	.L35
 175:../src/mw.c   ****             initTelemetry(f.ARMED);
 958              		.loc 1 175 0
 959 0648 3C4B     		ldr	r3, .L47+16
 960 064a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 961 064c 002B     		cmp	r3, #0
 962 064e 0CBF     		ite	eq
 963 0650 0023     		moveq	r3, #0
 964 0652 0123     		movne	r3, #1
 965 0654 DBB2     		uxtb	r3, r3
 966 0656 1846     		mov	r0, r3
 967 0658 FFF7FEFF 		bl	initTelemetry
 968              	.L35:
 176:../src/mw.c   ****     }
 177:../src/mw.c   **** 
 178:../src/mw.c   **** #ifdef LEDRING
 179:../src/mw.c   ****     if (feature(FEATURE_LED_RING)) {
 969              		.loc 1 179 0
 970 065c 4FF08000 		mov	r0, #128
 971 0660 FFF7FEFF 		bl	feature
 972 0664 0346     		mov	r3, r0
 973 0666 002B     		cmp	r3, #0
 974 0668 10D0     		beq	.L38
 975              	.LBB3:
 180:../src/mw.c   ****         static uint32_t LEDTime;
 181:../src/mw.c   ****         if ((int32_t)(currentTime - LEDTime) >= 0) {
 976              		.loc 1 181 0
 977 066a 354B     		ldr	r3, .L47+20
 978 066c 1A68     		ldr	r2, [r3, #0]
 979 066e 354B     		ldr	r3, .L47+24
 980 0670 1B68     		ldr	r3, [r3, #0]
 981 0672 D31A     		subs	r3, r2, r3
 982 0674 002B     		cmp	r3, #0
 983 0676 09DB     		blt	.L38
 182:../src/mw.c   ****             LEDTime = currentTime + 50000;
 984              		.loc 1 182 0
 985 0678 314B     		ldr	r3, .L47+20
 986 067a 1B68     		ldr	r3, [r3, #0]
 987 067c 03F54343 		add	r3, r3, #49920
 988 0680 03F15003 		add	r3, r3, #80
 989 0684 2F4A     		ldr	r2, .L47+24
 990 0686 1360     		str	r3, [r2, #0]
 183:../src/mw.c   ****             ledringState();
 991              		.loc 1 183 0
 992 0688 FFF7FEFF 		bl	ledringState
 993              	.L38:
 994              	.LBE3:
 184:../src/mw.c   ****         }
 185:../src/mw.c   ****     }
 186:../src/mw.c   **** #endif
 187:../src/mw.c   **** 
 188:../src/mw.c   ****     if ((int32_t)(currentTime - calibratedAccTime) >= 0) {
 995              		.loc 1 188 0
 996 068c 2C4B     		ldr	r3, .L47+20
 997 068e 1A68     		ldr	r2, [r3, #0]
 998 0690 2D4B     		ldr	r3, .L47+28
 999 0692 1B68     		ldr	r3, [r3, #0]
 1000 0694 D31A     		subs	r3, r2, r3
 1001 0696 002B     		cmp	r3, #0
 1002 0698 1ADB     		blt	.L39
 189:../src/mw.c   ****         if (!f.SMALL_ANGLES_25) {
 1003              		.loc 1 189 0
 1004 069a 284B     		ldr	r3, .L47+16
 1005 069c 5B7B     		ldrb	r3, [r3, #13]	@ zero_extendqisi2
 1006 069e 002B     		cmp	r3, #0
 1007 06a0 12D1     		bne	.L40
 190:../src/mw.c   ****             f.ACC_CALIBRATED = 0; // the multi uses ACC and is not calibrated or is too much inclin
 1008              		.loc 1 190 0
 1009 06a2 264B     		ldr	r3, .L47+16
 1010 06a4 4FF00002 		mov	r2, #0
 1011 06a8 9A70     		strb	r2, [r3, #2]
 191:../src/mw.c   ****             LED0_TOGGLE;
 1012              		.loc 1 191 0
 1013 06aa 234B     		ldr	r3, .L47+12
 1014 06ac 224A     		ldr	r2, .L47+12
 1015 06ae D268     		ldr	r2, [r2, #12]
 1016 06b0 82F00802 		eor	r2, r2, #8
 1017 06b4 DA60     		str	r2, [r3, #12]
 192:../src/mw.c   ****             calibratedAccTime = currentTime + 500000;
 1018              		.loc 1 192 0
 1019 06b6 224B     		ldr	r3, .L47+20
 1020 06b8 1B68     		ldr	r3, [r3, #0]
 1021 06ba 03F5F423 		add	r3, r3, #499712
 1022 06be 03F59073 		add	r3, r3, #288
 1023 06c2 214A     		ldr	r2, .L47+28
 1024 06c4 1360     		str	r3, [r2, #0]
 1025 06c6 03E0     		b	.L39
 1026              	.L40:
 193:../src/mw.c   ****         } else {
 194:../src/mw.c   ****             f.ACC_CALIBRATED = 1;
 1027              		.loc 1 194 0
 1028 06c8 1C4B     		ldr	r3, .L47+16
 1029 06ca 4FF00102 		mov	r2, #1
 1030 06ce 9A70     		strb	r2, [r3, #2]
 1031              	.L39:
 195:../src/mw.c   ****         }
 196:../src/mw.c   ****     }
 197:../src/mw.c   **** 
 198:../src/mw.c   ****     serialCom();
 1032              		.loc 1 198 0
 1033 06d0 FFF7FEFF 		bl	serialCom
 199:../src/mw.c   **** 
 200:../src/mw.c   ****     if (sensors(SENSOR_GPS)) {
 1034              		.loc 1 200 0
 1035 06d4 4FF01000 		mov	r0, #16
 1036 06d8 FFF7FEFF 		bl	sensors
 1037 06dc 0346     		mov	r3, r0
 1038 06de 002B     		cmp	r3, #0
 1039 06e0 18D0     		beq	.L41
 1040              	.LBB4:
 201:../src/mw.c   ****         static uint32_t GPSLEDTime;
 202:../src/mw.c   ****         if ((int32_t)(currentTime - GPSLEDTime) >= 0 && (GPS_numSat >= 5)) {
 1041              		.loc 1 202 0
 1042 06e2 174B     		ldr	r3, .L47+20
 1043 06e4 1A68     		ldr	r2, [r3, #0]
 1044 06e6 194B     		ldr	r3, .L47+32
 1045 06e8 1B68     		ldr	r3, [r3, #0]
 1046 06ea D31A     		subs	r3, r2, r3
 1047 06ec 002B     		cmp	r3, #0
 1048 06ee 11DB     		blt	.L41
 1049              		.loc 1 202 0 is_stmt 0 discriminator 1
 1050 06f0 174B     		ldr	r3, .L47+36
 1051 06f2 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1052 06f4 042B     		cmp	r3, #4
 1053 06f6 0DD9     		bls	.L41
 203:../src/mw.c   ****             GPSLEDTime = currentTime + 150000;
 1054              		.loc 1 203 0 is_stmt 1
 1055 06f8 114B     		ldr	r3, .L47+20
 1056 06fa 1B68     		ldr	r3, [r3, #0]
 1057 06fc 03F51233 		add	r3, r3, #149504
 1058 0700 03F5F873 		add	r3, r3, #496
 1059 0704 114A     		ldr	r2, .L47+32
 1060 0706 1360     		str	r3, [r2, #0]
 204:../src/mw.c   ****             LED1_TOGGLE;
 1061              		.loc 1 204 0
 1062 0708 0B4B     		ldr	r3, .L47+12
 1063 070a 0B4A     		ldr	r2, .L47+12
 1064 070c D268     		ldr	r2, [r2, #12]
 1065 070e 82F01002 		eor	r2, r2, #16
 1066 0712 DA60     		str	r2, [r3, #12]
 1067              	.L41:
 1068              	.LBE4:
 205:../src/mw.c   ****         }
 206:../src/mw.c   ****     }
 207:../src/mw.c   **** 
 208:../src/mw.c   ****     // Read out gyro temperature. can use it for something somewhere. maybe get MCU temperature ins
 209:../src/mw.c   ****     if (gyro.temperature)
 1069              		.loc 1 209 0
 1070 0714 0F4B     		ldr	r3, .L47+40
 1071 0716 DB68     		ldr	r3, [r3, #12]
 1072 0718 002B     		cmp	r3, #0
 1073 071a 03D0     		beq	.L8
 210:../src/mw.c   ****         gyro.temperature(&telemTemperature1);
 1074              		.loc 1 210 0
 1075 071c 0D4B     		ldr	r3, .L47+40
 1076 071e DB68     		ldr	r3, [r3, #12]
 1077 0720 0D48     		ldr	r0, .L47+44
 1078 0722 9847     		blx	r3
 1079              	.L8:
 211:../src/mw.c   ****     else {
 212:../src/mw.c   ****         // TODO MCU temp
 213:../src/mw.c   ****     }
 214:../src/mw.c   **** }
 1080              		.loc 1 214 0
 1081 0724 07F12007 		add	r7, r7, #32
 1082 0728 BD46     		mov	sp, r7
 1083 072a B0BD     		pop	{r4, r5, r7, pc}
 1084              	.L48:
 1085              		.align	2
 1086              	.L47:
 1087 072c D0000000 		.word	buzzerFreq.9094
 1088 0730 00000000 		.word	calibratingA
 1089 0734 00000000 		.word	calibratingG
 1090 0738 000C0140 		.word	1073810432
 1091 073c 00000000 		.word	f
 1092 0740 00000000 		.word	currentTime
 1093 0744 D4000000 		.word	LEDTime.9113
 1094 0748 D8000000 		.word	calibratedAccTime.9091
 1095 074c DC000000 		.word	GPSLEDTime.9114
 1096 0750 00000000 		.word	GPS_numSat
 1097 0754 00000000 		.word	gyro
 1098 0758 00000000 		.word	telemTemperature1
 1099              		.cfi_endproc
 1100              	.LFE30:
 1102              		.align	2
 1103              		.global	pwmReadRawRC
 1104              		.thumb
 1105              		.thumb_func
 1107              	pwmReadRawRC:
 1108              	.LFB31:
 215:../src/mw.c   **** 
 216:../src/mw.c   **** uint16_t pwmReadRawRC(uint8_t chan)
 217:../src/mw.c   **** {
 1109              		.loc 1 217 0
 1110              		.cfi_startproc
 1111              		@ args = 0, pretend = 0, frame = 16
 1112              		@ frame_needed = 1, uses_anonymous_args = 0
 1113 075c 80B5     		push	{r7, lr}
 1114              	.LCFI6:
 1115              		.cfi_def_cfa_offset 8
 1116              		.cfi_offset 7, -8
 1117              		.cfi_offset 14, -4
 1118 075e 84B0     		sub	sp, sp, #16
 1119              	.LCFI7:
 1120              		.cfi_def_cfa_offset 24
 1121 0760 00AF     		add	r7, sp, #0
 1122              	.LCFI8:
 1123              		.cfi_def_cfa_register 7
 1124 0762 0346     		mov	r3, r0
 1125 0764 FB71     		strb	r3, [r7, #7]
 218:../src/mw.c   ****     uint16_t data;
 219:../src/mw.c   **** 
 220:../src/mw.c   ****     data = pwmRead(mcfg.rcmap[chan]);
 1126              		.loc 1 220 0
 1127 0766 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1128 0768 0E4A     		ldr	r2, .L53
 1129 076a D318     		adds	r3, r2, r3
 1130 076c 93F8FE30 		ldrb	r3, [r3, #254]	@ zero_extendqisi2
 1131 0770 1846     		mov	r0, r3
 1132 0772 FFF7FEFF 		bl	pwmRead
 1133 0776 0346     		mov	r3, r0
 1134 0778 FB81     		strh	r3, [r7, #14]	@ movhi
 221:../src/mw.c   ****     if (data < 750 || data > 2250)
 1135              		.loc 1 221 0
 1136 077a FA89     		ldrh	r2, [r7, #14]
 1137 077c 40F2ED23 		movw	r3, #749
 1138 0780 9A42     		cmp	r2, r3
 1139 0782 04D9     		bls	.L50
 1140              		.loc 1 221 0 is_stmt 0 discriminator 1
 1141 0784 FA89     		ldrh	r2, [r7, #14]
 1142 0786 40F6CA03 		movw	r3, #2250
 1143 078a 9A42     		cmp	r2, r3
 1144 078c 03D9     		bls	.L51
 1145              	.L50:
 222:../src/mw.c   ****         data = mcfg.midrc;
 1146              		.loc 1 222 0 is_stmt 1
 1147 078e 054B     		ldr	r3, .L53
 1148 0790 B3F80831 		ldrh	r3, [r3, #264]	@ movhi
 1149 0794 FB81     		strh	r3, [r7, #14]	@ movhi
 1150              	.L51:
 223:../src/mw.c   **** 
 224:../src/mw.c   ****     return data;
 1151              		.loc 1 224 0
 1152 0796 FB89     		ldrh	r3, [r7, #14]
 225:../src/mw.c   **** }
 1153              		.loc 1 225 0
 1154 0798 1846     		mov	r0, r3
 1155 079a 07F11007 		add	r7, r7, #16
 1156 079e BD46     		mov	sp, r7
 1157 07a0 80BD     		pop	{r7, pc}
 1158              	.L54:
 1159 07a2 00BF     		.align	2
 1160              	.L53:
 1161 07a4 00000000 		.word	mcfg
 1162              		.cfi_endproc
 1163              	.LFE31:
 1165              		.align	2
 1166              		.global	computeRC
 1167              		.thumb
 1168              		.thumb_func
 1170              	computeRC:
 1171              	.LFB32:
 226:../src/mw.c   **** 
 227:../src/mw.c   **** void computeRC(void)
 228:../src/mw.c   **** {
 1172              		.loc 1 228 0
 1173              		.cfi_startproc
 1174              		@ args = 0, pretend = 0, frame = 8
 1175              		@ frame_needed = 1, uses_anonymous_args = 0
 1176 07a8 B0B5     		push	{r4, r5, r7, lr}
 1177              	.LCFI9:
 1178              		.cfi_def_cfa_offset 16
 1179              		.cfi_offset 4, -16
 1180              		.cfi_offset 5, -12
 1181              		.cfi_offset 7, -8
 1182              		.cfi_offset 14, -4
 1183 07aa 82B0     		sub	sp, sp, #8
 1184              	.LCFI10:
 1185              		.cfi_def_cfa_offset 24
 1186 07ac 00AF     		add	r7, sp, #0
 1187              	.LCFI11:
 1188              		.cfi_def_cfa_register 7
 229:../src/mw.c   ****     static int16_t rcData4Values[8][4], rcDataMean[8];
 230:../src/mw.c   ****     static uint8_t rc4ValuesIndex = 0;
 231:../src/mw.c   ****     uint8_t chan, a;
 232:../src/mw.c   **** 
 233:../src/mw.c   ****     rc4ValuesIndex++;
 1189              		.loc 1 233 0
 1190 07ae 4B4B     		ldr	r3, .L63
 1191 07b0 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1192 07b2 03F10103 		add	r3, r3, #1
 1193 07b6 DAB2     		uxtb	r2, r3
 1194 07b8 484B     		ldr	r3, .L63
 1195 07ba 1A70     		strb	r2, [r3, #0]
 234:../src/mw.c   ****     for (chan = 0; chan < 8; chan++) {
 1196              		.loc 1 234 0
 1197 07bc 4FF00003 		mov	r3, #0
 1198 07c0 FB71     		strb	r3, [r7, #7]
 1199 07c2 83E0     		b	.L56
 1200              	.L62:
 235:../src/mw.c   ****         rcData4Values[chan][rc4ValuesIndex % 4] = rcReadRawFunc(chan);
 1201              		.loc 1 235 0
 1202 07c4 FD79     		ldrb	r5, [r7, #7]	@ zero_extendqisi2
 1203 07c6 454B     		ldr	r3, .L63
 1204 07c8 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1205 07ca 03F00304 		and	r4, r3, #3
 1206 07ce 444B     		ldr	r3, .L63+4
 1207 07d0 1B68     		ldr	r3, [r3, #0]
 1208 07d2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1209 07d4 1046     		mov	r0, r2
 1210 07d6 9847     		blx	r3
 1211 07d8 0346     		mov	r3, r0
 1212 07da 99B2     		uxth	r1, r3
 1213 07dc 414B     		ldr	r3, .L63+8
 1214 07de 4FEA8502 		lsl	r2, r5, #2
 1215 07e2 1219     		adds	r2, r2, r4
 1216 07e4 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 236:../src/mw.c   ****         rcDataMean[chan] = 0;
 1217              		.loc 1 236 0
 1218 07e8 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1219 07ea 3F4B     		ldr	r3, .L63+12
 1220 07ec 4FF00001 		mov	r1, #0
 1221 07f0 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 237:../src/mw.c   ****         for (a = 0; a < 4; a++)
 1222              		.loc 1 237 0
 1223 07f4 4FF00003 		mov	r3, #0
 1224 07f8 BB71     		strb	r3, [r7, #6]
 1225 07fa 18E0     		b	.L57
 1226              	.L58:
 238:../src/mw.c   ****             rcDataMean[chan] += rcData4Values[chan][a];
 1227              		.loc 1 238 0 discriminator 2
 1228 07fc FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1229 07fe F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 1230 0800 394B     		ldr	r3, .L63+12
 1231 0802 33F81130 		ldrh	r3, [r3, r1, lsl #1]
 1232 0806 99B2     		uxth	r1, r3
 1233 0808 FC79     		ldrb	r4, [r7, #7]	@ zero_extendqisi2
 1234 080a B879     		ldrb	r0, [r7, #6]	@ zero_extendqisi2
 1235 080c 354B     		ldr	r3, .L63+8
 1236 080e 4FEA8404 		lsl	r4, r4, #2
 1237 0812 2018     		adds	r0, r4, r0
 1238 0814 33F81030 		ldrh	r3, [r3, r0, lsl #1]
 1239 0818 9BB2     		uxth	r3, r3
 1240 081a CB18     		adds	r3, r1, r3
 1241 081c 9BB2     		uxth	r3, r3
 1242 081e 99B2     		uxth	r1, r3
 1243 0820 314B     		ldr	r3, .L63+12
 1244 0822 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 237:../src/mw.c   ****         for (a = 0; a < 4; a++)
 1245              		.loc 1 237 0 discriminator 2
 1246 0826 BB79     		ldrb	r3, [r7, #6]
 1247 0828 03F10103 		add	r3, r3, #1
 1248 082c BB71     		strb	r3, [r7, #6]
 1249              	.L57:
 237:../src/mw.c   ****         for (a = 0; a < 4; a++)
 1250              		.loc 1 237 0 is_stmt 0 discriminator 1
 1251 082e BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 1252 0830 032B     		cmp	r3, #3
 1253 0832 E3D9     		bls	.L58
 239:../src/mw.c   **** 
 240:../src/mw.c   ****         rcDataMean[chan] = (rcDataMean[chan] + 2) / 4;
 1254              		.loc 1 240 0 is_stmt 1
 1255 0834 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1256 0836 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 1257 0838 2B4B     		ldr	r3, .L63+12
 1258 083a 33F81130 		ldrh	r3, [r3, r1, lsl #1]
 1259 083e 1BB2     		sxth	r3, r3
 1260 0840 03F10203 		add	r3, r3, #2
 1261 0844 002B     		cmp	r3, #0
 1262 0846 01DA     		bge	.L59
 1263 0848 03F10303 		add	r3, r3, #3
 1264              	.L59:
 1265 084c 4FEAA303 		asr	r3, r3, #2
 1266 0850 99B2     		uxth	r1, r3
 1267 0852 254B     		ldr	r3, .L63+12
 1268 0854 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 241:../src/mw.c   ****         if (rcDataMean[chan] < rcData[chan] - 3)
 1269              		.loc 1 241 0
 1270 0858 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1271 085a 234B     		ldr	r3, .L63+12
 1272 085c 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 1273 0860 1AB2     		sxth	r2, r3
 1274 0862 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 1275 0864 214B     		ldr	r3, .L63+16
 1276 0866 33F81130 		ldrh	r3, [r3, r1, lsl #1]
 1277 086a 1BB2     		sxth	r3, r3
 1278 086c A3F10303 		sub	r3, r3, #3
 1279 0870 9A42     		cmp	r2, r3
 1280 0872 0CDA     		bge	.L60
 242:../src/mw.c   ****             rcData[chan] = rcDataMean[chan] + 2;
 1281              		.loc 1 242 0
 1282 0874 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1283 0876 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 1284 0878 1B4B     		ldr	r3, .L63+12
 1285 087a 33F81130 		ldrh	r3, [r3, r1, lsl #1]
 1286 087e 9BB2     		uxth	r3, r3
 1287 0880 03F10203 		add	r3, r3, #2
 1288 0884 9BB2     		uxth	r3, r3
 1289 0886 99B2     		uxth	r1, r3
 1290 0888 184B     		ldr	r3, .L63+16
 1291 088a 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 1292              	.L60:
 243:../src/mw.c   ****         if (rcDataMean[chan] > rcData[chan] + 3)
 1293              		.loc 1 243 0
 1294 088e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1295 0890 154B     		ldr	r3, .L63+12
 1296 0892 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 1297 0896 1AB2     		sxth	r2, r3
 1298 0898 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 1299 089a 144B     		ldr	r3, .L63+16
 1300 089c 33F81130 		ldrh	r3, [r3, r1, lsl #1]
 1301 08a0 1BB2     		sxth	r3, r3
 1302 08a2 03F10303 		add	r3, r3, #3
 1303 08a6 9A42     		cmp	r2, r3
 1304 08a8 0CDD     		ble	.L61
 244:../src/mw.c   ****             rcData[chan] = rcDataMean[chan] - 2;
 1305              		.loc 1 244 0
 1306 08aa FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1307 08ac F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 1308 08ae 0E4B     		ldr	r3, .L63+12
 1309 08b0 33F81130 		ldrh	r3, [r3, r1, lsl #1]
 1310 08b4 9BB2     		uxth	r3, r3
 1311 08b6 A3F10203 		sub	r3, r3, #2
 1312 08ba 9BB2     		uxth	r3, r3
 1313 08bc 99B2     		uxth	r1, r3
 1314 08be 0B4B     		ldr	r3, .L63+16
 1315 08c0 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 1316              	.L61:
 234:../src/mw.c   ****     for (chan = 0; chan < 8; chan++) {
 1317              		.loc 1 234 0
 1318 08c4 FB79     		ldrb	r3, [r7, #7]
 1319 08c6 03F10103 		add	r3, r3, #1
 1320 08ca FB71     		strb	r3, [r7, #7]
 1321              	.L56:
 234:../src/mw.c   ****     for (chan = 0; chan < 8; chan++) {
 1322              		.loc 1 234 0 is_stmt 0 discriminator 1
 1323 08cc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1324 08ce 072B     		cmp	r3, #7
 1325 08d0 7FF678AF 		bls	.L62
 245:../src/mw.c   ****     }
 246:../src/mw.c   **** }
 1326              		.loc 1 246 0 is_stmt 1
 1327 08d4 07F10807 		add	r7, r7, #8
 1328 08d8 BD46     		mov	sp, r7
 1329 08da B0BD     		pop	{r4, r5, r7, pc}
 1330              	.L64:
 1331              		.align	2
 1332              	.L63:
 1333 08dc 6A000000 		.word	rc4ValuesIndex.9124
 1334 08e0 00000000 		.word	rcReadRawFunc
 1335 08e4 6C000000 		.word	rcData4Values.9122
 1336 08e8 AC000000 		.word	rcDataMean.9123
 1337 08ec 00000000 		.word	rcData
 1338              		.cfi_endproc
 1339              	.LFE32:
 1341              		.align	2
 1342              		.thumb
 1343              		.thumb_func
 1345              	mwArm:
 1346              	.LFB33:
 247:../src/mw.c   **** 
 248:../src/mw.c   **** static void mwArm(void)
 249:../src/mw.c   **** {
 1347              		.loc 1 249 0
 1348              		.cfi_startproc
 1349              		@ args = 0, pretend = 0, frame = 0
 1350              		@ frame_needed = 1, uses_anonymous_args = 0
 1351 08f0 80B5     		push	{r7, lr}
 1352              	.LCFI12:
 1353              		.cfi_def_cfa_offset 8
 1354              		.cfi_offset 7, -8
 1355              		.cfi_offset 14, -4
 1356 08f2 00AF     		add	r7, sp, #0
 1357              	.LCFI13:
 1358              		.cfi_def_cfa_register 7
 250:../src/mw.c   ****     if (calibratingG == 0 && f.ACC_CALIBRATED) {
 1359              		.loc 1 250 0
 1360 08f4 104B     		ldr	r3, .L69
 1361 08f6 1B88     		ldrh	r3, [r3, #0]
 1362 08f8 002B     		cmp	r3, #0
 1363 08fa 10D1     		bne	.L66
 1364              		.loc 1 250 0 is_stmt 0 discriminator 1
 1365 08fc 0F4B     		ldr	r3, .L69+4
 1366 08fe 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1367 0900 002B     		cmp	r3, #0
 1368 0902 0CD0     		beq	.L66
 251:../src/mw.c   ****         // TODO: feature(FEATURE_FAILSAFE) && failsafeCnt < 2
 252:../src/mw.c   ****         // TODO: && ( !feature || ( feature && ( failsafecnt > 2) )
 253:../src/mw.c   ****         if (!f.ARMED) {         // arm now!
 1369              		.loc 1 253 0 is_stmt 1
 1370 0904 0D4B     		ldr	r3, .L69+4
 1371 0906 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1372 0908 002B     		cmp	r3, #0
 1373 090a 14D1     		bne	.L65
 254:../src/mw.c   ****             f.ARMED = 1;
 1374              		.loc 1 254 0
 1375 090c 0B4B     		ldr	r3, .L69+4
 1376 090e 4FF00102 		mov	r2, #1
 1377 0912 5A70     		strb	r2, [r3, #1]
 255:../src/mw.c   ****             headFreeModeHold = heading;
 1378              		.loc 1 255 0
 1379 0914 0A4B     		ldr	r3, .L69+8
 1380 0916 1A88     		ldrh	r2, [r3, #0]
 1381 0918 0A4B     		ldr	r3, .L69+12
 1382 091a 1A80     		strh	r2, [r3, #0]	@ movhi
 253:../src/mw.c   ****         if (!f.ARMED) {         // arm now!
 1383              		.loc 1 253 0
 1384 091c 0BE0     		b	.L65
 1385              	.L66:
 256:../src/mw.c   ****         }
 257:../src/mw.c   ****     } else if (!f.ARMED) {
 1386              		.loc 1 257 0
 1387 091e 074B     		ldr	r3, .L69+4
 1388 0920 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1389 0922 002B     		cmp	r3, #0
 1390 0924 07D1     		bne	.L65
 258:../src/mw.c   ****         blinkLED(2, 255, 1);
 1391              		.loc 1 258 0
 1392 0926 4FF00200 		mov	r0, #2
 1393 092a 4FF0FF01 		mov	r1, #255
 1394 092e 4FF00102 		mov	r2, #1
 1395 0932 FFF7FEFF 		bl	blinkLED
 1396              	.L65:
 259:../src/mw.c   ****     }
 260:../src/mw.c   **** }
 1397              		.loc 1 260 0
 1398 0936 80BD     		pop	{r7, pc}
 1399              	.L70:
 1400              		.align	2
 1401              	.L69:
 1402 0938 00000000 		.word	calibratingG
 1403 093c 00000000 		.word	f
 1404 0940 00000000 		.word	heading
 1405 0944 00000000 		.word	headFreeModeHold
 1406              		.cfi_endproc
 1407              	.LFE33:
 1409              		.align	2
 1410              		.thumb
 1411              		.thumb_func
 1413              	mwDisarm:
 1414              	.LFB34:
 261:../src/mw.c   **** 
 262:../src/mw.c   **** static void mwDisarm(void)
 263:../src/mw.c   **** {
 1415              		.loc 1 263 0
 1416              		.cfi_startproc
 1417              		@ args = 0, pretend = 0, frame = 0
 1418              		@ frame_needed = 1, uses_anonymous_args = 0
 1419              		@ link register save eliminated.
 1420 0948 80B4     		push	{r7}
 1421              	.LCFI14:
 1422              		.cfi_def_cfa_offset 4
 1423              		.cfi_offset 7, -4
 1424 094a 00AF     		add	r7, sp, #0
 1425              	.LCFI15:
 1426              		.cfi_def_cfa_register 7
 264:../src/mw.c   ****     if (f.ARMED)
 1427              		.loc 1 264 0
 1428 094c 054B     		ldr	r3, .L73
 1429 094e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1430 0950 002B     		cmp	r3, #0
 1431 0952 03D0     		beq	.L71
 265:../src/mw.c   ****         f.ARMED = 0;
 1432              		.loc 1 265 0
 1433 0954 034B     		ldr	r3, .L73
 1434 0956 4FF00002 		mov	r2, #0
 1435 095a 5A70     		strb	r2, [r3, #1]
 1436              	.L71:
 266:../src/mw.c   **** }
 1437              		.loc 1 266 0
 1438 095c BD46     		mov	sp, r7
 1439 095e 80BC     		pop	{r7}
 1440 0960 7047     		bx	lr
 1441              	.L74:
 1442 0962 00BF     		.align	2
 1443              	.L73:
 1444 0964 00000000 		.word	f
 1445              		.cfi_endproc
 1446              	.LFE34:
 1448              		.align	2
 1449              		.thumb
 1450              		.thumb_func
 1452              	mwVario:
 1453              	.LFB35:
 267:../src/mw.c   **** 
 268:../src/mw.c   **** static void mwVario(void)
 269:../src/mw.c   **** {
 1454              		.loc 1 269 0
 1455              		.cfi_startproc
 1456              		@ args = 0, pretend = 0, frame = 0
 1457              		@ frame_needed = 1, uses_anonymous_args = 0
 1458              		@ link register save eliminated.
 1459 0968 80B4     		push	{r7}
 1460              	.LCFI16:
 1461              		.cfi_def_cfa_offset 4
 1462              		.cfi_offset 7, -4
 1463 096a 00AF     		add	r7, sp, #0
 1464              	.LCFI17:
 1465              		.cfi_def_cfa_register 7
 270:../src/mw.c   **** 
 271:../src/mw.c   **** }
 1466              		.loc 1 271 0
 1467 096c BD46     		mov	sp, r7
 1468 096e 80BC     		pop	{r7}
 1469 0970 7047     		bx	lr
 1470              		.cfi_endproc
 1471              	.LFE35:
 1473              		.global	__aeabi_fdiv
 1474 0972 00BF     		.align	2
 1475              		.global	loop
 1476              		.thumb
 1477              		.thumb_func
 1479              	loop:
 1480              	.LFB36:
 272:../src/mw.c   **** 
 273:../src/mw.c   **** void loop(void)
 274:../src/mw.c   **** {
 1481              		.loc 1 274 0
 1482              		.cfi_startproc
 1483              		@ args = 0, pretend = 0, frame = 40
 1484              		@ frame_needed = 1, uses_anonymous_args = 0
 1485 0974 90B5     		push	{r4, r7, lr}
 1486              	.LCFI18:
 1487              		.cfi_def_cfa_offset 12
 1488              		.cfi_offset 4, -12
 1489              		.cfi_offset 7, -8
 1490              		.cfi_offset 14, -4
 1491 0976 8BB0     		sub	sp, sp, #44
 1492              	.LCFI19:
 1493              		.cfi_def_cfa_offset 56
 1494 0978 00AF     		add	r7, sp, #0
 1495              	.LCFI20:
 1496              		.cfi_def_cfa_register 7
 275:../src/mw.c   ****     static uint8_t rcDelayCommand;      // this indicates the number of time (multiple of RC measur
 276:../src/mw.c   ****     static uint8_t rcSticks;            // this hold sticks position for command combos
 277:../src/mw.c   ****     uint8_t stTmp = 0;
 1497              		.loc 1 277 0
 1498 097a 4FF00003 		mov	r3, #0
 1499 097e 87F82730 		strb	r3, [r7, #39]
 278:../src/mw.c   ****     uint8_t axis, i;
 279:../src/mw.c   ****     int16_t error, errorAngle;
 280:../src/mw.c   ****     int16_t PTerm, ITerm, PTermACC, ITermACC = 0, PTermGYRO = 0, ITermGYRO = 0, DTerm;
 1500              		.loc 1 280 0
 1501 0982 4FF00003 		mov	r3, #0
 1502 0986 BB83     		strh	r3, [r7, #28]	@ movhi
 1503 0988 4FF00003 		mov	r3, #0
 1504 098c 7B83     		strh	r3, [r7, #26]	@ movhi
 1505 098e 4FF00003 		mov	r3, #0
 1506 0992 3B83     		strh	r3, [r7, #24]	@ movhi
 281:../src/mw.c   ****     static int16_t errorGyroI[3] = { 0, 0, 0 };
 282:../src/mw.c   ****     static int16_t errorAngleI[2] = { 0, 0 };
 283:../src/mw.c   ****     int16_t delta;
 284:../src/mw.c   ****     static int16_t lastGyro[3] = { 0, 0, 0 };
 285:../src/mw.c   ****     static int16_t delta1[3], delta2[3];
 286:../src/mw.c   ****     int16_t deltaSum;
 287:../src/mw.c   ****     static uint32_t rcTime = 0;
 288:../src/mw.c   ****     static int16_t initialThrottleHold;
 289:../src/mw.c   ****     static uint32_t loopTime;
 290:../src/mw.c   ****     uint16_t auxState = 0;
 1507              		.loc 1 290 0
 1508 0994 4FF00003 		mov	r3, #0
 1509 0998 FB82     		strh	r3, [r7, #22]	@ movhi
 291:../src/mw.c   ****     int16_t prop;
 292:../src/mw.c   ****     static uint8_t GPSNavReset = 1;
 293:../src/mw.c   **** 
 294:../src/mw.c   ****     // this will return false if spektrum is disabled. shrug.
 295:../src/mw.c   ****     if (spektrumFrameComplete())
 1510              		.loc 1 295 0
 1511 099a FFF7FEFF 		bl	spektrumFrameComplete
 1512 099e 0346     		mov	r3, r0
 1513 09a0 002B     		cmp	r3, #0
 1514 09a2 01D0     		beq	.L77
 296:../src/mw.c   ****         computeRC();
 1515              		.loc 1 296 0
 1516 09a4 FFF7FEFF 		bl	computeRC
 1517              	.L77:
 297:../src/mw.c   **** 
 298:../src/mw.c   ****     if ((int32_t)(currentTime - rcTime) >= 0) { // 50Hz
 1518              		.loc 1 298 0
 1519 09a8 A24B     		ldr	r3, .L212
 1520 09aa 1A68     		ldr	r2, [r3, #0]
 1521 09ac A24B     		ldr	r3, .L212+4
 1522 09ae 1B68     		ldr	r3, [r3, #0]
 1523 09b0 D31A     		subs	r3, r2, r3
 1524 09b2 002B     		cmp	r3, #0
 1525 09b4 C0F21B85 		blt	.L78
 299:../src/mw.c   ****         rcTime = currentTime + 20000;
 1526              		.loc 1 299 0
 1527 09b8 9E4B     		ldr	r3, .L212
 1528 09ba 1B68     		ldr	r3, [r3, #0]
 1529 09bc 03F59C43 		add	r3, r3, #19968
 1530 09c0 03F12003 		add	r3, r3, #32
 1531 09c4 9C4A     		ldr	r2, .L212+4
 1532 09c6 1360     		str	r3, [r2, #0]
 300:../src/mw.c   ****         // TODO clean this up. computeRC should handle this check
 301:../src/mw.c   ****         if (!feature(FEATURE_SPEKTRUM))
 1533              		.loc 1 301 0
 1534 09c8 4FF00800 		mov	r0, #8
 1535 09cc FFF7FEFF 		bl	feature
 1536 09d0 0346     		mov	r3, r0
 1537 09d2 83F00103 		eor	r3, r3, #1
 1538 09d6 DBB2     		uxtb	r3, r3
 1539 09d8 002B     		cmp	r3, #0
 1540 09da 01D0     		beq	.L79
 302:../src/mw.c   ****             computeRC();
 1541              		.loc 1 302 0
 1542 09dc FFF7FEFF 		bl	computeRC
 1543              	.L79:
 303:../src/mw.c   ****         if (feature(FEATURE_GPS) && mcfg.gps_type == GPS_I2C)
 1544              		.loc 1 303 0
 1545 09e0 4FF48070 		mov	r0, #256
 1546 09e4 FFF7FEFF 		bl	feature
 1547 09e8 0346     		mov	r3, r0
 1548 09ea 002B     		cmp	r3, #0
 1549 09ec 08D0     		beq	.L80
 1550              		.loc 1 303 0 is_stmt 0 discriminator 1
 1551 09ee 934B     		ldr	r3, .L212+8
 1552 09f0 93F80F31 		ldrb	r3, [r3, #271]	@ zero_extendqisi2
 1553 09f4 032B     		cmp	r3, #3
 1554 09f6 03D1     		bne	.L80
 304:../src/mw.c   ****         	GPS_NewData('c');
 1555              		.loc 1 304 0 is_stmt 1
 1556 09f8 4FF06300 		mov	r0, #99
 1557 09fc FFF7FEFF 		bl	GPS_NewData
 1558              	.L80:
 305:../src/mw.c   ****         // Failsafe routine
 306:../src/mw.c   ****         if (feature(FEATURE_FAILSAFE)) {
 1559              		.loc 1 306 0
 1560 0a00 4FF40070 		mov	r0, #512
 1561 0a04 FFF7FEFF 		bl	feature
 1562 0a08 0346     		mov	r3, r0
 1563 0a0a 002B     		cmp	r3, #0
 1564 0a0c 6AD0     		beq	.L81
 307:../src/mw.c   ****             if (failsafeCnt > (5 * cfg.failsafe_delay) && f.ARMED) { // Stabilize, and set Throttle
 1565              		.loc 1 307 0
 1566 0a0e 8C4B     		ldr	r3, .L212+12
 1567 0a10 1B88     		ldrh	r3, [r3, #0]
 1568 0a12 19B2     		sxth	r1, r3
 1569 0a14 8B4B     		ldr	r3, .L212+16
 1570 0a16 93F86430 		ldrb	r3, [r3, #100]	@ zero_extendqisi2
 1571 0a1a 1A46     		mov	r2, r3
 1572 0a1c 1346     		mov	r3, r2
 1573 0a1e 4FEA8303 		lsl	r3, r3, #2
 1574 0a22 9B18     		adds	r3, r3, r2
 1575 0a24 9942     		cmp	r1, r3
 1576 0a26 3FDD     		ble	.L82
 1577              		.loc 1 307 0 is_stmt 0 discriminator 1
 1578 0a28 874B     		ldr	r3, .L212+20
 1579 0a2a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1580 0a2c 002B     		cmp	r3, #0
 1581 0a2e 3BD0     		beq	.L82
 308:../src/mw.c   ****                 for (i = 0; i < 3; i++)
 1582              		.loc 1 308 0 is_stmt 1
 1583 0a30 4FF00003 		mov	r3, #0
 1584 0a34 87F82530 		strb	r3, [r7, #37]
 1585 0a38 0EE0     		b	.L83
 1586              	.L84:
 309:../src/mw.c   ****                     rcData[i] = mcfg.midrc;      // after specified guard time after RC signal is l
 1587              		.loc 1 309 0 discriminator 2
 1588 0a3a 97F82520 		ldrb	r2, [r7, #37]	@ zero_extendqisi2
 1589 0a3e 7F4B     		ldr	r3, .L212+8
 1590 0a40 B3F80831 		ldrh	r3, [r3, #264]
 1591 0a44 99B2     		uxth	r1, r3
 1592 0a46 814B     		ldr	r3, .L212+24
 1593 0a48 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 308:../src/mw.c   ****                 for (i = 0; i < 3; i++)
 1594              		.loc 1 308 0 discriminator 2
 1595 0a4c 97F82530 		ldrb	r3, [r7, #37]
 1596 0a50 03F10103 		add	r3, r3, #1
 1597 0a54 87F82530 		strb	r3, [r7, #37]
 1598              	.L83:
 308:../src/mw.c   ****                 for (i = 0; i < 3; i++)
 1599              		.loc 1 308 0 is_stmt 0 discriminator 1
 1600 0a58 97F82530 		ldrb	r3, [r7, #37]	@ zero_extendqisi2
 1601 0a5c 022B     		cmp	r3, #2
 1602 0a5e ECD9     		bls	.L84
 310:../src/mw.c   ****                 rcData[THROTTLE] = cfg.failsafe_throttle;
 1603              		.loc 1 310 0 is_stmt 1
 1604 0a60 784B     		ldr	r3, .L212+16
 1605 0a62 B3F86630 		ldrh	r3, [r3, #102]
 1606 0a66 9AB2     		uxth	r2, r3
 1607 0a68 784B     		ldr	r3, .L212+24
 1608 0a6a DA80     		strh	r2, [r3, #6]	@ movhi
 311:../src/mw.c   ****                 if (failsafeCnt > 5 * (cfg.failsafe_delay + cfg.failsafe_off_delay)) {  // Turn OFF
 1609              		.loc 1 311 0
 1610 0a6c 744B     		ldr	r3, .L212+12
 1611 0a6e 1B88     		ldrh	r3, [r3, #0]
 1612 0a70 19B2     		sxth	r1, r3
 1613 0a72 744B     		ldr	r3, .L212+16
 1614 0a74 93F86430 		ldrb	r3, [r3, #100]	@ zero_extendqisi2
 1615 0a78 1A46     		mov	r2, r3
 1616 0a7a 724B     		ldr	r3, .L212+16
 1617 0a7c 93F86530 		ldrb	r3, [r3, #101]	@ zero_extendqisi2
 1618 0a80 D218     		adds	r2, r2, r3
 1619 0a82 1346     		mov	r3, r2
 1620 0a84 4FEA8303 		lsl	r3, r3, #2
 1621 0a88 9B18     		adds	r3, r3, r2
 1622 0a8a 9942     		cmp	r1, r3
 1623 0a8c 05DD     		ble	.L85
 312:../src/mw.c   ****                     mwDisarm();             // This will prevent the copter to automatically rearm 
 1624              		.loc 1 312 0
 1625 0a8e FFF75BFF 		bl	mwDisarm
 313:../src/mw.c   ****                     f.OK_TO_ARM = 0;        // to restart accidentely by just reconnect to the tx -
 1626              		.loc 1 313 0
 1627 0a92 6D4B     		ldr	r3, .L212+20
 1628 0a94 4FF00002 		mov	r2, #0
 1629 0a98 1A70     		strb	r2, [r3, #0]
 1630              	.L85:
 314:../src/mw.c   ****                 }
 315:../src/mw.c   ****                 failsafeEvents++;
 1631              		.loc 1 315 0
 1632 0a9a 6D4B     		ldr	r3, .L212+28
 1633 0a9c 1B88     		ldrh	r3, [r3, #0]
 1634 0a9e 03F10103 		add	r3, r3, #1
 1635 0aa2 9AB2     		uxth	r2, r3
 1636 0aa4 6A4B     		ldr	r3, .L212+28
 1637 0aa6 1A80     		strh	r2, [r3, #0]	@ movhi
 1638              	.L82:
 316:../src/mw.c   ****             }
 317:../src/mw.c   ****             if (failsafeCnt > (5 * cfg.failsafe_delay) && !f.ARMED) {  // Turn off "Ok To arm to pr
 1639              		.loc 1 317 0
 1640 0aa8 654B     		ldr	r3, .L212+12
 1641 0aaa 1B88     		ldrh	r3, [r3, #0]
 1642 0aac 19B2     		sxth	r1, r3
 1643 0aae 654B     		ldr	r3, .L212+16
 1644 0ab0 93F86430 		ldrb	r3, [r3, #100]	@ zero_extendqisi2
 1645 0ab4 1A46     		mov	r2, r3
 1646 0ab6 1346     		mov	r3, r2
 1647 0ab8 4FEA8303 		lsl	r3, r3, #2
 1648 0abc 9B18     		adds	r3, r3, r2
 1649 0abe 9942     		cmp	r1, r3
 1650 0ac0 09DD     		ble	.L86
 1651              		.loc 1 317 0 is_stmt 0 discriminator 1
 1652 0ac2 614B     		ldr	r3, .L212+20
 1653 0ac4 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1654 0ac6 002B     		cmp	r3, #0
 1655 0ac8 05D1     		bne	.L86
 318:../src/mw.c   ****                 mwDisarm();         // This will prevent the copter to automatically rearm if fails
 1656              		.loc 1 318 0 is_stmt 1
 1657 0aca FFF73DFF 		bl	mwDisarm
 319:../src/mw.c   ****                 f.OK_TO_ARM = 0;    // to restart accidentely by just reconnect to the tx - you wil
 1658              		.loc 1 319 0
 1659 0ace 5E4B     		ldr	r3, .L212+20
 1660 0ad0 4FF00002 		mov	r2, #0
 1661 0ad4 1A70     		strb	r2, [r3, #0]
 1662              	.L86:
 320:../src/mw.c   ****             }
 321:../src/mw.c   ****             failsafeCnt++;
 1663              		.loc 1 321 0
 1664 0ad6 5A4B     		ldr	r3, .L212+12
 1665 0ad8 1B88     		ldrh	r3, [r3, #0]
 1666 0ada 03F10103 		add	r3, r3, #1
 1667 0ade 9AB2     		uxth	r2, r3
 1668 0ae0 574B     		ldr	r3, .L212+12
 1669 0ae2 1A80     		strh	r2, [r3, #0]	@ movhi
 1670              	.L81:
 322:../src/mw.c   ****         }
 323:../src/mw.c   ****         // end of failsafe routine - next change is made with RcOptions setting
 324:../src/mw.c   **** 
 325:../src/mw.c   ****         // ------------------ STICKS COMMAND HANDLER --------------------
 326:../src/mw.c   ****         // checking sticks positions
 327:../src/mw.c   ****         for (i = 0; i < 4; i++) {
 1671              		.loc 1 327 0
 1672 0ae4 4FF00003 		mov	r3, #0
 1673 0ae8 87F82530 		strb	r3, [r7, #37]
 1674 0aec 2DE0     		b	.L87
 1675              	.L90:
 328:../src/mw.c   ****             stTmp >>= 2;
 1676              		.loc 1 328 0
 1677 0aee 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 1678 0af2 4FEA9303 		lsr	r3, r3, #2
 1679 0af6 87F82730 		strb	r3, [r7, #39]
 329:../src/mw.c   ****             if (rcData[i] > mcfg.mincheck)
 1680              		.loc 1 329 0
 1681 0afa 97F82520 		ldrb	r2, [r7, #37]	@ zero_extendqisi2
 1682 0afe 534B     		ldr	r3, .L212+24
 1683 0b00 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 1684 0b04 1AB2     		sxth	r2, r3
 1685 0b06 4D4B     		ldr	r3, .L212+8
 1686 0b08 B3F80A31 		ldrh	r3, [r3, #266]
 1687 0b0c 9A42     		cmp	r2, r3
 1688 0b0e 05DD     		ble	.L88
 330:../src/mw.c   ****                 stTmp |= 0x80;  // check for MIN
 1689              		.loc 1 330 0
 1690 0b10 97F82730 		ldrb	r3, [r7, #39]
 1691 0b14 63F07F03 		orn	r3, r3, #127
 1692 0b18 87F82730 		strb	r3, [r7, #39]
 1693              	.L88:
 331:../src/mw.c   ****             if (rcData[i] < mcfg.maxcheck)
 1694              		.loc 1 331 0
 1695 0b1c 97F82520 		ldrb	r2, [r7, #37]	@ zero_extendqisi2
 1696 0b20 4A4B     		ldr	r3, .L212+24
 1697 0b22 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 1698 0b26 1AB2     		sxth	r2, r3
 1699 0b28 444B     		ldr	r3, .L212+8
 1700 0b2a B3F80C31 		ldrh	r3, [r3, #268]
 1701 0b2e 9A42     		cmp	r2, r3
 1702 0b30 05DA     		bge	.L89
 332:../src/mw.c   ****                 stTmp |= 0x40;  // check for MAX
 1703              		.loc 1 332 0
 1704 0b32 97F82730 		ldrb	r3, [r7, #39]
 1705 0b36 43F04003 		orr	r3, r3, #64
 1706 0b3a 87F82730 		strb	r3, [r7, #39]
 1707              	.L89:
 327:../src/mw.c   ****         for (i = 0; i < 4; i++) {
 1708              		.loc 1 327 0
 1709 0b3e 97F82530 		ldrb	r3, [r7, #37]
 1710 0b42 03F10103 		add	r3, r3, #1
 1711 0b46 87F82530 		strb	r3, [r7, #37]
 1712              	.L87:
 327:../src/mw.c   ****         for (i = 0; i < 4; i++) {
 1713              		.loc 1 327 0 is_stmt 0 discriminator 1
 1714 0b4a 97F82530 		ldrb	r3, [r7, #37]	@ zero_extendqisi2
 1715 0b4e 032B     		cmp	r3, #3
 1716 0b50 CDD9     		bls	.L90
 333:../src/mw.c   ****         }
 334:../src/mw.c   ****         if (stTmp == rcSticks) {
 1717              		.loc 1 334 0 is_stmt 1
 1718 0b52 404B     		ldr	r3, .L212+32
 1719 0b54 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1720 0b56 97F82720 		ldrb	r2, [r7, #39]	@ zero_extendqisi2
 1721 0b5a 9A42     		cmp	r2, r3
 1722 0b5c 0BD1     		bne	.L91
 335:../src/mw.c   ****             if (rcDelayCommand < 250)
 1723              		.loc 1 335 0
 1724 0b5e 3E4B     		ldr	r3, .L212+36
 1725 0b60 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1726 0b62 F92B     		cmp	r3, #249
 1727 0b64 0BD8     		bhi	.L92
 336:../src/mw.c   ****                 rcDelayCommand++;
 1728              		.loc 1 336 0
 1729 0b66 3C4B     		ldr	r3, .L212+36
 1730 0b68 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1731 0b6a 03F10103 		add	r3, r3, #1
 1732 0b6e DAB2     		uxtb	r2, r3
 1733 0b70 394B     		ldr	r3, .L212+36
 1734 0b72 1A70     		strb	r2, [r3, #0]
 1735 0b74 03E0     		b	.L92
 1736              	.L91:
 337:../src/mw.c   ****         } else
 338:../src/mw.c   ****             rcDelayCommand = 0;
 1737              		.loc 1 338 0
 1738 0b76 384B     		ldr	r3, .L212+36
 1739 0b78 4FF00002 		mov	r2, #0
 1740 0b7c 1A70     		strb	r2, [r3, #0]
 1741              	.L92:
 339:../src/mw.c   ****         rcSticks = stTmp;
 1742              		.loc 1 339 0
 1743 0b7e 354B     		ldr	r3, .L212+32
 1744 0b80 97F82720 		ldrb	r2, [r7, #39]
 1745 0b84 1A70     		strb	r2, [r3, #0]
 340:../src/mw.c   **** 
 341:../src/mw.c   ****         // perform actions
 342:../src/mw.c   ****         if (rcData[THROTTLE] < mcfg.mincheck) {
 1746              		.loc 1 342 0
 1747 0b86 314B     		ldr	r3, .L212+24
 1748 0b88 DB88     		ldrh	r3, [r3, #6]
 1749 0b8a 1AB2     		sxth	r2, r3
 1750 0b8c 2B4B     		ldr	r3, .L212+8
 1751 0b8e B3F80A31 		ldrh	r3, [r3, #266]
 1752 0b92 9A42     		cmp	r2, r3
 1753 0b94 28DA     		bge	.L93
 343:../src/mw.c   ****             errorGyroI[ROLL] = 0;
 1754              		.loc 1 343 0
 1755 0b96 314B     		ldr	r3, .L212+40
 1756 0b98 4FF00002 		mov	r2, #0
 1757 0b9c 1A80     		strh	r2, [r3, #0]	@ movhi
 344:../src/mw.c   ****             errorGyroI[PITCH] = 0;
 1758              		.loc 1 344 0
 1759 0b9e 2F4B     		ldr	r3, .L212+40
 1760 0ba0 4FF00002 		mov	r2, #0
 1761 0ba4 5A80     		strh	r2, [r3, #2]	@ movhi
 345:../src/mw.c   ****             errorGyroI[YAW] = 0;
 1762              		.loc 1 345 0
 1763 0ba6 2D4B     		ldr	r3, .L212+40
 1764 0ba8 4FF00002 		mov	r2, #0
 1765 0bac 9A80     		strh	r2, [r3, #4]	@ movhi
 346:../src/mw.c   ****             errorAngleI[ROLL] = 0;
 1766              		.loc 1 346 0
 1767 0bae 2C4B     		ldr	r3, .L212+44
 1768 0bb0 4FF00002 		mov	r2, #0
 1769 0bb4 1A80     		strh	r2, [r3, #0]	@ movhi
 347:../src/mw.c   ****             errorAngleI[PITCH] = 0;
 1770              		.loc 1 347 0
 1771 0bb6 2A4B     		ldr	r3, .L212+44
 1772 0bb8 4FF00002 		mov	r2, #0
 1773 0bbc 5A80     		strh	r2, [r3, #2]	@ movhi
 348:../src/mw.c   ****             if (cfg.activate[BOXARM] > 0) { // Arming/Disarming via ARM BOX
 1774              		.loc 1 348 0
 1775 0bbe 214B     		ldr	r3, .L212+16
 1776 0bc0 1B8F     		ldrh	r3, [r3, #56]
 1777 0bc2 002B     		cmp	r3, #0
 1778 0bc4 10D0     		beq	.L93
 349:../src/mw.c   ****                 if (rcOptions[BOXARM] && f.OK_TO_ARM)
 1779              		.loc 1 349 0
 1780 0bc6 274B     		ldr	r3, .L212+48
 1781 0bc8 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1782 0bca 002B     		cmp	r3, #0
 1783 0bcc 06D0     		beq	.L94
 1784              		.loc 1 349 0 is_stmt 0 discriminator 1
 1785 0bce 1E4B     		ldr	r3, .L212+20
 1786 0bd0 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1787 0bd2 002B     		cmp	r3, #0
 1788 0bd4 02D0     		beq	.L94
 350:../src/mw.c   ****                     mwArm();
 1789              		.loc 1 350 0 is_stmt 1
 1790 0bd6 FFF78BFE 		bl	mwArm
 1791 0bda 05E0     		b	.L93
 1792              	.L94:
 351:../src/mw.c   ****                 else if (f.ARMED)
 1793              		.loc 1 351 0
 1794 0bdc 1A4B     		ldr	r3, .L212+20
 1795 0bde 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1796 0be0 002B     		cmp	r3, #0
 1797 0be2 01D0     		beq	.L93
 352:../src/mw.c   ****                     mwDisarm();
 1798              		.loc 1 352 0
 1799 0be4 FFF7B0FE 		bl	mwDisarm
 1800              	.L93:
 353:../src/mw.c   ****             }
 354:../src/mw.c   ****         }
 355:../src/mw.c   **** 
 356:../src/mw.c   ****         if (rcDelayCommand == 20) {
 1801              		.loc 1 356 0
 1802 0be8 1B4B     		ldr	r3, .L212+36
 1803 0bea 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1804 0bec 142B     		cmp	r3, #20
 1805 0bee 40F05C81 		bne	.L95
 357:../src/mw.c   ****             if (f.ARMED) {      // actions during armed
 1806              		.loc 1 357 0
 1807 0bf2 154B     		ldr	r3, .L212+20
 1808 0bf4 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1809 0bf6 002B     		cmp	r3, #0
 1810 0bf8 36D0     		beq	.L96
 358:../src/mw.c   ****                 // Disarm on throttle down + yaw
 359:../src/mw.c   ****                 if (cfg.activate[BOXARM] == 0 && (rcSticks == THR_LO + YAW_LO + PIT_CE + ROL_CE))
 1811              		.loc 1 359 0
 1812 0bfa 124B     		ldr	r3, .L212+16
 1813 0bfc 1B8F     		ldrh	r3, [r3, #56]
 1814 0bfe 002B     		cmp	r3, #0
 1815 0c00 05D1     		bne	.L97
 1816              		.loc 1 359 0 is_stmt 0 discriminator 1
 1817 0c02 144B     		ldr	r3, .L212+32
 1818 0c04 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1819 0c06 5F2B     		cmp	r3, #95
 1820 0c08 01D1     		bne	.L97
 360:../src/mw.c   ****                     mwDisarm();
 1821              		.loc 1 360 0 is_stmt 1
 1822 0c0a FFF79DFE 		bl	mwDisarm
 1823              	.L97:
 361:../src/mw.c   ****                 // Disarm on roll (only when retarded_arm is enabled)
 362:../src/mw.c   ****                 if (mcfg.retarded_arm && cfg.activate[BOXARM] == 0 && (rcSticks == THR_LO + YAW_CE 
 1824              		.loc 1 362 0
 1825 0c0e 0B4B     		ldr	r3, .L212+8
 1826 0c10 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 1827 0c14 002B     		cmp	r3, #0
 1828 0c16 00F04881 		beq	.L95
 1829              		.loc 1 362 0 is_stmt 0 discriminator 1
 1830 0c1a 0A4B     		ldr	r3, .L212+16
 1831 0c1c 1B8F     		ldrh	r3, [r3, #56]
 1832 0c1e 002B     		cmp	r3, #0
 1833 0c20 40F04381 		bne	.L95
 1834 0c24 0B4B     		ldr	r3, .L212+32
 1835 0c26 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1836 0c28 7D2B     		cmp	r3, #125
 1837 0c2a 40F03E81 		bne	.L95
 363:../src/mw.c   ****                     mwDisarm();
 1838              		.loc 1 363 0 is_stmt 1
 1839 0c2e FFF78BFE 		bl	mwDisarm
 1840 0c32 3AE1     		b	.L95
 1841              	.L213:
 1842              		.align	2
 1843              	.L212:
 1844 0c34 00000000 		.word	currentTime
 1845 0c38 30000000 		.word	rcTime.9166
 1846 0c3c 00000000 		.word	mcfg
 1847 0c40 00000000 		.word	failsafeCnt
 1848 0c44 00000000 		.word	cfg
 1849 0c48 00000000 		.word	f
 1850 0c4c 00000000 		.word	rcData
 1851 0c50 00000000 		.word	failsafeEvents
 1852 0c54 34000000 		.word	rcSticks.9146
 1853 0c58 35000000 		.word	rcDelayCommand.9145
 1854 0c5c 38000000 		.word	errorGyroI.9159
 1855 0c60 40000000 		.word	errorAngleI.9160
 1856 0c64 00000000 		.word	rcOptions
 1857              	.L96:
 364:../src/mw.c   ****             } else {            // actions during not armed
 365:../src/mw.c   ****                 i = 0;
 1858              		.loc 1 365 0
 1859 0c68 4FF00003 		mov	r3, #0
 1860 0c6c 87F82530 		strb	r3, [r7, #37]
 366:../src/mw.c   ****                 // GYRO calibration
 367:../src/mw.c   ****                 if (rcSticks == THR_LO + YAW_LO + PIT_LO + ROL_CE) {
 1861              		.loc 1 367 0
 1862 0c70 734B     		ldr	r3, .L214
 1863 0c72 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1864 0c74 572B     		cmp	r3, #87
 1865 0c76 18D1     		bne	.L98
 368:../src/mw.c   ****                     calibratingG = 1000;
 1866              		.loc 1 368 0
 1867 0c78 724B     		ldr	r3, .L214+4
 1868 0c7a 4FF47A72 		mov	r2, #1000
 1869 0c7e 1A80     		strh	r2, [r3, #0]	@ movhi
 369:../src/mw.c   ****                     if (feature(FEATURE_GPS))
 1870              		.loc 1 369 0
 1871 0c80 4FF48070 		mov	r0, #256
 1872 0c84 FFF7FEFF 		bl	feature
 1873 0c88 0346     		mov	r3, r0
 1874 0c8a 002B     		cmp	r3, #0
 1875 0c8c 01D0     		beq	.L99
 370:../src/mw.c   ****                         GPS_reset_home_position();
 1876              		.loc 1 370 0
 1877 0c8e FFF7FEFF 		bl	GPS_reset_home_position
 1878              	.L99:
 371:../src/mw.c   ****                     if (sensors(SENSOR_BARO))
 1879              		.loc 1 371 0
 1880 0c92 4FF00200 		mov	r0, #2
 1881 0c96 FFF7FEFF 		bl	sensors
 1882 0c9a 0346     		mov	r3, r0
 1883 0c9c 002B     		cmp	r3, #0
 1884 0c9e 34D0     		beq	.L100
 372:../src/mw.c   ****                         calibratingB = 10; // calibrate baro to new ground level (10 * 25 ms = ~250
 1885              		.loc 1 372 0
 1886 0ca0 694B     		ldr	r3, .L214+8
 1887 0ca2 4FF00A02 		mov	r2, #10
 1888 0ca6 1A80     		strh	r2, [r3, #0]	@ movhi
 1889 0ca8 2FE0     		b	.L100
 1890              	.L98:
 373:../src/mw.c   ****                 // Inflight ACC Calibration
 374:../src/mw.c   ****                 } else if (feature(FEATURE_INFLIGHT_ACC_CAL) && (rcSticks == THR_LO + YAW_LO + PIT_
 1891              		.loc 1 374 0
 1892 0caa 4FF00400 		mov	r0, #4
 1893 0cae FFF7FEFF 		bl	feature
 1894 0cb2 0346     		mov	r3, r0
 1895 0cb4 002B     		cmp	r3, #0
 1896 0cb6 28D0     		beq	.L100
 1897              		.loc 1 374 0 is_stmt 0 discriminator 1
 1898 0cb8 614B     		ldr	r3, .L214
 1899 0cba 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1900 0cbc 5A2B     		cmp	r3, #90
 1901 0cbe 24D1     		bne	.L100
 375:../src/mw.c   ****                     if (AccInflightCalibrationMeasurementDone) {        // trigger saving into eepr
 1902              		.loc 1 375 0 is_stmt 1
 1903 0cc0 624B     		ldr	r3, .L214+12
 1904 0cc2 1B88     		ldrh	r3, [r3, #0]
 1905 0cc4 002B     		cmp	r3, #0
 1906 0cc6 08D0     		beq	.L101
 376:../src/mw.c   ****                         AccInflightCalibrationMeasurementDone = 0;
 1907              		.loc 1 376 0
 1908 0cc8 604B     		ldr	r3, .L214+12
 1909 0cca 4FF00002 		mov	r2, #0
 1910 0cce 1A80     		strh	r2, [r3, #0]	@ movhi
 377:../src/mw.c   ****                         AccInflightCalibrationSavetoEEProm = 1;
 1911              		.loc 1 377 0
 1912 0cd0 5F4B     		ldr	r3, .L214+16
 1913 0cd2 4FF00102 		mov	r2, #1
 1914 0cd6 1A80     		strh	r2, [r3, #0]	@ movhi
 1915 0cd8 17E0     		b	.L100
 1916              	.L101:
 378:../src/mw.c   ****                     } else {
 379:../src/mw.c   ****                         AccInflightCalibrationArmed = !AccInflightCalibrationArmed;
 1917              		.loc 1 379 0
 1918 0cda 5E4B     		ldr	r3, .L214+20
 1919 0cdc 1B88     		ldrh	r3, [r3, #0]
 1920 0cde 1BB2     		sxth	r3, r3
 1921 0ce0 002B     		cmp	r3, #0
 1922 0ce2 14BF     		ite	ne
 1923 0ce4 0023     		movne	r3, #0
 1924 0ce6 0123     		moveq	r3, #1
 1925 0ce8 DBB2     		uxtb	r3, r3
 1926 0cea 1A46     		mov	r2, r3
 1927 0cec 594B     		ldr	r3, .L214+20
 1928 0cee 1A80     		strh	r2, [r3, #0]	@ movhi
 380:../src/mw.c   ****                         if (AccInflightCalibrationArmed) {
 1929              		.loc 1 380 0
 1930 0cf0 584B     		ldr	r3, .L214+20
 1931 0cf2 1B88     		ldrh	r3, [r3, #0]
 1932 0cf4 002B     		cmp	r3, #0
 1933 0cf6 04D0     		beq	.L102
 381:../src/mw.c   ****                             toggleBeep = 2;
 1934              		.loc 1 381 0
 1935 0cf8 574B     		ldr	r3, .L214+24
 1936 0cfa 4FF00202 		mov	r2, #2
 1937 0cfe 1A70     		strb	r2, [r3, #0]
 1938 0d00 03E0     		b	.L100
 1939              	.L102:
 382:../src/mw.c   ****                         } else {
 383:../src/mw.c   ****                             toggleBeep = 3;
 1940              		.loc 1 383 0
 1941 0d02 554B     		ldr	r3, .L214+24
 1942 0d04 4FF00302 		mov	r2, #3
 1943 0d08 1A70     		strb	r2, [r3, #0]
 1944              	.L100:
 384:../src/mw.c   ****                         }
 385:../src/mw.c   ****                     }
 386:../src/mw.c   ****                 }
 387:../src/mw.c   **** 
 388:../src/mw.c   ****                 // Multiple configuration profiles
 389:../src/mw.c   ****                 if (rcSticks == THR_LO + YAW_LO + PIT_CE + ROL_LO)          // ROLL left  -> Profil
 1945              		.loc 1 389 0
 1946 0d0a 4D4B     		ldr	r3, .L214
 1947 0d0c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1948 0d0e 5D2B     		cmp	r3, #93
 1949 0d10 04D1     		bne	.L103
 390:../src/mw.c   ****                     i = 1;
 1950              		.loc 1 390 0
 1951 0d12 4FF00103 		mov	r3, #1
 1952 0d16 87F82530 		strb	r3, [r7, #37]
 1953 0d1a 10E0     		b	.L104
 1954              	.L103:
 391:../src/mw.c   ****                 else if (rcSticks == THR_LO + YAW_LO + PIT_HI + ROL_CE)     // PITCH up   -> Profil
 1955              		.loc 1 391 0
 1956 0d1c 484B     		ldr	r3, .L214
 1957 0d1e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1958 0d20 5B2B     		cmp	r3, #91
 1959 0d22 04D1     		bne	.L105
 392:../src/mw.c   ****                     i = 2;
 1960              		.loc 1 392 0
 1961 0d24 4FF00203 		mov	r3, #2
 1962 0d28 87F82530 		strb	r3, [r7, #37]
 1963 0d2c 07E0     		b	.L104
 1964              	.L105:
 393:../src/mw.c   ****                 else if (rcSticks == THR_LO + YAW_LO + PIT_CE + ROL_HI)     // ROLL right -> Profil
 1965              		.loc 1 393 0
 1966 0d2e 444B     		ldr	r3, .L214
 1967 0d30 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1968 0d32 5E2B     		cmp	r3, #94
 1969 0d34 03D1     		bne	.L104
 394:../src/mw.c   ****                     i = 3;
 1970              		.loc 1 394 0
 1971 0d36 4FF00303 		mov	r3, #3
 1972 0d3a 87F82530 		strb	r3, [r7, #37]
 1973              	.L104:
 395:../src/mw.c   ****                 if (i) {
 1974              		.loc 1 395 0
 1975 0d3e 97F82530 		ldrb	r3, [r7, #37]	@ zero_extendqisi2
 1976 0d42 002B     		cmp	r3, #0
 1977 0d44 16D0     		beq	.L106
 396:../src/mw.c   ****                     mcfg.current_profile = i - 1;
 1978              		.loc 1 396 0
 1979 0d46 97F82530 		ldrb	r3, [r7, #37]
 1980 0d4a 03F1FF33 		add	r3, r3, #-1
 1981 0d4e DAB2     		uxtb	r2, r3
 1982 0d50 424B     		ldr	r3, .L214+28
 1983 0d52 83F8EC22 		strb	r2, [r3, #748]
 397:../src/mw.c   ****                     writeEEPROM(0, false);
 1984              		.loc 1 397 0
 1985 0d56 4FF00000 		mov	r0, #0
 1986 0d5a 4FF00001 		mov	r1, #0
 1987 0d5e FFF7FEFF 		bl	writeEEPROM
 398:../src/mw.c   ****                     blinkLED(2, 40, i);
 1988              		.loc 1 398 0
 1989 0d62 97F82530 		ldrb	r3, [r7, #37]	@ zero_extendqisi2
 1990 0d66 4FF00200 		mov	r0, #2
 1991 0d6a 4FF02801 		mov	r1, #40
 1992 0d6e 1A46     		mov	r2, r3
 1993 0d70 FFF7FEFF 		bl	blinkLED
 1994              	.L106:
 399:../src/mw.c   ****                     // TODO alarmArray[0] = i;
 400:../src/mw.c   ****                 }
 401:../src/mw.c   **** 
 402:../src/mw.c   ****                 // Arm via YAW
 403:../src/mw.c   ****                 if (cfg.activate[BOXARM] == 0 && (rcSticks == THR_LO + YAW_HI + PIT_CE + ROL_CE))
 1995              		.loc 1 403 0
 1996 0d74 3A4B     		ldr	r3, .L214+32
 1997 0d76 1B8F     		ldrh	r3, [r3, #56]
 1998 0d78 002B     		cmp	r3, #0
 1999 0d7a 06D1     		bne	.L107
 2000              		.loc 1 403 0 is_stmt 0 discriminator 1
 2001 0d7c 304B     		ldr	r3, .L214
 2002 0d7e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2003 0d80 6F2B     		cmp	r3, #111
 2004 0d82 02D1     		bne	.L107
 404:../src/mw.c   ****                     mwArm();
 2005              		.loc 1 404 0 is_stmt 1
 2006 0d84 FFF7B4FD 		bl	mwArm
 2007 0d88 20E0     		b	.L108
 2008              	.L107:
 405:../src/mw.c   ****                 // Arm via ROLL
 406:../src/mw.c   ****                 else if (mcfg.retarded_arm && cfg.activate[BOXARM] == 0 && (rcSticks == THR_LO + YA
 2009              		.loc 1 406 0
 2010 0d8a 344B     		ldr	r3, .L214+28
 2011 0d8c 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 2012 0d90 002B     		cmp	r3, #0
 2013 0d92 0AD0     		beq	.L109
 2014              		.loc 1 406 0 is_stmt 0 discriminator 1
 2015 0d94 324B     		ldr	r3, .L214+32
 2016 0d96 1B8F     		ldrh	r3, [r3, #56]
 2017 0d98 002B     		cmp	r3, #0
 2018 0d9a 06D1     		bne	.L109
 2019 0d9c 284B     		ldr	r3, .L214
 2020 0d9e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2021 0da0 7E2B     		cmp	r3, #126
 2022 0da2 02D1     		bne	.L109
 407:../src/mw.c   ****                     mwArm();
 2023              		.loc 1 407 0 is_stmt 1
 2024 0da4 FFF7A4FD 		bl	mwArm
 2025 0da8 10E0     		b	.L108
 2026              	.L109:
 408:../src/mw.c   ****                 // Calibrating Acc
 409:../src/mw.c   ****                 else if (rcSticks == THR_HI + YAW_LO + PIT_LO + ROL_CE)
 2027              		.loc 1 409 0
 2028 0daa 254B     		ldr	r3, .L214
 2029 0dac 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2030 0dae 972B     		cmp	r3, #151
 2031 0db0 04D1     		bne	.L110
 410:../src/mw.c   ****                     calibratingA = 400;
 2032              		.loc 1 410 0
 2033 0db2 2C4B     		ldr	r3, .L214+36
 2034 0db4 4FF4C872 		mov	r2, #400
 2035 0db8 1A80     		strh	r2, [r3, #0]	@ movhi
 2036 0dba 07E0     		b	.L108
 2037              	.L110:
 411:../src/mw.c   ****                 // Calibrating Mag
 412:../src/mw.c   ****                 else if (rcSticks == THR_HI + YAW_HI + PIT_LO + ROL_CE)
 2038              		.loc 1 412 0
 2039 0dbc 204B     		ldr	r3, .L214
 2040 0dbe 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2041 0dc0 A72B     		cmp	r3, #167
 2042 0dc2 03D1     		bne	.L108
 413:../src/mw.c   ****                     f.CALIBRATE_MAG = 1;
 2043              		.loc 1 413 0
 2044 0dc4 284B     		ldr	r3, .L214+40
 2045 0dc6 4FF00102 		mov	r2, #1
 2046 0dca 9A73     		strb	r2, [r3, #14]
 2047              	.L108:
 414:../src/mw.c   ****                 i = 0;
 2048              		.loc 1 414 0
 2049 0dcc 4FF00003 		mov	r3, #0
 2050 0dd0 87F82530 		strb	r3, [r7, #37]
 415:../src/mw.c   ****                 // Acc Trim
 416:../src/mw.c   ****                 if (rcSticks == THR_HI + YAW_CE + PIT_HI + ROL_CE) {
 2051              		.loc 1 416 0
 2052 0dd4 1A4B     		ldr	r3, .L214
 2053 0dd6 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2054 0dd8 BB2B     		cmp	r3, #187
 2055 0dda 0DD1     		bne	.L111
 417:../src/mw.c   ****                     cfg.angleTrim[PITCH] += 2;
 2056              		.loc 1 417 0
 2057 0ddc 204B     		ldr	r3, .L214+32
 2058 0dde 5B8D     		ldrh	r3, [r3, #42]
 2059 0de0 9BB2     		uxth	r3, r3
 2060 0de2 03F10203 		add	r3, r3, #2
 2061 0de6 9BB2     		uxth	r3, r3
 2062 0de8 9AB2     		uxth	r2, r3
 2063 0dea 1D4B     		ldr	r3, .L214+32
 2064 0dec 5A85     		strh	r2, [r3, #42]	@ movhi
 418:../src/mw.c   ****                     i = 1;
 2065              		.loc 1 418 0
 2066 0dee 4FF00103 		mov	r3, #1
 2067 0df2 87F82530 		strb	r3, [r7, #37]
 2068 0df6 4AE0     		b	.L112
 2069              	.L111:
 419:../src/mw.c   ****                 } else if (rcSticks == THR_HI + YAW_CE + PIT_LO + ROL_CE) {
 2070              		.loc 1 419 0
 2071 0df8 114B     		ldr	r3, .L214
 2072 0dfa 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2073 0dfc B72B     		cmp	r3, #183
 2074 0dfe 0DD1     		bne	.L113
 420:../src/mw.c   ****                     cfg.angleTrim[PITCH] -= 2;
 2075              		.loc 1 420 0
 2076 0e00 174B     		ldr	r3, .L214+32
 2077 0e02 5B8D     		ldrh	r3, [r3, #42]
 2078 0e04 9BB2     		uxth	r3, r3
 2079 0e06 A3F10203 		sub	r3, r3, #2
 2080 0e0a 9BB2     		uxth	r3, r3
 2081 0e0c 9AB2     		uxth	r2, r3
 2082 0e0e 144B     		ldr	r3, .L214+32
 2083 0e10 5A85     		strh	r2, [r3, #42]	@ movhi
 421:../src/mw.c   ****                     i = 1;
 2084              		.loc 1 421 0
 2085 0e12 4FF00103 		mov	r3, #1
 2086 0e16 87F82530 		strb	r3, [r7, #37]
 2087 0e1a 38E0     		b	.L112
 2088              	.L113:
 422:../src/mw.c   ****                 } else if (rcSticks == THR_HI + YAW_CE + PIT_CE + ROL_HI) {
 2089              		.loc 1 422 0
 2090 0e1c 084B     		ldr	r3, .L214
 2091 0e1e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2092 0e20 BE2B     		cmp	r3, #190
 2093 0e22 23D1     		bne	.L114
 423:../src/mw.c   ****                     cfg.angleTrim[ROLL] += 2;
 2094              		.loc 1 423 0
 2095 0e24 0E4B     		ldr	r3, .L214+32
 2096 0e26 1B8D     		ldrh	r3, [r3, #40]
 2097 0e28 9BB2     		uxth	r3, r3
 2098 0e2a 03F10203 		add	r3, r3, #2
 2099 0e2e 9BB2     		uxth	r3, r3
 2100 0e30 9AB2     		uxth	r2, r3
 2101 0e32 0B4B     		ldr	r3, .L214+32
 2102 0e34 1A85     		strh	r2, [r3, #40]	@ movhi
 424:../src/mw.c   ****                     i = 1;
 2103              		.loc 1 424 0
 2104 0e36 4FF00103 		mov	r3, #1
 2105 0e3a 87F82530 		strb	r3, [r7, #37]
 2106 0e3e 26E0     		b	.L112
 2107              	.L215:
 2108              		.align	2
 2109              	.L214:
 2110 0e40 34000000 		.word	rcSticks.9146
 2111 0e44 00000000 		.word	calibratingG
 2112 0e48 00000000 		.word	calibratingB
 2113 0e4c 00000000 		.word	AccInflightCalibrationMeasurementDone
 2114 0e50 00000000 		.word	AccInflightCalibrationSavetoEEProm
 2115 0e54 00000000 		.word	AccInflightCalibrationArmed
 2116 0e58 00000000 		.word	toggleBeep
 2117 0e5c 00000000 		.word	mcfg
 2118 0e60 00000000 		.word	cfg
 2119 0e64 00000000 		.word	calibratingA
 2120 0e68 00000000 		.word	f
 2121              	.L114:
 425:../src/mw.c   ****                 } else if (rcSticks == THR_HI + YAW_CE + PIT_CE + ROL_LO) {
 2122              		.loc 1 425 0
 2123 0e6c 914B     		ldr	r3, .L216
 2124 0e6e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2125 0e70 BD2B     		cmp	r3, #189
 2126 0e72 0CD1     		bne	.L112
 426:../src/mw.c   ****                     cfg.angleTrim[ROLL] -= 2;
 2127              		.loc 1 426 0
 2128 0e74 904B     		ldr	r3, .L216+4
 2129 0e76 1B8D     		ldrh	r3, [r3, #40]
 2130 0e78 9BB2     		uxth	r3, r3
 2131 0e7a A3F10203 		sub	r3, r3, #2
 2132 0e7e 9BB2     		uxth	r3, r3
 2133 0e80 9AB2     		uxth	r2, r3
 2134 0e82 8D4B     		ldr	r3, .L216+4
 2135 0e84 1A85     		strh	r2, [r3, #40]	@ movhi
 427:../src/mw.c   ****                     i = 1;
 2136              		.loc 1 427 0
 2137 0e86 4FF00103 		mov	r3, #1
 2138 0e8a 87F82530 		strb	r3, [r7, #37]
 2139              	.L112:
 428:../src/mw.c   ****                 }
 429:../src/mw.c   ****                 if (i) {
 2140              		.loc 1 429 0
 2141 0e8e 97F82530 		ldrb	r3, [r7, #37]	@ zero_extendqisi2
 2142 0e92 002B     		cmp	r3, #0
 2143 0e94 09D0     		beq	.L95
 430:../src/mw.c   ****                     writeEEPROM(1, false);
 2144              		.loc 1 430 0
 2145 0e96 4FF00100 		mov	r0, #1
 2146 0e9a 4FF00001 		mov	r1, #0
 2147 0e9e FFF7FEFF 		bl	writeEEPROM
 431:../src/mw.c   ****                     rcDelayCommand = 0; // allow autorepetition
 2148              		.loc 1 431 0
 2149 0ea2 864B     		ldr	r3, .L216+8
 2150 0ea4 4FF00002 		mov	r2, #0
 2151 0ea8 1A70     		strb	r2, [r3, #0]
 2152              	.L95:
 432:../src/mw.c   ****                 }
 433:../src/mw.c   ****             }
 434:../src/mw.c   ****         }
 435:../src/mw.c   **** 
 436:../src/mw.c   ****         if (feature(FEATURE_INFLIGHT_ACC_CAL)) {
 2153              		.loc 1 436 0
 2154 0eaa 4FF00400 		mov	r0, #4
 2155 0eae FFF7FEFF 		bl	feature
 2156 0eb2 0346     		mov	r3, r0
 2157 0eb4 002B     		cmp	r3, #0
 2158 0eb6 3CD0     		beq	.L115
 437:../src/mw.c   ****             if (AccInflightCalibrationArmed && f.ARMED && rcData[THROTTLE] > mcfg.mincheck && !rcOp
 2159              		.loc 1 437 0
 2160 0eb8 814B     		ldr	r3, .L216+12
 2161 0eba 1B88     		ldrh	r3, [r3, #0]
 2162 0ebc 002B     		cmp	r3, #0
 2163 0ebe 17D0     		beq	.L116
 2164              		.loc 1 437 0 is_stmt 0 discriminator 1
 2165 0ec0 804B     		ldr	r3, .L216+16
 2166 0ec2 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2167 0ec4 002B     		cmp	r3, #0
 2168 0ec6 13D0     		beq	.L116
 2169 0ec8 7F4B     		ldr	r3, .L216+20
 2170 0eca DB88     		ldrh	r3, [r3, #6]
 2171 0ecc 1AB2     		sxth	r2, r3
 2172 0ece 7F4B     		ldr	r3, .L216+24
 2173 0ed0 B3F80A31 		ldrh	r3, [r3, #266]
 2174 0ed4 9A42     		cmp	r2, r3
 2175 0ed6 0BDD     		ble	.L116
 2176 0ed8 7D4B     		ldr	r3, .L216+28
 2177 0eda 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2178 0edc 002B     		cmp	r3, #0
 2179 0ede 07D1     		bne	.L116
 438:../src/mw.c   ****                 InflightcalibratingA = 50;
 2180              		.loc 1 438 0 is_stmt 1
 2181 0ee0 7C4B     		ldr	r3, .L216+32
 2182 0ee2 4FF03202 		mov	r2, #50
 2183 0ee6 1A80     		strh	r2, [r3, #0]	@ movhi
 439:../src/mw.c   ****                 AccInflightCalibrationArmed = 0;
 2184              		.loc 1 439 0
 2185 0ee8 754B     		ldr	r3, .L216+12
 2186 0eea 4FF00002 		mov	r2, #0
 2187 0eee 1A80     		strh	r2, [r3, #0]	@ movhi
 2188              	.L116:
 440:../src/mw.c   ****             }
 441:../src/mw.c   ****             if (rcOptions[BOXCALIB]) {      // Use the Calib Option to activate : Calib = TRUE Meau
 2189              		.loc 1 441 0
 2190 0ef0 774B     		ldr	r3, .L216+28
 2191 0ef2 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 2192 0ef4 002B     		cmp	r3, #0
 2193 0ef6 0CD0     		beq	.L117
 442:../src/mw.c   ****                 if (!AccInflightCalibrationActive && !AccInflightCalibrationMeasurementDone)
 2194              		.loc 1 442 0
 2195 0ef8 774B     		ldr	r3, .L216+36
 2196 0efa 1B88     		ldrh	r3, [r3, #0]
 2197 0efc 002B     		cmp	r3, #0
 2198 0efe 18D1     		bne	.L115
 2199              		.loc 1 442 0 is_stmt 0 discriminator 1
 2200 0f00 764B     		ldr	r3, .L216+40
 2201 0f02 1B88     		ldrh	r3, [r3, #0]
 2202 0f04 002B     		cmp	r3, #0
 2203 0f06 14D1     		bne	.L115
 443:../src/mw.c   ****                     InflightcalibratingA = 50;
 2204              		.loc 1 443 0 is_stmt 1
 2205 0f08 724B     		ldr	r3, .L216+32
 2206 0f0a 4FF03202 		mov	r2, #50
 2207 0f0e 1A80     		strh	r2, [r3, #0]	@ movhi
 2208 0f10 0FE0     		b	.L115
 2209              	.L117:
 444:../src/mw.c   ****             } else if (AccInflightCalibrationMeasurementDone && !f.ARMED) {
 2210              		.loc 1 444 0
 2211 0f12 724B     		ldr	r3, .L216+40
 2212 0f14 1B88     		ldrh	r3, [r3, #0]
 2213 0f16 002B     		cmp	r3, #0
 2214 0f18 0BD0     		beq	.L115
 2215              		.loc 1 444 0 is_stmt 0 discriminator 1
 2216 0f1a 6A4B     		ldr	r3, .L216+16
 2217 0f1c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2218 0f1e 002B     		cmp	r3, #0
 2219 0f20 07D1     		bne	.L115
 445:../src/mw.c   ****                 AccInflightCalibrationMeasurementDone = 0;
 2220              		.loc 1 445 0 is_stmt 1
 2221 0f22 6E4B     		ldr	r3, .L216+40
 2222 0f24 4FF00002 		mov	r2, #0
 2223 0f28 1A80     		strh	r2, [r3, #0]	@ movhi
 446:../src/mw.c   ****                 AccInflightCalibrationSavetoEEProm = 1;
 2224              		.loc 1 446 0
 2225 0f2a 6D4B     		ldr	r3, .L216+44
 2226 0f2c 4FF00102 		mov	r2, #1
 2227 0f30 1A80     		strh	r2, [r3, #0]	@ movhi
 2228              	.L115:
 447:../src/mw.c   ****             }
 448:../src/mw.c   ****         }
 449:../src/mw.c   **** 
 450:../src/mw.c   ****         // Check AUX switches
 451:../src/mw.c   ****         for (i = 0; i < 4; i++)
 2229              		.loc 1 451 0
 2230 0f32 4FF00003 		mov	r3, #0
 2231 0f36 87F82530 		strb	r3, [r7, #37]
 2232 0f3a 6BE0     		b	.L118
 2233              	.L121:
 452:../src/mw.c   ****             auxState |= (rcData[AUX1 + i] < 1300) << (3 * i) | (1300 < rcData[AUX1 + i] && rcData[A
 2234              		.loc 1 452 0
 2235 0f3c 97F82530 		ldrb	r3, [r7, #37]	@ zero_extendqisi2
 2236 0f40 03F10402 		add	r2, r3, #4
 2237 0f44 604B     		ldr	r3, .L216+20
 2238 0f46 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 2239 0f4a 1AB2     		sxth	r2, r3
 2240 0f4c 40F21353 		movw	r3, #1299
 2241 0f50 9A42     		cmp	r2, r3
 2242 0f52 CCBF     		ite	gt
 2243 0f54 0023     		movgt	r3, #0
 2244 0f56 0123     		movle	r3, #1
 2245 0f58 DBB2     		uxtb	r3, r3
 2246 0f5a 1946     		mov	r1, r3
 2247 0f5c 97F82520 		ldrb	r2, [r7, #37]	@ zero_extendqisi2
 2248 0f60 1346     		mov	r3, r2
 2249 0f62 4FEA4303 		lsl	r3, r3, #1
 2250 0f66 9B18     		adds	r3, r3, r2
 2251 0f68 01FA03F3 		lsl	r3, r1, r3
 2252 0f6c 98B2     		uxth	r0, r3
 2253 0f6e 97F82530 		ldrb	r3, [r7, #37]	@ zero_extendqisi2
 2254 0f72 03F10402 		add	r2, r3, #4
 2255 0f76 544B     		ldr	r3, .L216+20
 2256 0f78 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 2257 0f7c 1AB2     		sxth	r2, r3
 2258 0f7e 40F21453 		movw	r3, #1300
 2259 0f82 9A42     		cmp	r2, r3
 2260 0f84 0EDD     		ble	.L119
 2261              		.loc 1 452 0 is_stmt 0 discriminator 1
 2262 0f86 97F82530 		ldrb	r3, [r7, #37]	@ zero_extendqisi2
 2263 0f8a 03F10402 		add	r2, r3, #4
 2264 0f8e 4E4B     		ldr	r3, .L216+20
 2265 0f90 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 2266 0f94 1AB2     		sxth	r2, r3
 2267 0f96 40F2A363 		movw	r3, #1699
 2268 0f9a 9A42     		cmp	r2, r3
 2269 0f9c 02DC     		bgt	.L119
 2270              		.loc 1 452 0 discriminator 3
 2271 0f9e 4FF00102 		mov	r2, #1
 2272 0fa2 01E0     		b	.L120
 2273              	.L119:
 2274              		.loc 1 452 0 discriminator 2
 2275 0fa4 4FF00002 		mov	r2, #0
 2276              	.L120:
 2277              		.loc 1 452 0 discriminator 4
 2278 0fa8 97F82510 		ldrb	r1, [r7, #37]	@ zero_extendqisi2
 2279 0fac 0B46     		mov	r3, r1
 2280 0fae 4FEA4303 		lsl	r3, r3, #1
 2281 0fb2 5B18     		adds	r3, r3, r1
 2282 0fb4 03F10103 		add	r3, r3, #1
 2283 0fb8 02FA03F3 		lsl	r3, r2, r3
 2284 0fbc 9BB2     		uxth	r3, r3
 2285 0fbe 0246     		mov	r2, r0	@ movhi
 2286 0fc0 1343     		orrs	r3, r3, r2
 2287 0fc2 99B2     		uxth	r1, r3
 2288 0fc4 97F82530 		ldrb	r3, [r7, #37]	@ zero_extendqisi2
 2289 0fc8 03F10402 		add	r2, r3, #4
 2290 0fcc 3E4B     		ldr	r3, .L216+20
 2291 0fce 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 2292 0fd2 1AB2     		sxth	r2, r3
 2293 0fd4 40F2A463 		movw	r3, #1700
 2294 0fd8 9A42     		cmp	r2, r3
 2295 0fda D4BF     		ite	le
 2296 0fdc 0023     		movle	r3, #0
 2297 0fde 0123     		movgt	r3, #1
 2298 0fe0 DBB2     		uxtb	r3, r3
 2299 0fe2 1846     		mov	r0, r3
 2300 0fe4 97F82520 		ldrb	r2, [r7, #37]	@ zero_extendqisi2
 2301 0fe8 1346     		mov	r3, r2
 2302 0fea 4FEA4303 		lsl	r3, r3, #1
 2303 0fee 9B18     		adds	r3, r3, r2
 2304 0ff0 03F10203 		add	r3, r3, #2
 2305 0ff4 00FA03F3 		lsl	r3, r0, r3
 2306 0ff8 9BB2     		uxth	r3, r3
 2307 0ffa 0A46     		mov	r2, r1	@ movhi
 2308 0ffc 1343     		orrs	r3, r3, r2
 2309 0ffe 9AB2     		uxth	r2, r3
 2310 1000 FB8A     		ldrh	r3, [r7, #22]
 2311 1002 1343     		orrs	r3, r3, r2
 2312 1004 9BB2     		uxth	r3, r3
 2313 1006 FB82     		strh	r3, [r7, #22]	@ movhi
 451:../src/mw.c   ****         for (i = 0; i < 4; i++)
 2314              		.loc 1 451 0 is_stmt 1 discriminator 4
 2315 1008 97F82530 		ldrb	r3, [r7, #37]
 2316 100c 03F10103 		add	r3, r3, #1
 2317 1010 87F82530 		strb	r3, [r7, #37]
 2318              	.L118:
 451:../src/mw.c   ****         for (i = 0; i < 4; i++)
 2319              		.loc 1 451 0 is_stmt 0 discriminator 1
 2320 1014 97F82530 		ldrb	r3, [r7, #37]	@ zero_extendqisi2
 2321 1018 032B     		cmp	r3, #3
 2322 101a 8FD9     		bls	.L121
 453:../src/mw.c   ****         for (i = 0; i < CHECKBOXITEMS; i++)
 2323              		.loc 1 453 0 is_stmt 1
 2324 101c 4FF00003 		mov	r3, #0
 2325 1020 87F82530 		strb	r3, [r7, #37]
 2326 1024 19E0     		b	.L122
 2327              	.L123:
 454:../src/mw.c   ****             rcOptions[i] = (auxState & cfg.activate[i]) > 0;
 2328              		.loc 1 454 0 discriminator 2
 2329 1026 97F82530 		ldrb	r3, [r7, #37]	@ zero_extendqisi2
 2330 102a 97F82510 		ldrb	r1, [r7, #37]	@ zero_extendqisi2
 2331 102e 224A     		ldr	r2, .L216+4
 2332 1030 01F11C01 		add	r1, r1, #28
 2333 1034 32F81110 		ldrh	r1, [r2, r1, lsl #1]
 2334 1038 FA8A     		ldrh	r2, [r7, #22]	@ movhi
 2335 103a 0A40     		ands	r2, r2, r1
 2336 103c 92B2     		uxth	r2, r2
 2337 103e 002A     		cmp	r2, #0
 2338 1040 0CBF     		ite	eq
 2339 1042 0022     		moveq	r2, #0
 2340 1044 0122     		movne	r2, #1
 2341 1046 D2B2     		uxtb	r2, r2
 2342 1048 1146     		mov	r1, r2
 2343 104a 214A     		ldr	r2, .L216+28
 2344 104c D154     		strb	r1, [r2, r3]
 453:../src/mw.c   ****         for (i = 0; i < CHECKBOXITEMS; i++)
 2345              		.loc 1 453 0 discriminator 2
 2346 104e 97F82530 		ldrb	r3, [r7, #37]
 2347 1052 03F10103 		add	r3, r3, #1
 2348 1056 87F82530 		strb	r3, [r7, #37]
 2349              	.L122:
 453:../src/mw.c   ****         for (i = 0; i < CHECKBOXITEMS; i++)
 2350              		.loc 1 453 0 is_stmt 0 discriminator 1
 2351 105a 97F82530 		ldrb	r3, [r7, #37]	@ zero_extendqisi2
 2352 105e 132B     		cmp	r3, #19
 2353 1060 E1D9     		bls	.L123
 455:../src/mw.c   **** 
 456:../src/mw.c   ****         // note: if FAILSAFE is disable, failsafeCnt > 5 * FAILSAVE_DELAY is always false
 457:../src/mw.c   ****         if ((rcOptions[BOXANGLE] || (failsafeCnt > 5 * cfg.failsafe_delay)) && (sensors(SENSOR_ACC)
 2354              		.loc 1 457 0 is_stmt 1
 2355 1062 1B4B     		ldr	r3, .L216+28
 2356 1064 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2357 1066 002B     		cmp	r3, #0
 2358 1068 0CD1     		bne	.L124
 2359              		.loc 1 457 0 is_stmt 0 discriminator 2
 2360 106a 1E4B     		ldr	r3, .L216+48
 2361 106c 1B88     		ldrh	r3, [r3, #0]
 2362 106e 19B2     		sxth	r1, r3
 2363 1070 114B     		ldr	r3, .L216+4
 2364 1072 93F86430 		ldrb	r3, [r3, #100]	@ zero_extendqisi2
 2365 1076 1A46     		mov	r2, r3
 2366 1078 1346     		mov	r3, r2
 2367 107a 4FEA8303 		lsl	r3, r3, #2
 2368 107e 9B18     		adds	r3, r3, r2
 2369 1080 9942     		cmp	r1, r3
 2370 1082 33DD     		ble	.L125
 2371              	.L124:
 2372              		.loc 1 457 0 discriminator 1
 2373 1084 4FF00100 		mov	r0, #1
 2374 1088 FFF7FEFF 		bl	sensors
 2375 108c 0346     		mov	r3, r0
 2376 108e 002B     		cmp	r3, #0
 2377 1090 2CD0     		beq	.L125
 458:../src/mw.c   ****             // bumpless transfer to Level mode
 459:../src/mw.c   ****             if (!f.ANGLE_MODE) {
 2378              		.loc 1 459 0 is_stmt 1
 2379 1092 0C4B     		ldr	r3, .L216+16
 2380 1094 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 2381 1096 002B     		cmp	r3, #0
 2382 1098 2CD1     		bne	.L127
 460:../src/mw.c   ****                 errorAngleI[ROLL] = 0;
 2383              		.loc 1 460 0
 2384 109a 134B     		ldr	r3, .L216+52
 2385 109c 4FF00002 		mov	r2, #0
 2386 10a0 1A80     		strh	r2, [r3, #0]	@ movhi
 461:../src/mw.c   ****                 errorAngleI[PITCH] = 0;
 2387              		.loc 1 461 0
 2388 10a2 114B     		ldr	r3, .L216+52
 2389 10a4 4FF00002 		mov	r2, #0
 2390 10a8 5A80     		strh	r2, [r3, #2]	@ movhi
 462:../src/mw.c   ****                 f.ANGLE_MODE = 1;
 2391              		.loc 1 462 0
 2392 10aa 064B     		ldr	r3, .L216+16
 2393 10ac 4FF00102 		mov	r2, #1
 2394 10b0 DA70     		strb	r2, [r3, #3]
 459:../src/mw.c   ****             if (!f.ANGLE_MODE) {
 2395              		.loc 1 459 0
 2396 10b2 1FE0     		b	.L127
 2397              	.L217:
 2398              		.align	2
 2399              	.L216:
 2400 10b4 34000000 		.word	rcSticks.9146
 2401 10b8 00000000 		.word	cfg
 2402 10bc 35000000 		.word	rcDelayCommand.9145
 2403 10c0 00000000 		.word	AccInflightCalibrationArmed
 2404 10c4 00000000 		.word	f
 2405 10c8 00000000 		.word	rcData
 2406 10cc 00000000 		.word	mcfg
 2407 10d0 00000000 		.word	rcOptions
 2408 10d4 00000000 		.word	InflightcalibratingA
 2409 10d8 00000000 		.word	AccInflightCalibrationActive
 2410 10dc 00000000 		.word	AccInflightCalibrationMeasurementDone
 2411 10e0 00000000 		.word	AccInflightCalibrationSavetoEEProm
 2412 10e4 00000000 		.word	failsafeCnt
 2413 10e8 40000000 		.word	errorAngleI.9160
 2414              	.L125:
 463:../src/mw.c   ****             }
 464:../src/mw.c   ****         } else {
 465:../src/mw.c   ****             f.ANGLE_MODE = 0;        // failsave support
 2415              		.loc 1 465 0
 2416 10ec 954B     		ldr	r3, .L218
 2417 10ee 4FF00002 		mov	r2, #0
 2418 10f2 DA70     		strb	r2, [r3, #3]
 2419              	.L127:
 466:../src/mw.c   ****         }
 467:../src/mw.c   **** 
 468:../src/mw.c   ****         if (rcOptions[BOXHORIZON]) {
 2420              		.loc 1 468 0
 2421 10f4 944B     		ldr	r3, .L218+4
 2422 10f6 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 2423 10f8 002B     		cmp	r3, #0
 2424 10fa 14D0     		beq	.L128
 469:../src/mw.c   ****             f.ANGLE_MODE = 0;
 2425              		.loc 1 469 0
 2426 10fc 914B     		ldr	r3, .L218
 2427 10fe 4FF00002 		mov	r2, #0
 2428 1102 DA70     		strb	r2, [r3, #3]
 470:../src/mw.c   ****             if (!f.HORIZON_MODE) {
 2429              		.loc 1 470 0
 2430 1104 8F4B     		ldr	r3, .L218
 2431 1106 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2432 1108 002B     		cmp	r3, #0
 2433 110a 10D1     		bne	.L129
 471:../src/mw.c   ****                 errorAngleI[ROLL] = 0;
 2434              		.loc 1 471 0
 2435 110c 8F4B     		ldr	r3, .L218+8
 2436 110e 4FF00002 		mov	r2, #0
 2437 1112 1A80     		strh	r2, [r3, #0]	@ movhi
 472:../src/mw.c   ****                 errorAngleI[PITCH] = 0;
 2438              		.loc 1 472 0
 2439 1114 8D4B     		ldr	r3, .L218+8
 2440 1116 4FF00002 		mov	r2, #0
 2441 111a 5A80     		strh	r2, [r3, #2]	@ movhi
 473:../src/mw.c   ****                 f.HORIZON_MODE = 1;
 2442              		.loc 1 473 0
 2443 111c 894B     		ldr	r3, .L218
 2444 111e 4FF00102 		mov	r2, #1
 2445 1122 1A71     		strb	r2, [r3, #4]
 2446 1124 03E0     		b	.L129
 2447              	.L128:
 474:../src/mw.c   ****             }
 475:../src/mw.c   ****         } else {
 476:../src/mw.c   ****             f.HORIZON_MODE = 0;
 2448              		.loc 1 476 0
 2449 1126 874B     		ldr	r3, .L218
 2450 1128 4FF00002 		mov	r2, #0
 2451 112c 1A71     		strb	r2, [r3, #4]
 2452              	.L129:
 477:../src/mw.c   ****         }
 478:../src/mw.c   **** 
 479:../src/mw.c   ****         if ((rcOptions[BOXARM]) == 0)
 2453              		.loc 1 479 0
 2454 112e 864B     		ldr	r3, .L218+4
 2455 1130 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2456 1132 002B     		cmp	r3, #0
 2457 1134 03D1     		bne	.L130
 480:../src/mw.c   ****             f.OK_TO_ARM = 1;
 2458              		.loc 1 480 0
 2459 1136 834B     		ldr	r3, .L218
 2460 1138 4FF00102 		mov	r2, #1
 2461 113c 1A70     		strb	r2, [r3, #0]
 2462              	.L130:
 481:../src/mw.c   ****         if (f.ANGLE_MODE || f.HORIZON_MODE) {
 2463              		.loc 1 481 0
 2464 113e 814B     		ldr	r3, .L218
 2465 1140 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 2466 1142 002B     		cmp	r3, #0
 2467 1144 03D1     		bne	.L131
 2468              		.loc 1 481 0 is_stmt 0 discriminator 1
 2469 1146 7F4B     		ldr	r3, .L218
 2470 1148 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2471 114a 002B     		cmp	r3, #0
 2472 114c 04D0     		beq	.L132
 2473              	.L131:
 482:../src/mw.c   ****             LED1_ON;
 2474              		.loc 1 482 0 is_stmt 1
 2475 114e 804B     		ldr	r3, .L218+12
 2476 1150 4FF01002 		mov	r2, #16
 2477 1154 5A61     		str	r2, [r3, #20]
 2478 1156 03E0     		b	.L133
 2479              	.L132:
 483:../src/mw.c   ****         } else {
 484:../src/mw.c   ****             LED1_OFF;
 2480              		.loc 1 484 0
 2481 1158 7D4B     		ldr	r3, .L218+12
 2482 115a 4FF01002 		mov	r2, #16
 2483 115e 1A61     		str	r2, [r3, #16]
 2484              	.L133:
 485:../src/mw.c   ****         }
 486:../src/mw.c   **** 
 487:../src/mw.c   **** #ifdef BARO
 488:../src/mw.c   ****         if (sensors(SENSOR_BARO)) {
 2485              		.loc 1 488 0
 2486 1160 4FF00200 		mov	r0, #2
 2487 1164 FFF7FEFF 		bl	sensors
 2488 1168 0346     		mov	r3, r0
 2489 116a 002B     		cmp	r3, #0
 2490 116c 38D0     		beq	.L134
 489:../src/mw.c   ****             // Baro alt hold activate
 490:../src/mw.c   ****             if (rcOptions[BOXBARO]) {
 2491              		.loc 1 490 0
 2492 116e 764B     		ldr	r3, .L218+4
 2493 1170 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 2494 1172 002B     		cmp	r3, #0
 2495 1174 18D0     		beq	.L135
 491:../src/mw.c   ****                 if (!f.BARO_MODE) {
 2496              		.loc 1 491 0
 2497 1176 734B     		ldr	r3, .L218
 2498 1178 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 2499 117a 002B     		cmp	r3, #0
 2500 117c 18D1     		bne	.L136
 492:../src/mw.c   ****                     f.BARO_MODE = 1;
 2501              		.loc 1 492 0
 2502 117e 714B     		ldr	r3, .L218
 2503 1180 4FF00102 		mov	r2, #1
 2504 1184 9A71     		strb	r2, [r3, #6]
 493:../src/mw.c   ****                     AltHold = EstAlt;
 2505              		.loc 1 493 0
 2506 1186 734B     		ldr	r3, .L218+16
 2507 1188 1A68     		ldr	r2, [r3, #0]
 2508 118a 734B     		ldr	r3, .L218+20
 2509 118c 1A60     		str	r2, [r3, #0]
 494:../src/mw.c   ****                     initialThrottleHold = rcCommand[THROTTLE];
 2510              		.loc 1 494 0
 2511 118e 734B     		ldr	r3, .L218+24
 2512 1190 DA88     		ldrh	r2, [r3, #6]
 2513 1192 734B     		ldr	r3, .L218+28
 2514 1194 1A80     		strh	r2, [r3, #0]	@ movhi
 495:../src/mw.c   ****                     errorAltitudeI = 0;
 2515              		.loc 1 495 0
 2516 1196 734B     		ldr	r3, .L218+32
 2517 1198 4FF00002 		mov	r2, #0
 2518 119c 1A80     		strh	r2, [r3, #0]	@ movhi
 496:../src/mw.c   ****                     BaroPID = 0;
 2519              		.loc 1 496 0
 2520 119e 724B     		ldr	r3, .L218+36
 2521 11a0 4FF00002 		mov	r2, #0
 2522 11a4 1A80     		strh	r2, [r3, #0]	@ movhi
 2523 11a6 03E0     		b	.L136
 2524              	.L135:
 497:../src/mw.c   ****                 }
 498:../src/mw.c   ****             } else {
 499:../src/mw.c   ****                 f.BARO_MODE = 0;
 2525              		.loc 1 499 0
 2526 11a8 664B     		ldr	r3, .L218
 2527 11aa 4FF00002 		mov	r2, #0
 2528 11ae 9A71     		strb	r2, [r3, #6]
 2529              	.L136:
 500:../src/mw.c   ****             }
 501:../src/mw.c   ****             // Vario signalling activate
 502:../src/mw.c   ****             if (feature(FEATURE_VARIO)) {
 2530              		.loc 1 502 0
 2531 11b0 4FF40050 		mov	r0, #8192
 2532 11b4 FFF7FEFF 		bl	feature
 2533 11b8 0346     		mov	r3, r0
 2534 11ba 002B     		cmp	r3, #0
 2535 11bc 10D0     		beq	.L134
 503:../src/mw.c   ****                 if (rcOptions[BOXVARIO]) {
 2536              		.loc 1 503 0
 2537 11be 624B     		ldr	r3, .L218+4
 2538 11c0 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2539 11c2 002B     		cmp	r3, #0
 2540 11c4 08D0     		beq	.L137
 504:../src/mw.c   ****                     if (!f.VARIO_MODE) {
 2541              		.loc 1 504 0
 2542 11c6 5F4B     		ldr	r3, .L218
 2543 11c8 DB7B     		ldrb	r3, [r3, #15]	@ zero_extendqisi2
 2544 11ca 002B     		cmp	r3, #0
 2545 11cc 08D1     		bne	.L134
 505:../src/mw.c   ****                         f.VARIO_MODE = 1;
 2546              		.loc 1 505 0
 2547 11ce 5D4B     		ldr	r3, .L218
 2548 11d0 4FF00102 		mov	r2, #1
 2549 11d4 DA73     		strb	r2, [r3, #15]
 2550 11d6 03E0     		b	.L134
 2551              	.L137:
 506:../src/mw.c   ****                     }
 507:../src/mw.c   ****                 } else {
 508:../src/mw.c   ****                     f.VARIO_MODE = 0;
 2552              		.loc 1 508 0
 2553 11d8 5A4B     		ldr	r3, .L218
 2554 11da 4FF00002 		mov	r2, #0
 2555 11de DA73     		strb	r2, [r3, #15]
 2556              	.L134:
 509:../src/mw.c   ****                 }
 510:../src/mw.c   ****             }
 511:../src/mw.c   ****         }
 512:../src/mw.c   **** #endif
 513:../src/mw.c   **** 
 514:../src/mw.c   **** #ifdef  MAG
 515:../src/mw.c   ****         if (sensors(SENSOR_MAG)) {
 2557              		.loc 1 515 0
 2558 11e0 4FF00400 		mov	r0, #4
 2559 11e4 FFF7FEFF 		bl	sensors
 2560 11e8 0346     		mov	r3, r0
 2561 11ea 002B     		cmp	r3, #0
 2562 11ec 2DD0     		beq	.L138
 516:../src/mw.c   ****             if (rcOptions[BOXMAG]) {
 2563              		.loc 1 516 0
 2564 11ee 564B     		ldr	r3, .L218+4
 2565 11f0 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 2566 11f2 002B     		cmp	r3, #0
 2567 11f4 0CD0     		beq	.L139
 517:../src/mw.c   ****                 if (!f.MAG_MODE) {
 2568              		.loc 1 517 0
 2569 11f6 534B     		ldr	r3, .L218
 2570 11f8 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 2571 11fa 002B     		cmp	r3, #0
 2572 11fc 0CD1     		bne	.L140
 518:../src/mw.c   ****                     f.MAG_MODE = 1;
 2573              		.loc 1 518 0
 2574 11fe 514B     		ldr	r3, .L218
 2575 1200 4FF00102 		mov	r2, #1
 2576 1204 5A71     		strb	r2, [r3, #5]
 519:../src/mw.c   ****                     magHold = heading;
 2577              		.loc 1 519 0
 2578 1206 594B     		ldr	r3, .L218+40
 2579 1208 1A88     		ldrh	r2, [r3, #0]
 2580 120a 594B     		ldr	r3, .L218+44
 2581 120c 1A80     		strh	r2, [r3, #0]	@ movhi
 2582 120e 03E0     		b	.L140
 2583              	.L139:
 520:../src/mw.c   ****                 }
 521:../src/mw.c   ****             } else {
 522:../src/mw.c   ****                 f.MAG_MODE = 0;
 2584              		.loc 1 522 0
 2585 1210 4C4B     		ldr	r3, .L218
 2586 1212 4FF00002 		mov	r2, #0
 2587 1216 5A71     		strb	r2, [r3, #5]
 2588              	.L140:
 523:../src/mw.c   ****             }
 524:../src/mw.c   ****             if (rcOptions[BOXHEADFREE]) {
 2589              		.loc 1 524 0
 2590 1218 4B4B     		ldr	r3, .L218+4
 2591 121a 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 2592 121c 002B     		cmp	r3, #0
 2593 121e 08D0     		beq	.L141
 525:../src/mw.c   ****                 if (!f.HEADFREE_MODE) {
 2594              		.loc 1 525 0
 2595 1220 484B     		ldr	r3, .L218
 2596 1222 5B7A     		ldrb	r3, [r3, #9]	@ zero_extendqisi2
 2597 1224 002B     		cmp	r3, #0
 2598 1226 08D1     		bne	.L142
 526:../src/mw.c   ****                     f.HEADFREE_MODE = 1;
 2599              		.loc 1 526 0
 2600 1228 464B     		ldr	r3, .L218
 2601 122a 4FF00102 		mov	r2, #1
 2602 122e 5A72     		strb	r2, [r3, #9]
 2603 1230 03E0     		b	.L142
 2604              	.L141:
 527:../src/mw.c   ****                 }
 528:../src/mw.c   ****             } else {
 529:../src/mw.c   ****                 f.HEADFREE_MODE = 0;
 2605              		.loc 1 529 0
 2606 1232 444B     		ldr	r3, .L218
 2607 1234 4FF00002 		mov	r2, #0
 2608 1238 5A72     		strb	r2, [r3, #9]
 2609              	.L142:
 530:../src/mw.c   ****             }
 531:../src/mw.c   ****             if (rcOptions[BOXHEADADJ]) {
 2610              		.loc 1 531 0
 2611 123a 434B     		ldr	r3, .L218+4
 2612 123c DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 2613 123e 002B     		cmp	r3, #0
 2614 1240 03D0     		beq	.L138
 532:../src/mw.c   ****                 headFreeModeHold = heading; // acquire new heading
 2615              		.loc 1 532 0
 2616 1242 4A4B     		ldr	r3, .L218+40
 2617 1244 1A88     		ldrh	r2, [r3, #0]
 2618 1246 4B4B     		ldr	r3, .L218+48
 2619 1248 1A80     		strh	r2, [r3, #0]	@ movhi
 2620              	.L138:
 533:../src/mw.c   ****             }
 534:../src/mw.c   ****         }
 535:../src/mw.c   **** #endif
 536:../src/mw.c   **** 
 537:../src/mw.c   ****         if (sensors(SENSOR_GPS)) {
 2621              		.loc 1 537 0
 2622 124a 4FF01000 		mov	r0, #16
 2623 124e FFF7FEFF 		bl	sensors
 2624 1252 0346     		mov	r3, r0
 2625 1254 002B     		cmp	r3, #0
 2626 1256 00F0B080 		beq	.L143
 538:../src/mw.c   ****             if (f.GPS_FIX && GPS_numSat >= 5) {
 2627              		.loc 1 538 0
 2628 125a 3A4B     		ldr	r3, .L218
 2629 125c DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 2630 125e 002B     		cmp	r3, #0
 2631 1260 00F09D80 		beq	.L144
 2632              		.loc 1 538 0 is_stmt 0 discriminator 1
 2633 1264 444B     		ldr	r3, .L218+52
 2634 1266 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2635 1268 042B     		cmp	r3, #4
 2636 126a 40F29880 		bls	.L144
 539:../src/mw.c   ****                 // if both GPS_HOME & GPS_HOLD are checked => GPS_HOME is the priority
 540:../src/mw.c   ****                 if (rcOptions[BOXGPSHOME]) {
 2637              		.loc 1 540 0 is_stmt 1
 2638 126e 364B     		ldr	r3, .L218+4
 2639 1270 9B7A     		ldrb	r3, [r3, #10]	@ zero_extendqisi2
 2640 1272 002B     		cmp	r3, #0
 2641 1274 19D0     		beq	.L145
 541:../src/mw.c   ****                     if (!f.GPS_HOME_MODE) {
 2642              		.loc 1 541 0
 2643 1276 334B     		ldr	r3, .L218
 2644 1278 DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 2645 127a 002B     		cmp	r3, #0
 2646 127c 40F09C80 		bne	.L206
 542:../src/mw.c   ****                         f.GPS_HOME_MODE = 1;
 2647              		.loc 1 542 0
 2648 1280 304B     		ldr	r3, .L218
 2649 1282 4FF00102 		mov	r2, #1
 2650 1286 DA71     		strb	r2, [r3, #7]
 543:../src/mw.c   ****                         f.GPS_HOLD_MODE = 0;
 2651              		.loc 1 543 0
 2652 1288 2E4B     		ldr	r3, .L218
 2653 128a 4FF00002 		mov	r2, #0
 2654 128e 1A72     		strb	r2, [r3, #8]
 544:../src/mw.c   ****                         GPSNavReset = 0;
 2655              		.loc 1 544 0
 2656 1290 3A4B     		ldr	r3, .L218+56
 2657 1292 4FF00002 		mov	r2, #0
 2658 1296 1A70     		strb	r2, [r3, #0]
 545:../src/mw.c   ****                         GPS_set_next_wp(&GPS_home[LAT], &GPS_home[LON]);
 2659              		.loc 1 545 0
 2660 1298 3948     		ldr	r0, .L218+60
 2661 129a 3A49     		ldr	r1, .L218+64
 2662 129c FFF7FEFF 		bl	GPS_set_next_wp
 546:../src/mw.c   ****                         nav_mode = NAV_MODE_WP;
 2663              		.loc 1 546 0
 2664 12a0 394B     		ldr	r3, .L218+68
 2665 12a2 4FF00202 		mov	r2, #2
 2666 12a6 1A70     		strb	r2, [r3, #0]
 540:../src/mw.c   ****                 if (rcOptions[BOXGPSHOME]) {
 2667              		.loc 1 540 0
 2668 12a8 86E0     		b	.L206
 2669              	.L145:
 547:../src/mw.c   ****                     }
 548:../src/mw.c   ****                 } else {
 549:../src/mw.c   ****                     f.GPS_HOME_MODE = 0;
 2670              		.loc 1 549 0
 2671 12aa 264B     		ldr	r3, .L218
 2672 12ac 4FF00002 		mov	r2, #0
 2673 12b0 DA71     		strb	r2, [r3, #7]
 550:../src/mw.c   ****                     if (rcOptions[BOXGPSHOLD] && abs(rcCommand[ROLL]) < cfg.ap_mode && abs(rcComman
 2674              		.loc 1 550 0
 2675 12b2 254B     		ldr	r3, .L218+4
 2676 12b4 DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 2677 12b6 002B     		cmp	r3, #0
 2678 12b8 34D0     		beq	.L147
 2679              		.loc 1 550 0 is_stmt 0 discriminator 1
 2680 12ba 284B     		ldr	r3, .L218+24
 2681 12bc 1B88     		ldrh	r3, [r3, #0]
 2682 12be 1BB2     		sxth	r3, r3
 2683 12c0 83EAE372 		eor	r2, r3, r3, asr #31
 2684 12c4 A2EBE372 		sub	r2, r2, r3, asr #31
 2685 12c8 304B     		ldr	r3, .L218+72
 2686 12ca B3F89A30 		ldrh	r3, [r3, #154]
 2687 12ce 9A42     		cmp	r2, r3
 2688 12d0 28DA     		bge	.L147
 2689 12d2 224B     		ldr	r3, .L218+24
 2690 12d4 5B88     		ldrh	r3, [r3, #2]
 2691 12d6 1BB2     		sxth	r3, r3
 2692 12d8 83EAE372 		eor	r2, r3, r3, asr #31
 2693 12dc A2EBE372 		sub	r2, r2, r3, asr #31
 2694 12e0 2A4B     		ldr	r3, .L218+72
 2695 12e2 B3F89A30 		ldrh	r3, [r3, #154]
 2696 12e6 9A42     		cmp	r2, r3
 2697 12e8 1CDA     		bge	.L147
 551:../src/mw.c   ****                         if (!f.GPS_HOLD_MODE) {
 2698              		.loc 1 551 0 is_stmt 1
 2699 12ea 164B     		ldr	r3, .L218
 2700 12ec 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 2701 12ee 002B     		cmp	r3, #0
 2702 12f0 54D1     		bne	.L146
 552:../src/mw.c   ****                             f.GPS_HOLD_MODE = 1;
 2703              		.loc 1 552 0
 2704 12f2 144B     		ldr	r3, .L218
 2705 12f4 4FF00102 		mov	r2, #1
 2706 12f8 1A72     		strb	r2, [r3, #8]
 553:../src/mw.c   ****                             GPSNavReset = 0;
 2707              		.loc 1 553 0
 2708 12fa 204B     		ldr	r3, .L218+56
 2709 12fc 4FF00002 		mov	r2, #0
 2710 1300 1A70     		strb	r2, [r3, #0]
 554:../src/mw.c   ****                             GPS_hold[LAT] = GPS_coord[LAT];
 2711              		.loc 1 554 0
 2712 1302 234B     		ldr	r3, .L218+76
 2713 1304 1A68     		ldr	r2, [r3, #0]
 2714 1306 234B     		ldr	r3, .L218+80
 2715 1308 1A60     		str	r2, [r3, #0]
 555:../src/mw.c   ****                             GPS_hold[LON] = GPS_coord[LON];
 2716              		.loc 1 555 0
 2717 130a 214B     		ldr	r3, .L218+76
 2718 130c 5A68     		ldr	r2, [r3, #4]
 2719 130e 214B     		ldr	r3, .L218+80
 2720 1310 5A60     		str	r2, [r3, #4]
 556:../src/mw.c   ****                             GPS_set_next_wp(&GPS_hold[LAT], &GPS_hold[LON]);
 2721              		.loc 1 556 0
 2722 1312 2048     		ldr	r0, .L218+80
 2723 1314 2049     		ldr	r1, .L218+84
 2724 1316 FFF7FEFF 		bl	GPS_set_next_wp
 557:../src/mw.c   ****                             nav_mode = NAV_MODE_POSHOLD;
 2725              		.loc 1 557 0
 2726 131a 1B4B     		ldr	r3, .L218+68
 2727 131c 4FF00102 		mov	r2, #1
 2728 1320 1A70     		strb	r2, [r3, #0]
 551:../src/mw.c   ****                         if (!f.GPS_HOLD_MODE) {
 2729              		.loc 1 551 0
 2730 1322 3BE0     		b	.L146
 2731              	.L147:
 558:../src/mw.c   ****                         }
 559:../src/mw.c   ****                     } else {
 560:../src/mw.c   ****                         f.GPS_HOLD_MODE = 0;
 2732              		.loc 1 560 0
 2733 1324 074B     		ldr	r3, .L218
 2734 1326 4FF00002 		mov	r2, #0
 2735 132a 1A72     		strb	r2, [r3, #8]
 561:../src/mw.c   ****                         // both boxes are unselected here, nav is reset if not already done
 562:../src/mw.c   ****                         if (GPSNavReset == 0) {
 2736              		.loc 1 562 0
 2737 132c 134B     		ldr	r3, .L218+56
 2738 132e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2739 1330 002B     		cmp	r3, #0
 2740 1332 41D1     		bne	.L206
 563:../src/mw.c   ****                             GPSNavReset = 1;
 2741              		.loc 1 563 0
 2742 1334 114B     		ldr	r3, .L218+56
 2743 1336 4FF00102 		mov	r2, #1
 2744 133a 1A70     		strb	r2, [r3, #0]
 564:../src/mw.c   ****                             GPS_reset_nav();
 2745              		.loc 1 564 0
 2746 133c FFF7FEFF 		bl	GPS_reset_nav
 540:../src/mw.c   ****                 if (rcOptions[BOXGPSHOME]) {
 2747              		.loc 1 540 0
 2748 1340 3AE0     		b	.L206
 2749              	.L219:
 2750 1342 00BF     		.align	2
 2751              	.L218:
 2752 1344 00000000 		.word	f
 2753 1348 00000000 		.word	rcOptions
 2754 134c 40000000 		.word	errorAngleI.9160
 2755 1350 000C0140 		.word	1073810432
 2756 1354 00000000 		.word	EstAlt
 2757 1358 00000000 		.word	AltHold
 2758 135c 00000000 		.word	rcCommand
 2759 1360 44000000 		.word	initialThrottleHold.9167
 2760 1364 00000000 		.word	errorAltitudeI
 2761 1368 00000000 		.word	BaroPID
 2762 136c 00000000 		.word	heading
 2763 1370 00000000 		.word	magHold
 2764 1374 00000000 		.word	headFreeModeHold
 2765 1378 00000000 		.word	GPS_numSat
 2766 137c 11000000 		.word	GPSNavReset.9171
 2767 1380 00000000 		.word	GPS_home
 2768 1384 04000000 		.word	GPS_home+4
 2769 1388 00000000 		.word	nav_mode
 2770 138c 00000000 		.word	cfg
 2771 1390 00000000 		.word	GPS_coord
 2772 1394 00000000 		.word	GPS_hold
 2773 1398 04000000 		.word	GPS_hold+4
 2774              	.L146:
 2775 139c 0CE0     		b	.L206
 2776              	.L144:
 565:../src/mw.c   ****                         }
 566:../src/mw.c   ****                     }
 567:../src/mw.c   ****                 }
 568:../src/mw.c   ****             } else {
 569:../src/mw.c   ****                 f.GPS_HOME_MODE = 0;
 2777              		.loc 1 569 0
 2778 139e 904B     		ldr	r3, .L220
 2779 13a0 4FF00002 		mov	r2, #0
 2780 13a4 DA71     		strb	r2, [r3, #7]
 570:../src/mw.c   ****                 f.GPS_HOLD_MODE = 0;
 2781              		.loc 1 570 0
 2782 13a6 8E4B     		ldr	r3, .L220
 2783 13a8 4FF00002 		mov	r2, #0
 2784 13ac 1A72     		strb	r2, [r3, #8]
 571:../src/mw.c   ****                 nav_mode = NAV_MODE_NONE;
 2785              		.loc 1 571 0
 2786 13ae 8D4B     		ldr	r3, .L220+4
 2787 13b0 4FF00002 		mov	r2, #0
 2788 13b4 1A70     		strb	r2, [r3, #0]
 2789 13b6 00E0     		b	.L143
 2790              	.L206:
 540:../src/mw.c   ****                 if (rcOptions[BOXGPSHOME]) {
 2791              		.loc 1 540 0
 2792 13b8 00BF     		nop
 2793              	.L143:
 572:../src/mw.c   ****             }
 573:../src/mw.c   ****         }
 574:../src/mw.c   **** 
 575:../src/mw.c   ****         if (rcOptions[BOXPASSTHRU]) {
 2794              		.loc 1 575 0
 2795 13ba 8B4B     		ldr	r3, .L220+8
 2796 13bc 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 2797 13be 002B     		cmp	r3, #0
 2798 13c0 04D0     		beq	.L149
 576:../src/mw.c   ****             f.PASSTHRU_MODE = 1;
 2799              		.loc 1 576 0
 2800 13c2 874B     		ldr	r3, .L220
 2801 13c4 4FF00102 		mov	r2, #1
 2802 13c8 9A72     		strb	r2, [r3, #10]
 2803 13ca 03E0     		b	.L150
 2804              	.L149:
 577:../src/mw.c   ****         } else {
 578:../src/mw.c   ****             f.PASSTHRU_MODE = 0;
 2805              		.loc 1 578 0
 2806 13cc 844B     		ldr	r3, .L220
 2807 13ce 4FF00002 		mov	r2, #0
 2808 13d2 9A72     		strb	r2, [r3, #10]
 2809              	.L150:
 579:../src/mw.c   ****         }
 580:../src/mw.c   **** 
 581:../src/mw.c   ****         if (mcfg.mixerConfiguration == MULTITYPE_FLYING_WING || mcfg.mixerConfiguration == MULTITYP
 2810              		.loc 1 581 0
 2811 13d4 854B     		ldr	r3, .L220+12
 2812 13d6 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 2813 13d8 082B     		cmp	r3, #8
 2814 13da 03D0     		beq	.L151
 2815              		.loc 1 581 0 is_stmt 0 discriminator 1
 2816 13dc 834B     		ldr	r3, .L220+12
 2817 13de 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 2818 13e0 0E2B     		cmp	r3, #14
 2819 13e2 7BD1     		bne	.L152
 2820              	.L151:
 582:../src/mw.c   ****             f.HEADFREE_MODE = 0;
 2821              		.loc 1 582 0 is_stmt 1
 2822 13e4 7E4B     		ldr	r3, .L220
 2823 13e6 4FF00002 		mov	r2, #0
 2824 13ea 5A72     		strb	r2, [r3, #9]
 2825 13ec 76E0     		b	.L152
 2826              	.L78:
 2827              	.LBB5:
 583:../src/mw.c   ****         }
 584:../src/mw.c   ****     } else {                    // not in rc loop
 585:../src/mw.c   ****         static int taskOrder = 0;    // never call all function in the same loop, to avoid high del
 586:../src/mw.c   ****         if (taskOrder > 3)
 2828              		.loc 1 586 0
 2829 13ee 804B     		ldr	r3, .L220+16
 2830 13f0 1B68     		ldr	r3, [r3, #0]
 2831 13f2 032B     		cmp	r3, #3
 2832 13f4 05DD     		ble	.L153
 587:../src/mw.c   ****             taskOrder -= 4;
 2833              		.loc 1 587 0
 2834 13f6 7E4B     		ldr	r3, .L220+16
 2835 13f8 1B68     		ldr	r3, [r3, #0]
 2836 13fa A3F10402 		sub	r2, r3, #4
 2837 13fe 7C4B     		ldr	r3, .L220+16
 2838 1400 1A60     		str	r2, [r3, #0]
 2839              	.L153:
 588:../src/mw.c   ****         switch (taskOrder) {
 2840              		.loc 1 588 0
 2841 1402 7B4B     		ldr	r3, .L220+16
 2842 1404 1B68     		ldr	r3, [r3, #0]
 2843 1406 032B     		cmp	r3, #3
 2844 1408 68D8     		bhi	.L152
 2845 140a 01A0     		adr	r0, .L158
 2846 140c 50F823F0 		ldr	pc, [r0, r3, lsl #2]
 2847              		.align	2
 2848              	.L158:
 2849 1410 21140000 		.word	.L154+1
 2850 1414 45140000 		.word	.L155+1
 2851 1418 69140000 		.word	.L156+1
 2852 141c 8D140000 		.word	.L157+1
 2853              	.L154:
 589:../src/mw.c   ****         case 0:
 590:../src/mw.c   ****             taskOrder++;
 2854              		.loc 1 590 0
 2855 1420 734B     		ldr	r3, .L220+16
 2856 1422 1B68     		ldr	r3, [r3, #0]
 2857 1424 03F10102 		add	r2, r3, #1
 2858 1428 714B     		ldr	r3, .L220+16
 2859 142a 1A60     		str	r2, [r3, #0]
 591:../src/mw.c   **** #ifdef MAG
 592:../src/mw.c   ****             if (sensors(SENSOR_MAG) && Mag_getADC())
 2860              		.loc 1 592 0
 2861 142c 4FF00400 		mov	r0, #4
 2862 1430 FFF7FEFF 		bl	sensors
 2863 1434 0346     		mov	r3, r0
 2864 1436 002B     		cmp	r3, #0
 2865 1438 04D0     		beq	.L155
 2866              		.loc 1 592 0 is_stmt 0 discriminator 1
 2867 143a FFF7FEFF 		bl	Mag_getADC
 2868 143e 0346     		mov	r3, r0
 2869 1440 002B     		cmp	r3, #0
 2870 1442 44D1     		bne	.L207
 2871              	.L155:
 593:../src/mw.c   ****                 break;
 594:../src/mw.c   **** #endif
 595:../src/mw.c   ****         case 1:
 596:../src/mw.c   ****             taskOrder++;
 2872              		.loc 1 596 0 is_stmt 1
 2873 1444 6A4B     		ldr	r3, .L220+16
 2874 1446 1B68     		ldr	r3, [r3, #0]
 2875 1448 03F10102 		add	r2, r3, #1
 2876 144c 684B     		ldr	r3, .L220+16
 2877 144e 1A60     		str	r2, [r3, #0]
 597:../src/mw.c   **** #ifdef BARO
 598:../src/mw.c   ****             if (sensors(SENSOR_BARO) && Baro_update())
 2878              		.loc 1 598 0
 2879 1450 4FF00200 		mov	r0, #2
 2880 1454 FFF7FEFF 		bl	sensors
 2881 1458 0346     		mov	r3, r0
 2882 145a 002B     		cmp	r3, #0
 2883 145c 04D0     		beq	.L156
 2884              		.loc 1 598 0 is_stmt 0 discriminator 1
 2885 145e FFF7FEFF 		bl	Baro_update
 2886 1462 0346     		mov	r3, r0
 2887 1464 002B     		cmp	r3, #0
 2888 1466 34D1     		bne	.L208
 2889              	.L156:
 599:../src/mw.c   ****                 break;
 600:../src/mw.c   **** #endif
 601:../src/mw.c   ****         case 2:
 602:../src/mw.c   ****             taskOrder++;
 2890              		.loc 1 602 0 is_stmt 1
 2891 1468 614B     		ldr	r3, .L220+16
 2892 146a 1B68     		ldr	r3, [r3, #0]
 2893 146c 03F10102 		add	r2, r3, #1
 2894 1470 5F4B     		ldr	r3, .L220+16
 2895 1472 1A60     		str	r2, [r3, #0]
 603:../src/mw.c   **** #ifdef BARO
 604:../src/mw.c   ****             if (sensors(SENSOR_BARO) && getEstimatedAltitude())
 2896              		.loc 1 604 0
 2897 1474 4FF00200 		mov	r0, #2
 2898 1478 FFF7FEFF 		bl	sensors
 2899 147c 0346     		mov	r3, r0
 2900 147e 002B     		cmp	r3, #0
 2901 1480 04D0     		beq	.L157
 2902              		.loc 1 604 0 is_stmt 0 discriminator 1
 2903 1482 FFF7FEFF 		bl	getEstimatedAltitude
 2904 1486 0346     		mov	r3, r0
 2905 1488 002B     		cmp	r3, #0
 2906 148a 24D1     		bne	.L209
 2907              	.L157:
 605:../src/mw.c   ****             break;
 606:../src/mw.c   **** #endif
 607:../src/mw.c   ****         case 3:
 608:../src/mw.c   ****             taskOrder++;
 2908              		.loc 1 608 0 is_stmt 1
 2909 148c 584B     		ldr	r3, .L220+16
 2910 148e 1B68     		ldr	r3, [r3, #0]
 2911 1490 03F10102 		add	r2, r3, #1
 2912 1494 564B     		ldr	r3, .L220+16
 2913 1496 1A60     		str	r2, [r3, #0]
 609:../src/mw.c   **** #ifdef SONAR
 610:../src/mw.c   ****             if (sensors(SENSOR_SONAR)) {
 2914              		.loc 1 610 0
 2915 1498 4FF00800 		mov	r0, #8
 2916 149c FFF7FEFF 		bl	sensors
 2917 14a0 0346     		mov	r3, r0
 2918 14a2 002B     		cmp	r3, #0
 2919 14a4 05D0     		beq	.L159
 611:../src/mw.c   ****                 Sonar_update();
 2920              		.loc 1 611 0
 2921 14a6 FFF7FEFF 		bl	Sonar_update
 612:../src/mw.c   ****                 debug[2] = sonarAlt;
 2922              		.loc 1 612 0
 2923 14aa 524B     		ldr	r3, .L220+20
 2924 14ac 1A88     		ldrh	r2, [r3, #0]
 2925 14ae 524B     		ldr	r3, .L220+24
 2926 14b0 9A80     		strh	r2, [r3, #4]	@ movhi
 2927              	.L159:
 613:../src/mw.c   ****             }
 614:../src/mw.c   **** #endif
 615:../src/mw.c   ****             if (feature(FEATURE_VARIO) && f.VARIO_MODE)
 2928              		.loc 1 615 0
 2929 14b2 4FF40050 		mov	r0, #8192
 2930 14b6 FFF7FEFF 		bl	feature
 2931 14ba 0346     		mov	r3, r0
 2932 14bc 002B     		cmp	r3, #0
 2933 14be 0CD0     		beq	.L210
 2934              		.loc 1 615 0 is_stmt 0 discriminator 1
 2935 14c0 474B     		ldr	r3, .L220
 2936 14c2 DB7B     		ldrb	r3, [r3, #15]	@ zero_extendqisi2
 2937 14c4 002B     		cmp	r3, #0
 2938 14c6 08D0     		beq	.L210
 616:../src/mw.c   ****                 mwVario();
 2939              		.loc 1 616 0 is_stmt 1
 2940 14c8 FFF74EFA 		bl	mwVario
 617:../src/mw.c   ****             break;
 2941              		.loc 1 617 0
 2942 14cc 05E0     		b	.L210
 2943              	.L207:
 593:../src/mw.c   ****                 break;
 2944              		.loc 1 593 0
 2945 14ce 00BF     		nop
 2946 14d0 04E0     		b	.L152
 2947              	.L208:
 599:../src/mw.c   ****                 break;
 2948              		.loc 1 599 0
 2949 14d2 00BF     		nop
 2950 14d4 02E0     		b	.L152
 2951              	.L209:
 605:../src/mw.c   ****             break;
 2952              		.loc 1 605 0
 2953 14d6 00BF     		nop
 2954 14d8 00E0     		b	.L152
 2955              	.L210:
 2956              		.loc 1 617 0
 2957 14da 00BF     		nop
 2958              	.L152:
 2959              	.LBE5:
 618:../src/mw.c   ****         }
 619:../src/mw.c   ****     }
 620:../src/mw.c   **** 
 621:../src/mw.c   ****     currentTime = micros();
 2960              		.loc 1 621 0
 2961 14dc FFF7FEFF 		bl	micros
 2962 14e0 0246     		mov	r2, r0
 2963 14e2 464B     		ldr	r3, .L220+28
 2964 14e4 1A60     		str	r2, [r3, #0]
 622:../src/mw.c   ****     if (mcfg.looptime == 0 || (int32_t)(currentTime - loopTime) >= 0) {
 2965              		.loc 1 622 0
 2966 14e6 414B     		ldr	r3, .L220+12
 2967 14e8 9B89     		ldrh	r3, [r3, #12]
 2968 14ea 002B     		cmp	r3, #0
 2969 14ec 07D0     		beq	.L161
 2970              		.loc 1 622 0 is_stmt 0 discriminator 1
 2971 14ee 434B     		ldr	r3, .L220+28
 2972 14f0 1A68     		ldr	r2, [r3, #0]
 2973 14f2 434B     		ldr	r3, .L220+32
 2974 14f4 1B68     		ldr	r3, [r3, #0]
 2975 14f6 D31A     		subs	r3, r2, r3
 2976 14f8 002B     		cmp	r3, #0
 2977 14fa C0F21585 		blt	.L76
 2978              	.L161:
 623:../src/mw.c   ****         loopTime = currentTime + mcfg.looptime;
 2979              		.loc 1 623 0 is_stmt 1
 2980 14fe 3B4B     		ldr	r3, .L220+12
 2981 1500 9B89     		ldrh	r3, [r3, #12]
 2982 1502 1A46     		mov	r2, r3
 2983 1504 3D4B     		ldr	r3, .L220+28
 2984 1506 1B68     		ldr	r3, [r3, #0]
 2985 1508 D218     		adds	r2, r2, r3
 2986 150a 3D4B     		ldr	r3, .L220+32
 2987 150c 1A60     		str	r2, [r3, #0]
 624:../src/mw.c   **** 
 625:../src/mw.c   ****         computeIMU();
 2988              		.loc 1 625 0
 2989 150e FFF7FEFF 		bl	computeIMU
 626:../src/mw.c   ****         // Measure loop rate just afer reading the sensors
 627:../src/mw.c   ****         currentTime = micros();
 2990              		.loc 1 627 0
 2991 1512 FFF7FEFF 		bl	micros
 2992 1516 0246     		mov	r2, r0
 2993 1518 384B     		ldr	r3, .L220+28
 2994 151a 1A60     		str	r2, [r3, #0]
 628:../src/mw.c   ****         cycleTime = (int32_t)(currentTime - previousTime);
 2995              		.loc 1 628 0
 2996 151c 374B     		ldr	r3, .L220+28
 2997 151e 1B68     		ldr	r3, [r3, #0]
 2998 1520 9AB2     		uxth	r2, r3
 2999 1522 384B     		ldr	r3, .L220+36
 3000 1524 1B68     		ldr	r3, [r3, #0]
 3001 1526 9BB2     		uxth	r3, r3
 3002 1528 D31A     		subs	r3, r2, r3
 3003 152a 9AB2     		uxth	r2, r3
 3004 152c 364B     		ldr	r3, .L220+40
 3005 152e 1A80     		strh	r2, [r3, #0]	@ movhi
 629:../src/mw.c   ****         previousTime = currentTime;
 3006              		.loc 1 629 0
 3007 1530 324B     		ldr	r3, .L220+28
 3008 1532 1A68     		ldr	r2, [r3, #0]
 3009 1534 334B     		ldr	r3, .L220+36
 3010 1536 1A60     		str	r2, [r3, #0]
 630:../src/mw.c   **** #ifdef MPU6050_DMP
 631:../src/mw.c   ****         mpu6050DmpLoop();
 632:../src/mw.c   **** #endif
 633:../src/mw.c   **** 
 634:../src/mw.c   **** #ifdef MAG
 635:../src/mw.c   ****         if (sensors(SENSOR_MAG)) {
 3011              		.loc 1 635 0
 3012 1538 4FF00400 		mov	r0, #4
 3013 153c FFF7FEFF 		bl	sensors
 3014 1540 0346     		mov	r3, r0
 3015 1542 002B     		cmp	r3, #0
 3016 1544 6DD0     		beq	.L163
 636:../src/mw.c   ****             if (abs(rcCommand[YAW]) < 70 && f.MAG_MODE) {
 3017              		.loc 1 636 0
 3018 1546 314B     		ldr	r3, .L220+44
 3019 1548 9B88     		ldrh	r3, [r3, #4]
 3020 154a 1BB2     		sxth	r3, r3
 3021 154c 13F1450F 		cmn	r3, #69
 3022 1550 41DB     		blt	.L164
 3023              		.loc 1 636 0 is_stmt 0 discriminator 1
 3024 1552 2E4B     		ldr	r3, .L220+44
 3025 1554 9B88     		ldrh	r3, [r3, #4]
 3026 1556 1BB2     		sxth	r3, r3
 3027 1558 452B     		cmp	r3, #69
 3028 155a 3CDC     		bgt	.L164
 3029 155c 204B     		ldr	r3, .L220
 3030 155e 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 3031 1560 002B     		cmp	r3, #0
 3032 1562 38D0     		beq	.L164
 3033              	.LBB6:
 637:../src/mw.c   ****                 int16_t dif = heading - magHold;
 3034              		.loc 1 637 0 is_stmt 1
 3035 1564 2A4B     		ldr	r3, .L220+48
 3036 1566 1B88     		ldrh	r3, [r3, #0]
 3037 1568 9AB2     		uxth	r2, r3
 3038 156a 2A4B     		ldr	r3, .L220+52
 3039 156c 1B88     		ldrh	r3, [r3, #0]
 3040 156e 9BB2     		uxth	r3, r3
 3041 1570 D31A     		subs	r3, r2, r3
 3042 1572 9BB2     		uxth	r3, r3
 3043 1574 BB82     		strh	r3, [r7, #20]	@ movhi
 638:../src/mw.c   ****                 if (dif <= -180)
 3044              		.loc 1 638 0
 3045 1576 B7F91430 		ldrsh	r3, [r7, #20]
 3046 157a 13F1B30F 		cmn	r3, #179
 3047 157e 04DA     		bge	.L165
 639:../src/mw.c   ****                     dif += 360;
 3048              		.loc 1 639 0
 3049 1580 BB8A     		ldrh	r3, [r7, #20]
 3050 1582 03F5B473 		add	r3, r3, #360
 3051 1586 9BB2     		uxth	r3, r3
 3052 1588 BB82     		strh	r3, [r7, #20]	@ movhi
 3053              	.L165:
 640:../src/mw.c   ****                 if (dif >= +180)
 3054              		.loc 1 640 0
 3055 158a B7F91430 		ldrsh	r3, [r7, #20]
 3056 158e B32B     		cmp	r3, #179
 3057 1590 04DD     		ble	.L166
 641:../src/mw.c   ****                     dif -= 360;
 3058              		.loc 1 641 0
 3059 1592 BB8A     		ldrh	r3, [r7, #20]
 3060 1594 A3F5B473 		sub	r3, r3, #360
 3061 1598 9BB2     		uxth	r3, r3
 3062 159a BB82     		strh	r3, [r7, #20]	@ movhi
 3063              	.L166:
 642:../src/mw.c   ****                 if (f.SMALL_ANGLES_25)
 3064              		.loc 1 642 0
 3065 159c 104B     		ldr	r3, .L220
 3066 159e 5B7B     		ldrb	r3, [r3, #13]	@ zero_extendqisi2
 3067 15a0 002B     		cmp	r3, #0
 3068 15a2 3DD0     		beq	.L211
 643:../src/mw.c   ****                     rcCommand[YAW] -= dif * cfg.P8[PIDMAG] / 30;    // 18 deg
 3069              		.loc 1 643 0
 3070 15a4 194B     		ldr	r3, .L220+44
 3071 15a6 9B88     		ldrh	r3, [r3, #4]
 3072 15a8 9AB2     		uxth	r2, r3
 3073 15aa B7F91430 		ldrsh	r3, [r7, #20]
 3074 15ae 1A49     		ldr	r1, .L220+56
 3075 15b0 097A     		ldrb	r1, [r1, #8]	@ zero_extendqisi2
 3076 15b2 01FB03F3 		mul	r3, r1, r3
 3077 15b6 1949     		ldr	r1, .L220+60
 3078 15b8 81FB0301 		smull	r0, r1, r1, r3
 3079 15bc C918     		adds	r1, r1, r3
 3080 15be 4FEA2111 		asr	r1, r1, #4
 3081 15c2 4FEAE373 		asr	r3, r3, #31
 3082 15c6 CB1A     		subs	r3, r1, r3
 3083 15c8 9BB2     		uxth	r3, r3
 3084 15ca D31A     		subs	r3, r2, r3
 3085 15cc 9BB2     		uxth	r3, r3
 3086 15ce 9AB2     		uxth	r2, r3
 3087 15d0 0E4B     		ldr	r3, .L220+44
 3088 15d2 9A80     		strh	r2, [r3, #4]	@ movhi
 3089              	.LBE6:
 636:../src/mw.c   ****             if (abs(rcCommand[YAW]) < 70 && f.MAG_MODE) {
 3090              		.loc 1 636 0
 3091 15d4 24E0     		b	.L211
 3092              	.L164:
 644:../src/mw.c   ****             } else
 645:../src/mw.c   ****                 magHold = heading;
 3093              		.loc 1 645 0
 3094 15d6 0E4B     		ldr	r3, .L220+48
 3095 15d8 1A88     		ldrh	r2, [r3, #0]
 3096 15da 0E4B     		ldr	r3, .L220+52
 3097 15dc 1A80     		strh	r2, [r3, #0]	@ movhi
 3098 15de 20E0     		b	.L163
 3099              	.L221:
 3100              		.align	2
 3101              	.L220:
 3102 15e0 00000000 		.word	f
 3103 15e4 00000000 		.word	nav_mode
 3104 15e8 00000000 		.word	rcOptions
 3105 15ec 00000000 		.word	mcfg
 3106 15f0 48000000 		.word	taskOrder.9184
 3107 15f4 00000000 		.word	sonarAlt
 3108 15f8 00000000 		.word	debug
 3109 15fc 00000000 		.word	currentTime
 3110 1600 4C000000 		.word	loopTime.9168
 3111 1604 00000000 		.word	previousTime
 3112 1608 00000000 		.word	cycleTime
 3113 160c 00000000 		.word	rcCommand
 3114 1610 00000000 		.word	heading
 3115 1614 00000000 		.word	magHold
 3116 1618 00000000 		.word	cfg
 3117 161c 89888888 		.word	-2004318071
 3118              	.L211:
 636:../src/mw.c   ****             if (abs(rcCommand[YAW]) < 70 && f.MAG_MODE) {
 3119              		.loc 1 636 0
 3120 1620 00BF     		nop
 3121              	.L163:
 646:../src/mw.c   ****         }
 647:../src/mw.c   **** #endif
 648:../src/mw.c   **** 
 649:../src/mw.c   **** #ifdef BARO
 650:../src/mw.c   ****         if (sensors(SENSOR_BARO)) {
 3122              		.loc 1 650 0
 3123 1622 4FF00200 		mov	r0, #2
 3124 1626 FFF7FEFF 		bl	sensors
 3125 162a 0346     		mov	r3, r0
 3126 162c 002B     		cmp	r3, #0
 3127 162e 00F0C380 		beq	.L168
 651:../src/mw.c   ****             if (f.BARO_MODE) {
 3128              		.loc 1 651 0
 3129 1632 974B     		ldr	r3, .L222
 3130 1634 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 3131 1636 002B     		cmp	r3, #0
 3132 1638 00F0BE80 		beq	.L168
 3133              	.LBB7:
 652:../src/mw.c   ****                 static uint8_t isAltHoldChanged = 0;
 653:../src/mw.c   ****                 static int16_t AltHoldCorr = 0;
 654:../src/mw.c   ****                 if (cfg.alt_hold_fast_change) {
 3134              		.loc 1 654 0
 3135 163c 954B     		ldr	r3, .L222+4
 3136 163e 93F86330 		ldrb	r3, [r3, #99]	@ zero_extendqisi2
 3137 1642 002B     		cmp	r3, #0
 3138 1644 4AD0     		beq	.L169
 655:../src/mw.c   ****                     // rapid alt changes
 656:../src/mw.c   ****                     if (abs(rcCommand[THROTTLE] - initialThrottleHold) > cfg.alt_hold_throttle_neut
 3139              		.loc 1 656 0
 3140 1646 944B     		ldr	r3, .L222+8
 3141 1648 DB88     		ldrh	r3, [r3, #6]
 3142 164a 1AB2     		sxth	r2, r3
 3143 164c 934B     		ldr	r3, .L222+12
 3144 164e 1B88     		ldrh	r3, [r3, #0]
 3145 1650 1BB2     		sxth	r3, r3
 3146 1652 D31A     		subs	r3, r2, r3
 3147 1654 83EAE372 		eor	r2, r3, r3, asr #31
 3148 1658 A2EBE372 		sub	r2, r2, r3, asr #31
 3149 165c 8D4B     		ldr	r3, .L222+4
 3150 165e 93F86230 		ldrb	r3, [r3, #98]	@ zero_extendqisi2
 3151 1662 9A42     		cmp	r2, r3
 3152 1664 22DD     		ble	.L170
 657:../src/mw.c   ****                         errorAltitudeI = 0;
 3153              		.loc 1 657 0
 3154 1666 8E4B     		ldr	r3, .L222+16
 3155 1668 4FF00002 		mov	r2, #0
 3156 166c 1A80     		strh	r2, [r3, #0]	@ movhi
 658:../src/mw.c   ****                         isAltHoldChanged = 1;
 3157              		.loc 1 658 0
 3158 166e 8D4B     		ldr	r3, .L222+20
 3159 1670 4FF00102 		mov	r2, #1
 3160 1674 1A70     		strb	r2, [r3, #0]
 659:../src/mw.c   ****                         rcCommand[THROTTLE] += (rcCommand[THROTTLE] > initialThrottleHold) ? -cfg.a
 3161              		.loc 1 659 0
 3162 1676 884B     		ldr	r3, .L222+8
 3163 1678 DB88     		ldrh	r3, [r3, #6]
 3164 167a 9AB2     		uxth	r2, r3
 3165 167c 864B     		ldr	r3, .L222+8
 3166 167e D988     		ldrh	r1, [r3, #6]
 3167 1680 864B     		ldr	r3, .L222+12
 3168 1682 1B88     		ldrh	r3, [r3, #0]
 3169 1684 09B2     		sxth	r1, r1
 3170 1686 1BB2     		sxth	r3, r3
 3171 1688 9942     		cmp	r1, r3
 3172 168a 06DD     		ble	.L171
 3173              		.loc 1 659 0 is_stmt 0 discriminator 1
 3174 168c 814B     		ldr	r3, .L222+4
 3175 168e 93F86230 		ldrb	r3, [r3, #98]	@ zero_extendqisi2
 3176 1692 C3F10003 		rsb	r3, r3, #0
 3177 1696 9BB2     		uxth	r3, r3
 3178 1698 02E0     		b	.L172
 3179              	.L171:
 3180              		.loc 1 659 0 discriminator 2
 3181 169a 7E4B     		ldr	r3, .L222+4
 3182 169c 93F86230 		ldrb	r3, [r3, #98]	@ zero_extendqisi2
 3183              	.L172:
 3184              		.loc 1 659 0 discriminator 3
 3185 16a0 D318     		adds	r3, r2, r3
 3186 16a2 9BB2     		uxth	r3, r3
 3187 16a4 9AB2     		uxth	r2, r3
 3188 16a6 7C4B     		ldr	r3, .L222+8
 3189 16a8 DA80     		strh	r2, [r3, #6]	@ movhi
 3190 16aa 85E0     		b	.L168
 3191              	.L170:
 660:../src/mw.c   ****                     } else {
 661:../src/mw.c   ****                         if (isAltHoldChanged) {
 3192              		.loc 1 661 0 is_stmt 1
 3193 16ac 7D4B     		ldr	r3, .L222+20
 3194 16ae 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3195 16b0 002B     		cmp	r3, #0
 3196 16b2 07D0     		beq	.L173
 662:../src/mw.c   ****                             AltHold = EstAlt;
 3197              		.loc 1 662 0
 3198 16b4 7C4B     		ldr	r3, .L222+24
 3199 16b6 1A68     		ldr	r2, [r3, #0]
 3200 16b8 7C4B     		ldr	r3, .L222+28
 3201 16ba 1A60     		str	r2, [r3, #0]
 663:../src/mw.c   ****                             isAltHoldChanged = 0;
 3202              		.loc 1 663 0
 3203 16bc 794B     		ldr	r3, .L222+20
 3204 16be 4FF00002 		mov	r2, #0
 3205 16c2 1A70     		strb	r2, [r3, #0]
 3206              	.L173:
 664:../src/mw.c   ****                         }
 665:../src/mw.c   ****                         rcCommand[THROTTLE] = initialThrottleHold + BaroPID;
 3207              		.loc 1 665 0
 3208 16c4 754B     		ldr	r3, .L222+12
 3209 16c6 1B88     		ldrh	r3, [r3, #0]
 3210 16c8 9AB2     		uxth	r2, r3
 3211 16ca 794B     		ldr	r3, .L222+32
 3212 16cc 1B88     		ldrh	r3, [r3, #0]
 3213 16ce 9BB2     		uxth	r3, r3
 3214 16d0 D318     		adds	r3, r2, r3
 3215 16d2 9BB2     		uxth	r3, r3
 3216 16d4 9AB2     		uxth	r2, r3
 3217 16d6 704B     		ldr	r3, .L222+8
 3218 16d8 DA80     		strh	r2, [r3, #6]	@ movhi
 3219 16da 6DE0     		b	.L168
 3220              	.L169:
 666:../src/mw.c   ****                     }
 667:../src/mw.c   ****                 } else {
 668:../src/mw.c   ****                     // slow alt changes for apfags
 669:../src/mw.c   ****                     if (abs(rcCommand[THROTTLE] - initialThrottleHold) > cfg.alt_hold_throttle_neut
 3221              		.loc 1 669 0
 3222 16dc 6E4B     		ldr	r3, .L222+8
 3223 16de DB88     		ldrh	r3, [r3, #6]
 3224 16e0 1AB2     		sxth	r2, r3
 3225 16e2 6E4B     		ldr	r3, .L222+12
 3226 16e4 1B88     		ldrh	r3, [r3, #0]
 3227 16e6 1BB2     		sxth	r3, r3
 3228 16e8 D31A     		subs	r3, r2, r3
 3229 16ea 83EAE372 		eor	r2, r3, r3, asr #31
 3230 16ee A2EBE372 		sub	r2, r2, r3, asr #31
 3231 16f2 684B     		ldr	r3, .L222+4
 3232 16f4 93F86230 		ldrb	r3, [r3, #98]	@ zero_extendqisi2
 3233 16f8 9A42     		cmp	r2, r3
 3234 16fa 46DD     		ble	.L174
 670:../src/mw.c   ****                         // Slowly increase/decrease AltHold proportional to stick movement ( +100 t
 671:../src/mw.c   ****                         AltHoldCorr += rcCommand[THROTTLE] - initialThrottleHold;
 3235              		.loc 1 671 0
 3236 16fc 664B     		ldr	r3, .L222+8
 3237 16fe DB88     		ldrh	r3, [r3, #6]
 3238 1700 9AB2     		uxth	r2, r3
 3239 1702 664B     		ldr	r3, .L222+12
 3240 1704 1B88     		ldrh	r3, [r3, #0]
 3241 1706 9BB2     		uxth	r3, r3
 3242 1708 D31A     		subs	r3, r2, r3
 3243 170a 9AB2     		uxth	r2, r3
 3244 170c 694B     		ldr	r3, .L222+36
 3245 170e 1B88     		ldrh	r3, [r3, #0]
 3246 1710 9BB2     		uxth	r3, r3
 3247 1712 D318     		adds	r3, r2, r3
 3248 1714 9BB2     		uxth	r3, r3
 3249 1716 9AB2     		uxth	r2, r3
 3250 1718 664B     		ldr	r3, .L222+36
 3251 171a 1A80     		strh	r2, [r3, #0]	@ movhi
 672:../src/mw.c   ****                         if (abs(AltHoldCorr) > 500) {
 3252              		.loc 1 672 0
 3253 171c 654B     		ldr	r3, .L222+36
 3254 171e 1B88     		ldrh	r3, [r3, #0]
 3255 1720 1BB2     		sxth	r3, r3
 3256 1722 002B     		cmp	r3, #0
 3257 1724 B8BF     		it	lt
 3258 1726 5B42     		rsblt	r3, r3, #0
 3259 1728 B3F5FA7F 		cmp	r3, #500
 3260 172c 24DD     		ble	.L175
 673:../src/mw.c   ****                             AltHold += AltHoldCorr / 500;
 3261              		.loc 1 673 0
 3262 172e 614B     		ldr	r3, .L222+36
 3263 1730 1B88     		ldrh	r3, [r3, #0]
 3264 1732 1BB2     		sxth	r3, r3
 3265 1734 604A     		ldr	r2, .L222+40
 3266 1736 82FB0312 		smull	r1, r2, r2, r3
 3267 173a 4FEA6212 		asr	r2, r2, #5
 3268 173e 4FEAE373 		asr	r3, r3, #31
 3269 1742 D31A     		subs	r3, r2, r3
 3270 1744 9BB2     		uxth	r3, r3
 3271 1746 1AB2     		sxth	r2, r3
 3272 1748 584B     		ldr	r3, .L222+28
 3273 174a 1B68     		ldr	r3, [r3, #0]
 3274 174c D218     		adds	r2, r2, r3
 3275 174e 574B     		ldr	r3, .L222+28
 3276 1750 1A60     		str	r2, [r3, #0]
 674:../src/mw.c   ****                             AltHoldCorr %= 500;
 3277              		.loc 1 674 0
 3278 1752 584B     		ldr	r3, .L222+36
 3279 1754 1B88     		ldrh	r3, [r3, #0]
 3280 1756 1BB2     		sxth	r3, r3
 3281 1758 574A     		ldr	r2, .L222+40
 3282 175a 82FB0302 		smull	r0, r2, r2, r3
 3283 175e 4FEA6211 		asr	r1, r2, #5
 3284 1762 4FEAE372 		asr	r2, r3, #31
 3285 1766 8A1A     		subs	r2, r1, r2
 3286 1768 4FF4FA71 		mov	r1, #500
 3287 176c 01FB02F2 		mul	r2, r1, r2
 3288 1770 9B1A     		subs	r3, r3, r2
 3289 1772 9AB2     		uxth	r2, r3
 3290 1774 4F4B     		ldr	r3, .L222+36
 3291 1776 1A80     		strh	r2, [r3, #0]	@ movhi
 3292              	.L175:
 675:../src/mw.c   ****                         }
 676:../src/mw.c   ****                         errorAltitudeI = 0;
 3293              		.loc 1 676 0
 3294 1778 494B     		ldr	r3, .L222+16
 3295 177a 4FF00002 		mov	r2, #0
 3296 177e 1A80     		strh	r2, [r3, #0]	@ movhi
 677:../src/mw.c   ****                         isAltHoldChanged = 1;
 3297              		.loc 1 677 0
 3298 1780 484B     		ldr	r3, .L222+20
 3299 1782 4FF00102 		mov	r2, #1
 3300 1786 1A70     		strb	r2, [r3, #0]
 3301 1788 0BE0     		b	.L176
 3302              	.L174:
 678:../src/mw.c   ****                     } else if (isAltHoldChanged) {
 3303              		.loc 1 678 0
 3304 178a 464B     		ldr	r3, .L222+20
 3305 178c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3306 178e 002B     		cmp	r3, #0
 3307 1790 07D0     		beq	.L176
 679:../src/mw.c   ****                         AltHold = EstAlt;
 3308              		.loc 1 679 0
 3309 1792 454B     		ldr	r3, .L222+24
 3310 1794 1A68     		ldr	r2, [r3, #0]
 3311 1796 454B     		ldr	r3, .L222+28
 3312 1798 1A60     		str	r2, [r3, #0]
 680:../src/mw.c   ****                         isAltHoldChanged = 0;
 3313              		.loc 1 680 0
 3314 179a 424B     		ldr	r3, .L222+20
 3315 179c 4FF00002 		mov	r2, #0
 3316 17a0 1A70     		strb	r2, [r3, #0]
 3317              	.L176:
 681:../src/mw.c   ****                     }
 682:../src/mw.c   ****                     rcCommand[THROTTLE] = initialThrottleHold + BaroPID;
 3318              		.loc 1 682 0
 3319 17a2 3E4B     		ldr	r3, .L222+12
 3320 17a4 1B88     		ldrh	r3, [r3, #0]
 3321 17a6 9AB2     		uxth	r2, r3
 3322 17a8 414B     		ldr	r3, .L222+32
 3323 17aa 1B88     		ldrh	r3, [r3, #0]
 3324 17ac 9BB2     		uxth	r3, r3
 3325 17ae D318     		adds	r3, r2, r3
 3326 17b0 9BB2     		uxth	r3, r3
 3327 17b2 9AB2     		uxth	r2, r3
 3328 17b4 384B     		ldr	r3, .L222+8
 3329 17b6 DA80     		strh	r2, [r3, #6]	@ movhi
 3330              	.L168:
 3331              	.LBE7:
 683:../src/mw.c   ****                 }
 684:../src/mw.c   ****             }
 685:../src/mw.c   ****         }
 686:../src/mw.c   **** #endif
 687:../src/mw.c   **** 
 688:../src/mw.c   ****         if (sensors(SENSOR_GPS)) {
 3332              		.loc 1 688 0
 3333 17b8 4FF01000 		mov	r0, #16
 3334 17bc FFF7FEFF 		bl	sensors
 3335 17c0 0346     		mov	r3, r0
 3336 17c2 002B     		cmp	r3, #0
 3337 17c4 00F07D81 		beq	.L177
 689:../src/mw.c   ****             if ((f.GPS_HOME_MODE || f.GPS_HOLD_MODE) && f.GPS_FIX_HOME) {
 3338              		.loc 1 689 0
 3339 17c8 314B     		ldr	r3, .L222
 3340 17ca DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 3341 17cc 002B     		cmp	r3, #0
 3342 17ce 04D1     		bne	.L178
 3343              		.loc 1 689 0 is_stmt 0 discriminator 2
 3344 17d0 2F4B     		ldr	r3, .L222
 3345 17d2 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 3346 17d4 002B     		cmp	r3, #0
 3347 17d6 00F07481 		beq	.L177
 3348              	.L178:
 3349              		.loc 1 689 0 discriminator 1
 3350 17da 2D4B     		ldr	r3, .L222
 3351 17dc 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 3352 17de 002B     		cmp	r3, #0
 3353 17e0 00F06F81 		beq	.L177
 3354              	.LBB8:
 690:../src/mw.c   ****                 float sin_yaw_y = sinf(heading * 0.0174532925f);
 3355              		.loc 1 690 0 is_stmt 1
 3356 17e4 354B     		ldr	r3, .L222+44
 3357 17e6 1B88     		ldrh	r3, [r3, #0]
 3358 17e8 1BB2     		sxth	r3, r3
 3359 17ea 1846     		mov	r0, r3
 3360 17ec FFF7FEFF 		bl	__aeabi_i2f
 3361 17f0 0346     		mov	r3, r0
 3362 17f2 1846     		mov	r0, r3
 3363 17f4 3449     		ldr	r1, .L222+56	@ float
 3364 17f6 FFF7FEFF 		bl	__aeabi_fmul
 3365 17fa 0346     		mov	r3, r0
 3366 17fc 1846     		mov	r0, r3
 3367 17fe FFF7FEFF 		bl	sinf
 3368 1802 3861     		str	r0, [r7, #16]	@ float
 691:../src/mw.c   ****                 float cos_yaw_x = cosf(heading * 0.0174532925f);
 3369              		.loc 1 691 0
 3370 1804 2D4B     		ldr	r3, .L222+44
 3371 1806 1B88     		ldrh	r3, [r3, #0]
 3372 1808 1BB2     		sxth	r3, r3
 3373 180a 1846     		mov	r0, r3
 3374 180c FFF7FEFF 		bl	__aeabi_i2f
 3375 1810 0346     		mov	r3, r0
 3376 1812 1846     		mov	r0, r3
 3377 1814 2C49     		ldr	r1, .L222+56	@ float
 3378 1816 FFF7FEFF 		bl	__aeabi_fmul
 3379 181a 0346     		mov	r3, r0
 3380 181c 1846     		mov	r0, r3
 3381 181e FFF7FEFF 		bl	cosf
 3382 1822 F860     		str	r0, [r7, #12]	@ float
 692:../src/mw.c   ****                 if (cfg.nav_slew_rate) {
 3383              		.loc 1 692 0
 3384 1824 1B4B     		ldr	r3, .L222+4
 3385 1826 93F89330 		ldrb	r3, [r3, #147]	@ zero_extendqisi2
 3386 182a 002B     		cmp	r3, #0
 3387 182c 00F0F580 		beq	.L179
 693:../src/mw.c   ****                     nav_rated[LON] += constrain(wrap_18000(nav[LON] - nav_rated[LON]), -cfg.nav_sle
 3388              		.loc 1 693 0
 3389 1830 234B     		ldr	r3, .L222+48
 3390 1832 5B88     		ldrh	r3, [r3, #2]
 3391 1834 9CB2     		uxth	r4, r3
 3392 1836 234B     		ldr	r3, .L222+52
 3393 1838 5B88     		ldrh	r3, [r3, #2]
 3394 183a 1AB2     		sxth	r2, r3
 3395 183c 204B     		ldr	r3, .L222+48
 3396 183e 5B88     		ldrh	r3, [r3, #2]
 3397 1840 1BB2     		sxth	r3, r3
 3398 1842 D31A     		subs	r3, r2, r3
 3399 1844 1846     		mov	r0, r3
 3400 1846 FFF7FEFF 		bl	wrap_18000
 3401 184a 0246     		mov	r2, r0
 3402 184c 114B     		ldr	r3, .L222+4
 3403 184e 93F89330 		ldrb	r3, [r3, #147]	@ zero_extendqisi2
 3404 1852 C3F10003 		rsb	r3, r3, #0
 3405 1856 9A42     		cmp	r2, r3
 3406 1858 06DA     		bge	.L180
 3407              		.loc 1 693 0 is_stmt 0 discriminator 1
 3408 185a 0E4B     		ldr	r3, .L222+4
 3409 185c 93F89330 		ldrb	r3, [r3, #147]	@ zero_extendqisi2
 3410 1860 C3F10003 		rsb	r3, r3, #0
 3411 1864 9BB2     		uxth	r3, r3
 3412 1866 3DE0     		b	.L181
 3413              	.L180:
 3414              		.loc 1 693 0 discriminator 2
 3415 1868 164B     		ldr	r3, .L222+52
 3416 186a 5B88     		ldrh	r3, [r3, #2]
 3417 186c 1AB2     		sxth	r2, r3
 3418 186e 144B     		ldr	r3, .L222+48
 3419 1870 5B88     		ldrh	r3, [r3, #2]
 3420 1872 1BB2     		sxth	r3, r3
 3421 1874 D31A     		subs	r3, r2, r3
 3422 1876 1846     		mov	r0, r3
 3423 1878 FFF7FEFF 		bl	wrap_18000
 3424 187c 0246     		mov	r2, r0
 3425 187e 054B     		ldr	r3, .L222+4
 3426 1880 93F89330 		ldrb	r3, [r3, #147]	@ zero_extendqisi2
 3427 1884 9A42     		cmp	r2, r3
 3428 1886 21DD     		ble	.L182
 3429              		.loc 1 693 0 discriminator 3
 3430 1888 024B     		ldr	r3, .L222+4
 3431 188a 93F89330 		ldrb	r3, [r3, #147]	@ zero_extendqisi2
 3432 188e 29E0     		b	.L183
 3433              	.L223:
 3434              		.align	2
 3435              	.L222:
 3436 1890 00000000 		.word	f
 3437 1894 00000000 		.word	cfg
 3438 1898 00000000 		.word	rcCommand
 3439 189c 44000000 		.word	initialThrottleHold.9167
 3440 18a0 00000000 		.word	errorAltitudeI
 3441 18a4 50000000 		.word	isAltHoldChanged.9191
 3442 18a8 00000000 		.word	EstAlt
 3443 18ac 00000000 		.word	AltHold
 3444 18b0 00000000 		.word	BaroPID
 3445 18b4 52000000 		.word	AltHoldCorr.9192
 3446 18b8 D34D6210 		.word	274877907
 3447 18bc 00000000 		.word	heading
 3448 18c0 00000000 		.word	nav_rated
 3449 18c4 00000000 		.word	nav
 3450 18c8 35FA8E3C 		.word	1016003125
 3451              	.L182:
 3452              		.loc 1 693 0 discriminator 4
 3453 18cc 884B     		ldr	r3, .L224
 3454 18ce 5B88     		ldrh	r3, [r3, #2]
 3455 18d0 1AB2     		sxth	r2, r3
 3456 18d2 884B     		ldr	r3, .L224+4
 3457 18d4 5B88     		ldrh	r3, [r3, #2]
 3458 18d6 1BB2     		sxth	r3, r3
 3459 18d8 D31A     		subs	r3, r2, r3
 3460 18da 1846     		mov	r0, r3
 3461 18dc FFF7FEFF 		bl	wrap_18000
 3462 18e0 0346     		mov	r3, r0
 3463 18e2 9BB2     		uxth	r3, r3
 3464              	.L183:
 3465              	.L181:
 3466              		.loc 1 693 0 discriminator 6
 3467 18e4 E318     		adds	r3, r4, r3
 3468 18e6 9BB2     		uxth	r3, r3
 3469 18e8 9AB2     		uxth	r2, r3
 3470 18ea 824B     		ldr	r3, .L224+4
 3471 18ec 5A80     		strh	r2, [r3, #2]	@ movhi
 694:../src/mw.c   ****                     nav_rated[LAT] += constrain(wrap_18000(nav[LAT] - nav_rated[LAT]), -cfg.nav_sle
 3472              		.loc 1 694 0 is_stmt 1 discriminator 6
 3473 18ee 814B     		ldr	r3, .L224+4
 3474 18f0 1B88     		ldrh	r3, [r3, #0]
 3475 18f2 9CB2     		uxth	r4, r3
 3476 18f4 7E4B     		ldr	r3, .L224
 3477 18f6 1B88     		ldrh	r3, [r3, #0]
 3478 18f8 1AB2     		sxth	r2, r3
 3479 18fa 7E4B     		ldr	r3, .L224+4
 3480 18fc 1B88     		ldrh	r3, [r3, #0]
 3481 18fe 1BB2     		sxth	r3, r3
 3482 1900 D31A     		subs	r3, r2, r3
 3483 1902 1846     		mov	r0, r3
 3484 1904 FFF7FEFF 		bl	wrap_18000
 3485 1908 0246     		mov	r2, r0
 3486 190a 7B4B     		ldr	r3, .L224+8
 3487 190c 93F89330 		ldrb	r3, [r3, #147]	@ zero_extendqisi2
 3488 1910 C3F10003 		rsb	r3, r3, #0
 3489 1914 9A42     		cmp	r2, r3
 3490 1916 06DA     		bge	.L184
 3491              		.loc 1 694 0 is_stmt 0 discriminator 1
 3492 1918 774B     		ldr	r3, .L224+8
 3493 191a 93F89330 		ldrb	r3, [r3, #147]	@ zero_extendqisi2
 3494 191e C3F10003 		rsb	r3, r3, #0
 3495 1922 9BB2     		uxth	r3, r3
 3496 1924 1FE0     		b	.L185
 3497              	.L184:
 3498              		.loc 1 694 0 discriminator 2
 3499 1926 724B     		ldr	r3, .L224
 3500 1928 1B88     		ldrh	r3, [r3, #0]
 3501 192a 1AB2     		sxth	r2, r3
 3502 192c 714B     		ldr	r3, .L224+4
 3503 192e 1B88     		ldrh	r3, [r3, #0]
 3504 1930 1BB2     		sxth	r3, r3
 3505 1932 D31A     		subs	r3, r2, r3
 3506 1934 1846     		mov	r0, r3
 3507 1936 FFF7FEFF 		bl	wrap_18000
 3508 193a 0246     		mov	r2, r0
 3509 193c 6E4B     		ldr	r3, .L224+8
 3510 193e 93F89330 		ldrb	r3, [r3, #147]	@ zero_extendqisi2
 3511 1942 9A42     		cmp	r2, r3
 3512 1944 03DD     		ble	.L186
 3513              		.loc 1 694 0 discriminator 3
 3514 1946 6C4B     		ldr	r3, .L224+8
 3515 1948 93F89330 		ldrb	r3, [r3, #147]	@ zero_extendqisi2
 3516 194c 0BE0     		b	.L187
 3517              	.L186:
 3518              		.loc 1 694 0 discriminator 4
 3519 194e 684B     		ldr	r3, .L224
 3520 1950 1B88     		ldrh	r3, [r3, #0]
 3521 1952 1AB2     		sxth	r2, r3
 3522 1954 674B     		ldr	r3, .L224+4
 3523 1956 1B88     		ldrh	r3, [r3, #0]
 3524 1958 1BB2     		sxth	r3, r3
 3525 195a D31A     		subs	r3, r2, r3
 3526 195c 1846     		mov	r0, r3
 3527 195e FFF7FEFF 		bl	wrap_18000
 3528 1962 0346     		mov	r3, r0
 3529 1964 9BB2     		uxth	r3, r3
 3530              	.L187:
 3531              	.L185:
 3532              		.loc 1 694 0 discriminator 6
 3533 1966 E318     		adds	r3, r4, r3
 3534 1968 9BB2     		uxth	r3, r3
 3535 196a 9AB2     		uxth	r2, r3
 3536 196c 614B     		ldr	r3, .L224+4
 3537 196e 1A80     		strh	r2, [r3, #0]	@ movhi
 695:../src/mw.c   ****                     GPS_angle[ROLL] = (nav_rated[LON] * cos_yaw_x - nav_rated[LAT] * sin_yaw_y) / 1
 3538              		.loc 1 695 0 is_stmt 1 discriminator 6
 3539 1970 604B     		ldr	r3, .L224+4
 3540 1972 5B88     		ldrh	r3, [r3, #2]
 3541 1974 1BB2     		sxth	r3, r3
 3542 1976 1846     		mov	r0, r3
 3543 1978 FFF7FEFF 		bl	__aeabi_i2f
 3544 197c 0346     		mov	r3, r0
 3545 197e 1846     		mov	r0, r3
 3546 1980 F968     		ldr	r1, [r7, #12]	@ float
 3547 1982 FFF7FEFF 		bl	__aeabi_fmul
 3548 1986 0346     		mov	r3, r0
 3549 1988 1C46     		mov	r4, r3
 3550 198a 5A4B     		ldr	r3, .L224+4
 3551 198c 1B88     		ldrh	r3, [r3, #0]
 3552 198e 1BB2     		sxth	r3, r3
 3553 1990 1846     		mov	r0, r3
 3554 1992 FFF7FEFF 		bl	__aeabi_i2f
 3555 1996 0346     		mov	r3, r0
 3556 1998 1846     		mov	r0, r3
 3557 199a 3969     		ldr	r1, [r7, #16]	@ float
 3558 199c FFF7FEFF 		bl	__aeabi_fmul
 3559 19a0 0346     		mov	r3, r0
 3560 19a2 2046     		mov	r0, r4
 3561 19a4 1946     		mov	r1, r3
 3562 19a6 FFF7FEFF 		bl	__aeabi_fsub
 3563 19aa 0346     		mov	r3, r0
 3564 19ac 1846     		mov	r0, r3
 3565 19ae 5549     		ldr	r1, .L224+20	@ float
 3566 19b0 FFF7FEFF 		bl	__aeabi_fdiv
 3567 19b4 0346     		mov	r3, r0
 3568 19b6 1846     		mov	r0, r3
 3569 19b8 FFF7FEFF 		bl	__aeabi_f2iz
 3570 19bc 0346     		mov	r3, r0
 3571 19be 9AB2     		uxth	r2, r3
 3572 19c0 4E4B     		ldr	r3, .L224+12
 3573 19c2 1A80     		strh	r2, [r3, #0]	@ movhi
 696:../src/mw.c   ****                     GPS_angle[PITCH] = (nav_rated[LON] * sin_yaw_y + nav_rated[LAT] * cos_yaw_x) / 
 3574              		.loc 1 696 0 discriminator 6
 3575 19c4 4B4B     		ldr	r3, .L224+4
 3576 19c6 5B88     		ldrh	r3, [r3, #2]
 3577 19c8 1BB2     		sxth	r3, r3
 3578 19ca 1846     		mov	r0, r3
 3579 19cc FFF7FEFF 		bl	__aeabi_i2f
 3580 19d0 0346     		mov	r3, r0
 3581 19d2 1846     		mov	r0, r3
 3582 19d4 3969     		ldr	r1, [r7, #16]	@ float
 3583 19d6 FFF7FEFF 		bl	__aeabi_fmul
 3584 19da 0346     		mov	r3, r0
 3585 19dc 1C46     		mov	r4, r3
 3586 19de 454B     		ldr	r3, .L224+4
 3587 19e0 1B88     		ldrh	r3, [r3, #0]
 3588 19e2 1BB2     		sxth	r3, r3
 3589 19e4 1846     		mov	r0, r3
 3590 19e6 FFF7FEFF 		bl	__aeabi_i2f
 3591 19ea 0346     		mov	r3, r0
 3592 19ec 1846     		mov	r0, r3
 3593 19ee F968     		ldr	r1, [r7, #12]	@ float
 3594 19f0 FFF7FEFF 		bl	__aeabi_fmul
 3595 19f4 0346     		mov	r3, r0
 3596 19f6 2046     		mov	r0, r4
 3597 19f8 1946     		mov	r1, r3
 3598 19fa FFF7FEFF 		bl	__aeabi_fadd
 3599 19fe 0346     		mov	r3, r0
 3600 1a00 1846     		mov	r0, r3
 3601 1a02 4049     		ldr	r1, .L224+20	@ float
 3602 1a04 FFF7FEFF 		bl	__aeabi_fdiv
 3603 1a08 0346     		mov	r3, r0
 3604 1a0a 1846     		mov	r0, r3
 3605 1a0c FFF7FEFF 		bl	__aeabi_f2iz
 3606 1a10 0346     		mov	r3, r0
 3607 1a12 9AB2     		uxth	r2, r3
 3608 1a14 394B     		ldr	r3, .L224+12
 3609 1a16 5A80     		strh	r2, [r3, #2]	@ movhi
 3610 1a18 53E0     		b	.L177
 3611              	.L179:
 697:../src/mw.c   ****                 } else {
 698:../src/mw.c   ****                     GPS_angle[ROLL] = (nav[LON] * cos_yaw_x - nav[LAT] * sin_yaw_y) / 10;
 3612              		.loc 1 698 0
 3613 1a1a 354B     		ldr	r3, .L224
 3614 1a1c 5B88     		ldrh	r3, [r3, #2]
 3615 1a1e 1BB2     		sxth	r3, r3
 3616 1a20 1846     		mov	r0, r3
 3617 1a22 FFF7FEFF 		bl	__aeabi_i2f
 3618 1a26 0346     		mov	r3, r0
 3619 1a28 1846     		mov	r0, r3
 3620 1a2a F968     		ldr	r1, [r7, #12]	@ float
 3621 1a2c FFF7FEFF 		bl	__aeabi_fmul
 3622 1a30 0346     		mov	r3, r0
 3623 1a32 1C46     		mov	r4, r3
 3624 1a34 2E4B     		ldr	r3, .L224
 3625 1a36 1B88     		ldrh	r3, [r3, #0]
 3626 1a38 1BB2     		sxth	r3, r3
 3627 1a3a 1846     		mov	r0, r3
 3628 1a3c FFF7FEFF 		bl	__aeabi_i2f
 3629 1a40 0346     		mov	r3, r0
 3630 1a42 1846     		mov	r0, r3
 3631 1a44 3969     		ldr	r1, [r7, #16]	@ float
 3632 1a46 FFF7FEFF 		bl	__aeabi_fmul
 3633 1a4a 0346     		mov	r3, r0
 3634 1a4c 2046     		mov	r0, r4
 3635 1a4e 1946     		mov	r1, r3
 3636 1a50 FFF7FEFF 		bl	__aeabi_fsub
 3637 1a54 0346     		mov	r3, r0
 3638 1a56 1846     		mov	r0, r3
 3639 1a58 2A49     		ldr	r1, .L224+20	@ float
 3640 1a5a FFF7FEFF 		bl	__aeabi_fdiv
 3641 1a5e 0346     		mov	r3, r0
 3642 1a60 1846     		mov	r0, r3
 3643 1a62 FFF7FEFF 		bl	__aeabi_f2iz
 3644 1a66 0346     		mov	r3, r0
 3645 1a68 9AB2     		uxth	r2, r3
 3646 1a6a 244B     		ldr	r3, .L224+12
 3647 1a6c 1A80     		strh	r2, [r3, #0]	@ movhi
 699:../src/mw.c   ****                     GPS_angle[PITCH] = (nav[LON] * sin_yaw_y + nav[LAT] * cos_yaw_x) / 10;
 3648              		.loc 1 699 0
 3649 1a6e 204B     		ldr	r3, .L224
 3650 1a70 5B88     		ldrh	r3, [r3, #2]
 3651 1a72 1BB2     		sxth	r3, r3
 3652 1a74 1846     		mov	r0, r3
 3653 1a76 FFF7FEFF 		bl	__aeabi_i2f
 3654 1a7a 0346     		mov	r3, r0
 3655 1a7c 1846     		mov	r0, r3
 3656 1a7e 3969     		ldr	r1, [r7, #16]	@ float
 3657 1a80 FFF7FEFF 		bl	__aeabi_fmul
 3658 1a84 0346     		mov	r3, r0
 3659 1a86 1C46     		mov	r4, r3
 3660 1a88 194B     		ldr	r3, .L224
 3661 1a8a 1B88     		ldrh	r3, [r3, #0]
 3662 1a8c 1BB2     		sxth	r3, r3
 3663 1a8e 1846     		mov	r0, r3
 3664 1a90 FFF7FEFF 		bl	__aeabi_i2f
 3665 1a94 0346     		mov	r3, r0
 3666 1a96 1846     		mov	r0, r3
 3667 1a98 F968     		ldr	r1, [r7, #12]	@ float
 3668 1a9a FFF7FEFF 		bl	__aeabi_fmul
 3669 1a9e 0346     		mov	r3, r0
 3670 1aa0 2046     		mov	r0, r4
 3671 1aa2 1946     		mov	r1, r3
 3672 1aa4 FFF7FEFF 		bl	__aeabi_fadd
 3673 1aa8 0346     		mov	r3, r0
 3674 1aaa 1846     		mov	r0, r3
 3675 1aac 1549     		ldr	r1, .L224+20	@ float
 3676 1aae FFF7FEFF 		bl	__aeabi_fdiv
 3677 1ab2 0346     		mov	r3, r0
 3678 1ab4 1846     		mov	r0, r3
 3679 1ab6 FFF7FEFF 		bl	__aeabi_f2iz
 3680 1aba 0346     		mov	r3, r0
 3681 1abc 9AB2     		uxth	r2, r3
 3682 1abe 0F4B     		ldr	r3, .L224+12
 3683 1ac0 5A80     		strh	r2, [r3, #2]	@ movhi
 3684              	.L177:
 3685              	.LBE8:
 700:../src/mw.c   ****                 }
 701:../src/mw.c   ****             }
 702:../src/mw.c   ****         }
 703:../src/mw.c   **** 
 704:../src/mw.c   ****         // **** PITCH & ROLL & YAW PID ****
 705:../src/mw.c   ****         prop = max(abs(rcCommand[PITCH]), abs(rcCommand[ROLL])); // range [0;500]
 3686              		.loc 1 705 0
 3687 1ac2 0F4B     		ldr	r3, .L224+16
 3688 1ac4 1B88     		ldrh	r3, [r3, #0]
 3689 1ac6 1BB2     		sxth	r3, r3
 3690 1ac8 83EAE372 		eor	r2, r3, r3, asr #31
 3691 1acc A2EBE372 		sub	r2, r2, r3, asr #31
 3692 1ad0 0B4B     		ldr	r3, .L224+16
 3693 1ad2 5B88     		ldrh	r3, [r3, #2]
 3694 1ad4 1BB2     		sxth	r3, r3
 3695 1ad6 002B     		cmp	r3, #0
 3696 1ad8 B8BF     		it	lt
 3697 1ada 5B42     		rsblt	r3, r3, #0
 3698 1adc 9A42     		cmp	r2, r3
 3699 1ade A8BF     		it	ge
 3700 1ae0 1346     		movge	r3, r2
 3701 1ae2 7B81     		strh	r3, [r7, #10]	@ movhi
 706:../src/mw.c   ****         for (axis = 0; axis < 3; axis++) {
 3702              		.loc 1 706 0
 3703 1ae4 4FF00003 		mov	r3, #0
 3704 1ae8 87F82630 		strb	r3, [r7, #38]
 3705 1aec 11E2     		b	.L188
 3706              	.L225:
 3707 1aee 00BF     		.align	2
 3708              	.L224:
 3709 1af0 00000000 		.word	nav
 3710 1af4 00000000 		.word	nav_rated
 3711 1af8 00000000 		.word	cfg
 3712 1afc 00000000 		.word	GPS_angle
 3713 1b00 00000000 		.word	rcCommand
 3714 1b04 00002041 		.word	1092616192
 3715              	.L205:
 707:../src/mw.c   ****             if ((f.ANGLE_MODE || f.HORIZON_MODE) && axis < 2) { // MODE relying on ACC
 3716              		.loc 1 707 0
 3717 1b08 B54B     		ldr	r3, .L226
 3718 1b0a DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 3719 1b0c 002B     		cmp	r3, #0
 3720 1b0e 04D1     		bne	.L189
 3721              		.loc 1 707 0 is_stmt 0 discriminator 2
 3722 1b10 B34B     		ldr	r3, .L226
 3723 1b12 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 3724 1b14 002B     		cmp	r3, #0
 3725 1b16 00F0A980 		beq	.L190
 3726              	.L189:
 3727              		.loc 1 707 0 discriminator 1
 3728 1b1a 97F82630 		ldrb	r3, [r7, #38]	@ zero_extendqisi2
 3729 1b1e 012B     		cmp	r3, #1
 3730 1b20 00F2A480 		bhi	.L190
 708:../src/mw.c   ****                 // 50 degrees max inclination
 709:../src/mw.c   ****                 errorAngle = constrain(2 * rcCommand[axis] + GPS_angle[axis], -500, +500) - angle[a
 3731              		.loc 1 709 0 is_stmt 1
 3732 1b24 97F82620 		ldrb	r2, [r7, #38]	@ zero_extendqisi2
 3733 1b28 AE4B     		ldr	r3, .L226+4
 3734 1b2a 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 3735 1b2e 1BB2     		sxth	r3, r3
 3736 1b30 4FEA4302 		lsl	r2, r3, #1
 3737 1b34 97F82610 		ldrb	r1, [r7, #38]	@ zero_extendqisi2
 3738 1b38 AB4B     		ldr	r3, .L226+8
 3739 1b3a 33F81130 		ldrh	r3, [r3, r1, lsl #1]
 3740 1b3e 1BB2     		sxth	r3, r3
 3741 1b40 D318     		adds	r3, r2, r3
 3742 1b42 13F5FA7F 		cmn	r3, #500
 3743 1b46 15DB     		blt	.L191
 3744              		.loc 1 709 0 is_stmt 0 discriminator 1
 3745 1b48 97F82620 		ldrb	r2, [r7, #38]	@ zero_extendqisi2
 3746 1b4c A54B     		ldr	r3, .L226+4
 3747 1b4e 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 3748 1b52 1BB2     		sxth	r3, r3
 3749 1b54 4FEA4302 		lsl	r2, r3, #1
 3750 1b58 97F82610 		ldrb	r1, [r7, #38]	@ zero_extendqisi2
 3751 1b5c A24B     		ldr	r3, .L226+8
 3752 1b5e 33F81130 		ldrh	r3, [r3, r1, lsl #1]
 3753 1b62 1BB2     		sxth	r3, r3
 3754 1b64 D318     		adds	r3, r2, r3
 3755 1b66 B3F5FA7F 		cmp	r3, #500
 3756 1b6a A8BF     		it	ge
 3757 1b6c 4FF4FA73 		movge	r3, #500
 3758 1b70 9BB2     		uxth	r3, r3
 3759 1b72 01E0     		b	.L192
 3760              	.L191:
 3761              		.loc 1 709 0 discriminator 2
 3762 1b74 4FF60C63 		movw	r3, #65036
 3763              	.L192:
 3764              		.loc 1 709 0 discriminator 3
 3765 1b78 97F82610 		ldrb	r1, [r7, #38]	@ zero_extendqisi2
 3766 1b7c 9B4A     		ldr	r2, .L226+12
 3767 1b7e 32F81120 		ldrh	r2, [r2, r1, lsl #1]
 3768 1b82 92B2     		uxth	r2, r2
 3769 1b84 9B1A     		subs	r3, r3, r2
 3770 1b86 9AB2     		uxth	r2, r3
 3771 1b88 97F82610 		ldrb	r1, [r7, #38]	@ zero_extendqisi2
 3772 1b8c 984B     		ldr	r3, .L226+16
 3773 1b8e 01F11401 		add	r1, r1, #20
 3774 1b92 33F81130 		ldrh	r3, [r3, r1, lsl #1]
 3775 1b96 9BB2     		uxth	r3, r3
 3776 1b98 D318     		adds	r3, r2, r3
 3777 1b9a 9BB2     		uxth	r3, r3
 3778 1b9c 3B81     		strh	r3, [r7, #8]	@ movhi
 710:../src/mw.c   ****                 PTermACC = (int32_t)errorAngle * cfg.P8[PIDLEVEL] / 100; // 32 bits is needed for c
 3779              		.loc 1 710 0 is_stmt 1 discriminator 3
 3780 1b9e B7F90830 		ldrsh	r3, [r7, #8]
 3781 1ba2 934A     		ldr	r2, .L226+16
 3782 1ba4 D279     		ldrb	r2, [r2, #7]	@ zero_extendqisi2
 3783 1ba6 02FB03F3 		mul	r3, r2, r3
 3784 1baa 924A     		ldr	r2, .L226+20
 3785 1bac 82FB0312 		smull	r1, r2, r2, r3
 3786 1bb0 4FEA6212 		asr	r2, r2, #5
 3787 1bb4 4FEAE373 		asr	r3, r3, #31
 3788 1bb8 D31A     		subs	r3, r2, r3
 3789 1bba FB83     		strh	r3, [r7, #30]	@ movhi
 711:../src/mw.c   ****                 PTermACC = constrain(PTermACC, -cfg.D8[PIDLEVEL] * 5, +cfg.D8[PIDLEVEL] * 5);
 3790              		.loc 1 711 0 discriminator 3
 3791 1bbc B7F91E10 		ldrsh	r1, [r7, #30]
 3792 1bc0 8B4B     		ldr	r3, .L226+16
 3793 1bc2 DB7E     		ldrb	r3, [r3, #27]	@ zero_extendqisi2
 3794 1bc4 1A46     		mov	r2, r3
 3795 1bc6 1346     		mov	r3, r2
 3796 1bc8 4FEA8373 		lsl	r3, r3, #30
 3797 1bcc 9B1A     		subs	r3, r3, r2
 3798 1bce 4FEA8303 		lsl	r3, r3, #2
 3799 1bd2 9B1A     		subs	r3, r3, r2
 3800 1bd4 9942     		cmp	r1, r3
 3801 1bd6 0BDA     		bge	.L193
 3802              		.loc 1 711 0 is_stmt 0 discriminator 1
 3803 1bd8 854B     		ldr	r3, .L226+16
 3804 1bda DB7E     		ldrb	r3, [r3, #27]	@ zero_extendqisi2
 3805 1bdc 1A46     		mov	r2, r3	@ movhi
 3806 1bde 4FEA8232 		lsl	r2, r2, #14
 3807 1be2 D21A     		subs	r2, r2, r3
 3808 1be4 4FEA8202 		lsl	r2, r2, #2
 3809 1be8 D31A     		subs	r3, r2, r3
 3810 1bea 9BB2     		uxth	r3, r3
 3811 1bec 9BB2     		uxth	r3, r3
 3812 1bee 0CE0     		b	.L194
 3813              	.L193:
 3814              		.loc 1 711 0 discriminator 2
 3815 1bf0 B7F91E10 		ldrsh	r1, [r7, #30]
 3816 1bf4 7E4B     		ldr	r3, .L226+16
 3817 1bf6 DB7E     		ldrb	r3, [r3, #27]	@ zero_extendqisi2
 3818 1bf8 1A46     		mov	r2, r3
 3819 1bfa 1346     		mov	r3, r2
 3820 1bfc 4FEA8303 		lsl	r3, r3, #2
 3821 1c00 9B18     		adds	r3, r3, r2
 3822 1c02 9942     		cmp	r1, r3
 3823 1c04 B8BF     		it	lt
 3824 1c06 0B46     		movlt	r3, r1
 3825 1c08 9BB2     		uxth	r3, r3
 3826              	.L194:
 3827              		.loc 1 711 0 discriminator 3
 3828 1c0a FB83     		strh	r3, [r7, #30]	@ movhi
 712:../src/mw.c   **** 
 713:../src/mw.c   ****                 errorAngleI[axis] = constrain(errorAngleI[axis] + errorAngle, -10000, +10000); // W
 3829              		.loc 1 713 0 is_stmt 1 discriminator 3
 3830 1c0c 97F82610 		ldrb	r1, [r7, #38]	@ zero_extendqisi2
 3831 1c10 97F82620 		ldrb	r2, [r7, #38]	@ zero_extendqisi2
 3832 1c14 784B     		ldr	r3, .L226+24
 3833 1c16 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 3834 1c1a 1AB2     		sxth	r2, r3
 3835 1c1c B7F90830 		ldrsh	r3, [r7, #8]
 3836 1c20 D218     		adds	r2, r2, r3
 3837 1c22 764B     		ldr	r3, .L226+28
 3838 1c24 9A42     		cmp	r2, r3
 3839 1c26 0FDB     		blt	.L195
 3840              		.loc 1 713 0 is_stmt 0 discriminator 1
 3841 1c28 97F82620 		ldrb	r2, [r7, #38]	@ zero_extendqisi2
 3842 1c2c 724B     		ldr	r3, .L226+24
 3843 1c2e 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 3844 1c32 1AB2     		sxth	r2, r3
 3845 1c34 B7F90830 		ldrsh	r3, [r7, #8]
 3846 1c38 D218     		adds	r2, r2, r3
 3847 1c3a 42F21073 		movw	r3, #10000
 3848 1c3e 9A42     		cmp	r2, r3
 3849 1c40 B8BF     		it	lt
 3850 1c42 1346     		movlt	r3, r2
 3851 1c44 9BB2     		uxth	r3, r3
 3852 1c46 01E0     		b	.L196
 3853              	.L195:
 3854              		.loc 1 713 0 discriminator 2
 3855 1c48 4DF6F003 		movw	r3, #55536
 3856              	.L196:
 3857              		.loc 1 713 0 discriminator 3
 3858 1c4c 6A4A     		ldr	r2, .L226+24
 3859 1c4e 22F81130 		strh	r3, [r2, r1, lsl #1]	@ movhi
 714:../src/mw.c   ****                 ITermACC = ((int32_t)errorAngleI[axis] * cfg.I8[PIDLEVEL]) >> 12;
 3860              		.loc 1 714 0 is_stmt 1 discriminator 3
 3861 1c52 97F82620 		ldrb	r2, [r7, #38]	@ zero_extendqisi2
 3862 1c56 684B     		ldr	r3, .L226+24
 3863 1c58 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 3864 1c5c 1BB2     		sxth	r3, r3
 3865 1c5e 644A     		ldr	r2, .L226+16
 3866 1c60 527C     		ldrb	r2, [r2, #17]	@ zero_extendqisi2
 3867 1c62 02FB03F3 		mul	r3, r2, r3
 3868 1c66 4FEA2333 		asr	r3, r3, #12
 3869 1c6a BB83     		strh	r3, [r7, #28]	@ movhi
 3870              	.L190:
 715:../src/mw.c   ****             }
 716:../src/mw.c   ****             if (!f.ANGLE_MODE || f.HORIZON_MODE || axis == 2) { // MODE relying on GYRO or YAW axis
 3871              		.loc 1 716 0
 3872 1c6c 5C4B     		ldr	r3, .L226
 3873 1c6e DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 3874 1c70 002B     		cmp	r3, #0
 3875 1c72 07D0     		beq	.L197
 3876              		.loc 1 716 0 is_stmt 0 discriminator 1
 3877 1c74 5A4B     		ldr	r3, .L226
 3878 1c76 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 3879 1c78 002B     		cmp	r3, #0
 3880 1c7a 03D1     		bne	.L197
 3881 1c7c 97F82630 		ldrb	r3, [r7, #38]	@ zero_extendqisi2
 3882 1c80 022B     		cmp	r3, #2
 3883 1c82 73D1     		bne	.L198
 3884              	.L197:
 717:../src/mw.c   ****                 error = (int32_t)rcCommand[axis] * 10 * 8 / cfg.P8[axis];
 3885              		.loc 1 717 0 is_stmt 1
 3886 1c84 97F82620 		ldrb	r2, [r7, #38]	@ zero_extendqisi2
 3887 1c88 564B     		ldr	r3, .L226+4
 3888 1c8a 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 3889 1c8e 1AB2     		sxth	r2, r3
 3890 1c90 1346     		mov	r3, r2
 3891 1c92 4FEA8303 		lsl	r3, r3, #2
 3892 1c96 9B18     		adds	r3, r3, r2
 3893 1c98 4FEA0313 		lsl	r3, r3, #4
 3894 1c9c 1A46     		mov	r2, r3
 3895 1c9e 97F82630 		ldrb	r3, [r7, #38]	@ zero_extendqisi2
 3896 1ca2 5349     		ldr	r1, .L226+16
 3897 1ca4 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 3898 1ca6 92FBF3F3 		sdiv	r3, r2, r3
 3899 1caa FB80     		strh	r3, [r7, #6]	@ movhi
 718:../src/mw.c   ****                 error -= gyroData[axis];
 3900              		.loc 1 718 0
 3901 1cac FA88     		ldrh	r2, [r7, #6]
 3902 1cae 97F82610 		ldrb	r1, [r7, #38]	@ zero_extendqisi2
 3903 1cb2 534B     		ldr	r3, .L226+32
 3904 1cb4 33F81130 		ldrh	r3, [r3, r1, lsl #1]
 3905 1cb8 9BB2     		uxth	r3, r3
 3906 1cba D31A     		subs	r3, r2, r3
 3907 1cbc 9BB2     		uxth	r3, r3
 3908 1cbe FB80     		strh	r3, [r7, #6]	@ movhi
 719:../src/mw.c   **** 
 720:../src/mw.c   ****                 PTermGYRO = rcCommand[axis];
 3909              		.loc 1 720 0
 3910 1cc0 97F82620 		ldrb	r2, [r7, #38]	@ zero_extendqisi2
 3911 1cc4 474B     		ldr	r3, .L226+4
 3912 1cc6 33F81230 		ldrh	r3, [r3, r2, lsl #1]	@ movhi
 3913 1cca 7B83     		strh	r3, [r7, #26]	@ movhi
 721:../src/mw.c   **** 
 722:../src/mw.c   ****                 errorGyroI[axis] = constrain(errorGyroI[axis] + error, -16000, +16000); // WindUp
 3914              		.loc 1 722 0
 3915 1ccc 97F82610 		ldrb	r1, [r7, #38]	@ zero_extendqisi2
 3916 1cd0 97F82620 		ldrb	r2, [r7, #38]	@ zero_extendqisi2
 3917 1cd4 4B4B     		ldr	r3, .L226+36
 3918 1cd6 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 3919 1cda 1AB2     		sxth	r2, r3
 3920 1cdc B7F90630 		ldrsh	r3, [r7, #6]
 3921 1ce0 D318     		adds	r3, r2, r3
 3922 1ce2 13F57A5F 		cmn	r3, #16000
 3923 1ce6 0FDB     		blt	.L199
 3924              		.loc 1 722 0 is_stmt 0 discriminator 1
 3925 1ce8 97F82620 		ldrb	r2, [r7, #38]	@ zero_extendqisi2
 3926 1cec 454B     		ldr	r3, .L226+36
 3927 1cee 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 3928 1cf2 1AB2     		sxth	r2, r3
 3929 1cf4 B7F90630 		ldrsh	r3, [r7, #6]
 3930 1cf8 D318     		adds	r3, r2, r3
 3931 1cfa B3F57A5F 		cmp	r3, #16000
 3932 1cfe A8BF     		it	ge
 3933 1d00 4FF47A53 		movge	r3, #16000
 3934 1d04 9BB2     		uxth	r3, r3
 3935 1d06 01E0     		b	.L200
 3936              	.L199:
 3937              		.loc 1 722 0 discriminator 2
 3938 1d08 4CF28013 		movw	r3, #49536
 3939              	.L200:
 3940              		.loc 1 722 0 discriminator 3
 3941 1d0c 3D4A     		ldr	r2, .L226+36
 3942 1d0e 22F81130 		strh	r3, [r2, r1, lsl #1]	@ movhi
 723:../src/mw.c   ****                 if (abs(gyroData[axis]) > 640)
 3943              		.loc 1 723 0 is_stmt 1 discriminator 3
 3944 1d12 97F82620 		ldrb	r2, [r7, #38]	@ zero_extendqisi2
 3945 1d16 3A4B     		ldr	r3, .L226+32
 3946 1d18 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 3947 1d1c 1BB2     		sxth	r3, r3
 3948 1d1e 002B     		cmp	r3, #0
 3949 1d20 B8BF     		it	lt
 3950 1d22 5B42     		rsblt	r3, r3, #0
 3951 1d24 B3F5207F 		cmp	r3, #640
 3952 1d28 06DD     		ble	.L201
 724:../src/mw.c   ****                     errorGyroI[axis] = 0;
 3953              		.loc 1 724 0
 3954 1d2a 97F82620 		ldrb	r2, [r7, #38]	@ zero_extendqisi2
 3955 1d2e 354B     		ldr	r3, .L226+36
 3956 1d30 4FF00001 		mov	r1, #0
 3957 1d34 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 3958              	.L201:
 725:../src/mw.c   ****                 ITermGYRO = (errorGyroI[axis] / 125 * cfg.I8[axis]) >> 6;
 3959              		.loc 1 725 0
 3960 1d38 97F82620 		ldrb	r2, [r7, #38]	@ zero_extendqisi2
 3961 1d3c 314B     		ldr	r3, .L226+36
 3962 1d3e 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 3963 1d42 1BB2     		sxth	r3, r3
 3964 1d44 304A     		ldr	r2, .L226+40
 3965 1d46 82FB0302 		smull	r0, r2, r2, r3
 3966 1d4a 4FEAE202 		asr	r2, r2, #3
 3967 1d4e 4FEAE373 		asr	r3, r3, #31
 3968 1d52 D31A     		subs	r3, r2, r3
 3969 1d54 9BB2     		uxth	r3, r3
 3970 1d56 1BB2     		sxth	r3, r3
 3971 1d58 97F82620 		ldrb	r2, [r7, #38]	@ zero_extendqisi2
 3972 1d5c 2449     		ldr	r1, .L226+16
 3973 1d5e 8A18     		adds	r2, r1, r2
 3974 1d60 927A     		ldrb	r2, [r2, #10]	@ zero_extendqisi2
 3975 1d62 02FB03F3 		mul	r3, r2, r3
 3976 1d66 4FEAA313 		asr	r3, r3, #6
 3977 1d6a 3B83     		strh	r3, [r7, #24]	@ movhi
 3978              	.L198:
 726:../src/mw.c   ****             }
 727:../src/mw.c   ****             if (f.HORIZON_MODE && axis < 2) {
 3979              		.loc 1 727 0
 3980 1d6c 1C4B     		ldr	r3, .L226
 3981 1d6e 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 3982 1d70 002B     		cmp	r3, #0
 3983 1d72 4BD0     		beq	.L202
 3984              		.loc 1 727 0 is_stmt 0 discriminator 1
 3985 1d74 97F82630 		ldrb	r3, [r7, #38]	@ zero_extendqisi2
 3986 1d78 012B     		cmp	r3, #1
 3987 1d7a 47D8     		bhi	.L202
 728:../src/mw.c   ****                 PTerm = ((int32_t)PTermACC * (500 - prop) + (int32_t)PTermGYRO * prop) / 500;
 3988              		.loc 1 728 0 is_stmt 1
 3989 1d7c B7F91E30 		ldrsh	r3, [r7, #30]
 3990 1d80 B7F90A20 		ldrsh	r2, [r7, #10]
 3991 1d84 C2F5FA72 		rsb	r2, r2, #500
 3992 1d88 02FB03F2 		mul	r2, r2, r3
 3993 1d8c B7F91A30 		ldrsh	r3, [r7, #26]
 3994 1d90 B7F90A10 		ldrsh	r1, [r7, #10]
 3995 1d94 01FB03F3 		mul	r3, r1, r3
 3996 1d98 D318     		adds	r3, r2, r3
 3997 1d9a 1B4A     		ldr	r2, .L226+40
 3998 1d9c 82FB0312 		smull	r1, r2, r2, r3
 3999 1da0 4FEA6212 		asr	r2, r2, #5
 4000 1da4 4FEAE373 		asr	r3, r3, #31
 4001 1da8 D31A     		subs	r3, r2, r3
 4002 1daa 7B84     		strh	r3, [r7, #34]	@ movhi
 729:../src/mw.c   ****                 ITerm = ((int32_t)ITermACC * (500 - prop) + (int32_t)ITermGYRO * prop) / 500;
 4003              		.loc 1 729 0
 4004 1dac B7F91C30 		ldrsh	r3, [r7, #28]
 4005 1db0 B7F90A20 		ldrsh	r2, [r7, #10]
 4006 1db4 C2F5FA72 		rsb	r2, r2, #500
 4007 1db8 02FB03F2 		mul	r2, r2, r3
 4008 1dbc B7F91830 		ldrsh	r3, [r7, #24]
 4009 1dc0 B7F90A10 		ldrsh	r1, [r7, #10]
 4010 1dc4 01FB03F3 		mul	r3, r1, r3
 4011 1dc8 D318     		adds	r3, r2, r3
 4012 1dca 0F4A     		ldr	r2, .L226+40
 4013 1dcc 82FB0302 		smull	r0, r2, r2, r3
 4014 1dd0 4FEA6212 		asr	r2, r2, #5
 4015 1dd4 4FEAE373 		asr	r3, r3, #31
 4016 1dd8 D31A     		subs	r3, r2, r3
 4017 1dda 3B84     		strh	r3, [r7, #32]	@ movhi
 4018 1ddc 27E0     		b	.L203
 4019              	.L227:
 4020 1dde 00BF     		.align	2
 4021              	.L226:
 4022 1de0 00000000 		.word	f
 4023 1de4 00000000 		.word	rcCommand
 4024 1de8 00000000 		.word	GPS_angle
 4025 1dec 00000000 		.word	angle
 4026 1df0 00000000 		.word	cfg
 4027 1df4 1F85EB51 		.word	1374389535
 4028 1df8 40000000 		.word	errorAngleI.9160
 4029 1dfc F0D8FFFF 		.word	-10000
 4030 1e00 00000000 		.word	gyroData
 4031 1e04 38000000 		.word	errorGyroI.9159
 4032 1e08 D34D6210 		.word	274877907
 4033              	.L202:
 730:../src/mw.c   ****             } else {
 731:../src/mw.c   ****                 if (f.ANGLE_MODE && axis < 2) {
 4034              		.loc 1 731 0
 4035 1e0c 484B     		ldr	r3, .L228
 4036 1e0e DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 4037 1e10 002B     		cmp	r3, #0
 4038 1e12 08D0     		beq	.L204
 4039              		.loc 1 731 0 is_stmt 0 discriminator 1
 4040 1e14 97F82630 		ldrb	r3, [r7, #38]	@ zero_extendqisi2
 4041 1e18 012B     		cmp	r3, #1
 4042 1e1a 04D8     		bhi	.L204
 732:../src/mw.c   ****                     PTerm = PTermACC;
 4043              		.loc 1 732 0 is_stmt 1
 4044 1e1c FB8B     		ldrh	r3, [r7, #30]	@ movhi
 4045 1e1e 7B84     		strh	r3, [r7, #34]	@ movhi
 733:../src/mw.c   ****                     ITerm = ITermACC;
 4046              		.loc 1 733 0
 4047 1e20 BB8B     		ldrh	r3, [r7, #28]	@ movhi
 4048 1e22 3B84     		strh	r3, [r7, #32]	@ movhi
 4049 1e24 03E0     		b	.L203
 4050              	.L204:
 734:../src/mw.c   ****                 } else {
 735:../src/mw.c   ****                     PTerm = PTermGYRO;
 4051              		.loc 1 735 0
 4052 1e26 7B8B     		ldrh	r3, [r7, #26]	@ movhi
 4053 1e28 7B84     		strh	r3, [r7, #34]	@ movhi
 736:../src/mw.c   ****                     ITerm = ITermGYRO;
 4054              		.loc 1 736 0
 4055 1e2a 3B8B     		ldrh	r3, [r7, #24]	@ movhi
 4056 1e2c 3B84     		strh	r3, [r7, #32]	@ movhi
 4057              	.L203:
 737:../src/mw.c   ****                 }
 738:../src/mw.c   ****             }
 739:../src/mw.c   **** 
 740:../src/mw.c   ****             PTerm -= (int32_t)gyroData[axis] * dynP8[axis] / 10 / 8; // 32 bits is needed for calcu
 4058              		.loc 1 740 0
 4059 1e2e 7A8C     		ldrh	r2, [r7, #34]
 4060 1e30 97F82610 		ldrb	r1, [r7, #38]	@ zero_extendqisi2
 4061 1e34 3F4B     		ldr	r3, .L228+4
 4062 1e36 33F81130 		ldrh	r3, [r3, r1, lsl #1]
 4063 1e3a 1BB2     		sxth	r3, r3
 4064 1e3c 97F82610 		ldrb	r1, [r7, #38]	@ zero_extendqisi2
 4065 1e40 3D48     		ldr	r0, .L228+8
 4066 1e42 415C     		ldrb	r1, [r0, r1]	@ zero_extendqisi2
 4067 1e44 01FB03F3 		mul	r3, r1, r3
 4068 1e48 3C49     		ldr	r1, .L228+12
 4069 1e4a 81FB0301 		smull	r0, r1, r1, r3
 4070 1e4e 4FEA6111 		asr	r1, r1, #5
 4071 1e52 4FEAE373 		asr	r3, r3, #31
 4072 1e56 CB1A     		subs	r3, r1, r3
 4073 1e58 9BB2     		uxth	r3, r3
 4074 1e5a D31A     		subs	r3, r2, r3
 4075 1e5c 9BB2     		uxth	r3, r3
 4076 1e5e 7B84     		strh	r3, [r7, #34]	@ movhi
 741:../src/mw.c   ****             delta = gyroData[axis] - lastGyro[axis]; // 16 bits is ok here, the dif between 2 conse
 4077              		.loc 1 741 0
 4078 1e60 97F82620 		ldrb	r2, [r7, #38]	@ zero_extendqisi2
 4079 1e64 334B     		ldr	r3, .L228+4
 4080 1e66 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 4081 1e6a 9AB2     		uxth	r2, r3
 4082 1e6c 97F82610 		ldrb	r1, [r7, #38]	@ zero_extendqisi2
 4083 1e70 334B     		ldr	r3, .L228+16
 4084 1e72 33F81130 		ldrh	r3, [r3, r1, lsl #1]
 4085 1e76 9BB2     		uxth	r3, r3
 4086 1e78 D31A     		subs	r3, r2, r3
 4087 1e7a 9BB2     		uxth	r3, r3
 4088 1e7c BB80     		strh	r3, [r7, #4]	@ movhi
 742:../src/mw.c   ****             lastGyro[axis] = gyroData[axis];
 4089              		.loc 1 742 0
 4090 1e7e 97F82620 		ldrb	r2, [r7, #38]	@ zero_extendqisi2
 4091 1e82 97F82610 		ldrb	r1, [r7, #38]	@ zero_extendqisi2
 4092 1e86 2B4B     		ldr	r3, .L228+4
 4093 1e88 33F81110 		ldrh	r1, [r3, r1, lsl #1]
 4094 1e8c 2C4B     		ldr	r3, .L228+16
 4095 1e8e 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 743:../src/mw.c   ****             deltaSum = delta1[axis] + delta2[axis] + delta;
 4096              		.loc 1 743 0
 4097 1e92 97F82620 		ldrb	r2, [r7, #38]	@ zero_extendqisi2
 4098 1e96 2B4B     		ldr	r3, .L228+20
 4099 1e98 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 4100 1e9c 9AB2     		uxth	r2, r3
 4101 1e9e 97F82610 		ldrb	r1, [r7, #38]	@ zero_extendqisi2
 4102 1ea2 294B     		ldr	r3, .L228+24
 4103 1ea4 33F81130 		ldrh	r3, [r3, r1, lsl #1]
 4104 1ea8 9BB2     		uxth	r3, r3
 4105 1eaa D318     		adds	r3, r2, r3
 4106 1eac 9AB2     		uxth	r2, r3
 4107 1eae BB88     		ldrh	r3, [r7, #4]
 4108 1eb0 D318     		adds	r3, r2, r3
 4109 1eb2 9BB2     		uxth	r3, r3
 4110 1eb4 7B80     		strh	r3, [r7, #2]	@ movhi
 744:../src/mw.c   ****             delta2[axis] = delta1[axis];
 4111              		.loc 1 744 0
 4112 1eb6 97F82620 		ldrb	r2, [r7, #38]	@ zero_extendqisi2
 4113 1eba 97F82610 		ldrb	r1, [r7, #38]	@ zero_extendqisi2
 4114 1ebe 214B     		ldr	r3, .L228+20
 4115 1ec0 33F81110 		ldrh	r1, [r3, r1, lsl #1]
 4116 1ec4 204B     		ldr	r3, .L228+24
 4117 1ec6 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 745:../src/mw.c   ****             delta1[axis] = delta;
 4118              		.loc 1 745 0
 4119 1eca 97F82620 		ldrb	r2, [r7, #38]	@ zero_extendqisi2
 4120 1ece 1D4B     		ldr	r3, .L228+20
 4121 1ed0 B988     		ldrh	r1, [r7, #4]	@ movhi
 4122 1ed2 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 746:../src/mw.c   ****             DTerm = ((int32_t)deltaSum * dynD8[axis]) >> 5; // 32 bits is needed for calculation
 4123              		.loc 1 746 0
 4124 1ed6 B7F90230 		ldrsh	r3, [r7, #2]
 4125 1eda 97F82620 		ldrb	r2, [r7, #38]	@ zero_extendqisi2
 4126 1ede 1B49     		ldr	r1, .L228+28
 4127 1ee0 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 4128 1ee2 02FB03F3 		mul	r3, r2, r3
 4129 1ee6 4FEA6313 		asr	r3, r3, #5
 4130 1eea 3B80     		strh	r3, [r7, #0]	@ movhi
 747:../src/mw.c   ****             axisPID[axis] =  PTerm + ITerm - DTerm;
 4131              		.loc 1 747 0
 4132 1eec 97F82620 		ldrb	r2, [r7, #38]	@ zero_extendqisi2
 4133 1ef0 798C     		ldrh	r1, [r7, #34]
 4134 1ef2 3B8C     		ldrh	r3, [r7, #32]
 4135 1ef4 CB18     		adds	r3, r1, r3
 4136 1ef6 99B2     		uxth	r1, r3
 4137 1ef8 3B88     		ldrh	r3, [r7, #0]
 4138 1efa CB1A     		subs	r3, r1, r3
 4139 1efc 9BB2     		uxth	r3, r3
 4140 1efe 99B2     		uxth	r1, r3
 4141 1f00 134B     		ldr	r3, .L228+32
 4142 1f02 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 706:../src/mw.c   ****         for (axis = 0; axis < 3; axis++) {
 4143              		.loc 1 706 0
 4144 1f06 97F82630 		ldrb	r3, [r7, #38]
 4145 1f0a 03F10103 		add	r3, r3, #1
 4146 1f0e 87F82630 		strb	r3, [r7, #38]
 4147              	.L188:
 706:../src/mw.c   ****         for (axis = 0; axis < 3; axis++) {
 4148              		.loc 1 706 0 is_stmt 0 discriminator 1
 4149 1f12 97F82630 		ldrb	r3, [r7, #38]	@ zero_extendqisi2
 4150 1f16 022B     		cmp	r3, #2
 4151 1f18 7FF6F6AD 		bls	.L205
 748:../src/mw.c   ****         }
 749:../src/mw.c   **** 
 750:../src/mw.c   ****         mixTable();
 4152              		.loc 1 750 0 is_stmt 1
 4153 1f1c FFF7FEFF 		bl	mixTable
 751:../src/mw.c   ****         writeServos();
 4154              		.loc 1 751 0
 4155 1f20 FFF7FEFF 		bl	writeServos
 752:../src/mw.c   ****         writeMotors();
 4156              		.loc 1 752 0
 4157 1f24 FFF7FEFF 		bl	writeMotors
 4158              	.L76:
 753:../src/mw.c   ****     }
 754:../src/mw.c   **** }
 4159              		.loc 1 754 0
 4160 1f28 07F12C07 		add	r7, r7, #44
 4161 1f2c BD46     		mov	sp, r7
 4162 1f2e 90BD     		pop	{r4, r7, pc}
 4163              	.L229:
 4164              		.align	2
 4165              	.L228:
 4166 1f30 00000000 		.word	f
 4167 1f34 00000000 		.word	gyroData
 4168 1f38 00000000 		.word	dynP8
 4169 1f3c 67666666 		.word	1717986919
 4170 1f40 54000000 		.word	lastGyro.9162
 4171 1f44 5C000000 		.word	delta1.9163
 4172 1f48 64000000 		.word	delta2.9164
 4173 1f4c 00000000 		.word	dynD8
 4174 1f50 00000000 		.word	axisPID
 4175              		.cfi_endproc
 4176              	.LFE36:
 4178              		.bss
 4179 002e 0000     		.align	2
 4180              	rcTime.9166:
 4181 0030 00000000 		.space	4
 4182              	rcSticks.9146:
 4183 0034 00       		.space	1
 4184              	rcDelayCommand.9145:
 4185 0035 00       		.space	1
 4186 0036 0000     		.align	2
 4187              	errorGyroI.9159:
 4188 0038 00000000 		.space	6
 4188      0000
 4189 003e 0000     		.align	2
 4190              	errorAngleI.9160:
 4191 0040 00000000 		.space	4
 4192              		.align	1
 4193              	initialThrottleHold.9167:
 4194 0044 0000     		.space	2
 4195              		.data
 4198              	GPSNavReset.9171:
 4199 0011 01       		.byte	1
 4200 0012 0000     		.bss
 4201 0046 0000     		.align	2
 4202              	taskOrder.9184:
 4203 0048 00000000 		.space	4
 4204              		.align	2
 4205              	loopTime.9168:
 4206 004c 00000000 		.space	4
 4207              	isAltHoldChanged.9191:
 4208 0050 00       		.space	1
 4209 0051 00       		.align	1
 4210              	AltHoldCorr.9192:
 4211 0052 0000     		.space	2
 4212              		.align	2
 4213              	lastGyro.9162:
 4214 0054 00000000 		.space	6
 4214      0000
 4215 005a 0000     		.align	2
 4216              	delta1.9163:
 4217 005c 00000000 		.space	6
 4217      0000
 4218 0062 0000     		.align	2
 4219              	delta2.9164:
 4220 0064 00000000 		.space	6
 4220      0000
 4221              	rc4ValuesIndex.9124:
 4222 006a 00       		.space	1
 4223 006b 00       		.align	2
 4224              	rcData4Values.9122:
 4225 006c 00000000 		.space	64
 4225      00000000 
 4225      00000000 
 4225      00000000 
 4225      00000000 
 4226              		.align	2
 4227              	rcDataMean.9123:
 4228 00ac 00000000 		.space	16
 4228      00000000 
 4228      00000000 
 4228      00000000 
 4229              	vbatTimer.9095:
 4230 00bc 00       		.space	1
 4231              	ind.9099:
 4232 00bd 00       		.space	1
 4233 00be 0000     		.align	2
 4234              	vbatRawArray.9101:
 4235 00c0 00000000 		.space	16
 4235      00000000 
 4235      00000000 
 4235      00000000 
 4236              	buzzerFreq.9094:
 4237 00d0 00       		.space	1
 4238 00d1 000000   		.align	2
 4239              	LEDTime.9113:
 4240 00d4 00000000 		.space	4
 4241              		.align	2
 4242              	calibratedAccTime.9091:
 4243 00d8 00000000 		.space	4
 4244              		.align	2
 4245              	GPSLEDTime.9114:
 4246 00dc 00000000 		.space	4
 4247              		.text
 4248              	.Letext0:
 4249              		.file 2 "/home/oni/ARM_EABI/bin/../lib/gcc/arm-none-eabi/4.7.2/../../../../arm-none-eabi/include/s
 4250              		.file 3 "/home/oni/workspace/Naze32/lib/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
 4251              		.file 4 "../src/board.h"
 4252              		.file 5 "../src/mw.h"
 4253              		.file 6 "/home/oni/workspace/Naze32/lib/CMSIS/CM3/CoreSupport/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:00000000 mw.c
                            *COM*:00000010 f
                            *COM*:00000008 debug
     /tmp/ccYnGPwe.s:24     .bss:00000000 toggleBeep
     /tmp/ccYnGPwe.s:25     .bss:00000000 $d
     /tmp/ccYnGPwe.s:30     .bss:00000004 currentTime
     /tmp/ccYnGPwe.s:36     .bss:00000008 previousTime
     /tmp/ccYnGPwe.s:42     .bss:0000000c cycleTime
                            *COM*:00000002 headFreeModeHold
     /tmp/ccYnGPwe.s:49     .bss:0000000e annex650_overrun_count
                            *COM*:00000001 vbat
                            *COM*:00000002 telemTemperature1
     /tmp/ccYnGPwe.s:57     .bss:00000010 failsafeCnt
     /tmp/ccYnGPwe.s:63     .bss:00000012 failsafeEvents
     /tmp/ccYnGPwe.s:70     .data:00000000 rcData
     /tmp/ccYnGPwe.s:67     .data:00000000 $d
                            *COM*:00000008 rcCommand
                            *COM*:0000000c lookupPitchRollRC
                            *COM*:00000016 lookupThrottleRC
                            *COM*:00000002 rssi
     /tmp/ccYnGPwe.s:88     .bss:00000014 rcReadRawFunc
                            *COM*:00000003 dynP8
                            *COM*:00000003 dynI8
                            *COM*:00000003 dynD8
                            *COM*:00000014 rcOptions
                            *COM*:00000006 axisPID
                            *COM*:00000008 GPS_coord
                            *COM*:00000008 GPS_home
                            *COM*:00000008 GPS_hold
                            *COM*:00000001 GPS_numSat
                            *COM*:00000002 GPS_distanceToHome
                            *COM*:00000002 GPS_directionToHome
                            *COM*:00000002 GPS_altitude
                            *COM*:00000002 GPS_speed
     /tmp/ccYnGPwe.s:106    .bss:00000018 GPS_update
     /tmp/ccYnGPwe.s:112    .bss:0000001c GPS_angle
     /tmp/ccYnGPwe.s:118    .bss:00000020 GPS_ground_course
     /tmp/ccYnGPwe.s:123    .bss:00000022 GPS_Present
     /tmp/ccYnGPwe.s:128    .bss:00000023 GPS_Enable
                            *COM*:00000004 nav
                            *COM*:00000004 nav_rated
     /tmp/ccYnGPwe.s:135    .bss:00000024 nav_mode
     /tmp/ccYnGPwe.s:141    .bss:00000026 InflightcalibratingA
                            *COM*:00000002 AccInflightCalibrationArmed
     /tmp/ccYnGPwe.s:148    .bss:00000028 AccInflightCalibrationMeasurementDone
     /tmp/ccYnGPwe.s:154    .bss:0000002a AccInflightCalibrationSavetoEEProm
     /tmp/ccYnGPwe.s:160    .bss:0000002c AccInflightCalibrationActive
     /tmp/ccYnGPwe.s:166    .data:00000010 batteryCellCount
                            *COM*:00000002 batteryWarningVoltage
     /tmp/ccYnGPwe.s:170    .text:00000000 $t
     /tmp/ccYnGPwe.s:175    .text:00000000 blinkLED
     /tmp/ccYnGPwe.s:257    .text:00000078 $d
     /tmp/ccYnGPwe.s:271    .text:00000080 $t
     /tmp/ccYnGPwe.s:276    .text:00000080 annexCode
     /tmp/ccYnGPwe.s:595    .text:00000314 $d
     /tmp/ccYnGPwe.s:606    .text:00000338 $t
     /tmp/ccYnGPwe.s:878    .text:00000598 $d
     /tmp/ccYnGPwe.s:4229   .bss:000000bc vbatTimer.9095
     /tmp/ccYnGPwe.s:4231   .bss:000000bd ind.9099
     /tmp/ccYnGPwe.s:4234   .bss:000000c0 vbatRawArray.9101
     /tmp/ccYnGPwe.s:4236   .bss:000000d0 buzzerFreq.9094
     /tmp/ccYnGPwe.s:897    .text:000005dc $t
     /tmp/ccYnGPwe.s:1087   .text:0000072c $d
     /tmp/ccYnGPwe.s:4239   .bss:000000d4 LEDTime.9113
     /tmp/ccYnGPwe.s:4242   .bss:000000d8 calibratedAccTime.9091
     /tmp/ccYnGPwe.s:4245   .bss:000000dc GPSLEDTime.9114
     /tmp/ccYnGPwe.s:1102   .text:0000075c $t
     /tmp/ccYnGPwe.s:1107   .text:0000075c pwmReadRawRC
     /tmp/ccYnGPwe.s:1161   .text:000007a4 $d
     /tmp/ccYnGPwe.s:1165   .text:000007a8 $t
     /tmp/ccYnGPwe.s:1170   .text:000007a8 computeRC
     /tmp/ccYnGPwe.s:1333   .text:000008dc $d
     /tmp/ccYnGPwe.s:4221   .bss:0000006a rc4ValuesIndex.9124
     /tmp/ccYnGPwe.s:4224   .bss:0000006c rcData4Values.9122
     /tmp/ccYnGPwe.s:4227   .bss:000000ac rcDataMean.9123
     /tmp/ccYnGPwe.s:1341   .text:000008f0 $t
     /tmp/ccYnGPwe.s:1345   .text:000008f0 mwArm
     /tmp/ccYnGPwe.s:1402   .text:00000938 $d
     /tmp/ccYnGPwe.s:1409   .text:00000948 $t
     /tmp/ccYnGPwe.s:1413   .text:00000948 mwDisarm
     /tmp/ccYnGPwe.s:1444   .text:00000964 $d
     /tmp/ccYnGPwe.s:1448   .text:00000968 $t
     /tmp/ccYnGPwe.s:1452   .text:00000968 mwVario
     /tmp/ccYnGPwe.s:1479   .text:00000974 loop
     /tmp/ccYnGPwe.s:1844   .text:00000c34 $d
     /tmp/ccYnGPwe.s:4180   .bss:00000030 rcTime.9166
     /tmp/ccYnGPwe.s:4182   .bss:00000034 rcSticks.9146
     /tmp/ccYnGPwe.s:4184   .bss:00000035 rcDelayCommand.9145
     /tmp/ccYnGPwe.s:4187   .bss:00000038 errorGyroI.9159
     /tmp/ccYnGPwe.s:4190   .bss:00000040 errorAngleI.9160
     /tmp/ccYnGPwe.s:1859   .text:00000c68 $t
     /tmp/ccYnGPwe.s:2110   .text:00000e40 $d
     /tmp/ccYnGPwe.s:2123   .text:00000e6c $t
     /tmp/ccYnGPwe.s:2400   .text:000010b4 $d
     /tmp/ccYnGPwe.s:2416   .text:000010ec $t
     /tmp/ccYnGPwe.s:2752   .text:00001344 $d
     /tmp/ccYnGPwe.s:4193   .bss:00000044 initialThrottleHold.9167
     /tmp/ccYnGPwe.s:4198   .data:00000011 GPSNavReset.9171
     /tmp/ccYnGPwe.s:2775   .text:0000139c $t
     /tmp/ccYnGPwe.s:2849   .text:00001410 $d
     /tmp/ccYnGPwe.s:2855   .text:00001420 $t
     /tmp/ccYnGPwe.s:3102   .text:000015e0 $d
     /tmp/ccYnGPwe.s:4202   .bss:00000048 taskOrder.9184
     /tmp/ccYnGPwe.s:4205   .bss:0000004c loopTime.9168
     /tmp/ccYnGPwe.s:3120   .text:00001620 $t
     /tmp/ccYnGPwe.s:3436   .text:00001890 $d
     /tmp/ccYnGPwe.s:4207   .bss:00000050 isAltHoldChanged.9191
     /tmp/ccYnGPwe.s:4210   .bss:00000052 AltHoldCorr.9192
     /tmp/ccYnGPwe.s:3453   .text:000018cc $t
     /tmp/ccYnGPwe.s:3709   .text:00001af0 $d
     /tmp/ccYnGPwe.s:3717   .text:00001b08 $t
     /tmp/ccYnGPwe.s:4022   .text:00001de0 $d
     /tmp/ccYnGPwe.s:4035   .text:00001e0c $t
     /tmp/ccYnGPwe.s:4166   .text:00001f30 $d
     /tmp/ccYnGPwe.s:4213   .bss:00000054 lastGyro.9162
     /tmp/ccYnGPwe.s:4216   .bss:0000005c delta1.9163
     /tmp/ccYnGPwe.s:4219   .bss:00000064 delta2.9164
                     .debug_frame:00000010 $d
     /tmp/ccYnGPwe.s:4254   .text:00001f54 $t
                           .group:00000000 wm4.1.809c0ff785d6d6219236c5d51f444c16
                           .group:00000000 wm4.stdbool.h.29.1c9ee6859ce8145f7838a4f2549ccec2
                           .group:00000000 wm4.newlib.h.8.e1d498e57c12962fc6d7be5061a6981a
                           .group:00000000 wm4.config.h.148.52fe83653334d06815a0c57b59a3e584
                           .group:00000000 wm4._ansi.h.23.95dee4059009fe3ab635a191bb73dc66
                           .group:00000000 wm4.stdlib.h.18.6f6153fd5cb89acd58c0f0ab1f77e147
                           .group:00000000 wm4.stddef.h.187.40b3a084f9bc2c020a9e00b9eabe9c14
                           .group:00000000 wm4._default_types.h.6.1dbd2e581fd590860c7c17f21d147e91
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.349.31f4c5baff3fa2689010b32028da9c47
                           .group:00000000 wm4.reent.h.16.58b23a9f0faf0e7f2dfe7e2d33154afd
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.55.22eafe60f8565d898cbb44515781114b
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.math.h.49.5da716593b937b9fb02bef6ed6537c13
                           .group:00000000 wm4.ctype.h.2.fecd14bb6f4e162ef31748cc97760e21
                           .group:00000000 wm4.string.h.8.ef946ad0bc9ad5c970c365dcd1fc4b0a
                           .group:00000000 wm4.stddef.h.235.d9f4f80b8c4429535175712282cda6a6
                           .group:00000000 wm4.string.h.86.d5c872ff52e2712c985b588a0ef39f3c
                           .group:00000000 wm4.stdio.h.27.f2ac352bab34f31f9f478442827b2ba6
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.types.h.23.0d949686bbcadd1621462d4fa1f884f9
                           .group:00000000 wm4.stddef.h.40.b60a1c1ee3f272eef5327a730cbabca6
                           .group:00000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:00000000 wm4.types.h.80.f2bfdfeee9f340633702c07fad9b5e01
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.63.1f4bc553faa62c5c69dd9cb47f9f1417
                           .group:00000000 wm4.stm32f10x.h.51.b859cb68ed44ee02c916b41cb8c68f1c
                           .group:00000000 wm4.core_cm3.h.25.119fe996be41b62fbd915b59177e39d1
                           .group:00000000 wm4.stm32f10x.h.522.9a9f642c8c562acb4a63ad5d933b7c01
                           .group:00000000 wm4.stm32f10x.h.8304.f7d8ad90959e99679b3257267c3aadfe
                           .group:00000000 wm4.stm32f10x_adc.h.83.4d35a50d598070ecea6f33bcef02c922
                           .group:00000000 wm4.stm32f10x_bkp.h.25.4622919f1e30efdad5eb44e12edd5513
                           .group:00000000 wm4.stm32f10x_can.h.25.48aab46fcce6d08400bf960b028e4698
                           .group:00000000 wm4.stm32f10x_cec.h.25.8f03450e7bbb704d96e7bc73ec0f66a7
                           .group:00000000 wm4.stm32f10x_dac.h.25.6e7f2924f39c60c10815105b99b8b446
                           .group:00000000 wm4.stm32f10x_dbgmcu.h.25.d3351200fc7f9c8615d1ae81d40db08a
                           .group:00000000 wm4.stm32f10x_dma.h.25.94e36204daa98cae5dcc70a10a9694d5
                           .group:00000000 wm4.stm32f10x_exti.h.25.b9064155c5c006b5154b39788c79001a
                           .group:00000000 wm4.stm32f10x_flash.h.25.4be61fcb02863962a1e006449d310650
                           .group:00000000 wm4.stm32f10x_fsmc.h.25.bca154da2699cdb6024c0c6c4fc5aa89
                           .group:00000000 wm4.stm32f10x_gpio.h.25.80c981af0e637567395034c576cfb3ce
                           .group:00000000 wm4.stm32f10x_i2c.h.25.7b6cbaea24c6f25f538f8516d1814cb2
                           .group:00000000 wm4.stm32f10x_iwdg.h.25.da9374ab9856795610487f312ccf3122
                           .group:00000000 wm4.stm32f10x_pwr.h.25.37ef75009f751ef5fe27910e0bf00a62
                           .group:00000000 wm4.stm32f10x_rcc.h.25.968bcf08d813e68e57c280a4da69fa5a
                           .group:00000000 wm4.stm32f10x_rtc.h.25.361142606ba98ddcd10369f321f6e636
                           .group:00000000 wm4.stm32f10x_sdio.h.25.1fb5280a7690ef99070096bf8c866b3a
                           .group:00000000 wm4.stm32f10x_spi.h.25.68b3d5ccfcf895f9fe505ce20c0c300f
                           .group:00000000 wm4.stm32f10x_tim.h.25.21c6ec062f1e74898cb96a57da276fec
                           .group:00000000 wm4.stm32f10x_usart.h.25.29629c699b65db3f3efd3561f66b0bf6
                           .group:00000000 wm4.stm32f10x_wwdg.h.25.dde12201d86b5aa9ecaafb5eccdc6549
                           .group:00000000 wm4.misc.h.25.068e106f368fa5369a681ef57c106f4b
                           .group:00000000 wm4.stdarg.h.31.fa591a4b1df9e413e9f5b8097f9ae89d
                           .group:00000000 wm4.printf.h.118.ab3672ee221610a07496c11f46394049
                           .group:00000000 wm4.board.h.22.3e17243136ce51e89ad1cec38a12dc6f
                           .group:00000000 wm4.drv_adc.h.3.0c1a2a90f0739aca31cc38e66ffab3f5
                           .group:00000000 wm4.drv_pwm.h.3.1f878ba1925c00079825df97e09db15d
                           .group:00000000 wm4.mw.h.4.b0e233e0e6ae9c4c07b142ad41413d4c

UNDEFINED SYMBOLS
delay
__aeabi_i2d
__aeabi_dmul
__aeabi_ddiv
__aeabi_d2f
__aeabi_i2f
__aeabi_fmul
__aeabi_fadd
__aeabi_f2iz
__aeabi_fsub
cfg
mcfg
cosf
sinf
feature
adcGetChannel
batteryAdcToVoltage
heading
buzzer
sensors
initTelemetry
ledringState
serialCom
calibratingA
calibratingG
gyro
pwmRead
__aeabi_fdiv
spektrumFrameComplete
GPS_NewData
GPS_reset_home_position
writeEEPROM
calibratingB
GPS_set_next_wp
GPS_reset_nav
EstAlt
AltHold
errorAltitudeI
BaroPID
magHold
Mag_getADC
Baro_update
getEstimatedAltitude
Sonar_update
micros
computeIMU
sonarAlt
wrap_18000
angle
gyroData
mixTable
writeServos
writeMotors
