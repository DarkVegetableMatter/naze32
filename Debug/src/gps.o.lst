   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"gps.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.global	init_speed
  19              		.section	.rodata
  20              		.align	2
  23              	init_speed:
  24 0000 80250000 		.word	9600
  25 0004 004B0000 		.word	19200
  26 0008 00960000 		.word	38400
  27 000c 00E10000 		.word	57600
  28 0010 00C20100 		.word	115200
  29              		.align	2
  30              	.LC0:
  31 0014 24505542 		.ascii	"$PUBX,41,1,0003,0001,19200,0*23\015\012\000"
  31      582C3431 
  31      2C312C30 
  31      3030332C 
  31      30303031 
  32 0036 0000     		.align	2
  33              	.LC1:
  34 0038 24505542 		.ascii	"$PUBX,41,1,0003,0001,38400,0*26\015\012\000"
  34      582C3431 
  34      2C312C30 
  34      3030332C 
  34      30303031 
  35 005a 0000     		.align	2
  36              	.LC2:
  37 005c 24505542 		.ascii	"$PUBX,41,1,0003,0001,57600,0*2D\015\012\000"
  37      582C3431 
  37      2C312C30 
  37      3030332C 
  37      30303031 
  38 007e 0000     		.align	2
  39              	.LC3:
  40 0080 24505542 		.ascii	"$PUBX,41,1,0003,0001,115200,0*1E\015\012\000"
  40      582C3431 
  40      2C312C30 
  40      3030332C 
  40      30303031 
  41 00a3 00       		.align	2
  42              	.LC4:
  43 00a4 24504D54 		.ascii	"$PMTK251,19200*22\015\012\000"
  43      4B323531 
  43      2C313932 
  43      30302A32 
  43      320D0A00 
  44              		.align	2
  45              	.LC5:
  46 00b8 24504D54 		.ascii	"$PMTK251,38400*27\015\012\000"
  46      4B323531 
  46      2C333834 
  46      30302A32 
  46      370D0A00 
  47              		.align	2
  48              	.LC6:
  49 00cc 24504D54 		.ascii	"$PMTK251,57600*2C\015\012\000"
  49      4B323531 
  49      2C353736 
  49      30302A32 
  49      430D0A00 
  50              		.align	2
  51              	.LC7:
  52 00e0 24504D54 		.ascii	"$PMTK251,115200*1F\015\012\000"
  52      4B323531 
  52      2C313135 
  52      3230302A 
  52      31460D0A 
  53 00f5 000000   		.align	2
  56              	gpsInitStrings:
  57 00f8 14000000 		.word	.LC0
  58 00fc 38000000 		.word	.LC1
  59 0100 5C000000 		.word	.LC2
  60 0104 80000000 		.word	.LC3
  61 0108 A4000000 		.word	.LC4
  62 010c B8000000 		.word	.LC5
  63 0110 CC000000 		.word	.LC6
  64 0114 E0000000 		.word	.LC7
  65              		.align	2
  68              	ubloxInit:
  69 0118 B5       		.byte	-75
  70 0119 62       		.byte	98
  71 011a 06       		.byte	6
  72 011b 01       		.byte	1
  73 011c 03       		.byte	3
  74 011d 00       		.byte	0
  75 011e F0       		.byte	-16
  76 011f 05       		.byte	5
  77 0120 00       		.byte	0
  78 0121 FF       		.byte	-1
  79 0122 19       		.byte	25
  80 0123 B5       		.byte	-75
  81 0124 62       		.byte	98
  82 0125 06       		.byte	6
  83 0126 01       		.byte	1
  84 0127 03       		.byte	3
  85 0128 00       		.byte	0
  86 0129 F0       		.byte	-16
  87 012a 03       		.byte	3
  88 012b 00       		.byte	0
  89 012c FD       		.byte	-3
  90 012d 15       		.byte	21
  91 012e B5       		.byte	-75
  92 012f 62       		.byte	98
  93 0130 06       		.byte	6
  94 0131 01       		.byte	1
  95 0132 03       		.byte	3
  96 0133 00       		.byte	0
  97 0134 F0       		.byte	-16
  98 0135 01       		.byte	1
  99 0136 00       		.byte	0
 100 0137 FB       		.byte	-5
 101 0138 11       		.byte	17
 102 0139 B5       		.byte	-75
 103 013a 62       		.byte	98
 104 013b 06       		.byte	6
 105 013c 01       		.byte	1
 106 013d 03       		.byte	3
 107 013e 00       		.byte	0
 108 013f F0       		.byte	-16
 109 0140 00       		.byte	0
 110 0141 00       		.byte	0
 111 0142 FA       		.byte	-6
 112 0143 0F       		.byte	15
 113 0144 B5       		.byte	-75
 114 0145 62       		.byte	98
 115 0146 06       		.byte	6
 116 0147 01       		.byte	1
 117 0148 03       		.byte	3
 118 0149 00       		.byte	0
 119 014a F0       		.byte	-16
 120 014b 02       		.byte	2
 121 014c 00       		.byte	0
 122 014d FC       		.byte	-4
 123 014e 13       		.byte	19
 124 014f B5       		.byte	-75
 125 0150 62       		.byte	98
 126 0151 06       		.byte	6
 127 0152 01       		.byte	1
 128 0153 03       		.byte	3
 129 0154 00       		.byte	0
 130 0155 F0       		.byte	-16
 131 0156 04       		.byte	4
 132 0157 00       		.byte	0
 133 0158 FE       		.byte	-2
 134 0159 17       		.byte	23
 135 015a B5       		.byte	-75
 136 015b 62       		.byte	98
 137 015c 06       		.byte	6
 138 015d 01       		.byte	1
 139 015e 03       		.byte	3
 140 015f 00       		.byte	0
 141 0160 01       		.byte	1
 142 0161 02       		.byte	2
 143 0162 01       		.byte	1
 144 0163 0E       		.byte	14
 145 0164 47       		.byte	71
 146 0165 B5       		.byte	-75
 147 0166 62       		.byte	98
 148 0167 06       		.byte	6
 149 0168 01       		.byte	1
 150 0169 03       		.byte	3
 151 016a 00       		.byte	0
 152 016b 01       		.byte	1
 153 016c 03       		.byte	3
 154 016d 01       		.byte	1
 155 016e 0F       		.byte	15
 156 016f 49       		.byte	73
 157 0170 B5       		.byte	-75
 158 0171 62       		.byte	98
 159 0172 06       		.byte	6
 160 0173 01       		.byte	1
 161 0174 03       		.byte	3
 162 0175 00       		.byte	0
 163 0176 01       		.byte	1
 164 0177 06       		.byte	6
 165 0178 01       		.byte	1
 166 0179 12       		.byte	18
 167 017a 4F       		.byte	79
 168 017b B5       		.byte	-75
 169 017c 62       		.byte	98
 170 017d 06       		.byte	6
 171 017e 01       		.byte	1
 172 017f 03       		.byte	3
 173 0180 00       		.byte	0
 174 0181 01       		.byte	1
 175 0182 12       		.byte	18
 176 0183 01       		.byte	1
 177 0184 1E       		.byte	30
 178 0185 67       		.byte	103
 179 0186 B5       		.byte	-75
 180 0187 62       		.byte	98
 181 0188 06       		.byte	6
 182 0189 16       		.byte	22
 183 018a 08       		.byte	8
 184 018b 00       		.byte	0
 185 018c 03       		.byte	3
 186 018d 07       		.byte	7
 187 018e 03       		.byte	3
 188 018f 00       		.byte	0
 189 0190 51       		.byte	81
 190 0191 08       		.byte	8
 191 0192 00       		.byte	0
 192 0193 00       		.byte	0
 193 0194 8A       		.byte	-118
 194 0195 41       		.byte	65
 195 0196 B5       		.byte	-75
 196 0197 62       		.byte	98
 197 0198 06       		.byte	6
 198 0199 08       		.byte	8
 199 019a 06       		.byte	6
 200 019b 00       		.byte	0
 201 019c C8       		.byte	-56
 202 019d 00       		.byte	0
 203 019e 01       		.byte	1
 204 019f 00       		.byte	0
 205 01a0 01       		.byte	1
 206 01a1 00       		.byte	0
 207 01a2 DE       		.byte	-34
 208 01a3 6A       		.byte	106
 209              		.text
 210              		.align	2
 211              		.global	navigatron2Init
 212              		.thumb
 213              		.thumb_func
 215              	navigatron2Init:
 216              	.LFB29:
 217              		.file 1 "../src/gps.c"
   1:../src/gps.c  **** #include "board.h"
   2:../src/gps.c  **** #include "mw.h"
   3:../src/gps.c  **** 
   4:../src/gps.c  **** #ifndef sq
   5:../src/gps.c  **** #define sq(x) ((x)*(x))
   6:../src/gps.c  **** #endif
   7:../src/gps.c  **** 
   8:../src/gps.c  **** const uint32_t init_speed[5] = { 9600, 19200, 38400, 57600, 115200 };
   9:../src/gps.c  **** 
  10:../src/gps.c  **** void GPS_NewData(uint16_t c);
  11:../src/gps.c  **** static void GPS_set_pids(void);
  12:../src/gps.c  **** static void gpsPrint(const char *str);
  13:../src/gps.c  **** 
  14:../src/gps.c  **** #define NAVIGATRON_I2C_ADDR        0x20
  15:../src/gps.c  **** 
  16:../src/gps.c  **** 
  17:../src/gps.c  **** ///////////////////////////////////////////////////////////////////////////////////////////////////
  18:../src/gps.c  **** // Begin register definitions
  19:../src/gps.c  **** ///////////////////////////////////////////////////////////////////////////////////////////////////
  20:../src/gps.c  **** 
  21:../src/gps.c  **** #define I2C_GPS_STATUS_00                            00 //(Read only)
  22:../src/gps.c  ****         #define I2C_GPS_STATUS_NEW_DATA       		0x01
  23:../src/gps.c  ****         #define I2C_GPS_STATUS_2DFIX          		0x02
  24:../src/gps.c  ****         #define I2C_GPS_STATUS_3DFIX          		0x04
  25:../src/gps.c  ****         #define I2C_GPS_STATUS_WP_REACHED     		0x08      //Active waypoint has been reached (not c
  26:../src/gps.c  ****         #define I2C_GPS_STATUS_NUMSATS        		0xF0
  27:../src/gps.c  **** 
  28:../src/gps.c  **** #define I2C_GPS_COMMAND                              01 //(write only)
  29:../src/gps.c  ****         #define I2C_GPS_COMMAND_POSHOLD       		0x01      // copy current position to internal targ
  30:../src/gps.c  ****         #define I2C_GPS_COMMAND_START_NAV     		0x02      // get the WP from the command and start 
  31:../src/gps.c  ****         #define I2C_GPS_COMMAND_SET_WP        		0x03      // copy current position to given WP
  32:../src/gps.c  ****         #define I2C_GPS_COMMAND_UPDATE_PIDS   		0x04      // update PI and PID controllers from the
  33:../src/gps.c  ****         #define I2C_GPS_COMMAND_NAV_OVERRIDE  		0x05      // do not nav since we tring to controll 
  34:../src/gps.c  ****         #define I2C_GPS_COMMAND_STOP_NAV      		0x06
  35:../src/gps.c  ****         #define I2C_GPS_COMMAND__7            		0x07
  36:../src/gps.c  ****         #define I2C_GPS_COMMAND__8            		0x08
  37:../src/gps.c  ****         #define I2C_GPS_COMMAND__9            		0x09
  38:../src/gps.c  ****         #define I2C_GPS_COMMAND__a            		0x0a
  39:../src/gps.c  ****         #define I2C_GPS_COMMAND__b            		0x0b
  40:../src/gps.c  ****         #define I2C_GPS_COMMAND__c            		0x0c
  41:../src/gps.c  ****         #define I2C_GPS_COMMAND__d            		0x0d
  42:../src/gps.c  ****         #define I2C_GPS_COMMAND__e            		0x0e
  43:../src/gps.c  ****         #define I2C_GPS_COMMAND__f            		0x0f
  44:../src/gps.c  **** 
  45:../src/gps.c  ****         #define I2C_GPS_COMMAND_WP_MASK       		0xF0      //Waypoint number
  46:../src/gps.c  **** 
  47:../src/gps.c  **** #define I2C_GPS_WP_REG                              02   //Waypoint register (Read only)
  48:../src/gps.c  ****         #define I2C_GPS_WP_REG_ACTIVE_MASK     		0x0F      //Active Waypoint lower 4 bits
  49:../src/gps.c  ****         #define I2C_GPS_WP_REG_PERVIOUS_MASK   		0xF0      //pervious Waypoint upper 4 bits
  50:../src/gps.c  **** 
  51:../src/gps.c  **** #define I2C_GPS_REG_VERSION                         03    //Version of the I2C_NAV SW uint8_t
  52:../src/gps.c  **** #define I2C_GPS_REG_RES2                            04
  53:../src/gps.c  **** #define I2C_GPS_REG_RES3                            05
  54:../src/gps.c  **** #define I2C_GPS_REG_RES4                            06
  55:../src/gps.c  **** 
  56:../src/gps.c  **** 
  57:../src/gps.c  **** #define I2C_GPS_LOCATION                            07    // current location 8 byte (lat, lon) int
  58:../src/gps.c  **** #define I2C_GPS_NAV_LAT                             15    // Desired banking towards north/south in
  59:../src/gps.c  **** #define I2C_GPS_NAV_LON                             17    // Desired banking toward east/west    in
  60:../src/gps.c  **** #define I2C_GPS_WP_DISTANCE                         19    // Distance to current WP in cm uint32
  61:../src/gps.c  **** #define I2C_GPS_WP_TARGET_BEARING                   23    // bearing towards current wp 1deg = 1000
  62:../src/gps.c  **** #define I2C_GPS_NAV_BEARING                         25    // crosstrack corrected bearing towards c
  63:../src/gps.c  **** #define I2C_GPS_HOME_TO_COPTER_BEARING              27    // bearing from home to copter 1deg = 100
  64:../src/gps.c  **** #define I2C_GPS_DISTANCE_TO_HOME                    29    // distance to home in m int16_t
  65:../src/gps.c  **** 
  66:../src/gps.c  **** #define I2C_GPS_GROUND_SPEED                        31   //GPS ground speed in m/s*100 (uint16_t)  
  67:../src/gps.c  **** #define I2C_GPS_ALTITUDE                            33   //GPS altitude in meters (uint16_t)       
  68:../src/gps.c  **** #define I2C_GPS_GROUND_COURSE			    		35   //GPS ground course (uint16_t)
  69:../src/gps.c  **** #define I2C_GPS_RES1                                37   // reserved for future use (uint16_t)
  70:../src/gps.c  **** #define I2C_GPS_TIME                                39   //UTC Time from GPS in hhmmss.sss * 100 (u
  71:../src/gps.c  **** 
  72:../src/gps.c  **** //Writeable registers from here
  73:../src/gps.c  **** 
  74:../src/gps.c  **** #define I2C_GPS_CROSSTRACK_GAIN                     43    //Crosstrack gain *100 (1 - 0.01 100 -1) 
  75:../src/gps.c  **** #define I2C_GPS_SPEED_MIN                           44    //Minimum navigation speed cm/s uint8_t
  76:../src/gps.c  **** #define I2C_GPS_SPEED_MAX                           45    //Maximum navigation speed cm/s uint16_t
  77:../src/gps.c  **** #define I2C_GPS_RESERVED                            47    //Reserved for future use
  78:../src/gps.c  **** #define I2C_GPS_WP_RADIUS                           49    //Radius of the wp in cm, within this rad
  79:../src/gps.c  **** 
  80:../src/gps.c  **** #define I2C_GPS_NAV_FLAGS                           51    //Navigation flags uint8_t to be defined
  81:../src/gps.c  **** 
  82:../src/gps.c  **** 
  83:../src/gps.c  **** #define I2C_GPS_HOLD_P                              52    // poshold_P  *100 uint16_t
  84:../src/gps.c  **** #define I2C_GPS_HOLD_I                              53    // poshold_I  *100 uint16_t
  85:../src/gps.c  **** #define I2C_GPS_HOLD_IMAX                           54    // poshold_IMAX *1 uint8_t
  86:../src/gps.c  **** 
  87:../src/gps.c  **** #define I2C_GPS_HOLD_RATE_P                         55    // poshold_rate_P  *100 uint16_t
  88:../src/gps.c  **** #define I2C_GPS_HOLD_RATE_I                         56    // poshold_rate_I  *100 uint16_t
  89:../src/gps.c  **** #define I2C_GPS_HOLD_RATE_D                         57    // poshold_rate_D  *1000 uint16_t
  90:../src/gps.c  **** #define I2C_GPS_HOLD_RATE_IMAX                      58    // poshold_rate_IMAX *1 uint8_t
  91:../src/gps.c  **** 
  92:../src/gps.c  **** #define I2C_GPS_NAV_P                               59    // nav_P  *100 uint16_t
  93:../src/gps.c  **** #define I2C_GPS_NAV_I                               60    // nav_I  *100 uint16_t
  94:../src/gps.c  **** #define I2C_GPS_NAV_D                               61    // nav_D  *1000 uint16_t
  95:../src/gps.c  **** #define I2C_GPS_NAV_IMAX                            62    // nav_IMAX *1 uint8_t
  96:../src/gps.c  **** 
  97:../src/gps.c  **** #define I2C_GPS_WP0                                 63   //Waypoint 0 used for RTH location      (R
  98:../src/gps.c  **** #define	I2C_GPS_WP1		                    		74
  99:../src/gps.c  **** #define	I2C_GPS_WP2		                    		85
 100:../src/gps.c  **** #define	I2C_GPS_WP3		                    		96
 101:../src/gps.c  **** #define	I2C_GPS_WP4		                    		107
 102:../src/gps.c  **** #define	I2C_GPS_WP5		                    		118
 103:../src/gps.c  **** #define	I2C_GPS_WP6		                    		129
 104:../src/gps.c  **** #define	I2C_GPS_WP7		                    		140
 105:../src/gps.c  **** #define	I2C_GPS_WP8		                    		151
 106:../src/gps.c  **** #define	I2C_GPS_WP9		                    		162
 107:../src/gps.c  **** #define	I2C_GPS_WP10		                    	173
 108:../src/gps.c  **** #define	I2C_GPS_WP11		                    	184
 109:../src/gps.c  **** #define	I2C_GPS_WP12		                    	195
 110:../src/gps.c  **** #define	I2C_GPS_WP13		                    	206
 111:../src/gps.c  **** #define	I2C_GPS_WP14		                    	217
 112:../src/gps.c  **** #define	I2C_GPS_WP15		                    	228
 113:../src/gps.c  **** ///////////////////////////////////////////////////////////////////////////////////////////////////
 114:../src/gps.c  **** // End register definition
 115:../src/gps.c  **** ///////////////////////////////////////////////////////////////////////////////////////////////////
 116:../src/gps.c  **** 
 117:../src/gps.c  **** static const char * const gpsInitStrings[] = {
 118:../src/gps.c  ****     "$PUBX,41,1,0003,0001,19200,0*23\r\n",      // UBX0..3
 119:../src/gps.c  ****     "$PUBX,41,1,0003,0001,38400,0*26\r\n",
 120:../src/gps.c  ****     "$PUBX,41,1,0003,0001,57600,0*2D\r\n",
 121:../src/gps.c  ****     "$PUBX,41,1,0003,0001,115200,0*1E\r\n",
 122:../src/gps.c  ****     "$PMTK251,19200*22\r\n",                    // MTK4..7
 123:../src/gps.c  ****     "$PMTK251,38400*27\r\n",
 124:../src/gps.c  ****     "$PMTK251,57600*2C\r\n",
 125:../src/gps.c  ****     "$PMTK251,115200*1F\r\n",
 126:../src/gps.c  **** };
 127:../src/gps.c  **** 
 128:../src/gps.c  **** static const uint8_t ubloxInit[] = {
 129:../src/gps.c  ****      0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x05, 0x00, 0xFF, 0x19,                             
 130:../src/gps.c  ****      0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x03, 0x00, 0xFD, 0x15,
 131:../src/gps.c  ****      0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x01, 0x00, 0xFB, 0x11,
 132:../src/gps.c  ****      0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x00, 0x00, 0xFA, 0x0F,
 133:../src/gps.c  ****      0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x02, 0x00, 0xFC, 0x13,
 134:../src/gps.c  ****      0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x04, 0x00, 0xFE, 0x17,
 135:../src/gps.c  ****      0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0x01, 0x02, 0x01, 0x0E, 0x47,                             
 136:../src/gps.c  ****      0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0x01, 0x03, 0x01, 0x0F, 0x49,                             
 137:../src/gps.c  ****      0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0x01, 0x06, 0x01, 0x12, 0x4F,                             
 138:../src/gps.c  ****      0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0x01, 0x12, 0x01, 0x1E, 0x67,                             
 139:../src/gps.c  ****      0xB5, 0x62, 0x06, 0x16, 0x08, 0x00, 0x03, 0x07, 0x03, 0x00, 0x51, 0x08, 0x00, 0x00, 0x8A, 0x41
 140:../src/gps.c  ****      0xB5, 0x62, 0x06, 0x08, 0x06, 0x00, 0xC8, 0x00, 0x01, 0x00, 0x01, 0x00, 0xDE, 0x6A            
 141:../src/gps.c  **** };
 142:../src/gps.c  **** 
 143:../src/gps.c  **** void navigatron2Init()
 144:../src/gps.c  **** {
 218              		.loc 1 144 0
 219              		.cfi_startproc
 220              		@ args = 0, pretend = 0, frame = 8
 221              		@ frame_needed = 1, uses_anonymous_args = 0
 222 0000 80B5     		push	{r7, lr}
 223              	.LCFI0:
 224              		.cfi_def_cfa_offset 8
 225              		.cfi_offset 7, -8
 226              		.cfi_offset 14, -4
 227 0002 82B0     		sub	sp, sp, #8
 228              	.LCFI1:
 229              		.cfi_def_cfa_offset 16
 230 0004 00AF     		add	r7, sp, #0
 231              	.LCFI2:
 232              		.cfi_def_cfa_register 7
 145:../src/gps.c  **** 	//Todo Init Navigatron here!
 146:../src/gps.c  **** 	//If init successfull set GPS to present!
 147:../src/gps.c  **** 	uint8_t ver=0xFF;
 233              		.loc 1 147 0
 234 0006 4FF0FF03 		mov	r3, #255
 235 000a FB71     		strb	r3, [r7, #7]
 148:../src/gps.c  **** 	i2cRead(NAVIGATRON_I2C_ADDR, I2C_GPS_REG_VERSION, 1, (uint8_t*)&ver);
 236              		.loc 1 148 0
 237 000c 07F10703 		add	r3, r7, #7
 238 0010 4FF02000 		mov	r0, #32
 239 0014 4FF00301 		mov	r1, #3
 240 0018 4FF00102 		mov	r2, #1
 241 001c FFF7FEFF 		bl	i2cRead
 149:../src/gps.c  **** 	if (ver==0x15)
 242              		.loc 1 149 0
 243 0020 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 244 0022 152B     		cmp	r3, #21
 245 0024 03D1     		bne	.L1
 150:../src/gps.c  **** 		GPS_Present = 1;
 246              		.loc 1 150 0
 247 0026 044B     		ldr	r3, .L3
 248 0028 4FF00102 		mov	r2, #1
 249 002c 1A70     		strb	r2, [r3, #0]
 250              	.L1:
 151:../src/gps.c  **** }
 251              		.loc 1 151 0
 252 002e 07F10807 		add	r7, r7, #8
 253 0032 BD46     		mov	sp, r7
 254 0034 80BD     		pop	{r7, pc}
 255              	.L4:
 256 0036 00BF     		.align	2
 257              	.L3:
 258 0038 00000000 		.word	GPS_Present
 259              		.cfi_endproc
 260              	.LFE29:
 262              		.section	.rodata
 263              		.align	2
 264              	.LC8:
 265 01a4 24504D54 		.ascii	"$PMTK314,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*28\015"
 265      4B333134 
 265      2C302C31 
 265      2C302C31 
 265      2C302C30 
 266 01d6 0A00     		.ascii	"\012\000"
 267              		.align	2
 268              	.LC9:
 269 01d8 24504D54 		.ascii	"$PMTK220,200*2C\015\012\000"
 269      4B323230 
 269      2C323030 
 269      2A32430D 
 269      0A00
 270 01ea 0000     		.text
 271              		.align	2
 272              		.global	gpsInit
 273              		.thumb
 274              		.thumb_func
 276              	gpsInit:
 277              	.LFB30:
 152:../src/gps.c  **** 
 153:../src/gps.c  **** void gpsInit(uint32_t baudrate)
 154:../src/gps.c  **** {
 278              		.loc 1 154 0
 279              		.cfi_startproc
 280              		@ args = 0, pretend = 0, frame = 16
 281              		@ frame_needed = 1, uses_anonymous_args = 0
 282 003c 80B5     		push	{r7, lr}
 283              	.LCFI3:
 284              		.cfi_def_cfa_offset 8
 285              		.cfi_offset 7, -8
 286              		.cfi_offset 14, -4
 287 003e 84B0     		sub	sp, sp, #16
 288              	.LCFI4:
 289              		.cfi_def_cfa_offset 24
 290 0040 00AF     		add	r7, sp, #0
 291              	.LCFI5:
 292              		.cfi_def_cfa_register 7
 293 0042 7860     		str	r0, [r7, #4]
 155:../src/gps.c  ****     int i;
 156:../src/gps.c  ****     int offset = 0;
 294              		.loc 1 156 0
 295 0044 4FF00003 		mov	r3, #0
 296 0048 BB60     		str	r3, [r7, #8]
 157:../src/gps.c  **** 
 158:../src/gps.c  ****     GPS_set_pids();
 297              		.loc 1 158 0
 298 004a 00F0EBFC 		bl	GPS_set_pids
 159:../src/gps.c  **** 
 160:../src/gps.c  ****     if (mcfg.gps_type != GPS_I2C)
 299              		.loc 1 160 0
 300 004e 5B4B     		ldr	r3, .L24
 301 0050 93F80F31 		ldrb	r3, [r3, #271]	@ zero_extendqisi2
 302 0054 032B     		cmp	r3, #3
 303 0056 06D0     		beq	.L6
 161:../src/gps.c  ****     	uart2Init(baudrate, GPS_NewData, false);
 304              		.loc 1 161 0
 305 0058 7868     		ldr	r0, [r7, #4]
 306 005a 5949     		ldr	r1, .L24+4
 307 005c 4FF00002 		mov	r2, #0
 308 0060 FFF7FEFF 		bl	uart2Init
 309 0064 01E0     		b	.L7
 310              	.L6:
 162:../src/gps.c  ****     else
 163:../src/gps.c  ****     	navigatron2Init();
 311              		.loc 1 163 0
 312 0066 FFF7FEFF 		bl	navigatron2Init
 313              	.L7:
 164:../src/gps.c  **** 
 165:../src/gps.c  ****     if (mcfg.gps_type == GPS_UBLOX)
 314              		.loc 1 165 0
 315 006a 544B     		ldr	r3, .L24
 316 006c 93F80F31 		ldrb	r3, [r3, #271]	@ zero_extendqisi2
 317 0070 012B     		cmp	r3, #1
 318 0072 03D1     		bne	.L8
 166:../src/gps.c  ****         offset = 0;
 319              		.loc 1 166 0
 320 0074 4FF00003 		mov	r3, #0
 321 0078 BB60     		str	r3, [r7, #8]
 322 007a 07E0     		b	.L9
 323              	.L8:
 167:../src/gps.c  ****     else if (mcfg.gps_type == GPS_MTK)
 324              		.loc 1 167 0
 325 007c 4F4B     		ldr	r3, .L24
 326 007e 93F80F31 		ldrb	r3, [r3, #271]	@ zero_extendqisi2
 327 0082 022B     		cmp	r3, #2
 328 0084 02D1     		bne	.L9
 168:../src/gps.c  ****         offset = 4;
 329              		.loc 1 168 0
 330 0086 4FF00403 		mov	r3, #4
 331 008a BB60     		str	r3, [r7, #8]
 332              	.L9:
 169:../src/gps.c  **** 
 170:../src/gps.c  ****     if (mcfg.gps_type != GPS_NMEA && mcfg.gps_type != GPS_I2C) {
 333              		.loc 1 170 0
 334 008c 4B4B     		ldr	r3, .L24
 335 008e 93F80F31 		ldrb	r3, [r3, #271]	@ zero_extendqisi2
 336 0092 002B     		cmp	r3, #0
 337 0094 52D0     		beq	.L10
 338              		.loc 1 170 0 is_stmt 0 discriminator 1
 339 0096 494B     		ldr	r3, .L24
 340 0098 93F80F31 		ldrb	r3, [r3, #271]	@ zero_extendqisi2
 341 009c 032B     		cmp	r3, #3
 342 009e 4DD0     		beq	.L10
 171:../src/gps.c  ****         for (i = 0; i < 5; i++) {
 343              		.loc 1 171 0 is_stmt 1
 344 00a0 4FF00003 		mov	r3, #0
 345 00a4 FB60     		str	r3, [r7, #12]
 346 00a6 46E0     		b	.L11
 347              	.L18:
 172:../src/gps.c  ****             uart2ChangeBaud(init_speed[i]);
 348              		.loc 1 172 0
 349 00a8 464B     		ldr	r3, .L24+8
 350 00aa FA68     		ldr	r2, [r7, #12]
 351 00ac 53F82230 		ldr	r3, [r3, r2, lsl #2]
 352 00b0 1846     		mov	r0, r3
 353 00b2 FFF7FEFF 		bl	uart2ChangeBaud
 173:../src/gps.c  ****             switch (baudrate) {
 354              		.loc 1 173 0
 355 00b6 7B68     		ldr	r3, [r7, #4]
 356 00b8 B3F5164F 		cmp	r3, #38400
 357 00bc 15D0     		beq	.L14
 358 00be B3F5164F 		cmp	r3, #38400
 359 00c2 03D8     		bhi	.L17
 360 00c4 B3F5964F 		cmp	r3, #19200
 361 00c8 07D0     		beq	.L13
 362 00ca 2CE0     		b	.L12
 363              	.L17:
 364 00cc B3F5614F 		cmp	r3, #57600
 365 00d0 15D0     		beq	.L15
 366 00d2 B3F5E13F 		cmp	r3, #115200
 367 00d6 1CD0     		beq	.L16
 368 00d8 25E0     		b	.L12
 369              	.L13:
 174:../src/gps.c  ****                 case 19200:
 175:../src/gps.c  ****                     gpsPrint(gpsInitStrings[offset]);
 370              		.loc 1 175 0
 371 00da 3B4B     		ldr	r3, .L24+12
 372 00dc BA68     		ldr	r2, [r7, #8]
 373 00de 53F82230 		ldr	r3, [r3, r2, lsl #2]
 374 00e2 1846     		mov	r0, r3
 375 00e4 00F07AF8 		bl	gpsPrint
 176:../src/gps.c  ****                     break;
 376              		.loc 1 176 0
 377 00e8 1DE0     		b	.L12
 378              	.L14:
 177:../src/gps.c  ****                 case 38400:
 178:../src/gps.c  ****                     gpsPrint(gpsInitStrings[offset + 1]);
 379              		.loc 1 178 0
 380 00ea BB68     		ldr	r3, [r7, #8]
 381 00ec 03F10102 		add	r2, r3, #1
 382 00f0 354B     		ldr	r3, .L24+12
 383 00f2 53F82230 		ldr	r3, [r3, r2, lsl #2]
 384 00f6 1846     		mov	r0, r3
 385 00f8 00F070F8 		bl	gpsPrint
 179:../src/gps.c  ****                     break;
 386              		.loc 1 179 0
 387 00fc 13E0     		b	.L12
 388              	.L15:
 180:../src/gps.c  ****                 case 57600:
 181:../src/gps.c  ****                     gpsPrint(gpsInitStrings[offset + 2]);
 389              		.loc 1 181 0
 390 00fe BB68     		ldr	r3, [r7, #8]
 391 0100 03F10202 		add	r2, r3, #2
 392 0104 304B     		ldr	r3, .L24+12
 393 0106 53F82230 		ldr	r3, [r3, r2, lsl #2]
 394 010a 1846     		mov	r0, r3
 395 010c 00F066F8 		bl	gpsPrint
 182:../src/gps.c  ****                     break;
 396              		.loc 1 182 0
 397 0110 09E0     		b	.L12
 398              	.L16:
 183:../src/gps.c  ****                 case 115200:
 184:../src/gps.c  ****                     gpsPrint(gpsInitStrings[offset + 3]);
 399              		.loc 1 184 0
 400 0112 BB68     		ldr	r3, [r7, #8]
 401 0114 03F10302 		add	r2, r3, #3
 402 0118 2B4B     		ldr	r3, .L24+12
 403 011a 53F82230 		ldr	r3, [r3, r2, lsl #2]
 404 011e 1846     		mov	r0, r3
 405 0120 00F05CF8 		bl	gpsPrint
 185:../src/gps.c  ****                     break;
 406              		.loc 1 185 0
 407 0124 00BF     		nop
 408              	.L12:
 186:../src/gps.c  ****             }
 187:../src/gps.c  ****             delay(10);
 409              		.loc 1 187 0
 410 0126 4FF00A00 		mov	r0, #10
 411 012a FFF7FEFF 		bl	delay
 171:../src/gps.c  ****         for (i = 0; i < 5; i++) {
 412              		.loc 1 171 0
 413 012e FB68     		ldr	r3, [r7, #12]
 414 0130 03F10103 		add	r3, r3, #1
 415 0134 FB60     		str	r3, [r7, #12]
 416              	.L11:
 171:../src/gps.c  ****         for (i = 0; i < 5; i++) {
 417              		.loc 1 171 0 is_stmt 0 discriminator 1
 418 0136 FB68     		ldr	r3, [r7, #12]
 419 0138 042B     		cmp	r3, #4
 420 013a B5DD     		ble	.L18
 421              	.L10:
 188:../src/gps.c  ****         }
 189:../src/gps.c  ****     }
 190:../src/gps.c  **** 
 191:../src/gps.c  ****     if (mcfg.gps_type != GPS_I2C)
 422              		.loc 1 191 0 is_stmt 1
 423 013c 1F4B     		ldr	r3, .L24
 424 013e 93F80F31 		ldrb	r3, [r3, #271]	@ zero_extendqisi2
 425 0142 032B     		cmp	r3, #3
 426 0144 29D0     		beq	.L19
 192:../src/gps.c  ****     {
 193:../src/gps.c  ****     	uart2ChangeBaud(baudrate);
 427              		.loc 1 193 0
 428 0146 7868     		ldr	r0, [r7, #4]
 429 0148 FFF7FEFF 		bl	uart2ChangeBaud
 194:../src/gps.c  ****     	if (mcfg.gps_type == GPS_UBLOX) {
 430              		.loc 1 194 0
 431 014c 1B4B     		ldr	r3, .L24
 432 014e 93F80F31 		ldrb	r3, [r3, #271]	@ zero_extendqisi2
 433 0152 012B     		cmp	r3, #1
 434 0154 16D1     		bne	.L20
 195:../src/gps.c  ****     		for (i = 0; i < sizeof(ubloxInit); i++) {
 435              		.loc 1 195 0
 436 0156 4FF00003 		mov	r3, #0
 437 015a FB60     		str	r3, [r7, #12]
 438 015c 0EE0     		b	.L21
 439              	.L22:
 196:../src/gps.c  ****     			uart2Write(ubloxInit[i]); // send ubx init binary
 440              		.loc 1 196 0 discriminator 2
 441 015e 1B4A     		ldr	r2, .L24+16
 442 0160 FB68     		ldr	r3, [r7, #12]
 443 0162 D318     		adds	r3, r2, r3
 444 0164 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 445 0166 1846     		mov	r0, r3
 446 0168 FFF7FEFF 		bl	uart2Write
 197:../src/gps.c  ****     			delay(4);
 447              		.loc 1 197 0 discriminator 2
 448 016c 4FF00400 		mov	r0, #4
 449 0170 FFF7FEFF 		bl	delay
 195:../src/gps.c  ****     		for (i = 0; i < sizeof(ubloxInit); i++) {
 450              		.loc 1 195 0 discriminator 2
 451 0174 FB68     		ldr	r3, [r7, #12]
 452 0176 03F10103 		add	r3, r3, #1
 453 017a FB60     		str	r3, [r7, #12]
 454              	.L21:
 195:../src/gps.c  ****     		for (i = 0; i < sizeof(ubloxInit); i++) {
 455              		.loc 1 195 0 is_stmt 0 discriminator 1
 456 017c FB68     		ldr	r3, [r7, #12]
 457 017e 8B2B     		cmp	r3, #139
 458 0180 EDD9     		bls	.L22
 195:../src/gps.c  ****     		for (i = 0; i < sizeof(ubloxInit); i++) {
 459              		.loc 1 195 0
 460 0182 0AE0     		b	.L19
 461              	.L20:
 198:../src/gps.c  ****     		}
 199:../src/gps.c  ****     	} else if (mcfg.gps_type == GPS_MTK) {
 462              		.loc 1 199 0 is_stmt 1
 463 0184 0D4B     		ldr	r3, .L24
 464 0186 93F80F31 		ldrb	r3, [r3, #271]	@ zero_extendqisi2
 465 018a 022B     		cmp	r3, #2
 466 018c 05D1     		bne	.L19
 200:../src/gps.c  ****     		gpsPrint("$PMTK314,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*28\r\n");  // only GGA and RMC sente
 467              		.loc 1 200 0
 468 018e 1048     		ldr	r0, .L24+20
 469 0190 00F024F8 		bl	gpsPrint
 201:../src/gps.c  ****     		gpsPrint("$PMTK220,200*2C\r\n");                                    // 5 Hz update rate
 470              		.loc 1 201 0
 471 0194 0F48     		ldr	r0, .L24+24
 472 0196 00F021F8 		bl	gpsPrint
 473              	.L19:
 202:../src/gps.c  ****     	}
 203:../src/gps.c  ****     }
 204:../src/gps.c  ****     // catch some GPS frames. TODO check this
 205:../src/gps.c  ****     delay(1000);
 474              		.loc 1 205 0
 475 019a 4FF47A70 		mov	r0, #1000
 476 019e FFF7FEFF 		bl	delay
 206:../src/gps.c  ****     if (GPS_Present)
 477              		.loc 1 206 0
 478 01a2 0D4B     		ldr	r3, .L24+28
 479 01a4 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 480 01a6 002B     		cmp	r3, #0
 481 01a8 03D0     		beq	.L5
 207:../src/gps.c  ****         sensorsSet(SENSOR_GPS);
 482              		.loc 1 207 0
 483 01aa 4FF01000 		mov	r0, #16
 484 01ae FFF7FEFF 		bl	sensorsSet
 485              	.L5:
 208:../src/gps.c  **** }
 486              		.loc 1 208 0
 487 01b2 07F11007 		add	r7, r7, #16
 488 01b6 BD46     		mov	sp, r7
 489 01b8 80BD     		pop	{r7, pc}
 490              	.L25:
 491 01ba 00BF     		.align	2
 492              	.L24:
 493 01bc 00000000 		.word	mcfg
 494 01c0 00000000 		.word	GPS_NewData
 495 01c4 00000000 		.word	init_speed
 496 01c8 F8000000 		.word	gpsInitStrings
 497 01cc 18010000 		.word	ubloxInit
 498 01d0 A4010000 		.word	.LC8
 499 01d4 D8010000 		.word	.LC9
 500 01d8 00000000 		.word	GPS_Present
 501              		.cfi_endproc
 502              	.LFE30:
 504              		.align	2
 505              		.thumb
 506              		.thumb_func
 508              	gpsPrint:
 509              	.LFB31:
 209:../src/gps.c  **** 
 210:../src/gps.c  **** static void gpsPrint(const char *str)
 211:../src/gps.c  **** {
 510              		.loc 1 211 0
 511              		.cfi_startproc
 512              		@ args = 0, pretend = 0, frame = 8
 513              		@ frame_needed = 1, uses_anonymous_args = 0
 514 01dc 80B5     		push	{r7, lr}
 515              	.LCFI6:
 516              		.cfi_def_cfa_offset 8
 517              		.cfi_offset 7, -8
 518              		.cfi_offset 14, -4
 519 01de 82B0     		sub	sp, sp, #8
 520              	.LCFI7:
 521              		.cfi_def_cfa_offset 16
 522 01e0 00AF     		add	r7, sp, #0
 523              	.LCFI8:
 524              		.cfi_def_cfa_register 7
 525 01e2 7860     		str	r0, [r7, #4]
 212:../src/gps.c  ****     while (*str) {
 526              		.loc 1 212 0
 527 01e4 11E0     		b	.L27
 528              	.L29:
 213:../src/gps.c  ****         uart2Write(*str);
 529              		.loc 1 213 0
 530 01e6 7B68     		ldr	r3, [r7, #4]
 531 01e8 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 532 01ea 1846     		mov	r0, r3
 533 01ec FFF7FEFF 		bl	uart2Write
 214:../src/gps.c  ****         if (mcfg.gps_type == GPS_UBLOX)
 534              		.loc 1 214 0
 535 01f0 104B     		ldr	r3, .L31
 536 01f2 93F80F31 		ldrb	r3, [r3, #271]	@ zero_extendqisi2
 537 01f6 012B     		cmp	r3, #1
 538 01f8 03D1     		bne	.L28
 215:../src/gps.c  ****             delay(4);
 539              		.loc 1 215 0
 540 01fa 4FF00400 		mov	r0, #4
 541 01fe FFF7FEFF 		bl	delay
 542              	.L28:
 216:../src/gps.c  ****         str++;
 543              		.loc 1 216 0
 544 0202 7B68     		ldr	r3, [r7, #4]
 545 0204 03F10103 		add	r3, r3, #1
 546 0208 7B60     		str	r3, [r7, #4]
 547              	.L27:
 212:../src/gps.c  ****     while (*str) {
 548              		.loc 1 212 0 discriminator 1
 549 020a 7B68     		ldr	r3, [r7, #4]
 550 020c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 551 020e 002B     		cmp	r3, #0
 552 0210 E9D1     		bne	.L29
 217:../src/gps.c  ****     }
 218:../src/gps.c  ****     // wait to send all
 219:../src/gps.c  ****     while (!uart2TransmitEmpty());
 553              		.loc 1 219 0
 554 0212 00BF     		nop
 555              	.L30:
 556              		.loc 1 219 0 is_stmt 0 discriminator 1
 557 0214 FFF7FEFF 		bl	uart2TransmitEmpty
 558 0218 0346     		mov	r3, r0
 559 021a 83F00103 		eor	r3, r3, #1
 560 021e DBB2     		uxtb	r3, r3
 561 0220 002B     		cmp	r3, #0
 562 0222 F7D1     		bne	.L30
 220:../src/gps.c  ****     delay(30);
 563              		.loc 1 220 0 is_stmt 1
 564 0224 4FF01E00 		mov	r0, #30
 565 0228 FFF7FEFF 		bl	delay
 221:../src/gps.c  **** }
 566              		.loc 1 221 0
 567 022c 07F10807 		add	r7, r7, #8
 568 0230 BD46     		mov	sp, r7
 569 0232 80BD     		pop	{r7, pc}
 570              	.L32:
 571              		.align	2
 572              	.L31:
 573 0234 00000000 		.word	mcfg
 574              		.cfi_endproc
 575              	.LFE31:
 577              		.align	2
 578              		.global	leadFilter_clear
 579              		.thumb
 580              		.thumb_func
 582              	leadFilter_clear:
 583              	.LFB32:
 222:../src/gps.c  **** 
 223:../src/gps.c  **** /*-----------------------------------------------------------
 224:../src/gps.c  ****  *
 225:../src/gps.c  ****  * Multiwii GPS code - revision: 1097
 226:../src/gps.c  ****  *
 227:../src/gps.c  ****  *-----------------------------------------------------------*/
 228:../src/gps.c  **** #define POSHOLD_IMAX           20       // degrees
 229:../src/gps.c  **** #define POSHOLD_RATE_IMAX      20       // degrees
 230:../src/gps.c  **** #define NAV_IMAX               20       // degrees
 231:../src/gps.c  **** 
 232:../src/gps.c  **** /* GPS navigation can control the heading */
 233:../src/gps.c  **** #define NAV_TAIL_FIRST             0    // true - copter comes in with tail first
 234:../src/gps.c  **** #define NAV_SET_TAKEOFF_HEADING    1    // true - when copter arrives to home position it rotates i
 235:../src/gps.c  **** 
 236:../src/gps.c  **** #define GPS_FILTERING              1    // add a 5 element moving average filter to GPS coordinates
 237:../src/gps.c  **** #define GPS_LOW_SPEED_D_FILTER     1    // below .5m/s speed ignore D term for POSHOLD_RATE, theore
 238:../src/gps.c  **** 
 239:../src/gps.c  **** static bool check_missed_wp(void);
 240:../src/gps.c  **** static void GPS_distance_cm_bearing(int32_t * lat1, int32_t * lon1, int32_t * lat2, int32_t * lon2,
 241:../src/gps.c  **** //static void GPS_distance(int32_t lat1, int32_t lon1, int32_t lat2, int32_t lon2, uint16_t* dist, 
 242:../src/gps.c  **** static void GPS_calc_longitude_scaling(int32_t lat);
 243:../src/gps.c  **** static void GPS_calc_velocity(void);
 244:../src/gps.c  **** static void GPS_calc_location_error(int32_t * target_lat, int32_t * target_lng, int32_t * gps_lat, 
 245:../src/gps.c  **** static void GPS_calc_poshold(void);
 246:../src/gps.c  **** static void GPS_calc_nav_rate(int max_speed);
 247:../src/gps.c  **** static void GPS_update_crosstrack(void);
 248:../src/gps.c  **** static bool GPS_newFrame(char c);
 249:../src/gps.c  **** static bool GPS_NMEA_newFrame(char c);
 250:../src/gps.c  **** static bool GPS_I2C_newFrame();
 251:../src/gps.c  **** static bool GPS_UBLOX_newFrame(uint8_t data);
 252:../src/gps.c  **** static bool UBLOX_parse_gps(void);
 253:../src/gps.c  **** static int16_t GPS_calc_desired_speed(int16_t max_speed, bool _slow);
 254:../src/gps.c  **** int32_t wrap_18000(int32_t error);
 255:../src/gps.c  **** static int32_t wrap_36000(int32_t angle);
 256:../src/gps.c  **** 
 257:../src/gps.c  **** typedef struct {
 258:../src/gps.c  ****     int16_t last_velocity;
 259:../src/gps.c  **** } LeadFilter_PARAM;
 260:../src/gps.c  **** 
 261:../src/gps.c  **** void leadFilter_clear(LeadFilter_PARAM *param)
 262:../src/gps.c  **** {
 584              		.loc 1 262 0
 585              		.cfi_startproc
 586              		@ args = 0, pretend = 0, frame = 8
 587              		@ frame_needed = 1, uses_anonymous_args = 0
 588              		@ link register save eliminated.
 589 0238 80B4     		push	{r7}
 590              	.LCFI9:
 591              		.cfi_def_cfa_offset 4
 592              		.cfi_offset 7, -4
 593 023a 83B0     		sub	sp, sp, #12
 594              	.LCFI10:
 595              		.cfi_def_cfa_offset 16
 596 023c 00AF     		add	r7, sp, #0
 597              	.LCFI11:
 598              		.cfi_def_cfa_register 7
 599 023e 7860     		str	r0, [r7, #4]
 263:../src/gps.c  ****     param->last_velocity = 0;
 600              		.loc 1 263 0
 601 0240 7B68     		ldr	r3, [r7, #4]
 602 0242 4FF00002 		mov	r2, #0
 603 0246 1A80     		strh	r2, [r3, #0]	@ movhi
 264:../src/gps.c  **** }
 604              		.loc 1 264 0
 605 0248 07F10C07 		add	r7, r7, #12
 606 024c BD46     		mov	sp, r7
 607 024e 80BC     		pop	{r7}
 608 0250 7047     		bx	lr
 609              		.cfi_endproc
 610              	.LFE32:
 612              		.global	__aeabi_i2f
 613              		.global	__aeabi_fmul
 614              		.global	__aeabi_f2iz
 615 0252 00BF     		.align	2
 616              		.global	leadFilter_getPosition
 617              		.thumb
 618              		.thumb_func
 620              	leadFilter_getPosition:
 621              	.LFB33:
 265:../src/gps.c  **** 
 266:../src/gps.c  **** int32_t leadFilter_getPosition(LeadFilter_PARAM *param, int32_t pos, int16_t vel, float lag_in_seco
 267:../src/gps.c  **** {
 622              		.loc 1 267 0
 623              		.cfi_startproc
 624              		@ args = 0, pretend = 0, frame = 24
 625              		@ frame_needed = 1, uses_anonymous_args = 0
 626 0254 80B5     		push	{r7, lr}
 627              	.LCFI12:
 628              		.cfi_def_cfa_offset 8
 629              		.cfi_offset 7, -8
 630              		.cfi_offset 14, -4
 631 0256 86B0     		sub	sp, sp, #24
 632              	.LCFI13:
 633              		.cfi_def_cfa_offset 32
 634 0258 00AF     		add	r7, sp, #0
 635              	.LCFI14:
 636              		.cfi_def_cfa_register 7
 637 025a F860     		str	r0, [r7, #12]
 638 025c B960     		str	r1, [r7, #8]
 639 025e 3B60     		str	r3, [r7, #0]	@ float
 640 0260 1346     		mov	r3, r2	@ movhi
 641 0262 FB80     		strh	r3, [r7, #6]	@ movhi
 268:../src/gps.c  ****     int16_t accel_contribution = (vel - param->last_velocity) * lag_in_seconds * lag_in_seconds;
 642              		.loc 1 268 0
 643 0264 B7F90620 		ldrsh	r2, [r7, #6]
 644 0268 FB68     		ldr	r3, [r7, #12]
 645 026a 1B88     		ldrh	r3, [r3, #0]
 646 026c 1BB2     		sxth	r3, r3
 647 026e D31A     		subs	r3, r2, r3
 648 0270 1846     		mov	r0, r3
 649 0272 FFF7FEFF 		bl	__aeabi_i2f
 650 0276 0346     		mov	r3, r0
 651 0278 1846     		mov	r0, r3
 652 027a 3968     		ldr	r1, [r7, #0]	@ float
 653 027c FFF7FEFF 		bl	__aeabi_fmul
 654 0280 0346     		mov	r3, r0
 655 0282 1846     		mov	r0, r3
 656 0284 3968     		ldr	r1, [r7, #0]	@ float
 657 0286 FFF7FEFF 		bl	__aeabi_fmul
 658 028a 0346     		mov	r3, r0
 659 028c 1846     		mov	r0, r3
 660 028e FFF7FEFF 		bl	__aeabi_f2iz
 661 0292 0346     		mov	r3, r0
 662 0294 FB82     		strh	r3, [r7, #22]	@ movhi
 269:../src/gps.c  ****     int16_t vel_contribution = vel * lag_in_seconds;
 663              		.loc 1 269 0
 664 0296 B7F90630 		ldrsh	r3, [r7, #6]
 665 029a 1846     		mov	r0, r3
 666 029c FFF7FEFF 		bl	__aeabi_i2f
 667 02a0 0346     		mov	r3, r0
 668 02a2 1846     		mov	r0, r3
 669 02a4 3968     		ldr	r1, [r7, #0]	@ float
 670 02a6 FFF7FEFF 		bl	__aeabi_fmul
 671 02aa 0346     		mov	r3, r0
 672 02ac 1846     		mov	r0, r3
 673 02ae FFF7FEFF 		bl	__aeabi_f2iz
 674 02b2 0346     		mov	r3, r0
 675 02b4 BB82     		strh	r3, [r7, #20]	@ movhi
 270:../src/gps.c  **** 
 271:../src/gps.c  ****     // store velocity for next iteration
 272:../src/gps.c  ****     param->last_velocity = vel;
 676              		.loc 1 272 0
 677 02b6 FB68     		ldr	r3, [r7, #12]
 678 02b8 FA88     		ldrh	r2, [r7, #6]	@ movhi
 679 02ba 1A80     		strh	r2, [r3, #0]	@ movhi
 273:../src/gps.c  **** 
 274:../src/gps.c  ****     return pos + vel_contribution + accel_contribution;
 680              		.loc 1 274 0
 681 02bc B7F91420 		ldrsh	r2, [r7, #20]
 682 02c0 BB68     		ldr	r3, [r7, #8]
 683 02c2 D218     		adds	r2, r2, r3
 684 02c4 B7F91630 		ldrsh	r3, [r7, #22]
 685 02c8 D318     		adds	r3, r2, r3
 275:../src/gps.c  **** }
 686              		.loc 1 275 0
 687 02ca 1846     		mov	r0, r3
 688 02cc 07F11807 		add	r7, r7, #24
 689 02d0 BD46     		mov	sp, r7
 690 02d2 80BD     		pop	{r7, pc}
 691              		.cfi_endproc
 692              	.LFE33:
 694              		.comm	xLeadFilter,2,4
 695              		.comm	yLeadFilter,2,4
 696              		.bss
 697              		.align	2
 698              	posholdPID_PARAM:
 699 0000 00000000 		.space	16
 699      00000000 
 699      00000000 
 699      00000000 
 700              		.align	2
 701              	poshold_ratePID_PARAM:
 702 0010 00000000 		.space	16
 702      00000000 
 702      00000000 
 702      00000000 
 703              		.align	2
 704              	navPID_PARAM:
 705 0020 00000000 		.space	16
 705      00000000 
 705      00000000 
 705      00000000 
 706              		.align	2
 707              	posholdPID:
 708 0030 00000000 		.space	40
 708      00000000 
 708      00000000 
 708      00000000 
 708      00000000 
 709              		.align	2
 710              	poshold_ratePID:
 711 0058 00000000 		.space	40
 711      00000000 
 711      00000000 
 711      00000000 
 711      00000000 
 712              		.align	2
 713              	navPID:
 714 0080 00000000 		.space	40
 714      00000000 
 714      00000000 
 714      00000000 
 714      00000000 
 715              		.text
 716              		.align	2
 717              		.thumb
 718              		.thumb_func
 720              	get_P:
 721              	.LFB34:
 276:../src/gps.c  **** 
 277:../src/gps.c  **** LeadFilter_PARAM xLeadFilter;
 278:../src/gps.c  **** LeadFilter_PARAM yLeadFilter;
 279:../src/gps.c  **** 
 280:../src/gps.c  **** typedef struct {
 281:../src/gps.c  ****     float kP;
 282:../src/gps.c  ****     float kI;
 283:../src/gps.c  ****     float kD;
 284:../src/gps.c  ****     float Imax;
 285:../src/gps.c  **** } PID_PARAM;
 286:../src/gps.c  **** 
 287:../src/gps.c  **** static PID_PARAM posholdPID_PARAM;
 288:../src/gps.c  **** static PID_PARAM poshold_ratePID_PARAM;
 289:../src/gps.c  **** static PID_PARAM navPID_PARAM;
 290:../src/gps.c  **** 
 291:../src/gps.c  **** typedef struct {
 292:../src/gps.c  ****     float integrator;          // integrator value
 293:../src/gps.c  ****     int32_t last_input;        // last input for derivative
 294:../src/gps.c  ****     float last_derivative;     // last derivative for low-pass filter
 295:../src/gps.c  ****     float output;
 296:../src/gps.c  ****     float derivative;
 297:../src/gps.c  **** } PID;
 298:../src/gps.c  **** 
 299:../src/gps.c  **** static PID posholdPID[2];
 300:../src/gps.c  **** static PID poshold_ratePID[2];
 301:../src/gps.c  **** static PID navPID[2];
 302:../src/gps.c  **** 
 303:../src/gps.c  **** static int32_t get_P(int32_t error, PID_PARAM *pid)
 304:../src/gps.c  **** {
 722              		.loc 1 304 0
 723              		.cfi_startproc
 724              		@ args = 0, pretend = 0, frame = 8
 725              		@ frame_needed = 1, uses_anonymous_args = 0
 726 02d4 80B5     		push	{r7, lr}
 727              	.LCFI15:
 728              		.cfi_def_cfa_offset 8
 729              		.cfi_offset 7, -8
 730              		.cfi_offset 14, -4
 731 02d6 82B0     		sub	sp, sp, #8
 732              	.LCFI16:
 733              		.cfi_def_cfa_offset 16
 734 02d8 00AF     		add	r7, sp, #0
 735              	.LCFI17:
 736              		.cfi_def_cfa_register 7
 737 02da 7860     		str	r0, [r7, #4]
 738 02dc 3960     		str	r1, [r7, #0]
 305:../src/gps.c  ****     return (float)error * pid->kP;
 739              		.loc 1 305 0
 740 02de 7868     		ldr	r0, [r7, #4]
 741 02e0 FFF7FEFF 		bl	__aeabi_i2f
 742 02e4 0246     		mov	r2, r0
 743 02e6 3B68     		ldr	r3, [r7, #0]
 744 02e8 1B68     		ldr	r3, [r3, #0]	@ float
 745 02ea 1046     		mov	r0, r2
 746 02ec 1946     		mov	r1, r3
 747 02ee FFF7FEFF 		bl	__aeabi_fmul
 748 02f2 0346     		mov	r3, r0
 749 02f4 1846     		mov	r0, r3
 750 02f6 FFF7FEFF 		bl	__aeabi_f2iz
 751 02fa 0346     		mov	r3, r0
 306:../src/gps.c  **** }
 752              		.loc 1 306 0
 753 02fc 1846     		mov	r0, r3
 754 02fe 07F10807 		add	r7, r7, #8
 755 0302 BD46     		mov	sp, r7
 756 0304 80BD     		pop	{r7, pc}
 757              		.cfi_endproc
 758              	.LFE34:
 760              		.global	__aeabi_fadd
 761              		.global	__aeabi_fcmplt
 762              		.global	__aeabi_fcmpgt
 763 0306 00BF     		.align	2
 764              		.thumb
 765              		.thumb_func
 767              	get_I:
 768              	.LFB35:
 307:../src/gps.c  **** 
 308:../src/gps.c  **** static int32_t get_I(int32_t error, float *dt, PID *pid, PID_PARAM *pid_param)
 309:../src/gps.c  **** {
 769              		.loc 1 309 0
 770              		.cfi_startproc
 771              		@ args = 0, pretend = 0, frame = 16
 772              		@ frame_needed = 1, uses_anonymous_args = 0
 773 0308 90B5     		push	{r4, r7, lr}
 774              	.LCFI18:
 775              		.cfi_def_cfa_offset 12
 776              		.cfi_offset 4, -12
 777              		.cfi_offset 7, -8
 778              		.cfi_offset 14, -4
 779 030a 85B0     		sub	sp, sp, #20
 780              	.LCFI19:
 781              		.cfi_def_cfa_offset 32
 782 030c 00AF     		add	r7, sp, #0
 783              	.LCFI20:
 784              		.cfi_def_cfa_register 7
 785 030e F860     		str	r0, [r7, #12]
 786 0310 B960     		str	r1, [r7, #8]
 787 0312 7A60     		str	r2, [r7, #4]
 788 0314 3B60     		str	r3, [r7, #0]
 310:../src/gps.c  ****     pid->integrator += ((float)error * pid_param->kI) * *dt;
 789              		.loc 1 310 0
 790 0316 7B68     		ldr	r3, [r7, #4]
 791 0318 1C68     		ldr	r4, [r3, #0]	@ float
 792 031a F868     		ldr	r0, [r7, #12]
 793 031c FFF7FEFF 		bl	__aeabi_i2f
 794 0320 0246     		mov	r2, r0
 795 0322 3B68     		ldr	r3, [r7, #0]
 796 0324 5B68     		ldr	r3, [r3, #4]	@ float
 797 0326 1046     		mov	r0, r2
 798 0328 1946     		mov	r1, r3
 799 032a FFF7FEFF 		bl	__aeabi_fmul
 800 032e 0346     		mov	r3, r0
 801 0330 1A46     		mov	r2, r3
 802 0332 BB68     		ldr	r3, [r7, #8]
 803 0334 1B68     		ldr	r3, [r3, #0]	@ float
 804 0336 1046     		mov	r0, r2
 805 0338 1946     		mov	r1, r3
 806 033a FFF7FEFF 		bl	__aeabi_fmul
 807 033e 0346     		mov	r3, r0
 808 0340 2046     		mov	r0, r4
 809 0342 1946     		mov	r1, r3
 810 0344 FFF7FEFF 		bl	__aeabi_fadd
 811 0348 0346     		mov	r3, r0
 812 034a 1A46     		mov	r2, r3
 813 034c 7B68     		ldr	r3, [r7, #4]
 814 034e 1A60     		str	r2, [r3, #0]	@ float
 311:../src/gps.c  ****     pid->integrator = constrain(pid->integrator, -pid_param->Imax, pid_param->Imax);
 815              		.loc 1 311 0
 816 0350 7B68     		ldr	r3, [r7, #4]
 817 0352 1A68     		ldr	r2, [r3, #0]	@ float
 818 0354 3B68     		ldr	r3, [r7, #0]
 819 0356 DB68     		ldr	r3, [r3, #12]	@ float
 820 0358 83F00043 		eor	r3, r3, #-2147483648
 821 035c 1046     		mov	r0, r2
 822 035e 1946     		mov	r1, r3
 823 0360 FFF7FEFF 		bl	__aeabi_fcmplt
 824 0364 0346     		mov	r3, r0
 825 0366 002B     		cmp	r3, #0
 826 0368 04D0     		beq	.L48
 827              	.L46:
 828              		.loc 1 311 0 is_stmt 0 discriminator 1
 829 036a 3B68     		ldr	r3, [r7, #0]
 830 036c DB68     		ldr	r3, [r3, #12]	@ float
 831 036e 83F00043 		eor	r3, r3, #-2147483648
 832 0372 0FE0     		b	.L41
 833              	.L48:
 834              		.loc 1 311 0 discriminator 2
 835 0374 7B68     		ldr	r3, [r7, #4]
 836 0376 1A68     		ldr	r2, [r3, #0]	@ float
 837 0378 3B68     		ldr	r3, [r7, #0]
 838 037a DB68     		ldr	r3, [r3, #12]	@ float
 839 037c 1046     		mov	r0, r2
 840 037e 1946     		mov	r1, r3
 841 0380 FFF7FEFF 		bl	__aeabi_fcmpgt
 842 0384 0346     		mov	r3, r0
 843 0386 002B     		cmp	r3, #0
 844 0388 02D0     		beq	.L49
 845              	.L47:
 846              		.loc 1 311 0 discriminator 3
 847 038a 3B68     		ldr	r3, [r7, #0]
 848 038c DB68     		ldr	r3, [r3, #12]	@ float
 849 038e 01E0     		b	.L44
 850              	.L49:
 851              		.loc 1 311 0 discriminator 4
 852 0390 7B68     		ldr	r3, [r7, #4]
 853 0392 1B68     		ldr	r3, [r3, #0]	@ float
 854              	.L44:
 855              	.L41:
 856              		.loc 1 311 0 discriminator 6
 857 0394 7A68     		ldr	r2, [r7, #4]
 858 0396 1360     		str	r3, [r2, #0]	@ float
 312:../src/gps.c  ****     return pid->integrator;
 859              		.loc 1 312 0 is_stmt 1 discriminator 6
 860 0398 7B68     		ldr	r3, [r7, #4]
 861 039a 1B68     		ldr	r3, [r3, #0]	@ float
 862 039c 1846     		mov	r0, r3
 863 039e FFF7FEFF 		bl	__aeabi_f2iz
 864 03a2 0346     		mov	r3, r0
 313:../src/gps.c  **** }
 865              		.loc 1 313 0 discriminator 6
 866 03a4 1846     		mov	r0, r3
 867 03a6 07F11407 		add	r7, r7, #20
 868 03aa BD46     		mov	sp, r7
 869 03ac 90BD     		pop	{r4, r7, pc}
 870              		.cfi_endproc
 871              	.LFE35:
 873              		.global	__aeabi_fdiv
 874              		.global	__aeabi_f2d
 875              		.global	__aeabi_ui2f
 876              		.global	__aeabi_dmul
 877              		.global	__aeabi_ddiv
 878              		.global	__aeabi_dadd
 879              		.global	__aeabi_fsub
 880              		.global	__aeabi_d2f
 881 03ae 00BF     		.align	2
 882              		.thumb
 883              		.thumb_func
 885              	get_D:
 886              	.LFB36:
 314:../src/gps.c  **** 
 315:../src/gps.c  **** static int32_t get_D(int32_t input, float *dt, PID *pid, PID_PARAM *pid_param)
 316:../src/gps.c  **** {
 887              		.loc 1 316 0
 888              		.cfi_startproc
 889              		@ args = 0, pretend = 0, frame = 16
 890              		@ frame_needed = 1, uses_anonymous_args = 0
 891 03b0 2DE9B04F 		push	{r4, r5, r7, r8, r9, sl, fp, lr}
 892              	.LCFI21:
 893              		.cfi_def_cfa_offset 32
 894              		.cfi_offset 4, -32
 895              		.cfi_offset 5, -28
 896              		.cfi_offset 7, -24
 897              		.cfi_offset 8, -20
 898              		.cfi_offset 9, -16
 899              		.cfi_offset 10, -12
 900              		.cfi_offset 11, -8
 901              		.cfi_offset 14, -4
 902 03b4 84B0     		sub	sp, sp, #16
 903              	.LCFI22:
 904              		.cfi_def_cfa_offset 48
 905 03b6 00AF     		add	r7, sp, #0
 906              	.LCFI23:
 907              		.cfi_def_cfa_register 7
 908 03b8 F860     		str	r0, [r7, #12]
 909 03ba B960     		str	r1, [r7, #8]
 910 03bc 7A60     		str	r2, [r7, #4]
 911 03be 3B60     		str	r3, [r7, #0]
 317:../src/gps.c  ****     pid->derivative = (input - pid->last_input) / *dt;
 912              		.loc 1 317 0
 913 03c0 7B68     		ldr	r3, [r7, #4]
 914 03c2 5B68     		ldr	r3, [r3, #4]
 915 03c4 FA68     		ldr	r2, [r7, #12]
 916 03c6 D31A     		subs	r3, r2, r3
 917 03c8 1846     		mov	r0, r3
 918 03ca FFF7FEFF 		bl	__aeabi_i2f
 919 03ce 0246     		mov	r2, r0
 920 03d0 BB68     		ldr	r3, [r7, #8]
 921 03d2 1B68     		ldr	r3, [r3, #0]	@ float
 922 03d4 1046     		mov	r0, r2
 923 03d6 1946     		mov	r1, r3
 924 03d8 FFF7FEFF 		bl	__aeabi_fdiv
 925 03dc 0346     		mov	r3, r0
 926 03de 1A46     		mov	r2, r3
 927 03e0 7B68     		ldr	r3, [r7, #4]
 928 03e2 1A61     		str	r2, [r3, #16]	@ float
 318:../src/gps.c  **** 
 319:../src/gps.c  ****     // Low pass filter cut frequency for derivative calculation
 320:../src/gps.c  ****     // Set to  "1 / ( 2 * PI * gps_lpf )"
 321:../src/gps.c  **** #define PID_FILTER       (1.0f / (2.0f * M_PI * (float)cfg.gps_lpf))
 322:../src/gps.c  ****     // discrete low pass filter, cuts out the
 323:../src/gps.c  ****     // high frequency noise that can drive the controller crazy
 324:../src/gps.c  ****     pid->derivative = pid->last_derivative + (*dt / (PID_FILTER + *dt)) * (pid->derivative - pid->l
 929              		.loc 1 324 0
 930 03e4 7B68     		ldr	r3, [r7, #4]
 931 03e6 9B68     		ldr	r3, [r3, #8]	@ float
 932 03e8 1846     		mov	r0, r3
 933 03ea FFF7FEFF 		bl	__aeabi_f2d
 934 03ee 0446     		mov	r4, r0
 935 03f0 0D46     		mov	r5, r1
 936 03f2 BB68     		ldr	r3, [r7, #8]
 937 03f4 1B68     		ldr	r3, [r3, #0]	@ float
 938 03f6 1846     		mov	r0, r3
 939 03f8 FFF7FEFF 		bl	__aeabi_f2d
 940 03fc 8046     		mov	r8, r0
 941 03fe 8946     		mov	r9, r1
 942 0400 3B4B     		ldr	r3, .L52+8
 943 0402 93F89230 		ldrb	r3, [r3, #146]	@ zero_extendqisi2
 944 0406 1846     		mov	r0, r3
 945 0408 FFF7FEFF 		bl	__aeabi_ui2f
 946 040c 0346     		mov	r3, r0
 947 040e 1846     		mov	r0, r3
 948 0410 FFF7FEFF 		bl	__aeabi_f2d
 949 0414 0246     		mov	r2, r0
 950 0416 0B46     		mov	r3, r1
 951 0418 1046     		mov	r0, r2
 952 041a 1946     		mov	r1, r3
 953 041c 32A3     		adr	r3, .L52
 954 041e D3E90023 		ldrd	r2, [r3]
 955 0422 FFF7FEFF 		bl	__aeabi_dmul
 956 0426 0246     		mov	r2, r0
 957 0428 0B46     		mov	r3, r1
 958 042a 4FF00000 		mov	r0, #0
 959 042e 4FF07F51 		mov	r1, #1069547520
 960 0432 01F54011 		add	r1, r1, #3145728
 961 0436 FFF7FEFF 		bl	__aeabi_ddiv
 962 043a 0246     		mov	r2, r0
 963 043c 0B46     		mov	r3, r1
 964 043e 9246     		mov	sl, r2
 965 0440 9B46     		mov	fp, r3
 966 0442 BB68     		ldr	r3, [r7, #8]
 967 0444 1B68     		ldr	r3, [r3, #0]	@ float
 968 0446 1846     		mov	r0, r3
 969 0448 FFF7FEFF 		bl	__aeabi_f2d
 970 044c 0246     		mov	r2, r0
 971 044e 0B46     		mov	r3, r1
 972 0450 5046     		mov	r0, sl
 973 0452 5946     		mov	r1, fp
 974 0454 FFF7FEFF 		bl	__aeabi_dadd
 975 0458 0246     		mov	r2, r0
 976 045a 0B46     		mov	r3, r1
 977 045c 4046     		mov	r0, r8
 978 045e 4946     		mov	r1, r9
 979 0460 FFF7FEFF 		bl	__aeabi_ddiv
 980 0464 0246     		mov	r2, r0
 981 0466 0B46     		mov	r3, r1
 982 0468 9046     		mov	r8, r2
 983 046a 9946     		mov	r9, r3
 984 046c 7B68     		ldr	r3, [r7, #4]
 985 046e 1A69     		ldr	r2, [r3, #16]	@ float
 986 0470 7B68     		ldr	r3, [r7, #4]
 987 0472 9B68     		ldr	r3, [r3, #8]	@ float
 988 0474 1046     		mov	r0, r2
 989 0476 1946     		mov	r1, r3
 990 0478 FFF7FEFF 		bl	__aeabi_fsub
 991 047c 0346     		mov	r3, r0
 992 047e 1846     		mov	r0, r3
 993 0480 FFF7FEFF 		bl	__aeabi_f2d
 994 0484 0246     		mov	r2, r0
 995 0486 0B46     		mov	r3, r1
 996 0488 4046     		mov	r0, r8
 997 048a 4946     		mov	r1, r9
 998 048c FFF7FEFF 		bl	__aeabi_dmul
 999 0490 0246     		mov	r2, r0
 1000 0492 0B46     		mov	r3, r1
 1001 0494 2046     		mov	r0, r4
 1002 0496 2946     		mov	r1, r5
 1003 0498 FFF7FEFF 		bl	__aeabi_dadd
 1004 049c 0246     		mov	r2, r0
 1005 049e 0B46     		mov	r3, r1
 1006 04a0 1046     		mov	r0, r2
 1007 04a2 1946     		mov	r1, r3
 1008 04a4 FFF7FEFF 		bl	__aeabi_d2f
 1009 04a8 0246     		mov	r2, r0
 1010 04aa 7B68     		ldr	r3, [r7, #4]
 1011 04ac 1A61     		str	r2, [r3, #16]	@ float
 325:../src/gps.c  ****     // update state
 326:../src/gps.c  ****     pid->last_input = input;
 1012              		.loc 1 326 0
 1013 04ae 7B68     		ldr	r3, [r7, #4]
 1014 04b0 FA68     		ldr	r2, [r7, #12]
 1015 04b2 5A60     		str	r2, [r3, #4]
 327:../src/gps.c  ****     pid->last_derivative = pid->derivative;
 1016              		.loc 1 327 0
 1017 04b4 7B68     		ldr	r3, [r7, #4]
 1018 04b6 1A69     		ldr	r2, [r3, #16]	@ float
 1019 04b8 7B68     		ldr	r3, [r7, #4]
 1020 04ba 9A60     		str	r2, [r3, #8]	@ float
 328:../src/gps.c  ****     // add in derivative component
 329:../src/gps.c  ****     return pid_param->kD * pid->derivative;
 1021              		.loc 1 329 0
 1022 04bc 3B68     		ldr	r3, [r7, #0]
 1023 04be 9A68     		ldr	r2, [r3, #8]	@ float
 1024 04c0 7B68     		ldr	r3, [r7, #4]
 1025 04c2 1B69     		ldr	r3, [r3, #16]	@ float
 1026 04c4 1046     		mov	r0, r2
 1027 04c6 1946     		mov	r1, r3
 1028 04c8 FFF7FEFF 		bl	__aeabi_fmul
 1029 04cc 0346     		mov	r3, r0
 1030 04ce 1846     		mov	r0, r3
 1031 04d0 FFF7FEFF 		bl	__aeabi_f2iz
 1032 04d4 0346     		mov	r3, r0
 330:../src/gps.c  **** }
 1033              		.loc 1 330 0
 1034 04d6 1846     		mov	r0, r3
 1035 04d8 07F11007 		add	r7, r7, #16
 1036 04dc BD46     		mov	sp, r7
 1037 04de BDE8B08F 		pop	{r4, r5, r7, r8, r9, sl, fp, pc}
 1038              	.L53:
 1039 04e2 00BFAFF3 		.align	3
 1039      0080
 1040              	.L52:
 1041 04e8 182D4454 		.word	1413754136
 1042 04ec FB211940 		.word	1075388923
 1043 04f0 00000000 		.word	cfg
 1044              		.cfi_endproc
 1045              	.LFE36:
 1047              		.align	2
 1048              		.thumb
 1049              		.thumb_func
 1051              	reset_PID:
 1052              	.LFB37:
 331:../src/gps.c  **** 
 332:../src/gps.c  **** static void reset_PID(PID *pid)
 333:../src/gps.c  **** {
 1053              		.loc 1 333 0
 1054              		.cfi_startproc
 1055              		@ args = 0, pretend = 0, frame = 8
 1056              		@ frame_needed = 1, uses_anonymous_args = 0
 1057              		@ link register save eliminated.
 1058 04f4 80B4     		push	{r7}
 1059              	.LCFI24:
 1060              		.cfi_def_cfa_offset 4
 1061              		.cfi_offset 7, -4
 1062 04f6 83B0     		sub	sp, sp, #12
 1063              	.LCFI25:
 1064              		.cfi_def_cfa_offset 16
 1065 04f8 00AF     		add	r7, sp, #0
 1066              	.LCFI26:
 1067              		.cfi_def_cfa_register 7
 1068 04fa 7860     		str	r0, [r7, #4]
 334:../src/gps.c  ****     pid->integrator = 0;
 1069              		.loc 1 334 0
 1070 04fc 7B68     		ldr	r3, [r7, #4]
 1071 04fe 074A     		ldr	r2, .L55	@ float
 1072 0500 1A60     		str	r2, [r3, #0]	@ float
 335:../src/gps.c  ****     pid->last_input = 0;
 1073              		.loc 1 335 0
 1074 0502 7B68     		ldr	r3, [r7, #4]
 1075 0504 4FF00002 		mov	r2, #0
 1076 0508 5A60     		str	r2, [r3, #4]
 336:../src/gps.c  ****     pid->last_derivative = 0;
 1077              		.loc 1 336 0
 1078 050a 7B68     		ldr	r3, [r7, #4]
 1079 050c 034A     		ldr	r2, .L55	@ float
 1080 050e 9A60     		str	r2, [r3, #8]	@ float
 337:../src/gps.c  **** }
 1081              		.loc 1 337 0
 1082 0510 07F10C07 		add	r7, r7, #12
 1083 0514 BD46     		mov	sp, r7
 1084 0516 80BC     		pop	{r7}
 1085 0518 7047     		bx	lr
 1086              	.L56:
 1087 051a 00BF     		.align	2
 1088              	.L55:
 1089 051c 00000000 		.word	0
 1090              		.cfi_endproc
 1091              	.LFE37:
 1093              		.bss
 1094              		.align	2
 1095              	dTnav:
 1096 00a8 00000000 		.space	4
 1097              		.align	2
 1098              	actual_speed:
 1099 00ac 00000000 		.space	4
 1100              		.align	2
 1101              	GPS_scaleLonDown:
 1102 00b0 00000000 		.space	4
 1103              		.align	2
 1104              	rate_error:
 1105 00b4 00000000 		.space	4
 1106              		.align	2
 1107              	error:
 1108 00b8 00000000 		.space	8
 1108      00000000 
 1109              		.align	2
 1110              	GPS_WP:
 1111 00c0 00000000 		.space	8
 1111      00000000 
 1112              		.align	2
 1113              	target_bearing:
 1114 00c8 00000000 		.space	4
 1115              		.align	2
 1116              	original_target_bearing:
 1117 00cc 00000000 		.space	4
 1118              		.align	1
 1119              	crosstrack_error:
 1120 00d0 0000     		.space	2
 1121 00d2 0000     		.align	2
 1122              	wp_distance:
 1123 00d4 00000000 		.space	4
 1124              		.align	1
 1125              	waypoint_speed_gov:
 1126 00d8 0000     		.space	2
 1127              	GPS_filter_index:
 1128 00da 00       		.space	1
 1129 00db 00       		.align	2
 1130              	GPS_filter:
 1131 00dc 00000000 		.space	40
 1131      00000000 
 1131      00000000 
 1131      00000000 
 1131      00000000 
 1132              		.align	2
 1133              	GPS_filter_sum:
 1134 0104 00000000 		.space	8
 1134      00000000 
 1135              		.align	2
 1136              	GPS_read:
 1137 010c 00000000 		.space	8
 1137      00000000 
 1138              		.align	2
 1139              	GPS_filtered:
 1140 0114 00000000 		.space	8
 1140      00000000 
 1141              		.align	2
 1142              	GPS_degree:
 1143 011c 00000000 		.space	8
 1143      00000000 
 1144              		.align	2
 1145              	fraction3:
 1146 0124 00000000 		.space	4
 1147              		.align	2
 1148              	nav_bearing:
 1149 0128 00000000 		.space	4
 1150              		.align	1
 1151              	nav_takeoff_bearing:
 1152 012c 0000     		.space	2
 1153              		.text
 1154              		.align	2
 1155              		.global	GPS_NewData
 1156              		.thumb
 1157              		.thumb_func
 1159              	GPS_NewData:
 1160              	.LFB38:
 338:../src/gps.c  **** 
 339:../src/gps.c  **** #define GPS_X 1
 340:../src/gps.c  **** #define GPS_Y 0
 341:../src/gps.c  **** 
 342:../src/gps.c  **** /****************** PI and PID controllers for GPS ********************///32938 -> 33160
 343:../src/gps.c  **** 
 344:../src/gps.c  **** #define RADX100                    0.000174532925f
 345:../src/gps.c  **** #define CROSSTRACK_GAIN            1
 346:../src/gps.c  **** #define NAV_SLOW_NAV               true
 347:../src/gps.c  **** #define NAV_BANK_MAX               3000 // 30deg max banking when navigating (just for security and
 348:../src/gps.c  **** 
 349:../src/gps.c  **** static float dTnav;             // Delta Time in milliseconds for navigation computations, updated 
 350:../src/gps.c  **** static int16_t actual_speed[2] = { 0, 0 };
 351:../src/gps.c  **** static float GPS_scaleLonDown;  // this is used to offset the shrinking longitude as we go towards 
 352:../src/gps.c  **** 
 353:../src/gps.c  **** // The difference between the desired rate of travel and the actual rate of travel
 354:../src/gps.c  **** // updated after GPS read - 5-10hz
 355:../src/gps.c  **** static int16_t rate_error[2];
 356:../src/gps.c  **** static int32_t error[2];
 357:../src/gps.c  **** 
 358:../src/gps.c  **** // Currently used WP
 359:../src/gps.c  **** static int32_t GPS_WP[2];
 360:../src/gps.c  **** 
 361:../src/gps.c  **** ////////////////////////////////////////////////////////////////////////////////
 362:../src/gps.c  **** // Location & Navigation
 363:../src/gps.c  **** ////////////////////////////////////////////////////////////////////////////////
 364:../src/gps.c  **** // This is the angle from the copter to the "next_WP" location in degrees * 100
 365:../src/gps.c  **** static int32_t target_bearing;
 366:../src/gps.c  **** ////////////////////////////////////////////////////////////////////////////////
 367:../src/gps.c  **** // Crosstrack
 368:../src/gps.c  **** ////////////////////////////////////////////////////////////////////////////////
 369:../src/gps.c  **** // deg * 100, The original angle to the next_WP when the next_WP was set
 370:../src/gps.c  **** // Also used to check when we pass a WP
 371:../src/gps.c  **** static int32_t original_target_bearing;
 372:../src/gps.c  **** // The amount of angle correction applied to target_bearing to bring the copter back on its optimum
 373:../src/gps.c  **** static int16_t crosstrack_error;
 374:../src/gps.c  **** ////////////////////////////////////////////////////////////////////////////////
 375:../src/gps.c  **** // The location of the copter in relation to home, updated every GPS read (1deg - 100)
 376:../src/gps.c  **** //static int32_t home_to_copter_bearing;
 377:../src/gps.c  **** // distance between plane and home in cm
 378:../src/gps.c  **** //static int32_t home_distance;
 379:../src/gps.c  **** // distance between plane and next_WP in cm
 380:../src/gps.c  **** static uint32_t wp_distance;
 381:../src/gps.c  **** 
 382:../src/gps.c  **** // used for slow speed wind up when start navigation;
 383:../src/gps.c  **** static int16_t waypoint_speed_gov;
 384:../src/gps.c  **** 
 385:../src/gps.c  **** ////////////////////////////////////////////////////////////////////////////////////
 386:../src/gps.c  **** // moving average filter variables
 387:../src/gps.c  **** //
 388:../src/gps.c  **** #define GPS_FILTER_VECTOR_LENGTH 5
 389:../src/gps.c  **** 
 390:../src/gps.c  **** static uint8_t GPS_filter_index = 0;
 391:../src/gps.c  **** static int32_t GPS_filter[2][GPS_FILTER_VECTOR_LENGTH];
 392:../src/gps.c  **** static int32_t GPS_filter_sum[2];
 393:../src/gps.c  **** static int32_t GPS_read[2];
 394:../src/gps.c  **** static int32_t GPS_filtered[2];
 395:../src/gps.c  **** static int32_t GPS_degree[2];   //the lat lon degree without any decimals (lat/10 000 000)
 396:../src/gps.c  **** static uint16_t fraction3[2];
 397:../src/gps.c  **** 
 398:../src/gps.c  **** // This is the angle from the copter to the "next_WP" location
 399:../src/gps.c  **** // with the addition of Crosstrack error in degrees * 100
 400:../src/gps.c  **** static int32_t nav_bearing;
 401:../src/gps.c  **** // saves the bearing at takeof (1deg = 1) used to rotate to takeoff direction when arrives at home
 402:../src/gps.c  **** static int16_t nav_takeoff_bearing;
 403:../src/gps.c  **** 
 404:../src/gps.c  **** void GPS_NewData(uint16_t c)
 405:../src/gps.c  **** {
 1161              		.loc 1 405 0
 1162              		.cfi_startproc
 1163              		@ args = 0, pretend = 0, frame = 24
 1164              		@ frame_needed = 1, uses_anonymous_args = 0
 1165 0520 90B5     		push	{r4, r7, lr}
 1166              	.LCFI27:
 1167              		.cfi_def_cfa_offset 12
 1168              		.cfi_offset 4, -12
 1169              		.cfi_offset 7, -8
 1170              		.cfi_offset 14, -4
 1171 0522 89B0     		sub	sp, sp, #36
 1172              	.LCFI28:
 1173              		.cfi_def_cfa_offset 48
 1174 0524 02AF     		add	r7, sp, #8
 1175              	.LCFI29:
 1176              		.cfi_def_cfa 7, 40
 1177 0526 0346     		mov	r3, r0
 1178 0528 FB80     		strh	r3, [r7, #6]	@ movhi
 406:../src/gps.c  ****     int axis;
 407:../src/gps.c  ****     static uint32_t nav_loopTimer;
 408:../src/gps.c  ****     uint32_t dist;
 409:../src/gps.c  ****     int32_t dir;
 410:../src/gps.c  ****     int16_t speed;
 411:../src/gps.c  **** 
 412:../src/gps.c  ****     if (GPS_newFrame(c)) {
 1179              		.loc 1 412 0
 1180 052a FB88     		ldrh	r3, [r7, #6]	@ movhi
 1181 052c DBB2     		uxtb	r3, r3
 1182 052e 1846     		mov	r0, r3
 1183 0530 01F0ECF8 		bl	GPS_newFrame
 1184 0534 0346     		mov	r3, r0
 1185 0536 002B     		cmp	r3, #0
 1186 0538 00F0CA81 		beq	.L57
 413:../src/gps.c  ****         if (GPS_update == 1)
 1187              		.loc 1 413 0
 1188 053c 884B     		ldr	r3, .L79
 1189 053e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1190 0540 012B     		cmp	r3, #1
 1191 0542 04D1     		bne	.L59
 414:../src/gps.c  ****             GPS_update = 0;
 1192              		.loc 1 414 0
 1193 0544 864B     		ldr	r3, .L79
 1194 0546 4FF00002 		mov	r2, #0
 1195 054a 1A70     		strb	r2, [r3, #0]
 1196 054c 03E0     		b	.L60
 1197              	.L59:
 415:../src/gps.c  ****         else
 416:../src/gps.c  ****             GPS_update = 1;
 1198              		.loc 1 416 0
 1199 054e 844B     		ldr	r3, .L79
 1200 0550 4FF00102 		mov	r2, #1
 1201 0554 1A70     		strb	r2, [r3, #0]
 1202              	.L60:
 417:../src/gps.c  ****         if (f.GPS_FIX && GPS_numSat >= 5) {
 1203              		.loc 1 417 0
 1204 0556 834B     		ldr	r3, .L79+4
 1205 0558 DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 1206 055a 002B     		cmp	r3, #0
 1207 055c 00F0B881 		beq	.L57
 1208              		.loc 1 417 0 is_stmt 0 discriminator 1
 1209 0560 814B     		ldr	r3, .L79+8
 1210 0562 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1211 0564 042B     		cmp	r3, #4
 1212 0566 40F2B381 		bls	.L57
 418:../src/gps.c  ****             if (!f.ARMED)
 1213              		.loc 1 418 0 is_stmt 1
 1214 056a 7E4B     		ldr	r3, .L79+4
 1215 056c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1216 056e 002B     		cmp	r3, #0
 1217 0570 03D1     		bne	.L61
 419:../src/gps.c  ****                 f.GPS_FIX_HOME = 0;
 1218              		.loc 1 419 0
 1219 0572 7C4B     		ldr	r3, .L79+4
 1220 0574 4FF00002 		mov	r2, #0
 1221 0578 1A73     		strb	r2, [r3, #12]
 1222              	.L61:
 420:../src/gps.c  ****             if (!f.GPS_FIX_HOME && f.ARMED)
 1223              		.loc 1 420 0
 1224 057a 7A4B     		ldr	r3, .L79+4
 1225 057c 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1226 057e 002B     		cmp	r3, #0
 1227 0580 05D1     		bne	.L62
 1228              		.loc 1 420 0 is_stmt 0 discriminator 1
 1229 0582 784B     		ldr	r3, .L79+4
 1230 0584 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1231 0586 002B     		cmp	r3, #0
 1232 0588 01D0     		beq	.L62
 421:../src/gps.c  ****                 GPS_reset_home_position();
 1233              		.loc 1 421 0 is_stmt 1
 1234 058a FFF7FEFF 		bl	GPS_reset_home_position
 1235              	.L62:
 422:../src/gps.c  ****             // Apply moving average filter to GPS data
 423:../src/gps.c  **** #if defined(GPS_FILTERING)
 424:../src/gps.c  ****             GPS_filter_index = (GPS_filter_index + 1) % GPS_FILTER_VECTOR_LENGTH;
 1236              		.loc 1 424 0
 1237 058e 774B     		ldr	r3, .L79+12
 1238 0590 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1239 0592 03F10101 		add	r1, r3, #1
 1240 0596 764B     		ldr	r3, .L79+16
 1241 0598 83FB0123 		smull	r2, r3, r3, r1
 1242 059c 4FEA6302 		asr	r2, r3, #1
 1243 05a0 4FEAE173 		asr	r3, r1, #31
 1244 05a4 D21A     		subs	r2, r2, r3
 1245 05a6 1346     		mov	r3, r2
 1246 05a8 4FEA8303 		lsl	r3, r3, #2
 1247 05ac 9B18     		adds	r3, r3, r2
 1248 05ae CA1A     		subs	r2, r1, r3
 1249 05b0 D2B2     		uxtb	r2, r2
 1250 05b2 6E4B     		ldr	r3, .L79+12
 1251 05b4 1A70     		strb	r2, [r3, #0]
 425:../src/gps.c  ****             for (axis = 0; axis < 2; axis++) {
 1252              		.loc 1 425 0
 1253 05b6 4FF00003 		mov	r3, #0
 1254 05ba 7B61     		str	r3, [r7, #20]
 1255 05bc A9E0     		b	.L63
 1256              	.L65:
 426:../src/gps.c  ****                 GPS_read[axis] = GPS_coord[axis];               // latest unfiltered data is in GPS
 1257              		.loc 1 426 0
 1258 05be 6D4B     		ldr	r3, .L79+20
 1259 05c0 7A69     		ldr	r2, [r7, #20]
 1260 05c2 53F82210 		ldr	r1, [r3, r2, lsl #2]
 1261 05c6 6C4B     		ldr	r3, .L79+24
 1262 05c8 7A69     		ldr	r2, [r7, #20]
 1263 05ca 43F82210 		str	r1, [r3, r2, lsl #2]
 427:../src/gps.c  ****                 GPS_degree[axis] = GPS_read[axis] / 10000000;   // get the degree to assure the sum
 1264              		.loc 1 427 0
 1265 05ce 6A4B     		ldr	r3, .L79+24
 1266 05d0 7A69     		ldr	r2, [r7, #20]
 1267 05d2 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1268 05d6 694A     		ldr	r2, .L79+28
 1269 05d8 82FB0312 		smull	r1, r2, r2, r3
 1270 05dc 4FEAA252 		asr	r2, r2, #22
 1271 05e0 4FEAE373 		asr	r3, r3, #31
 1272 05e4 D11A     		subs	r1, r2, r3
 1273 05e6 664B     		ldr	r3, .L79+32
 1274 05e8 7A69     		ldr	r2, [r7, #20]
 1275 05ea 43F82210 		str	r1, [r3, r2, lsl #2]
 428:../src/gps.c  **** 
 429:../src/gps.c  ****                 // How close we are to a degree line ? its the first three digits from the fraction
 430:../src/gps.c  ****                 // later we use it to Check if we are close to a degree line, if yes, disable avera
 431:../src/gps.c  ****                 fraction3[axis] = (GPS_read[axis] - GPS_degree[axis] * 10000000) / 10000;
 1276              		.loc 1 431 0
 1277 05ee 624B     		ldr	r3, .L79+24
 1278 05f0 7A69     		ldr	r2, [r7, #20]
 1279 05f2 53F82220 		ldr	r2, [r3, r2, lsl #2]
 1280 05f6 624B     		ldr	r3, .L79+32
 1281 05f8 7969     		ldr	r1, [r7, #20]
 1282 05fa 53F82130 		ldr	r3, [r3, r1, lsl #2]
 1283 05fe 6149     		ldr	r1, .L79+36
 1284 0600 01FB03F3 		mul	r3, r1, r3
 1285 0604 D318     		adds	r3, r2, r3
 1286 0606 604A     		ldr	r2, .L79+40
 1287 0608 82FB0312 		smull	r1, r2, r2, r3
 1288 060c 4FEA2232 		asr	r2, r2, #12
 1289 0610 4FEAE373 		asr	r3, r3, #31
 1290 0614 D31A     		subs	r3, r2, r3
 1291 0616 99B2     		uxth	r1, r3
 1292 0618 5C4B     		ldr	r3, .L79+44
 1293 061a 7A69     		ldr	r2, [r7, #20]
 1294 061c 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 432:../src/gps.c  **** 
 433:../src/gps.c  ****                 GPS_filter_sum[axis] -= GPS_filter[axis][GPS_filter_index];
 1295              		.loc 1 433 0
 1296 0620 5B4B     		ldr	r3, .L79+48
 1297 0622 7A69     		ldr	r2, [r7, #20]
 1298 0624 53F82210 		ldr	r1, [r3, r2, lsl #2]
 1299 0628 504B     		ldr	r3, .L79+12
 1300 062a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1301 062c 1C46     		mov	r4, r3
 1302 062e 5948     		ldr	r0, .L79+52
 1303 0630 7A69     		ldr	r2, [r7, #20]
 1304 0632 1346     		mov	r3, r2
 1305 0634 4FEA8303 		lsl	r3, r3, #2
 1306 0638 9B18     		adds	r3, r3, r2
 1307 063a 1B19     		adds	r3, r3, r4
 1308 063c 50F82330 		ldr	r3, [r0, r3, lsl #2]
 1309 0640 C91A     		subs	r1, r1, r3
 1310 0642 534B     		ldr	r3, .L79+48
 1311 0644 7A69     		ldr	r2, [r7, #20]
 1312 0646 43F82210 		str	r1, [r3, r2, lsl #2]
 434:../src/gps.c  ****                 GPS_filter[axis][GPS_filter_index] = GPS_read[axis] - (GPS_degree[axis] * 10000000)
 1313              		.loc 1 434 0
 1314 064a 484B     		ldr	r3, .L79+12
 1315 064c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1316 064e 1C46     		mov	r4, r3
 1317 0650 494B     		ldr	r3, .L79+24
 1318 0652 7A69     		ldr	r2, [r7, #20]
 1319 0654 53F82220 		ldr	r2, [r3, r2, lsl #2]
 1320 0658 494B     		ldr	r3, .L79+32
 1321 065a 7969     		ldr	r1, [r7, #20]
 1322 065c 53F82130 		ldr	r3, [r3, r1, lsl #2]
 1323 0660 4849     		ldr	r1, .L79+36
 1324 0662 01FB03F3 		mul	r3, r1, r3
 1325 0666 D018     		adds	r0, r2, r3
 1326 0668 4A49     		ldr	r1, .L79+52
 1327 066a 7A69     		ldr	r2, [r7, #20]
 1328 066c 1346     		mov	r3, r2
 1329 066e 4FEA8303 		lsl	r3, r3, #2
 1330 0672 9B18     		adds	r3, r3, r2
 1331 0674 1B19     		adds	r3, r3, r4
 1332 0676 41F82300 		str	r0, [r1, r3, lsl #2]
 435:../src/gps.c  ****                 GPS_filter_sum[axis] += GPS_filter[axis][GPS_filter_index];
 1333              		.loc 1 435 0
 1334 067a 454B     		ldr	r3, .L79+48
 1335 067c 7A69     		ldr	r2, [r7, #20]
 1336 067e 53F82210 		ldr	r1, [r3, r2, lsl #2]
 1337 0682 3A4B     		ldr	r3, .L79+12
 1338 0684 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1339 0686 1C46     		mov	r4, r3
 1340 0688 4248     		ldr	r0, .L79+52
 1341 068a 7A69     		ldr	r2, [r7, #20]
 1342 068c 1346     		mov	r3, r2
 1343 068e 4FEA8303 		lsl	r3, r3, #2
 1344 0692 9B18     		adds	r3, r3, r2
 1345 0694 1B19     		adds	r3, r3, r4
 1346 0696 50F82330 		ldr	r3, [r0, r3, lsl #2]
 1347 069a C918     		adds	r1, r1, r3
 1348 069c 3C4B     		ldr	r3, .L79+48
 1349 069e 7A69     		ldr	r2, [r7, #20]
 1350 06a0 43F82210 		str	r1, [r3, r2, lsl #2]
 436:../src/gps.c  ****                 GPS_filtered[axis] = GPS_filter_sum[axis] / GPS_FILTER_VECTOR_LENGTH + (GPS_degree[
 1351              		.loc 1 436 0
 1352 06a4 3A4B     		ldr	r3, .L79+48
 1353 06a6 7A69     		ldr	r2, [r7, #20]
 1354 06a8 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1355 06ac 304A     		ldr	r2, .L79+16
 1356 06ae 82FB0312 		smull	r1, r2, r2, r3
 1357 06b2 4FEA6202 		asr	r2, r2, #1
 1358 06b6 4FEAE373 		asr	r3, r3, #31
 1359 06ba D21A     		subs	r2, r2, r3
 1360 06bc 304B     		ldr	r3, .L79+32
 1361 06be 7969     		ldr	r1, [r7, #20]
 1362 06c0 53F82130 		ldr	r3, [r3, r1, lsl #2]
 1363 06c4 3449     		ldr	r1, .L79+56
 1364 06c6 01FB03F3 		mul	r3, r1, r3
 1365 06ca D118     		adds	r1, r2, r3
 1366 06cc 334B     		ldr	r3, .L79+60
 1367 06ce 7A69     		ldr	r2, [r7, #20]
 1368 06d0 43F82210 		str	r1, [r3, r2, lsl #2]
 437:../src/gps.c  ****                 if (nav_mode == NAV_MODE_POSHOLD) {             // we use gps averaging only in pos
 1369              		.loc 1 437 0
 1370 06d4 324B     		ldr	r3, .L79+64
 1371 06d6 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1372 06d8 5BB2     		sxtb	r3, r3
 1373 06da 012B     		cmp	r3, #1
 1374 06dc 15D1     		bne	.L64
 438:../src/gps.c  ****                     if (fraction3[axis] > 1 && fraction3[axis] < 999)
 1375              		.loc 1 438 0
 1376 06de 2B4B     		ldr	r3, .L79+44
 1377 06e0 7A69     		ldr	r2, [r7, #20]
 1378 06e2 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 1379 06e6 012B     		cmp	r3, #1
 1380 06e8 0FD9     		bls	.L64
 1381              		.loc 1 438 0 is_stmt 0 discriminator 1
 1382 06ea 284B     		ldr	r3, .L79+44
 1383 06ec 7A69     		ldr	r2, [r7, #20]
 1384 06ee 33F81220 		ldrh	r2, [r3, r2, lsl #1]
 1385 06f2 40F2E633 		movw	r3, #998
 1386 06f6 9A42     		cmp	r2, r3
 1387 06f8 07D8     		bhi	.L64
 439:../src/gps.c  ****                         GPS_coord[axis] = GPS_filtered[axis];
 1388              		.loc 1 439 0 is_stmt 1
 1389 06fa 284B     		ldr	r3, .L79+60
 1390 06fc 7A69     		ldr	r2, [r7, #20]
 1391 06fe 53F82210 		ldr	r1, [r3, r2, lsl #2]
 1392 0702 1C4B     		ldr	r3, .L79+20
 1393 0704 7A69     		ldr	r2, [r7, #20]
 1394 0706 43F82210 		str	r1, [r3, r2, lsl #2]
 1395              	.L64:
 425:../src/gps.c  ****             for (axis = 0; axis < 2; axis++) {
 1396              		.loc 1 425 0
 1397 070a 7B69     		ldr	r3, [r7, #20]
 1398 070c 03F10103 		add	r3, r3, #1
 1399 0710 7B61     		str	r3, [r7, #20]
 1400              	.L63:
 425:../src/gps.c  ****             for (axis = 0; axis < 2; axis++) {
 1401              		.loc 1 425 0 is_stmt 0 discriminator 1
 1402 0712 7B69     		ldr	r3, [r7, #20]
 1403 0714 012B     		cmp	r3, #1
 1404 0716 7FF752AF 		ble	.L65
 440:../src/gps.c  ****                 }
 441:../src/gps.c  ****             }
 442:../src/gps.c  **** #endif
 443:../src/gps.c  ****             // dTnav calculation
 444:../src/gps.c  ****             // Time for calculating x,y speed and navigation pids
 445:../src/gps.c  ****             dTnav = (float) (millis() - nav_loopTimer) / 1000.0f;
 1405              		.loc 1 445 0 is_stmt 1
 1406 071a FFF7FEFF 		bl	millis
 1407 071e 0246     		mov	r2, r0
 1408 0720 204B     		ldr	r3, .L79+68
 1409 0722 1B68     		ldr	r3, [r3, #0]
 1410 0724 D31A     		subs	r3, r2, r3
 1411 0726 1846     		mov	r0, r3
 1412 0728 FFF7FEFF 		bl	__aeabi_ui2f
 1413 072c 0346     		mov	r3, r0
 1414 072e 1846     		mov	r0, r3
 1415 0730 1E49     		ldr	r1, .L79+76	@ float
 1416 0732 FFF7FEFF 		bl	__aeabi_fdiv
 1417 0736 0346     		mov	r3, r0
 1418 0738 1A46     		mov	r2, r3
 1419 073a 1B4B     		ldr	r3, .L79+72
 1420 073c 1A60     		str	r2, [r3, #0]	@ float
 446:../src/gps.c  ****             nav_loopTimer = millis();
 1421              		.loc 1 446 0
 1422 073e FFF7FEFF 		bl	millis
 1423 0742 0246     		mov	r2, r0
 1424 0744 174B     		ldr	r3, .L79+68
 1425 0746 1A60     		str	r2, [r3, #0]
 447:../src/gps.c  ****             // prevent runup from bad GPS
 448:../src/gps.c  ****             dTnav = min(dTnav, 1.0f);
 1426              		.loc 1 448 0
 1427 0748 174B     		ldr	r3, .L79+72
 1428 074a 1B68     		ldr	r3, [r3, #0]	@ float
 1429 074c 1846     		mov	r0, r3
 1430 074e 1849     		ldr	r1, .L79+80	@ float
 1431 0750 FFF7FEFF 		bl	__aeabi_fcmplt
 1432 0754 0346     		mov	r3, r0
 1433 0756 002B     		cmp	r3, #0
 1434 0758 2CD0     		beq	.L77
 1435              	.L76:
 1436              		.loc 1 448 0 is_stmt 0 discriminator 1
 1437 075a 134B     		ldr	r3, .L79+72
 1438 075c 1B68     		ldr	r3, [r3, #0]	@ float
 1439 075e 2AE0     		b	.L68
 1440              	.L80:
 1441              		.align	2
 1442              	.L79:
 1443 0760 00000000 		.word	GPS_update
 1444 0764 00000000 		.word	f
 1445 0768 00000000 		.word	GPS_numSat
 1446 076c DA000000 		.word	GPS_filter_index
 1447 0770 67666666 		.word	1717986919
 1448 0774 00000000 		.word	GPS_coord
 1449 0778 0C010000 		.word	GPS_read
 1450 077c 6BCA5F6B 		.word	1801439851
 1451 0780 1C010000 		.word	GPS_degree
 1452 0784 806967FF 		.word	-10000000
 1453 0788 AD8BDB68 		.word	1759218605
 1454 078c 24010000 		.word	fraction3
 1455 0790 04010000 		.word	GPS_filter_sum
 1456 0794 DC000000 		.word	GPS_filter
 1457 0798 80969800 		.word	10000000
 1458 079c 14010000 		.word	GPS_filtered
 1459 07a0 00000000 		.word	nav_mode
 1460 07a4 A0010000 		.word	nav_loopTimer.9182
 1461 07a8 A8000000 		.word	dTnav
 1462 07ac 00007A44 		.word	1148846080
 1463 07b0 0000803F 		.word	1065353216
 1464              	.L77:
 1465              		.loc 1 448 0 discriminator 2
 1466 07b4 5A4B     		ldr	r3, .L81+72	@ float
 1467              	.L68:
 1468              		.loc 1 448 0 discriminator 3
 1469 07b6 484A     		ldr	r2, .L81
 1470 07b8 1360     		str	r3, [r2, #0]	@ float
 449:../src/gps.c  **** 
 450:../src/gps.c  ****             // calculate distance and bearings for gui and other stuff continously - From home to c
 451:../src/gps.c  ****             GPS_distance_cm_bearing(&GPS_coord[LAT], &GPS_coord[LON], &GPS_home[LAT], &GPS_home[LON
 1471              		.loc 1 451 0 is_stmt 1 discriminator 3
 1472 07ba 07F10C03 		add	r3, r7, #12
 1473 07be 0093     		str	r3, [sp, #0]
 1474 07c0 07F10803 		add	r3, r7, #8
 1475 07c4 0193     		str	r3, [sp, #4]
 1476 07c6 4548     		ldr	r0, .L81+4
 1477 07c8 4549     		ldr	r1, .L81+8
 1478 07ca 464A     		ldr	r2, .L81+12
 1479 07cc 464B     		ldr	r3, .L81+16
 1480 07ce 00F061FA 		bl	GPS_distance_cm_bearing
 452:../src/gps.c  ****             GPS_distanceToHome = dist / 100;
 1481              		.loc 1 452 0 discriminator 3
 1482 07d2 FA68     		ldr	r2, [r7, #12]
 1483 07d4 454B     		ldr	r3, .L81+20
 1484 07d6 A3FB0213 		umull	r1, r3, r3, r2
 1485 07da 4FEA5313 		lsr	r3, r3, #5
 1486 07de 9AB2     		uxth	r2, r3
 1487 07e0 434B     		ldr	r3, .L81+24
 1488 07e2 1A80     		strh	r2, [r3, #0]	@ movhi
 453:../src/gps.c  ****             GPS_directionToHome = dir / 100;
 1489              		.loc 1 453 0 discriminator 3
 1490 07e4 BB68     		ldr	r3, [r7, #8]
 1491 07e6 414A     		ldr	r2, .L81+20
 1492 07e8 82FB0312 		smull	r1, r2, r2, r3
 1493 07ec 4FEA6212 		asr	r2, r2, #5
 1494 07f0 4FEAE373 		asr	r3, r3, #31
 1495 07f4 D31A     		subs	r3, r2, r3
 1496 07f6 9AB2     		uxth	r2, r3
 1497 07f8 3E4B     		ldr	r3, .L81+28
 1498 07fa 1A80     		strh	r2, [r3, #0]	@ movhi
 454:../src/gps.c  **** 
 455:../src/gps.c  ****             if (!f.GPS_FIX_HOME) {      // If we don't have home set, do not display anything
 1499              		.loc 1 455 0 discriminator 3
 1500 07fc 3E4B     		ldr	r3, .L81+32
 1501 07fe 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1502 0800 002B     		cmp	r3, #0
 1503 0802 07D1     		bne	.L69
 456:../src/gps.c  ****                 GPS_distanceToHome = 0;
 1504              		.loc 1 456 0
 1505 0804 3A4B     		ldr	r3, .L81+24
 1506 0806 4FF00002 		mov	r2, #0
 1507 080a 1A80     		strh	r2, [r3, #0]	@ movhi
 457:../src/gps.c  ****                 GPS_directionToHome = 0;
 1508              		.loc 1 457 0
 1509 080c 394B     		ldr	r3, .L81+28
 1510 080e 4FF00002 		mov	r2, #0
 1511 0812 1A80     		strh	r2, [r3, #0]	@ movhi
 1512              	.L69:
 458:../src/gps.c  ****             }
 459:../src/gps.c  **** 
 460:../src/gps.c  ****             // calculate the current velocity based on gps coordinates continously to get a valid s
 461:../src/gps.c  ****             GPS_calc_velocity();
 1513              		.loc 1 461 0
 1514 0814 00F0B0FA 		bl	GPS_calc_velocity
 462:../src/gps.c  **** 
 463:../src/gps.c  ****             if (f.GPS_HOLD_MODE || f.GPS_HOME_MODE) { // ok we are navigating
 1515              		.loc 1 463 0
 1516 0818 374B     		ldr	r3, .L81+32
 1517 081a 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 1518 081c 002B     		cmp	r3, #0
 1519 081e 03D1     		bne	.L70
 1520              		.loc 1 463 0 is_stmt 0 discriminator 1
 1521 0820 354B     		ldr	r3, .L81+32
 1522 0822 DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 1523 0824 002B     		cmp	r3, #0
 1524 0826 53D0     		beq	.L57
 1525              	.L70:
 464:../src/gps.c  ****                 // do gps nav calculations here, these are common for nav and poshold
 465:../src/gps.c  ****                 GPS_distance_cm_bearing(&GPS_coord[LAT], &GPS_coord[LON], &GPS_WP[LAT], &GPS_WP[LON
 1526              		.loc 1 465 0 is_stmt 1
 1527 0828 344B     		ldr	r3, .L81+36
 1528 082a 0093     		str	r3, [sp, #0]
 1529 082c 344B     		ldr	r3, .L81+40
 1530 082e 0193     		str	r3, [sp, #4]
 1531 0830 2A48     		ldr	r0, .L81+4
 1532 0832 2B49     		ldr	r1, .L81+8
 1533 0834 334A     		ldr	r2, .L81+44
 1534 0836 344B     		ldr	r3, .L81+48
 1535 0838 00F02CFA 		bl	GPS_distance_cm_bearing
 466:../src/gps.c  ****                 GPS_calc_location_error(&GPS_WP[LAT], &GPS_WP[LON], &GPS_coord[LAT], &GPS_coord[LON
 1536              		.loc 1 466 0
 1537 083c 3148     		ldr	r0, .L81+44
 1538 083e 3249     		ldr	r1, .L81+48
 1539 0840 264A     		ldr	r2, .L81+4
 1540 0842 274B     		ldr	r3, .L81+8
 1541 0844 00F01EFB 		bl	GPS_calc_location_error
 467:../src/gps.c  **** 
 468:../src/gps.c  ****                 switch (nav_mode) {
 1542              		.loc 1 468 0
 1543 0848 304B     		ldr	r3, .L81+52
 1544 084a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1545 084c 5BB2     		sxtb	r3, r3
 1546 084e 012B     		cmp	r3, #1
 1547 0850 02D0     		beq	.L71
 1548 0852 022B     		cmp	r3, #2
 1549 0854 03D0     		beq	.L72
 1550 0856 3BE0     		b	.L57
 1551              	.L71:
 469:../src/gps.c  ****                 case NAV_MODE_POSHOLD:
 470:../src/gps.c  ****                     // Desired output is in nav_lat and nav_lon where 1deg inclination is 100
 471:../src/gps.c  ****                     GPS_calc_poshold();
 1552              		.loc 1 471 0
 1553 0858 00F040FB 		bl	GPS_calc_poshold
 472:../src/gps.c  ****                     break;
 1554              		.loc 1 472 0
 1555 085c 38E0     		b	.L57
 1556              	.L72:
 473:../src/gps.c  **** 
 474:../src/gps.c  ****                 case NAV_MODE_WP:
 475:../src/gps.c  ****                     speed = GPS_calc_desired_speed(cfg.nav_speed_max, NAV_SLOW_NAV);    // slow nav
 1557              		.loc 1 475 0
 1558 085e 2C4B     		ldr	r3, .L81+56
 1559 0860 B3F89830 		ldrh	r3, [r3, #152]
 1560 0864 9BB2     		uxth	r3, r3
 1561 0866 1BB2     		sxth	r3, r3
 1562 0868 1846     		mov	r0, r3
 1563 086a 4FF00101 		mov	r1, #1
 1564 086e 00F095FD 		bl	GPS_calc_desired_speed
 1565 0872 0346     		mov	r3, r0
 1566 0874 7B82     		strh	r3, [r7, #18]	@ movhi
 476:../src/gps.c  ****                     // use error as the desired rate towards the target
 477:../src/gps.c  ****                     // Desired output is in nav_lat and nav_lon where 1deg inclination is 100
 478:../src/gps.c  ****                     GPS_calc_nav_rate(speed);
 1567              		.loc 1 478 0
 1568 0876 B7F91230 		ldrsh	r3, [r7, #18]
 1569 087a 1846     		mov	r0, r3
 1570 087c 00F00AFC 		bl	GPS_calc_nav_rate
 479:../src/gps.c  **** 
 480:../src/gps.c  ****                     // Tail control
 481:../src/gps.c  ****                     if (cfg.nav_controls_heading) {
 1571              		.loc 1 481 0
 1572 0880 234B     		ldr	r3, .L81+56
 1573 0882 93F89430 		ldrb	r3, [r3, #148]	@ zero_extendqisi2
 1574 0886 002B     		cmp	r3, #0
 1575 0888 0CD0     		beq	.L73
 482:../src/gps.c  ****                         if (NAV_TAIL_FIRST) {
 483:../src/gps.c  ****                             magHold = wrap_18000(nav_bearing - 18000) / 100;
 484:../src/gps.c  ****                         } else {
 485:../src/gps.c  ****                             magHold = nav_bearing / 100;
 1576              		.loc 1 485 0
 1577 088a 224B     		ldr	r3, .L81+60
 1578 088c 1B68     		ldr	r3, [r3, #0]
 1579 088e 174A     		ldr	r2, .L81+20
 1580 0890 82FB0312 		smull	r1, r2, r2, r3
 1581 0894 4FEA6212 		asr	r2, r2, #5
 1582 0898 4FEAE373 		asr	r3, r3, #31
 1583 089c D31A     		subs	r3, r2, r3
 1584 089e 9AB2     		uxth	r2, r3
 1585 08a0 1D4B     		ldr	r3, .L81+64
 1586 08a2 1A80     		strh	r2, [r3, #0]	@ movhi
 1587              	.L73:
 486:../src/gps.c  ****                         }
 487:../src/gps.c  ****                     }
 488:../src/gps.c  ****                     // Are we there yet ?(within x meters of the destination)
 489:../src/gps.c  ****                     if ((wp_distance <= cfg.gps_wp_radius) || check_missed_wp()) {      // if yes s
 1588              		.loc 1 489 0
 1589 08a4 1A4B     		ldr	r3, .L81+56
 1590 08a6 B3F89030 		ldrh	r3, [r3, #144]
 1591 08aa 1A46     		mov	r2, r3
 1592 08ac 134B     		ldr	r3, .L81+36
 1593 08ae 1B68     		ldr	r3, [r3, #0]
 1594 08b0 9A42     		cmp	r2, r3
 1595 08b2 04D2     		bcs	.L74
 1596              		.loc 1 489 0 is_stmt 0 discriminator 1
 1597 08b4 00F0CCF9 		bl	check_missed_wp
 1598 08b8 0346     		mov	r3, r0
 1599 08ba 002B     		cmp	r3, #0
 1600 08bc 07D0     		beq	.L78
 1601              	.L74:
 490:../src/gps.c  ****                         nav_mode = NAV_MODE_POSHOLD;
 1602              		.loc 1 490 0 is_stmt 1
 1603 08be 134B     		ldr	r3, .L81+52
 1604 08c0 4FF00102 		mov	r2, #1
 1605 08c4 1A70     		strb	r2, [r3, #0]
 491:../src/gps.c  ****                         if (NAV_SET_TAKEOFF_HEADING) {
 492:../src/gps.c  ****                             magHold = nav_takeoff_bearing;
 1606              		.loc 1 492 0
 1607 08c6 154B     		ldr	r3, .L81+68
 1608 08c8 1A88     		ldrh	r2, [r3, #0]
 1609 08ca 134B     		ldr	r3, .L81+64
 1610 08cc 1A80     		strh	r2, [r3, #0]	@ movhi
 1611              	.L78:
 493:../src/gps.c  ****                         }
 494:../src/gps.c  ****                     }
 495:../src/gps.c  ****                     break;
 1612              		.loc 1 495 0
 1613 08ce 00BF     		nop
 1614              	.L57:
 496:../src/gps.c  ****                 }
 497:../src/gps.c  ****             }                   //end of gps calcs
 498:../src/gps.c  ****         }
 499:../src/gps.c  ****     }
 500:../src/gps.c  **** }
 1615              		.loc 1 500 0
 1616 08d0 07F11C07 		add	r7, r7, #28
 1617 08d4 BD46     		mov	sp, r7
 1618 08d6 90BD     		pop	{r4, r7, pc}
 1619              	.L82:
 1620              		.align	2
 1621              	.L81:
 1622 08d8 A8000000 		.word	dTnav
 1623 08dc 00000000 		.word	GPS_coord
 1624 08e0 04000000 		.word	GPS_coord+4
 1625 08e4 00000000 		.word	GPS_home
 1626 08e8 04000000 		.word	GPS_home+4
 1627 08ec 1F85EB51 		.word	1374389535
 1628 08f0 00000000 		.word	GPS_distanceToHome
 1629 08f4 00000000 		.word	GPS_directionToHome
 1630 08f8 00000000 		.word	f
 1631 08fc D4000000 		.word	wp_distance
 1632 0900 C8000000 		.word	target_bearing
 1633 0904 C0000000 		.word	GPS_WP
 1634 0908 C4000000 		.word	GPS_WP+4
 1635 090c 00000000 		.word	nav_mode
 1636 0910 00000000 		.word	cfg
 1637 0914 28010000 		.word	nav_bearing
 1638 0918 00000000 		.word	magHold
 1639 091c 2C010000 		.word	nav_takeoff_bearing
 1640 0920 0000803F 		.word	1065353216
 1641              		.cfi_endproc
 1642              	.LFE38:
 1644              		.align	2
 1645              		.global	GPS_reset_home_position
 1646              		.thumb
 1647              		.thumb_func
 1649              	GPS_reset_home_position:
 1650              	.LFB39:
 501:../src/gps.c  **** 
 502:../src/gps.c  **** void GPS_reset_home_position(void)
 503:../src/gps.c  **** {
 1651              		.loc 1 503 0
 1652              		.cfi_startproc
 1653              		@ args = 0, pretend = 0, frame = 0
 1654              		@ frame_needed = 1, uses_anonymous_args = 0
 1655 0924 80B5     		push	{r7, lr}
 1656              	.LCFI30:
 1657              		.cfi_def_cfa_offset 8
 1658              		.cfi_offset 7, -8
 1659              		.cfi_offset 14, -4
 1660 0926 00AF     		add	r7, sp, #0
 1661              	.LCFI31:
 1662              		.cfi_def_cfa_register 7
 504:../src/gps.c  ****     if (f.GPS_FIX && GPS_numSat >= 5) {
 1663              		.loc 1 504 0
 1664 0928 0E4B     		ldr	r3, .L85
 1665 092a DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 1666 092c 002B     		cmp	r3, #0
 1667 092e 18D0     		beq	.L83
 1668              		.loc 1 504 0 is_stmt 0 discriminator 1
 1669 0930 0D4B     		ldr	r3, .L85+4
 1670 0932 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1671 0934 042B     		cmp	r3, #4
 1672 0936 14D9     		bls	.L83
 505:../src/gps.c  ****         GPS_home[LAT] = GPS_coord[LAT];
 1673              		.loc 1 505 0 is_stmt 1
 1674 0938 0C4B     		ldr	r3, .L85+8
 1675 093a 1A68     		ldr	r2, [r3, #0]
 1676 093c 0C4B     		ldr	r3, .L85+12
 1677 093e 1A60     		str	r2, [r3, #0]
 506:../src/gps.c  ****         GPS_home[LON] = GPS_coord[LON];
 1678              		.loc 1 506 0
 1679 0940 0A4B     		ldr	r3, .L85+8
 1680 0942 5A68     		ldr	r2, [r3, #4]
 1681 0944 0A4B     		ldr	r3, .L85+12
 1682 0946 5A60     		str	r2, [r3, #4]
 507:../src/gps.c  ****         GPS_calc_longitude_scaling(GPS_coord[LAT]); // need an initial value for distance and beari
 1683              		.loc 1 507 0
 1684 0948 084B     		ldr	r3, .L85+8
 1685 094a 1B68     		ldr	r3, [r3, #0]
 1686 094c 1846     		mov	r0, r3
 1687 094e 00F0F5F8 		bl	GPS_calc_longitude_scaling
 508:../src/gps.c  ****         nav_takeoff_bearing = heading;              // save takeoff heading
 1688              		.loc 1 508 0
 1689 0952 084B     		ldr	r3, .L85+16
 1690 0954 1A88     		ldrh	r2, [r3, #0]
 1691 0956 084B     		ldr	r3, .L85+20
 1692 0958 1A80     		strh	r2, [r3, #0]	@ movhi
 509:../src/gps.c  ****         // Set ground altitude
 510:../src/gps.c  ****         f.GPS_FIX_HOME = 1;
 1693              		.loc 1 510 0
 1694 095a 024B     		ldr	r3, .L85
 1695 095c 4FF00102 		mov	r2, #1
 1696 0960 1A73     		strb	r2, [r3, #12]
 1697              	.L83:
 511:../src/gps.c  ****     }
 512:../src/gps.c  **** }
 1698              		.loc 1 512 0
 1699 0962 80BD     		pop	{r7, pc}
 1700              	.L86:
 1701              		.align	2
 1702              	.L85:
 1703 0964 00000000 		.word	f
 1704 0968 00000000 		.word	GPS_numSat
 1705 096c 00000000 		.word	GPS_coord
 1706 0970 00000000 		.word	GPS_home
 1707 0974 00000000 		.word	heading
 1708 0978 2C010000 		.word	nav_takeoff_bearing
 1709              		.cfi_endproc
 1710              	.LFE39:
 1712              		.align	2
 1713              		.global	GPS_reset_nav
 1714              		.thumb
 1715              		.thumb_func
 1717              	GPS_reset_nav:
 1718              	.LFB40:
 513:../src/gps.c  **** 
 514:../src/gps.c  **** //reset navigation (stop the navigation processor, and clear nav)
 515:../src/gps.c  **** void GPS_reset_nav(void)
 516:../src/gps.c  **** {
 1719              		.loc 1 516 0
 1720              		.cfi_startproc
 1721              		@ args = 0, pretend = 0, frame = 8
 1722              		@ frame_needed = 1, uses_anonymous_args = 0
 1723 097c 80B5     		push	{r7, lr}
 1724              	.LCFI32:
 1725              		.cfi_def_cfa_offset 8
 1726              		.cfi_offset 7, -8
 1727              		.cfi_offset 14, -4
 1728 097e 82B0     		sub	sp, sp, #8
 1729              	.LCFI33:
 1730              		.cfi_def_cfa_offset 16
 1731 0980 00AF     		add	r7, sp, #0
 1732              	.LCFI34:
 1733              		.cfi_def_cfa_register 7
 517:../src/gps.c  ****     int i;
 518:../src/gps.c  **** 
 519:../src/gps.c  ****     for (i = 0; i < 2; i++) {
 1734              		.loc 1 519 0
 1735 0982 4FF00003 		mov	r3, #0
 1736 0986 7B60     		str	r3, [r7, #4]
 1737 0988 39E0     		b	.L88
 1738              	.L89:
 520:../src/gps.c  ****         GPS_angle[i] = 0;
 1739              		.loc 1 520 0 discriminator 2
 1740 098a 204B     		ldr	r3, .L90
 1741 098c 7A68     		ldr	r2, [r7, #4]
 1742 098e 4FF00001 		mov	r1, #0
 1743 0992 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 521:../src/gps.c  ****         nav_rated[i] = 0;
 1744              		.loc 1 521 0 discriminator 2
 1745 0996 1E4B     		ldr	r3, .L90+4
 1746 0998 7A68     		ldr	r2, [r7, #4]
 1747 099a 4FF00001 		mov	r1, #0
 1748 099e 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 522:../src/gps.c  ****         nav[i] = 0;
 1749              		.loc 1 522 0 discriminator 2
 1750 09a2 1C4B     		ldr	r3, .L90+8
 1751 09a4 7A68     		ldr	r2, [r7, #4]
 1752 09a6 4FF00001 		mov	r1, #0
 1753 09aa 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 523:../src/gps.c  ****         reset_PID(&posholdPID[i]);
 1754              		.loc 1 523 0 discriminator 2
 1755 09ae 7A68     		ldr	r2, [r7, #4]
 1756 09b0 1346     		mov	r3, r2
 1757 09b2 4FEA8303 		lsl	r3, r3, #2
 1758 09b6 9B18     		adds	r3, r3, r2
 1759 09b8 4FEA8303 		lsl	r3, r3, #2
 1760 09bc 164A     		ldr	r2, .L90+12
 1761 09be 9B18     		adds	r3, r3, r2
 1762 09c0 1846     		mov	r0, r3
 1763 09c2 FFF797FD 		bl	reset_PID
 524:../src/gps.c  ****         reset_PID(&poshold_ratePID[i]);
 1764              		.loc 1 524 0 discriminator 2
 1765 09c6 7A68     		ldr	r2, [r7, #4]
 1766 09c8 1346     		mov	r3, r2
 1767 09ca 4FEA8303 		lsl	r3, r3, #2
 1768 09ce 9B18     		adds	r3, r3, r2
 1769 09d0 4FEA8303 		lsl	r3, r3, #2
 1770 09d4 114A     		ldr	r2, .L90+16
 1771 09d6 9B18     		adds	r3, r3, r2
 1772 09d8 1846     		mov	r0, r3
 1773 09da FFF78BFD 		bl	reset_PID
 525:../src/gps.c  ****         reset_PID(&navPID[i]);
 1774              		.loc 1 525 0 discriminator 2
 1775 09de 7A68     		ldr	r2, [r7, #4]
 1776 09e0 1346     		mov	r3, r2
 1777 09e2 4FEA8303 		lsl	r3, r3, #2
 1778 09e6 9B18     		adds	r3, r3, r2
 1779 09e8 4FEA8303 		lsl	r3, r3, #2
 1780 09ec 0C4A     		ldr	r2, .L90+20
 1781 09ee 9B18     		adds	r3, r3, r2
 1782 09f0 1846     		mov	r0, r3
 1783 09f2 FFF77FFD 		bl	reset_PID
 519:../src/gps.c  ****     for (i = 0; i < 2; i++) {
 1784              		.loc 1 519 0 discriminator 2
 1785 09f6 7B68     		ldr	r3, [r7, #4]
 1786 09f8 03F10103 		add	r3, r3, #1
 1787 09fc 7B60     		str	r3, [r7, #4]
 1788              	.L88:
 519:../src/gps.c  ****     for (i = 0; i < 2; i++) {
 1789              		.loc 1 519 0 is_stmt 0 discriminator 1
 1790 09fe 7B68     		ldr	r3, [r7, #4]
 1791 0a00 012B     		cmp	r3, #1
 1792 0a02 C2DD     		ble	.L89
 526:../src/gps.c  ****     }
 527:../src/gps.c  **** }
 1793              		.loc 1 527 0 is_stmt 1
 1794 0a04 07F10807 		add	r7, r7, #8
 1795 0a08 BD46     		mov	sp, r7
 1796 0a0a 80BD     		pop	{r7, pc}
 1797              	.L91:
 1798              		.align	2
 1799              	.L90:
 1800 0a0c 00000000 		.word	GPS_angle
 1801 0a10 00000000 		.word	nav_rated
 1802 0a14 00000000 		.word	nav
 1803 0a18 30000000 		.word	posholdPID
 1804 0a1c 58000000 		.word	poshold_ratePID
 1805 0a20 80000000 		.word	navPID
 1806              		.cfi_endproc
 1807              	.LFE40:
 1809              		.align	2
 1810              		.thumb
 1811              		.thumb_func
 1813              	GPS_set_pids:
 1814              	.LFB41:
 528:../src/gps.c  **** 
 529:../src/gps.c  **** //Get the relevant P I D values and set the PID controllers
 530:../src/gps.c  **** static void GPS_set_pids(void)
 531:../src/gps.c  **** {
 1815              		.loc 1 531 0
 1816              		.cfi_startproc
 1817              		@ args = 0, pretend = 0, frame = 0
 1818              		@ frame_needed = 1, uses_anonymous_args = 0
 1819 0a24 80B5     		push	{r7, lr}
 1820              	.LCFI35:
 1821              		.cfi_def_cfa_offset 8
 1822              		.cfi_offset 7, -8
 1823              		.cfi_offset 14, -4
 1824 0a26 00AF     		add	r7, sp, #0
 1825              	.LCFI36:
 1826              		.cfi_def_cfa_register 7
 532:../src/gps.c  ****     posholdPID_PARAM.kP = (float)cfg.P8[PIDPOS] / 100.0f;
 1827              		.loc 1 532 0
 1828 0a28 3C4B     		ldr	r3, .L93
 1829 0a2a 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1830 0a2c 1846     		mov	r0, r3
 1831 0a2e FFF7FEFF 		bl	__aeabi_ui2f
 1832 0a32 0346     		mov	r3, r0
 1833 0a34 1846     		mov	r0, r3
 1834 0a36 3D49     		ldr	r1, .L93+16	@ float
 1835 0a38 FFF7FEFF 		bl	__aeabi_fdiv
 1836 0a3c 0346     		mov	r3, r0
 1837 0a3e 1A46     		mov	r2, r3
 1838 0a40 374B     		ldr	r3, .L93+4
 1839 0a42 1A60     		str	r2, [r3, #0]	@ float
 533:../src/gps.c  ****     posholdPID_PARAM.kI = (float)cfg.I8[PIDPOS] / 100.0f;
 1840              		.loc 1 533 0
 1841 0a44 354B     		ldr	r3, .L93
 1842 0a46 9B7B     		ldrb	r3, [r3, #14]	@ zero_extendqisi2
 1843 0a48 1846     		mov	r0, r3
 1844 0a4a FFF7FEFF 		bl	__aeabi_ui2f
 1845 0a4e 0346     		mov	r3, r0
 1846 0a50 1846     		mov	r0, r3
 1847 0a52 3649     		ldr	r1, .L93+16	@ float
 1848 0a54 FFF7FEFF 		bl	__aeabi_fdiv
 1849 0a58 0346     		mov	r3, r0
 1850 0a5a 1A46     		mov	r2, r3
 1851 0a5c 304B     		ldr	r3, .L93+4
 1852 0a5e 5A60     		str	r2, [r3, #4]	@ float
 534:../src/gps.c  ****     posholdPID_PARAM.Imax = POSHOLD_RATE_IMAX * 100;
 1853              		.loc 1 534 0
 1854 0a60 2F4B     		ldr	r3, .L93+4
 1855 0a62 334A     		ldr	r2, .L93+20	@ float
 1856 0a64 DA60     		str	r2, [r3, #12]	@ float
 535:../src/gps.c  **** 
 536:../src/gps.c  ****     poshold_ratePID_PARAM.kP = (float)cfg.P8[PIDPOSR] / 10.0f;
 1857              		.loc 1 536 0
 1858 0a66 2D4B     		ldr	r3, .L93
 1859 0a68 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 1860 0a6a 1846     		mov	r0, r3
 1861 0a6c FFF7FEFF 		bl	__aeabi_ui2f
 1862 0a70 0346     		mov	r3, r0
 1863 0a72 1846     		mov	r0, r3
 1864 0a74 2F49     		ldr	r1, .L93+24	@ float
 1865 0a76 FFF7FEFF 		bl	__aeabi_fdiv
 1866 0a7a 0346     		mov	r3, r0
 1867 0a7c 1A46     		mov	r2, r3
 1868 0a7e 294B     		ldr	r3, .L93+8
 1869 0a80 1A60     		str	r2, [r3, #0]	@ float
 537:../src/gps.c  ****     poshold_ratePID_PARAM.kI = (float)cfg.I8[PIDPOSR] / 100.0f;
 1870              		.loc 1 537 0
 1871 0a82 264B     		ldr	r3, .L93
 1872 0a84 DB7B     		ldrb	r3, [r3, #15]	@ zero_extendqisi2
 1873 0a86 1846     		mov	r0, r3
 1874 0a88 FFF7FEFF 		bl	__aeabi_ui2f
 1875 0a8c 0346     		mov	r3, r0
 1876 0a8e 1846     		mov	r0, r3
 1877 0a90 2649     		ldr	r1, .L93+16	@ float
 1878 0a92 FFF7FEFF 		bl	__aeabi_fdiv
 1879 0a96 0346     		mov	r3, r0
 1880 0a98 1A46     		mov	r2, r3
 1881 0a9a 224B     		ldr	r3, .L93+8
 1882 0a9c 5A60     		str	r2, [r3, #4]	@ float
 538:../src/gps.c  ****     poshold_ratePID_PARAM.kD = (float)cfg.D8[PIDPOSR] / 1000.0f;
 1883              		.loc 1 538 0
 1884 0a9e 1F4B     		ldr	r3, .L93
 1885 0aa0 5B7E     		ldrb	r3, [r3, #25]	@ zero_extendqisi2
 1886 0aa2 1846     		mov	r0, r3
 1887 0aa4 FFF7FEFF 		bl	__aeabi_ui2f
 1888 0aa8 0346     		mov	r3, r0
 1889 0aaa 1846     		mov	r0, r3
 1890 0aac 2249     		ldr	r1, .L93+28	@ float
 1891 0aae FFF7FEFF 		bl	__aeabi_fdiv
 1892 0ab2 0346     		mov	r3, r0
 1893 0ab4 1A46     		mov	r2, r3
 1894 0ab6 1B4B     		ldr	r3, .L93+8
 1895 0ab8 9A60     		str	r2, [r3, #8]	@ float
 539:../src/gps.c  ****     poshold_ratePID_PARAM.Imax = POSHOLD_RATE_IMAX * 100;
 1896              		.loc 1 539 0
 1897 0aba 1A4B     		ldr	r3, .L93+8
 1898 0abc 1C4A     		ldr	r2, .L93+20	@ float
 1899 0abe DA60     		str	r2, [r3, #12]	@ float
 540:../src/gps.c  **** 
 541:../src/gps.c  ****     navPID_PARAM.kP = (float)cfg.P8[PIDNAVR] / 10.0f;
 1900              		.loc 1 541 0
 1901 0ac0 164B     		ldr	r3, .L93
 1902 0ac2 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 1903 0ac4 1846     		mov	r0, r3
 1904 0ac6 FFF7FEFF 		bl	__aeabi_ui2f
 1905 0aca 0346     		mov	r3, r0
 1906 0acc 1846     		mov	r0, r3
 1907 0ace 1949     		ldr	r1, .L93+24	@ float
 1908 0ad0 FFF7FEFF 		bl	__aeabi_fdiv
 1909 0ad4 0346     		mov	r3, r0
 1910 0ad6 1A46     		mov	r2, r3
 1911 0ad8 134B     		ldr	r3, .L93+12
 1912 0ada 1A60     		str	r2, [r3, #0]	@ float
 542:../src/gps.c  ****     navPID_PARAM.kI = (float)cfg.I8[PIDNAVR] / 100.0f;
 1913              		.loc 1 542 0
 1914 0adc 0F4B     		ldr	r3, .L93
 1915 0ade 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 1916 0ae0 1846     		mov	r0, r3
 1917 0ae2 FFF7FEFF 		bl	__aeabi_ui2f
 1918 0ae6 0346     		mov	r3, r0
 1919 0ae8 1846     		mov	r0, r3
 1920 0aea 1049     		ldr	r1, .L93+16	@ float
 1921 0aec FFF7FEFF 		bl	__aeabi_fdiv
 1922 0af0 0346     		mov	r3, r0
 1923 0af2 1A46     		mov	r2, r3
 1924 0af4 0C4B     		ldr	r3, .L93+12
 1925 0af6 5A60     		str	r2, [r3, #4]	@ float
 543:../src/gps.c  ****     navPID_PARAM.kD = (float)cfg.D8[PIDNAVR] / 1000.0f;
 1926              		.loc 1 543 0
 1927 0af8 084B     		ldr	r3, .L93
 1928 0afa 9B7E     		ldrb	r3, [r3, #26]	@ zero_extendqisi2
 1929 0afc 1846     		mov	r0, r3
 1930 0afe FFF7FEFF 		bl	__aeabi_ui2f
 1931 0b02 0346     		mov	r3, r0
 1932 0b04 1846     		mov	r0, r3
 1933 0b06 0C49     		ldr	r1, .L93+28	@ float
 1934 0b08 FFF7FEFF 		bl	__aeabi_fdiv
 1935 0b0c 0346     		mov	r3, r0
 1936 0b0e 1A46     		mov	r2, r3
 1937 0b10 054B     		ldr	r3, .L93+12
 1938 0b12 9A60     		str	r2, [r3, #8]	@ float
 544:../src/gps.c  ****     navPID_PARAM.Imax = POSHOLD_RATE_IMAX * 100;
 1939              		.loc 1 544 0
 1940 0b14 044B     		ldr	r3, .L93+12
 1941 0b16 064A     		ldr	r2, .L93+20	@ float
 1942 0b18 DA60     		str	r2, [r3, #12]	@ float
 545:../src/gps.c  **** }
 1943              		.loc 1 545 0
 1944 0b1a 80BD     		pop	{r7, pc}
 1945              	.L94:
 1946              		.align	2
 1947              	.L93:
 1948 0b1c 00000000 		.word	cfg
 1949 0b20 00000000 		.word	posholdPID_PARAM
 1950 0b24 10000000 		.word	poshold_ratePID_PARAM
 1951 0b28 20000000 		.word	navPID_PARAM
 1952 0b2c 0000C842 		.word	1120403456
 1953 0b30 0000FA44 		.word	1157234688
 1954 0b34 00002041 		.word	1092616192
 1955 0b38 00007A44 		.word	1148846080
 1956              		.cfi_endproc
 1957              	.LFE41:
 1959              		.align	2
 1960              		.thumb
 1961              		.thumb_func
 1963              	GPS_calc_longitude_scaling:
 1964              	.LFB42:
 546:../src/gps.c  **** 
 547:../src/gps.c  **** // OK here is the onboard GPS code
 548:../src/gps.c  **** 
 549:../src/gps.c  **** ////////////////////////////////////////////////////////////////////////////////////
 550:../src/gps.c  **** // PID based GPS navigation functions
 551:../src/gps.c  **** // Author : EOSBandi
 552:../src/gps.c  **** // Based on code and ideas from the Arducopter team: Jason Short,Randy Mackay, Pat Hickey, Jose Jul
 553:../src/gps.c  **** // Andrew Tridgell, Justin Beech, Adam Rivera, Jean-Louis Naudin, Roberto Navoni
 554:../src/gps.c  **** 
 555:../src/gps.c  **** ////////////////////////////////////////////////////////////////////////////////////
 556:../src/gps.c  **** // this is used to offset the shrinking longitude as we go towards the poles
 557:../src/gps.c  **** // It's ok to calculate this once per waypoint setting, since it changes a little within the reach 
 558:../src/gps.c  **** //
 559:../src/gps.c  **** static void GPS_calc_longitude_scaling(int32_t lat)
 560:../src/gps.c  **** {
 1965              		.loc 1 560 0
 1966              		.cfi_startproc
 1967              		@ args = 0, pretend = 0, frame = 16
 1968              		@ frame_needed = 1, uses_anonymous_args = 0
 1969 0b3c 80B5     		push	{r7, lr}
 1970              	.LCFI37:
 1971              		.cfi_def_cfa_offset 8
 1972              		.cfi_offset 7, -8
 1973              		.cfi_offset 14, -4
 1974 0b3e 84B0     		sub	sp, sp, #16
 1975              	.LCFI38:
 1976              		.cfi_def_cfa_offset 24
 1977 0b40 00AF     		add	r7, sp, #0
 1978              	.LCFI39:
 1979              		.cfi_def_cfa_register 7
 1980 0b42 7860     		str	r0, [r7, #4]
 561:../src/gps.c  ****     float rads = (abs((float)lat) / 10000000.0f) * 0.0174532925f;
 1981              		.loc 1 561 0
 1982 0b44 7868     		ldr	r0, [r7, #4]
 1983 0b46 FFF7FEFF 		bl	__aeabi_i2f
 1984 0b4a 0346     		mov	r3, r0
 1985 0b4c 1846     		mov	r0, r3
 1986 0b4e 1949     		ldr	r1, .L101+4	@ float
 1987 0b50 FFF7FEFF 		bl	__aeabi_fcmpgt
 1988 0b54 0346     		mov	r3, r0
 1989 0b56 002B     		cmp	r3, #0
 1990 0b58 0ED0     		beq	.L100
 1991              	.L99:
 1992              		.loc 1 561 0 is_stmt 0 discriminator 1
 1993 0b5a 7868     		ldr	r0, [r7, #4]
 1994 0b5c FFF7FEFF 		bl	__aeabi_i2f
 1995 0b60 0346     		mov	r3, r0
 1996 0b62 1846     		mov	r0, r3
 1997 0b64 1449     		ldr	r1, .L101+8	@ float
 1998 0b66 FFF7FEFF 		bl	__aeabi_fdiv
 1999 0b6a 0346     		mov	r3, r0
 2000 0b6c 1846     		mov	r0, r3
 2001 0b6e 1349     		ldr	r1, .L101+12	@ float
 2002 0b70 FFF7FEFF 		bl	__aeabi_fmul
 2003 0b74 0346     		mov	r3, r0
 2004 0b76 0FE0     		b	.L98
 2005              	.L100:
 2006              		.loc 1 561 0 discriminator 2
 2007 0b78 7868     		ldr	r0, [r7, #4]
 2008 0b7a FFF7FEFF 		bl	__aeabi_i2f
 2009 0b7e 0346     		mov	r3, r0
 2010 0b80 83F00043 		eor	r3, r3, #-2147483648
 2011 0b84 1846     		mov	r0, r3
 2012 0b86 0C49     		ldr	r1, .L101+8	@ float
 2013 0b88 FFF7FEFF 		bl	__aeabi_fdiv
 2014 0b8c 0346     		mov	r3, r0
 2015 0b8e 1846     		mov	r0, r3
 2016 0b90 0A49     		ldr	r1, .L101+12	@ float
 2017 0b92 FFF7FEFF 		bl	__aeabi_fmul
 2018 0b96 0346     		mov	r3, r0
 2019              	.L98:
 2020              		.loc 1 561 0 discriminator 3
 2021 0b98 FB60     		str	r3, [r7, #12]	@ float
 562:../src/gps.c  ****     GPS_scaleLonDown = cosf(rads);
 2022              		.loc 1 562 0 is_stmt 1 discriminator 3
 2023 0b9a F868     		ldr	r0, [r7, #12]	@ float
 2024 0b9c FFF7FEFF 		bl	cosf
 2025 0ba0 0246     		mov	r2, r0
 2026 0ba2 034B     		ldr	r3, .L101
 2027 0ba4 1A60     		str	r2, [r3, #0]	@ float
 563:../src/gps.c  **** }
 2028              		.loc 1 563 0 discriminator 3
 2029 0ba6 07F11007 		add	r7, r7, #16
 2030 0baa BD46     		mov	sp, r7
 2031 0bac 80BD     		pop	{r7, pc}
 2032              	.L102:
 2033 0bae 00BF     		.align	2
 2034              	.L101:
 2035 0bb0 B0000000 		.word	GPS_scaleLonDown
 2036 0bb4 00000000 		.word	0
 2037 0bb8 8096184B 		.word	1259902592
 2038 0bbc 35FA8E3C 		.word	1016003125
 2039              		.cfi_endproc
 2040              	.LFE42:
 2042              		.align	2
 2043              		.global	GPS_set_next_wp
 2044              		.thumb
 2045              		.thumb_func
 2047              	GPS_set_next_wp:
 2048              	.LFB43:
 564:../src/gps.c  **** 
 565:../src/gps.c  **** ////////////////////////////////////////////////////////////////////////////////////
 566:../src/gps.c  **** // Sets the waypoint to navigate, reset neccessary variables and calculate initial values
 567:../src/gps.c  **** //
 568:../src/gps.c  **** void GPS_set_next_wp(int32_t *lat, int32_t *lon)
 569:../src/gps.c  **** {
 2049              		.loc 1 569 0
 2050              		.cfi_startproc
 2051              		@ args = 0, pretend = 0, frame = 8
 2052              		@ frame_needed = 1, uses_anonymous_args = 0
 2053 0bc0 80B5     		push	{r7, lr}
 2054              	.LCFI40:
 2055              		.cfi_def_cfa_offset 8
 2056              		.cfi_offset 7, -8
 2057              		.cfi_offset 14, -4
 2058 0bc2 84B0     		sub	sp, sp, #16
 2059              	.LCFI41:
 2060              		.cfi_def_cfa_offset 24
 2061 0bc4 02AF     		add	r7, sp, #8
 2062              	.LCFI42:
 2063              		.cfi_def_cfa 7, 16
 2064 0bc6 7860     		str	r0, [r7, #4]
 2065 0bc8 3960     		str	r1, [r7, #0]
 570:../src/gps.c  ****     GPS_WP[LAT] = *lat;
 2066              		.loc 1 570 0
 2067 0bca 7B68     		ldr	r3, [r7, #4]
 2068 0bcc 1A68     		ldr	r2, [r3, #0]
 2069 0bce 164B     		ldr	r3, .L104
 2070 0bd0 1A60     		str	r2, [r3, #0]
 571:../src/gps.c  ****     GPS_WP[LON] = *lon;
 2071              		.loc 1 571 0
 2072 0bd2 3B68     		ldr	r3, [r7, #0]
 2073 0bd4 1A68     		ldr	r2, [r3, #0]
 2074 0bd6 144B     		ldr	r3, .L104
 2075 0bd8 5A60     		str	r2, [r3, #4]
 572:../src/gps.c  **** 
 573:../src/gps.c  ****     GPS_calc_longitude_scaling(*lat);
 2076              		.loc 1 573 0
 2077 0bda 7B68     		ldr	r3, [r7, #4]
 2078 0bdc 1B68     		ldr	r3, [r3, #0]
 2079 0bde 1846     		mov	r0, r3
 2080 0be0 FFF7ACFF 		bl	GPS_calc_longitude_scaling
 574:../src/gps.c  ****     GPS_distance_cm_bearing(&GPS_coord[LAT], &GPS_coord[LON], &GPS_WP[LAT], &GPS_WP[LON], &wp_dista
 2081              		.loc 1 574 0
 2082 0be4 114B     		ldr	r3, .L104+4
 2083 0be6 0093     		str	r3, [sp, #0]
 2084 0be8 114B     		ldr	r3, .L104+8
 2085 0bea 0193     		str	r3, [sp, #4]
 2086 0bec 1148     		ldr	r0, .L104+12
 2087 0bee 1249     		ldr	r1, .L104+16
 2088 0bf0 0D4A     		ldr	r2, .L104
 2089 0bf2 124B     		ldr	r3, .L104+20
 2090 0bf4 00F04EF8 		bl	GPS_distance_cm_bearing
 575:../src/gps.c  **** 
 576:../src/gps.c  ****     nav_bearing = target_bearing;
 2091              		.loc 1 576 0
 2092 0bf8 0D4B     		ldr	r3, .L104+8
 2093 0bfa 1A68     		ldr	r2, [r3, #0]
 2094 0bfc 104B     		ldr	r3, .L104+24
 2095 0bfe 1A60     		str	r2, [r3, #0]
 577:../src/gps.c  ****     GPS_calc_location_error(&GPS_WP[LAT], &GPS_WP[LON], &GPS_coord[LAT], &GPS_coord[LON]);
 2096              		.loc 1 577 0
 2097 0c00 0948     		ldr	r0, .L104
 2098 0c02 0E49     		ldr	r1, .L104+20
 2099 0c04 0B4A     		ldr	r2, .L104+12
 2100 0c06 0C4B     		ldr	r3, .L104+16
 2101 0c08 00F03CF9 		bl	GPS_calc_location_error
 578:../src/gps.c  ****     original_target_bearing = target_bearing;
 2102              		.loc 1 578 0
 2103 0c0c 084B     		ldr	r3, .L104+8
 2104 0c0e 1A68     		ldr	r2, [r3, #0]
 2105 0c10 0C4B     		ldr	r3, .L104+28
 2106 0c12 1A60     		str	r2, [r3, #0]
 579:../src/gps.c  ****     waypoint_speed_gov = cfg.nav_speed_min;
 2107              		.loc 1 579 0
 2108 0c14 0C4B     		ldr	r3, .L104+32
 2109 0c16 B3F89630 		ldrh	r3, [r3, #150]
 2110 0c1a 9AB2     		uxth	r2, r3
 2111 0c1c 0B4B     		ldr	r3, .L104+36
 2112 0c1e 1A80     		strh	r2, [r3, #0]	@ movhi
 580:../src/gps.c  **** }
 2113              		.loc 1 580 0
 2114 0c20 07F10807 		add	r7, r7, #8
 2115 0c24 BD46     		mov	sp, r7
 2116 0c26 80BD     		pop	{r7, pc}
 2117              	.L105:
 2118              		.align	2
 2119              	.L104:
 2120 0c28 C0000000 		.word	GPS_WP
 2121 0c2c D4000000 		.word	wp_distance
 2122 0c30 C8000000 		.word	target_bearing
 2123 0c34 00000000 		.word	GPS_coord
 2124 0c38 04000000 		.word	GPS_coord+4
 2125 0c3c C4000000 		.word	GPS_WP+4
 2126 0c40 28010000 		.word	nav_bearing
 2127 0c44 CC000000 		.word	original_target_bearing
 2128 0c48 00000000 		.word	cfg
 2129 0c4c D8000000 		.word	waypoint_speed_gov
 2130              		.cfi_endproc
 2131              	.LFE43:
 2133              		.align	2
 2134              		.thumb
 2135              		.thumb_func
 2137              	check_missed_wp:
 2138              	.LFB44:
 581:../src/gps.c  **** 
 582:../src/gps.c  **** ////////////////////////////////////////////////////////////////////////////////////
 583:../src/gps.c  **** // Check if we missed the destination somehow
 584:../src/gps.c  **** //
 585:../src/gps.c  **** static bool check_missed_wp(void)
 586:../src/gps.c  **** {
 2139              		.loc 1 586 0
 2140              		.cfi_startproc
 2141              		@ args = 0, pretend = 0, frame = 8
 2142              		@ frame_needed = 1, uses_anonymous_args = 0
 2143 0c50 80B5     		push	{r7, lr}
 2144              	.LCFI43:
 2145              		.cfi_def_cfa_offset 8
 2146              		.cfi_offset 7, -8
 2147              		.cfi_offset 14, -4
 2148 0c52 82B0     		sub	sp, sp, #8
 2149              	.LCFI44:
 2150              		.cfi_def_cfa_offset 16
 2151 0c54 00AF     		add	r7, sp, #0
 2152              	.LCFI45:
 2153              		.cfi_def_cfa_register 7
 587:../src/gps.c  ****     int32_t temp;
 588:../src/gps.c  ****     temp = target_bearing - original_target_bearing;
 2154              		.loc 1 588 0
 2155 0c56 0D4B     		ldr	r3, .L108
 2156 0c58 1A68     		ldr	r2, [r3, #0]
 2157 0c5a 0D4B     		ldr	r3, .L108+4
 2158 0c5c 1B68     		ldr	r3, [r3, #0]
 2159 0c5e D31A     		subs	r3, r2, r3
 2160 0c60 7B60     		str	r3, [r7, #4]
 589:../src/gps.c  ****     temp = wrap_18000(temp);
 2161              		.loc 1 589 0
 2162 0c62 7868     		ldr	r0, [r7, #4]
 2163 0c64 FFF7FEFF 		bl	wrap_18000
 2164 0c68 7860     		str	r0, [r7, #4]
 590:../src/gps.c  ****     return (abs(temp) > 10000); // we passed the waypoint by 100 degrees
 2165              		.loc 1 590 0
 2166 0c6a 7B68     		ldr	r3, [r7, #4]
 2167 0c6c 83EAE372 		eor	r2, r3, r3, asr #31
 2168 0c70 A2EBE372 		sub	r2, r2, r3, asr #31
 2169 0c74 42F21073 		movw	r3, #10000
 2170 0c78 9A42     		cmp	r2, r3
 2171 0c7a D4BF     		ite	le
 2172 0c7c 0023     		movle	r3, #0
 2173 0c7e 0123     		movgt	r3, #1
 2174 0c80 DBB2     		uxtb	r3, r3
 591:../src/gps.c  **** }
 2175              		.loc 1 591 0
 2176 0c82 1846     		mov	r0, r3
 2177 0c84 07F10807 		add	r7, r7, #8
 2178 0c88 BD46     		mov	sp, r7
 2179 0c8a 80BD     		pop	{r7, pc}
 2180              	.L109:
 2181              		.align	2
 2182              	.L108:
 2183 0c8c C8000000 		.word	target_bearing
 2184 0c90 CC000000 		.word	original_target_bearing
 2185              		.cfi_endproc
 2186              	.LFE44:
 2188              		.global	__aeabi_f2uiz
 2189              		.align	2
 2190              		.thumb
 2191              		.thumb_func
 2193              	GPS_distance_cm_bearing:
 2194              	.LFB45:
 592:../src/gps.c  **** 
 593:../src/gps.c  **** ////////////////////////////////////////////////////////////////////////////////////
 594:../src/gps.c  **** // Get distance between two points in cm
 595:../src/gps.c  **** // Get bearing from pos1 to pos2, returns an 1deg = 100 precision
 596:../src/gps.c  **** static void GPS_distance_cm_bearing(int32_t * lat1, int32_t * lon1, int32_t * lat2, int32_t * lon2,
 597:../src/gps.c  **** {
 2195              		.loc 1 597 0
 2196              		.cfi_startproc
 2197              		@ args = 8, pretend = 0, frame = 24
 2198              		@ frame_needed = 1, uses_anonymous_args = 0
 2199 0c94 90B5     		push	{r4, r7, lr}
 2200              	.LCFI46:
 2201              		.cfi_def_cfa_offset 12
 2202              		.cfi_offset 4, -12
 2203              		.cfi_offset 7, -8
 2204              		.cfi_offset 14, -4
 2205 0c96 87B0     		sub	sp, sp, #28
 2206              	.LCFI47:
 2207              		.cfi_def_cfa_offset 40
 2208 0c98 00AF     		add	r7, sp, #0
 2209              	.LCFI48:
 2210              		.cfi_def_cfa_register 7
 2211 0c9a F860     		str	r0, [r7, #12]
 2212 0c9c B960     		str	r1, [r7, #8]
 2213 0c9e 7A60     		str	r2, [r7, #4]
 2214 0ca0 3B60     		str	r3, [r7, #0]
 598:../src/gps.c  ****     float dLat = *lat2 - *lat1; // difference of latitude in 1/10 000 000 degrees
 2215              		.loc 1 598 0
 2216 0ca2 7B68     		ldr	r3, [r7, #4]
 2217 0ca4 1A68     		ldr	r2, [r3, #0]
 2218 0ca6 FB68     		ldr	r3, [r7, #12]
 2219 0ca8 1B68     		ldr	r3, [r3, #0]
 2220 0caa D31A     		subs	r3, r2, r3
 2221 0cac 1846     		mov	r0, r3
 2222 0cae FFF7FEFF 		bl	__aeabi_i2f
 2223 0cb2 0346     		mov	r3, r0
 2224 0cb4 7B61     		str	r3, [r7, #20]	@ float
 599:../src/gps.c  ****     float dLon = (float) (*lon2 - *lon1) * GPS_scaleLonDown;
 2225              		.loc 1 599 0
 2226 0cb6 3B68     		ldr	r3, [r7, #0]
 2227 0cb8 1A68     		ldr	r2, [r3, #0]
 2228 0cba BB68     		ldr	r3, [r7, #8]
 2229 0cbc 1B68     		ldr	r3, [r3, #0]
 2230 0cbe D31A     		subs	r3, r2, r3
 2231 0cc0 1846     		mov	r0, r3
 2232 0cc2 FFF7FEFF 		bl	__aeabi_i2f
 2233 0cc6 0246     		mov	r2, r0
 2234 0cc8 274B     		ldr	r3, .L112
 2235 0cca 1B68     		ldr	r3, [r3, #0]	@ float
 2236 0ccc 1046     		mov	r0, r2
 2237 0cce 1946     		mov	r1, r3
 2238 0cd0 FFF7FEFF 		bl	__aeabi_fmul
 2239 0cd4 0346     		mov	r3, r0
 2240 0cd6 3B61     		str	r3, [r7, #16]	@ float
 600:../src/gps.c  ****     *dist = sqrtf(sq(dLat) + sq(dLon)) * 1.113195f;
 2241              		.loc 1 600 0
 2242 0cd8 7869     		ldr	r0, [r7, #20]	@ float
 2243 0cda 7969     		ldr	r1, [r7, #20]	@ float
 2244 0cdc FFF7FEFF 		bl	__aeabi_fmul
 2245 0ce0 0346     		mov	r3, r0
 2246 0ce2 1C46     		mov	r4, r3
 2247 0ce4 3869     		ldr	r0, [r7, #16]	@ float
 2248 0ce6 3969     		ldr	r1, [r7, #16]	@ float
 2249 0ce8 FFF7FEFF 		bl	__aeabi_fmul
 2250 0cec 0346     		mov	r3, r0
 2251 0cee 2046     		mov	r0, r4
 2252 0cf0 1946     		mov	r1, r3
 2253 0cf2 FFF7FEFF 		bl	__aeabi_fadd
 2254 0cf6 0346     		mov	r3, r0
 2255 0cf8 1846     		mov	r0, r3
 2256 0cfa FFF7FEFF 		bl	sqrtf
 2257 0cfe 0346     		mov	r3, r0
 2258 0d00 1846     		mov	r0, r3
 2259 0d02 1A49     		ldr	r1, .L112+4	@ float
 2260 0d04 FFF7FEFF 		bl	__aeabi_fmul
 2261 0d08 0346     		mov	r3, r0
 2262 0d0a 1846     		mov	r0, r3
 2263 0d0c FFF7FEFF 		bl	__aeabi_f2uiz
 2264 0d10 0246     		mov	r2, r0
 2265 0d12 BB6A     		ldr	r3, [r7, #40]
 2266 0d14 1A60     		str	r2, [r3, #0]
 601:../src/gps.c  **** 
 602:../src/gps.c  ****     *bearing = 9000.0f + atan2f(-dLat, dLon) * 5729.57795f;      // Convert the output radians to 1
 2267              		.loc 1 602 0
 2268 0d16 7B69     		ldr	r3, [r7, #20]
 2269 0d18 83F00043 		eor	r3, r3, #-2147483648
 2270 0d1c 1846     		mov	r0, r3
 2271 0d1e 3969     		ldr	r1, [r7, #16]	@ float
 2272 0d20 FFF7FEFF 		bl	atan2f
 2273 0d24 0346     		mov	r3, r0
 2274 0d26 1846     		mov	r0, r3
 2275 0d28 1149     		ldr	r1, .L112+8	@ float
 2276 0d2a FFF7FEFF 		bl	__aeabi_fmul
 2277 0d2e 0346     		mov	r3, r0
 2278 0d30 1846     		mov	r0, r3
 2279 0d32 1049     		ldr	r1, .L112+12	@ float
 2280 0d34 FFF7FEFF 		bl	__aeabi_fadd
 2281 0d38 0346     		mov	r3, r0
 2282 0d3a 1846     		mov	r0, r3
 2283 0d3c FFF7FEFF 		bl	__aeabi_f2iz
 2284 0d40 0246     		mov	r2, r0
 2285 0d42 FB6A     		ldr	r3, [r7, #44]
 2286 0d44 1A60     		str	r2, [r3, #0]
 603:../src/gps.c  ****     if (*bearing < 0)
 2287              		.loc 1 603 0
 2288 0d46 FB6A     		ldr	r3, [r7, #44]
 2289 0d48 1B68     		ldr	r3, [r3, #0]
 2290 0d4a 002B     		cmp	r3, #0
 2291 0d4c 07DA     		bge	.L110
 604:../src/gps.c  ****         *bearing += 36000;
 2292              		.loc 1 604 0
 2293 0d4e FB6A     		ldr	r3, [r7, #44]
 2294 0d50 1B68     		ldr	r3, [r3, #0]
 2295 0d52 03F50C43 		add	r3, r3, #35840
 2296 0d56 03F1A003 		add	r3, r3, #160
 2297 0d5a FA6A     		ldr	r2, [r7, #44]
 2298 0d5c 1360     		str	r3, [r2, #0]
 2299              	.L110:
 605:../src/gps.c  **** }
 2300              		.loc 1 605 0
 2301 0d5e 07F11C07 		add	r7, r7, #28
 2302 0d62 BD46     		mov	sp, r7
 2303 0d64 90BD     		pop	{r4, r7, pc}
 2304              	.L113:
 2305 0d66 00BF     		.align	2
 2306              	.L112:
 2307 0d68 B0000000 		.word	GPS_scaleLonDown
 2308 0d6c 2C7D8E3F 		.word	1066302764
 2309 0d70 A00CB345 		.word	1169362080
 2310 0d74 00A00C46 		.word	1175232512
 2311              		.cfi_endproc
 2312              	.LFE45:
 2314              		.align	2
 2315              		.thumb
 2316              		.thumb_func
 2318              	GPS_calc_velocity:
 2319              	.LFB46:
 606:../src/gps.c  **** 
 607:../src/gps.c  **** ////////////////////////////////////////////////////////////////////////////////////
 608:../src/gps.c  **** // keep old calculation function for compatibility (could be removed later) distance in meters, bea
 609:../src/gps.c  **** //
 610:../src/gps.c  **** //static void GPS_distance(int32_t lat1, int32_t lon1, int32_t lat2, int32_t lon2, uint16_t* dist, 
 611:../src/gps.c  **** //  uint32_t d1;
 612:../src/gps.c  **** //  int32_t  d2;
 613:../src/gps.c  **** //  GPS_distance_cm_bearing(&lat1,&lon1,&lat2,&lon2,&d1,&d2);
 614:../src/gps.c  **** //  *dist = d1 / 100;          //convert to meters
 615:../src/gps.c  **** //  *bearing = d2 /  100;      //convert to degrees
 616:../src/gps.c  **** //}
 617:../src/gps.c  **** 
 618:../src/gps.c  **** ////////////////////////////////////////////////////////////////////////////////////
 619:../src/gps.c  **** // Calculate our current speed vector from gps position data
 620:../src/gps.c  **** //
 621:../src/gps.c  **** static void GPS_calc_velocity(void)
 622:../src/gps.c  **** {
 2320              		.loc 1 622 0
 2321              		.cfi_startproc
 2322              		@ args = 0, pretend = 0, frame = 8
 2323              		@ frame_needed = 1, uses_anonymous_args = 0
 2324 0d78 80B5     		push	{r7, lr}
 2325              	.LCFI49:
 2326              		.cfi_def_cfa_offset 8
 2327              		.cfi_offset 7, -8
 2328              		.cfi_offset 14, -4
 2329 0d7a 82B0     		sub	sp, sp, #8
 2330              	.LCFI50:
 2331              		.cfi_def_cfa_offset 16
 2332 0d7c 00AF     		add	r7, sp, #0
 2333              	.LCFI51:
 2334              		.cfi_def_cfa_register 7
 623:../src/gps.c  ****     static int16_t speed_old[2] = { 0, 0 };
 624:../src/gps.c  ****     static int32_t last[2] = { 0, 0 };
 625:../src/gps.c  ****     static uint8_t init = 0;
 626:../src/gps.c  ****     // y_GPS_speed positve = Up
 627:../src/gps.c  ****     // x_GPS_speed positve = Right
 628:../src/gps.c  **** 
 629:../src/gps.c  ****     if (init) {
 2335              		.loc 1 629 0
 2336 0d7e 394B     		ldr	r3, .L116
 2337 0d80 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2338 0d82 002B     		cmp	r3, #0
 2339 0d84 5ED0     		beq	.L115
 2340              	.LBB2:
 630:../src/gps.c  ****         float tmp = 1.0f / dTnav;
 2341              		.loc 1 630 0
 2342 0d86 384B     		ldr	r3, .L116+4
 2343 0d88 1B68     		ldr	r3, [r3, #0]	@ float
 2344 0d8a 3D48     		ldr	r0, .L116+28	@ float
 2345 0d8c 1946     		mov	r1, r3
 2346 0d8e FFF7FEFF 		bl	__aeabi_fdiv
 2347 0d92 0346     		mov	r3, r0
 2348 0d94 7B60     		str	r3, [r7, #4]	@ float
 631:../src/gps.c  ****         actual_speed[GPS_X] = (float) (GPS_coord[LON] - last[LON]) * GPS_scaleLonDown * tmp;
 2349              		.loc 1 631 0
 2350 0d96 354B     		ldr	r3, .L116+8
 2351 0d98 5A68     		ldr	r2, [r3, #4]
 2352 0d9a 354B     		ldr	r3, .L116+12
 2353 0d9c 5B68     		ldr	r3, [r3, #4]
 2354 0d9e D31A     		subs	r3, r2, r3
 2355 0da0 1846     		mov	r0, r3
 2356 0da2 FFF7FEFF 		bl	__aeabi_i2f
 2357 0da6 0246     		mov	r2, r0
 2358 0da8 324B     		ldr	r3, .L116+16
 2359 0daa 1B68     		ldr	r3, [r3, #0]	@ float
 2360 0dac 1046     		mov	r0, r2
 2361 0dae 1946     		mov	r1, r3
 2362 0db0 FFF7FEFF 		bl	__aeabi_fmul
 2363 0db4 0346     		mov	r3, r0
 2364 0db6 1846     		mov	r0, r3
 2365 0db8 7968     		ldr	r1, [r7, #4]	@ float
 2366 0dba FFF7FEFF 		bl	__aeabi_fmul
 2367 0dbe 0346     		mov	r3, r0
 2368 0dc0 1846     		mov	r0, r3
 2369 0dc2 FFF7FEFF 		bl	__aeabi_f2iz
 2370 0dc6 0346     		mov	r3, r0
 2371 0dc8 9AB2     		uxth	r2, r3
 2372 0dca 2B4B     		ldr	r3, .L116+20
 2373 0dcc 5A80     		strh	r2, [r3, #2]	@ movhi
 632:../src/gps.c  ****         actual_speed[GPS_Y] = (float) (GPS_coord[LAT] - last[LAT]) * tmp;
 2374              		.loc 1 632 0
 2375 0dce 274B     		ldr	r3, .L116+8
 2376 0dd0 1A68     		ldr	r2, [r3, #0]
 2377 0dd2 274B     		ldr	r3, .L116+12
 2378 0dd4 1B68     		ldr	r3, [r3, #0]
 2379 0dd6 D31A     		subs	r3, r2, r3
 2380 0dd8 1846     		mov	r0, r3
 2381 0dda FFF7FEFF 		bl	__aeabi_i2f
 2382 0dde 0346     		mov	r3, r0
 2383 0de0 1846     		mov	r0, r3
 2384 0de2 7968     		ldr	r1, [r7, #4]	@ float
 2385 0de4 FFF7FEFF 		bl	__aeabi_fmul
 2386 0de8 0346     		mov	r3, r0
 2387 0dea 1846     		mov	r0, r3
 2388 0dec FFF7FEFF 		bl	__aeabi_f2iz
 2389 0df0 0346     		mov	r3, r0
 2390 0df2 9AB2     		uxth	r2, r3
 2391 0df4 204B     		ldr	r3, .L116+20
 2392 0df6 1A80     		strh	r2, [r3, #0]	@ movhi
 633:../src/gps.c  **** 
 634:../src/gps.c  ****         actual_speed[GPS_X] = (actual_speed[GPS_X] + speed_old[GPS_X]) / 2;
 2393              		.loc 1 634 0
 2394 0df8 1F4B     		ldr	r3, .L116+20
 2395 0dfa 5B88     		ldrh	r3, [r3, #2]
 2396 0dfc 1AB2     		sxth	r2, r3
 2397 0dfe 1F4B     		ldr	r3, .L116+24
 2398 0e00 5B88     		ldrh	r3, [r3, #2]
 2399 0e02 1BB2     		sxth	r3, r3
 2400 0e04 D318     		adds	r3, r2, r3
 2401 0e06 4FEAD372 		lsr	r2, r3, #31
 2402 0e0a D318     		adds	r3, r2, r3
 2403 0e0c 4FEA6303 		asr	r3, r3, #1
 2404 0e10 9AB2     		uxth	r2, r3
 2405 0e12 194B     		ldr	r3, .L116+20
 2406 0e14 5A80     		strh	r2, [r3, #2]	@ movhi
 635:../src/gps.c  ****         actual_speed[GPS_Y] = (actual_speed[GPS_Y] + speed_old[GPS_Y]) / 2;
 2407              		.loc 1 635 0
 2408 0e16 184B     		ldr	r3, .L116+20
 2409 0e18 1B88     		ldrh	r3, [r3, #0]
 2410 0e1a 1AB2     		sxth	r2, r3
 2411 0e1c 174B     		ldr	r3, .L116+24
 2412 0e1e 1B88     		ldrh	r3, [r3, #0]
 2413 0e20 1BB2     		sxth	r3, r3
 2414 0e22 D318     		adds	r3, r2, r3
 2415 0e24 4FEAD372 		lsr	r2, r3, #31
 2416 0e28 D318     		adds	r3, r2, r3
 2417 0e2a 4FEA6303 		asr	r3, r3, #1
 2418 0e2e 9AB2     		uxth	r2, r3
 2419 0e30 114B     		ldr	r3, .L116+20
 2420 0e32 1A80     		strh	r2, [r3, #0]	@ movhi
 636:../src/gps.c  **** 
 637:../src/gps.c  ****         speed_old[GPS_X] = actual_speed[GPS_X];
 2421              		.loc 1 637 0
 2422 0e34 104B     		ldr	r3, .L116+20
 2423 0e36 5A88     		ldrh	r2, [r3, #2]
 2424 0e38 104B     		ldr	r3, .L116+24
 2425 0e3a 5A80     		strh	r2, [r3, #2]	@ movhi
 638:../src/gps.c  ****         speed_old[GPS_Y] = actual_speed[GPS_Y];
 2426              		.loc 1 638 0
 2427 0e3c 0E4B     		ldr	r3, .L116+20
 2428 0e3e 1A88     		ldrh	r2, [r3, #0]
 2429 0e40 0E4B     		ldr	r3, .L116+24
 2430 0e42 1A80     		strh	r2, [r3, #0]	@ movhi
 2431              	.L115:
 2432              	.LBE2:
 639:../src/gps.c  ****     }
 640:../src/gps.c  ****     init = 1;
 2433              		.loc 1 640 0
 2434 0e44 074B     		ldr	r3, .L116
 2435 0e46 4FF00102 		mov	r2, #1
 2436 0e4a 1A70     		strb	r2, [r3, #0]
 641:../src/gps.c  **** 
 642:../src/gps.c  ****     last[LON] = GPS_coord[LON];
 2437              		.loc 1 642 0
 2438 0e4c 074B     		ldr	r3, .L116+8
 2439 0e4e 5A68     		ldr	r2, [r3, #4]
 2440 0e50 074B     		ldr	r3, .L116+12
 2441 0e52 5A60     		str	r2, [r3, #4]
 643:../src/gps.c  ****     last[LAT] = GPS_coord[LAT];
 2442              		.loc 1 643 0
 2443 0e54 054B     		ldr	r3, .L116+8
 2444 0e56 1A68     		ldr	r2, [r3, #0]
 2445 0e58 054B     		ldr	r3, .L116+12
 2446 0e5a 1A60     		str	r2, [r3, #0]
 644:../src/gps.c  **** }
 2447              		.loc 1 644 0
 2448 0e5c 07F10807 		add	r7, r7, #8
 2449 0e60 BD46     		mov	sp, r7
 2450 0e62 80BD     		pop	{r7, pc}
 2451              	.L117:
 2452              		.align	2
 2453              	.L116:
 2454 0e64 91010000 		.word	init.9232
 2455 0e68 A8000000 		.word	dTnav
 2456 0e6c 00000000 		.word	GPS_coord
 2457 0e70 94010000 		.word	last.9231
 2458 0e74 B0000000 		.word	GPS_scaleLonDown
 2459 0e78 AC000000 		.word	actual_speed
 2460 0e7c 9C010000 		.word	speed_old.9230
 2461 0e80 0000803F 		.word	1065353216
 2462              		.cfi_endproc
 2463              	.LFE46:
 2465              		.align	2
 2466              		.thumb
 2467              		.thumb_func
 2469              	GPS_calc_location_error:
 2470              	.LFB47:
 645:../src/gps.c  **** 
 646:../src/gps.c  **** ////////////////////////////////////////////////////////////////////////////////////
 647:../src/gps.c  **** // Calculate a location error between two gps coordinates
 648:../src/gps.c  **** // Because we are using lat and lon to do our distance errors here's a quick chart:
 649:../src/gps.c  **** //      100     = 1m
 650:../src/gps.c  **** //      1000    = 11m    = 36 feet
 651:../src/gps.c  **** //      1800    = 19.80m = 60 feet
 652:../src/gps.c  **** //      3000    = 33m
 653:../src/gps.c  **** //      10000   = 111m
 654:../src/gps.c  **** //
 655:../src/gps.c  **** static void GPS_calc_location_error(int32_t *target_lat, int32_t *target_lng, int32_t *gps_lat, int
 656:../src/gps.c  **** {
 2471              		.loc 1 656 0
 2472              		.cfi_startproc
 2473              		@ args = 0, pretend = 0, frame = 16
 2474              		@ frame_needed = 1, uses_anonymous_args = 0
 2475 0e84 80B5     		push	{r7, lr}
 2476              	.LCFI52:
 2477              		.cfi_def_cfa_offset 8
 2478              		.cfi_offset 7, -8
 2479              		.cfi_offset 14, -4
 2480 0e86 84B0     		sub	sp, sp, #16
 2481              	.LCFI53:
 2482              		.cfi_def_cfa_offset 24
 2483 0e88 00AF     		add	r7, sp, #0
 2484              	.LCFI54:
 2485              		.cfi_def_cfa_register 7
 2486 0e8a F860     		str	r0, [r7, #12]
 2487 0e8c B960     		str	r1, [r7, #8]
 2488 0e8e 7A60     		str	r2, [r7, #4]
 2489 0e90 3B60     		str	r3, [r7, #0]
 657:../src/gps.c  ****     error[LON] = (float) (*target_lng - *gps_lng) * GPS_scaleLonDown;   // X Error
 2490              		.loc 1 657 0
 2491 0e92 BB68     		ldr	r3, [r7, #8]
 2492 0e94 1A68     		ldr	r2, [r3, #0]
 2493 0e96 3B68     		ldr	r3, [r7, #0]
 2494 0e98 1B68     		ldr	r3, [r3, #0]
 2495 0e9a D31A     		subs	r3, r2, r3
 2496 0e9c 1846     		mov	r0, r3
 2497 0e9e FFF7FEFF 		bl	__aeabi_i2f
 2498 0ea2 0246     		mov	r2, r0
 2499 0ea4 0B4B     		ldr	r3, .L119
 2500 0ea6 1B68     		ldr	r3, [r3, #0]	@ float
 2501 0ea8 1046     		mov	r0, r2
 2502 0eaa 1946     		mov	r1, r3
 2503 0eac FFF7FEFF 		bl	__aeabi_fmul
 2504 0eb0 0346     		mov	r3, r0
 2505 0eb2 1846     		mov	r0, r3
 2506 0eb4 FFF7FEFF 		bl	__aeabi_f2iz
 2507 0eb8 0246     		mov	r2, r0
 2508 0eba 074B     		ldr	r3, .L119+4
 2509 0ebc 5A60     		str	r2, [r3, #4]
 658:../src/gps.c  ****     error[LAT] = *target_lat - *gps_lat;        // Y Error
 2510              		.loc 1 658 0
 2511 0ebe FB68     		ldr	r3, [r7, #12]
 2512 0ec0 1A68     		ldr	r2, [r3, #0]
 2513 0ec2 7B68     		ldr	r3, [r7, #4]
 2514 0ec4 1B68     		ldr	r3, [r3, #0]
 2515 0ec6 D21A     		subs	r2, r2, r3
 2516 0ec8 034B     		ldr	r3, .L119+4
 2517 0eca 1A60     		str	r2, [r3, #0]
 659:../src/gps.c  **** }
 2518              		.loc 1 659 0
 2519 0ecc 07F11007 		add	r7, r7, #16
 2520 0ed0 BD46     		mov	sp, r7
 2521 0ed2 80BD     		pop	{r7, pc}
 2522              	.L120:
 2523              		.align	2
 2524              	.L119:
 2525 0ed4 B0000000 		.word	GPS_scaleLonDown
 2526 0ed8 B8000000 		.word	error
 2527              		.cfi_endproc
 2528              	.LFE47:
 2530              		.align	2
 2531              		.thumb
 2532              		.thumb_func
 2534              	GPS_calc_poshold:
 2535              	.LFB48:
 660:../src/gps.c  **** 
 661:../src/gps.c  **** ////////////////////////////////////////////////////////////////////////////////////
 662:../src/gps.c  **** // Calculate nav_lat and nav_lon from the x and y error and the speed
 663:../src/gps.c  **** //
 664:../src/gps.c  **** static void GPS_calc_poshold(void)
 665:../src/gps.c  **** {
 2536              		.loc 1 665 0
 2537              		.cfi_startproc
 2538              		@ args = 0, pretend = 0, frame = 16
 2539              		@ frame_needed = 1, uses_anonymous_args = 0
 2540 0edc 90B5     		push	{r4, r7, lr}
 2541              	.LCFI55:
 2542              		.cfi_def_cfa_offset 12
 2543              		.cfi_offset 4, -12
 2544              		.cfi_offset 7, -8
 2545              		.cfi_offset 14, -4
 2546 0ede 85B0     		sub	sp, sp, #20
 2547              	.LCFI56:
 2548              		.cfi_def_cfa_offset 32
 2549 0ee0 00AF     		add	r7, sp, #0
 2550              	.LCFI57:
 2551              		.cfi_def_cfa_register 7
 666:../src/gps.c  ****     int32_t d;
 667:../src/gps.c  ****     int32_t target_speed;
 668:../src/gps.c  ****     int axis;
 669:../src/gps.c  **** 
 670:../src/gps.c  ****     for (axis = 0; axis < 2; axis++) {
 2552              		.loc 1 670 0
 2553 0ee2 4FF00003 		mov	r3, #0
 2554 0ee6 BB60     		str	r3, [r7, #8]
 2555 0ee8 B6E0     		b	.L122
 2556              	.L128:
 671:../src/gps.c  ****         target_speed = get_P(error[axis], &posholdPID_PARAM);       // calculate desired speed from
 2557              		.loc 1 671 0
 2558 0eea 5F4B     		ldr	r3, .L129
 2559 0eec BA68     		ldr	r2, [r7, #8]
 2560 0eee 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2561 0ef2 1846     		mov	r0, r3
 2562 0ef4 5D49     		ldr	r1, .L129+4
 2563 0ef6 FFF7EDF9 		bl	get_P
 2564 0efa 7860     		str	r0, [r7, #4]
 672:../src/gps.c  ****         rate_error[axis] = target_speed - actual_speed[axis];       // calc the speed error
 2565              		.loc 1 672 0
 2566 0efc 7B68     		ldr	r3, [r7, #4]
 2567 0efe 9AB2     		uxth	r2, r3
 2568 0f00 5B4B     		ldr	r3, .L129+8
 2569 0f02 B968     		ldr	r1, [r7, #8]
 2570 0f04 33F81130 		ldrh	r3, [r3, r1, lsl #1]
 2571 0f08 9BB2     		uxth	r3, r3
 2572 0f0a D31A     		subs	r3, r2, r3
 2573 0f0c 9BB2     		uxth	r3, r3
 2574 0f0e 99B2     		uxth	r1, r3
 2575 0f10 584B     		ldr	r3, .L129+12
 2576 0f12 BA68     		ldr	r2, [r7, #8]
 2577 0f14 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 673:../src/gps.c  **** 
 674:../src/gps.c  ****         nav[axis] = get_P(rate_error[axis], &poshold_ratePID_PARAM) +
 2578              		.loc 1 674 0
 2579 0f18 564B     		ldr	r3, .L129+12
 2580 0f1a BA68     		ldr	r2, [r7, #8]
 2581 0f1c 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 2582 0f20 1BB2     		sxth	r3, r3
 2583 0f22 1846     		mov	r0, r3
 2584 0f24 5449     		ldr	r1, .L129+16
 2585 0f26 FFF7D5F9 		bl	get_P
 2586 0f2a 0346     		mov	r3, r0
 2587 0f2c 9CB2     		uxth	r4, r3
 675:../src/gps.c  ****                     get_I(rate_error[axis] + error[axis], &dTnav, &poshold_ratePID[axis], &poshold_
 2588              		.loc 1 675 0
 2589 0f2e 514B     		ldr	r3, .L129+12
 2590 0f30 BA68     		ldr	r2, [r7, #8]
 2591 0f32 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 2592 0f36 1AB2     		sxth	r2, r3
 2593 0f38 4B4B     		ldr	r3, .L129
 2594 0f3a B968     		ldr	r1, [r7, #8]
 2595 0f3c 53F82130 		ldr	r3, [r3, r1, lsl #2]
 2596 0f40 D118     		adds	r1, r2, r3
 2597 0f42 BA68     		ldr	r2, [r7, #8]
 2598 0f44 1346     		mov	r3, r2
 2599 0f46 4FEA8303 		lsl	r3, r3, #2
 2600 0f4a 9B18     		adds	r3, r3, r2
 2601 0f4c 4FEA8303 		lsl	r3, r3, #2
 2602 0f50 4A4A     		ldr	r2, .L129+20
 2603 0f52 9B18     		adds	r3, r3, r2
 2604 0f54 0846     		mov	r0, r1
 2605 0f56 4A49     		ldr	r1, .L129+24
 2606 0f58 1A46     		mov	r2, r3
 2607 0f5a 474B     		ldr	r3, .L129+16
 2608 0f5c FFF7D4F9 		bl	get_I
 2609 0f60 0346     		mov	r3, r0
 674:../src/gps.c  ****         nav[axis] = get_P(rate_error[axis], &poshold_ratePID_PARAM) +
 2610              		.loc 1 674 0
 2611 0f62 9BB2     		uxth	r3, r3
 2612 0f64 E318     		adds	r3, r4, r3
 2613 0f66 9BB2     		uxth	r3, r3
 2614 0f68 99B2     		uxth	r1, r3
 2615 0f6a 464B     		ldr	r3, .L129+28
 2616 0f6c BA68     		ldr	r2, [r7, #8]
 2617 0f6e 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 676:../src/gps.c  ****         d = get_D(error[axis], &dTnav, &poshold_ratePID[axis], &poshold_ratePID_PARAM);
 2618              		.loc 1 676 0
 2619 0f72 3D4B     		ldr	r3, .L129
 2620 0f74 BA68     		ldr	r2, [r7, #8]
 2621 0f76 53F82210 		ldr	r1, [r3, r2, lsl #2]
 2622 0f7a BA68     		ldr	r2, [r7, #8]
 2623 0f7c 1346     		mov	r3, r2
 2624 0f7e 4FEA8303 		lsl	r3, r3, #2
 2625 0f82 9B18     		adds	r3, r3, r2
 2626 0f84 4FEA8303 		lsl	r3, r3, #2
 2627 0f88 3C4A     		ldr	r2, .L129+20
 2628 0f8a 9B18     		adds	r3, r3, r2
 2629 0f8c 0846     		mov	r0, r1
 2630 0f8e 3C49     		ldr	r1, .L129+24
 2631 0f90 1A46     		mov	r2, r3
 2632 0f92 394B     		ldr	r3, .L129+16
 2633 0f94 FFF70CFA 		bl	get_D
 2634 0f98 F860     		str	r0, [r7, #12]
 677:../src/gps.c  ****         d = constrain(d, -2000, 2000);
 2635              		.loc 1 677 0
 2636 0f9a FB68     		ldr	r3, [r7, #12]
 2637 0f9c 13F5FA6F 		cmn	r3, #2000
 2638 0fa0 06DB     		blt	.L123
 2639              		.loc 1 677 0 is_stmt 0 discriminator 1
 2640 0fa2 FB68     		ldr	r3, [r7, #12]
 2641 0fa4 B3F5FA6F 		cmp	r3, #2000
 2642 0fa8 A8BF     		it	ge
 2643 0faa 4FF4FA63 		movge	r3, #2000
 2644 0fae 00E0     		b	.L124
 2645              	.L123:
 2646              		.loc 1 677 0 discriminator 2
 2647 0fb0 354B     		ldr	r3, .L129+32
 2648              	.L124:
 2649              		.loc 1 677 0 discriminator 3
 2650 0fb2 FB60     		str	r3, [r7, #12]
 678:../src/gps.c  **** 
 679:../src/gps.c  ****         // get rid of noise
 680:../src/gps.c  **** #if defined(GPS_LOW_SPEED_D_FILTER)
 681:../src/gps.c  ****         if (abs(actual_speed[axis]) < 50)
 2651              		.loc 1 681 0 is_stmt 1 discriminator 3
 2652 0fb4 2E4B     		ldr	r3, .L129+8
 2653 0fb6 BA68     		ldr	r2, [r7, #8]
 2654 0fb8 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 2655 0fbc 1BB2     		sxth	r3, r3
 2656 0fbe 13F1310F 		cmn	r3, #49
 2657 0fc2 09DB     		blt	.L125
 2658              		.loc 1 681 0 is_stmt 0 discriminator 1
 2659 0fc4 2A4B     		ldr	r3, .L129+8
 2660 0fc6 BA68     		ldr	r2, [r7, #8]
 2661 0fc8 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 2662 0fcc 1BB2     		sxth	r3, r3
 2663 0fce 312B     		cmp	r3, #49
 2664 0fd0 02DC     		bgt	.L125
 682:../src/gps.c  ****             d = 0;
 2665              		.loc 1 682 0 is_stmt 1
 2666 0fd2 4FF00003 		mov	r3, #0
 2667 0fd6 FB60     		str	r3, [r7, #12]
 2668              	.L125:
 683:../src/gps.c  **** #endif
 684:../src/gps.c  **** 
 685:../src/gps.c  ****         nav[axis] +=d;
 2669              		.loc 1 685 0
 2670 0fd8 2A4B     		ldr	r3, .L129+28
 2671 0fda BA68     		ldr	r2, [r7, #8]
 2672 0fdc 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 2673 0fe0 9AB2     		uxth	r2, r3
 2674 0fe2 FB68     		ldr	r3, [r7, #12]
 2675 0fe4 9BB2     		uxth	r3, r3
 2676 0fe6 D318     		adds	r3, r2, r3
 2677 0fe8 9BB2     		uxth	r3, r3
 2678 0fea 99B2     		uxth	r1, r3
 2679 0fec 254B     		ldr	r3, .L129+28
 2680 0fee BA68     		ldr	r2, [r7, #8]
 2681 0ff0 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 686:../src/gps.c  ****         nav[axis] = constrain(nav[axis], -NAV_BANK_MAX, NAV_BANK_MAX);
 2682              		.loc 1 686 0
 2683 0ff4 234B     		ldr	r3, .L129+28
 2684 0ff6 BA68     		ldr	r2, [r7, #8]
 2685 0ff8 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 2686 0ffc 1AB2     		sxth	r2, r3
 2687 0ffe 234B     		ldr	r3, .L129+36
 2688 1000 9A42     		cmp	r2, r3
 2689 1002 0BDB     		blt	.L126
 2690              		.loc 1 686 0 is_stmt 0 discriminator 1
 2691 1004 1F4B     		ldr	r3, .L129+28
 2692 1006 BA68     		ldr	r2, [r7, #8]
 2693 1008 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 2694 100c 1AB2     		sxth	r2, r3
 2695 100e 40F6B833 		movw	r3, #3000
 2696 1012 9A42     		cmp	r2, r3
 2697 1014 B8BF     		it	lt
 2698 1016 1346     		movlt	r3, r2
 2699 1018 9BB2     		uxth	r3, r3
 2700 101a 01E0     		b	.L127
 2701              	.L126:
 2702              		.loc 1 686 0 discriminator 2
 2703 101c 4FF24843 		movw	r3, #62536
 2704              	.L127:
 2705              		.loc 1 686 0 discriminator 3
 2706 1020 184A     		ldr	r2, .L129+28
 2707 1022 B968     		ldr	r1, [r7, #8]
 2708 1024 22F81130 		strh	r3, [r2, r1, lsl #1]	@ movhi
 687:../src/gps.c  ****         navPID[axis].integrator = poshold_ratePID[axis].integrator;
 2709              		.loc 1 687 0 is_stmt 1 discriminator 3
 2710 1028 1449     		ldr	r1, .L129+20
 2711 102a BA68     		ldr	r2, [r7, #8]
 2712 102c 1346     		mov	r3, r2
 2713 102e 4FEA8303 		lsl	r3, r3, #2
 2714 1032 9B18     		adds	r3, r3, r2
 2715 1034 4FEA8303 		lsl	r3, r3, #2
 2716 1038 CB18     		adds	r3, r1, r3
 2717 103a 1968     		ldr	r1, [r3, #0]	@ float
 2718 103c 1448     		ldr	r0, .L129+40
 2719 103e BA68     		ldr	r2, [r7, #8]
 2720 1040 1346     		mov	r3, r2
 2721 1042 4FEA8303 		lsl	r3, r3, #2
 2722 1046 9B18     		adds	r3, r3, r2
 2723 1048 4FEA8303 		lsl	r3, r3, #2
 2724 104c C318     		adds	r3, r0, r3
 2725 104e 1960     		str	r1, [r3, #0]	@ float
 670:../src/gps.c  ****     for (axis = 0; axis < 2; axis++) {
 2726              		.loc 1 670 0 discriminator 3
 2727 1050 BB68     		ldr	r3, [r7, #8]
 2728 1052 03F10103 		add	r3, r3, #1
 2729 1056 BB60     		str	r3, [r7, #8]
 2730              	.L122:
 670:../src/gps.c  ****     for (axis = 0; axis < 2; axis++) {
 2731              		.loc 1 670 0 is_stmt 0 discriminator 1
 2732 1058 BB68     		ldr	r3, [r7, #8]
 2733 105a 012B     		cmp	r3, #1
 2734 105c 7FF745AF 		ble	.L128
 688:../src/gps.c  ****     }
 689:../src/gps.c  **** }
 2735              		.loc 1 689 0 is_stmt 1
 2736 1060 07F11407 		add	r7, r7, #20
 2737 1064 BD46     		mov	sp, r7
 2738 1066 90BD     		pop	{r4, r7, pc}
 2739              	.L130:
 2740              		.align	2
 2741              	.L129:
 2742 1068 B8000000 		.word	error
 2743 106c 00000000 		.word	posholdPID_PARAM
 2744 1070 AC000000 		.word	actual_speed
 2745 1074 B4000000 		.word	rate_error
 2746 1078 10000000 		.word	poshold_ratePID_PARAM
 2747 107c 58000000 		.word	poshold_ratePID
 2748 1080 A8000000 		.word	dTnav
 2749 1084 00000000 		.word	nav
 2750 1088 30F8FFFF 		.word	-2000
 2751 108c 48F4FFFF 		.word	-3000
 2752 1090 80000000 		.word	navPID
 2753              		.cfi_endproc
 2754              	.LFE48:
 2756              		.align	2
 2757              		.thumb
 2758              		.thumb_func
 2760              	GPS_calc_nav_rate:
 2761              	.LFB49:
 690:../src/gps.c  **** 
 691:../src/gps.c  **** ////////////////////////////////////////////////////////////////////////////////////
 692:../src/gps.c  **** // Calculate the desired nav_lat and nav_lon for distance flying such as RTH
 693:../src/gps.c  **** //
 694:../src/gps.c  **** static void GPS_calc_nav_rate(int max_speed)
 695:../src/gps.c  **** {
 2762              		.loc 1 695 0
 2763              		.cfi_startproc
 2764              		@ args = 0, pretend = 0, frame = 24
 2765              		@ frame_needed = 1, uses_anonymous_args = 0
 2766 1094 90B5     		push	{r4, r7, lr}
 2767              	.LCFI58:
 2768              		.cfi_def_cfa_offset 12
 2769              		.cfi_offset 4, -12
 2770              		.cfi_offset 7, -8
 2771              		.cfi_offset 14, -4
 2772 1096 87B0     		sub	sp, sp, #28
 2773              	.LCFI59:
 2774              		.cfi_def_cfa_offset 40
 2775 1098 00AF     		add	r7, sp, #0
 2776              	.LCFI60:
 2777              		.cfi_def_cfa_register 7
 2778 109a 7860     		str	r0, [r7, #4]
 696:../src/gps.c  ****     float trig[2];
 697:../src/gps.c  ****     float temp;
 698:../src/gps.c  ****     int axis;
 699:../src/gps.c  **** 
 700:../src/gps.c  ****     // push us towards the original track
 701:../src/gps.c  ****     GPS_update_crosstrack();
 2779              		.loc 1 701 0
 2780 109c 00F0F0F8 		bl	GPS_update_crosstrack
 702:../src/gps.c  **** 
 703:../src/gps.c  ****     // nav_bearing includes crosstrack
 704:../src/gps.c  ****     temp = (9000l - nav_bearing) * RADX100;
 2781              		.loc 1 704 0
 2782 10a0 6D4B     		ldr	r3, .L138
 2783 10a2 1B68     		ldr	r3, [r3, #0]
 2784 10a4 C3F50C53 		rsb	r3, r3, #8960
 2785 10a8 03F12803 		add	r3, r3, #40
 2786 10ac 1846     		mov	r0, r3
 2787 10ae FFF7FEFF 		bl	__aeabi_i2f
 2788 10b2 0346     		mov	r3, r0
 2789 10b4 1846     		mov	r0, r3
 2790 10b6 7149     		ldr	r1, .L138+36	@ float
 2791 10b8 FFF7FEFF 		bl	__aeabi_fmul
 2792 10bc 0346     		mov	r3, r0
 2793 10be 3B61     		str	r3, [r7, #16]	@ float
 705:../src/gps.c  ****     trig[GPS_X] = cosf(temp);
 2794              		.loc 1 705 0
 2795 10c0 3869     		ldr	r0, [r7, #16]	@ float
 2796 10c2 FFF7FEFF 		bl	cosf
 2797 10c6 0346     		mov	r3, r0
 2798 10c8 FB60     		str	r3, [r7, #12]	@ float
 706:../src/gps.c  ****     trig[GPS_Y] = sinf(temp);
 2799              		.loc 1 706 0
 2800 10ca 3869     		ldr	r0, [r7, #16]	@ float
 2801 10cc FFF7FEFF 		bl	sinf
 2802 10d0 0346     		mov	r3, r0
 2803 10d2 BB60     		str	r3, [r7, #8]	@ float
 707:../src/gps.c  **** 
 708:../src/gps.c  ****     for (axis = 0; axis < 2; axis++) {
 2804              		.loc 1 708 0
 2805 10d4 4FF00003 		mov	r3, #0
 2806 10d8 7B61     		str	r3, [r7, #20]
 2807 10da B4E0     		b	.L132
 2808              	.L137:
 709:../src/gps.c  ****         rate_error[axis] = (trig[axis] * max_speed) - actual_speed[axis];
 2809              		.loc 1 709 0
 2810 10dc 7B69     		ldr	r3, [r7, #20]
 2811 10de 4FEA8303 		lsl	r3, r3, #2
 2812 10e2 07F11802 		add	r2, r7, #24
 2813 10e6 D318     		adds	r3, r2, r3
 2814 10e8 53F8104C 		ldr	r4, [r3, #-16]	@ float
 2815 10ec 7868     		ldr	r0, [r7, #4]
 2816 10ee FFF7FEFF 		bl	__aeabi_i2f
 2817 10f2 0346     		mov	r3, r0
 2818 10f4 2046     		mov	r0, r4
 2819 10f6 1946     		mov	r1, r3
 2820 10f8 FFF7FEFF 		bl	__aeabi_fmul
 2821 10fc 0346     		mov	r3, r0
 2822 10fe 1C46     		mov	r4, r3
 2823 1100 564B     		ldr	r3, .L138+4
 2824 1102 7A69     		ldr	r2, [r7, #20]
 2825 1104 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 2826 1108 1BB2     		sxth	r3, r3
 2827 110a 1846     		mov	r0, r3
 2828 110c FFF7FEFF 		bl	__aeabi_i2f
 2829 1110 0346     		mov	r3, r0
 2830 1112 2046     		mov	r0, r4
 2831 1114 1946     		mov	r1, r3
 2832 1116 FFF7FEFF 		bl	__aeabi_fsub
 2833 111a 0346     		mov	r3, r0
 2834 111c 1846     		mov	r0, r3
 2835 111e FFF7FEFF 		bl	__aeabi_f2iz
 2836 1122 0346     		mov	r3, r0
 2837 1124 99B2     		uxth	r1, r3
 2838 1126 4E4B     		ldr	r3, .L138+8
 2839 1128 7A69     		ldr	r2, [r7, #20]
 2840 112a 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 710:../src/gps.c  ****         rate_error[axis] = constrain(rate_error[axis], -1000, 1000);
 2841              		.loc 1 710 0
 2842 112e 4C4B     		ldr	r3, .L138+8
 2843 1130 7A69     		ldr	r2, [r7, #20]
 2844 1132 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 2845 1136 1BB2     		sxth	r3, r3
 2846 1138 13F57A7F 		cmn	r3, #1000
 2847 113c 0BDB     		blt	.L133
 2848              		.loc 1 710 0 is_stmt 0 discriminator 1
 2849 113e 484B     		ldr	r3, .L138+8
 2850 1140 7A69     		ldr	r2, [r7, #20]
 2851 1142 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 2852 1146 1BB2     		sxth	r3, r3
 2853 1148 B3F57A7F 		cmp	r3, #1000
 2854 114c A8BF     		it	ge
 2855 114e 4FF47A73 		movge	r3, #1000
 2856 1152 9BB2     		uxth	r3, r3
 2857 1154 01E0     		b	.L134
 2858              	.L133:
 2859              		.loc 1 710 0 discriminator 2
 2860 1156 4FF61843 		movw	r3, #64536
 2861              	.L134:
 2862              		.loc 1 710 0 discriminator 3
 2863 115a 414A     		ldr	r2, .L138+8
 2864 115c 7969     		ldr	r1, [r7, #20]
 2865 115e 22F81130 		strh	r3, [r2, r1, lsl #1]	@ movhi
 711:../src/gps.c  ****         // P + I + D
 712:../src/gps.c  ****         nav[axis] = get_P(rate_error[axis], &navPID_PARAM) +
 2866              		.loc 1 712 0 is_stmt 1 discriminator 3
 2867 1162 3F4B     		ldr	r3, .L138+8
 2868 1164 7A69     		ldr	r2, [r7, #20]
 2869 1166 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 2870 116a 1BB2     		sxth	r3, r3
 2871 116c 1846     		mov	r0, r3
 2872 116e 3D49     		ldr	r1, .L138+12
 2873 1170 FFF7B0F8 		bl	get_P
 2874 1174 0346     		mov	r3, r0
 2875 1176 9CB2     		uxth	r4, r3
 713:../src/gps.c  ****                     get_I(rate_error[axis], &dTnav, &navPID[axis], &navPID_PARAM) +
 2876              		.loc 1 713 0 discriminator 3
 2877 1178 394B     		ldr	r3, .L138+8
 2878 117a 7A69     		ldr	r2, [r7, #20]
 2879 117c 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 2880 1180 19B2     		sxth	r1, r3
 2881 1182 7A69     		ldr	r2, [r7, #20]
 2882 1184 1346     		mov	r3, r2
 2883 1186 4FEA8303 		lsl	r3, r3, #2
 2884 118a 9B18     		adds	r3, r3, r2
 2885 118c 4FEA8303 		lsl	r3, r3, #2
 2886 1190 354A     		ldr	r2, .L138+16
 2887 1192 9B18     		adds	r3, r3, r2
 2888 1194 0846     		mov	r0, r1
 2889 1196 3549     		ldr	r1, .L138+20
 2890 1198 1A46     		mov	r2, r3
 2891 119a 324B     		ldr	r3, .L138+12
 2892 119c FFF7B4F8 		bl	get_I
 2893 11a0 0346     		mov	r3, r0
 712:../src/gps.c  ****         nav[axis] = get_P(rate_error[axis], &navPID_PARAM) +
 2894              		.loc 1 712 0 discriminator 3
 2895 11a2 9BB2     		uxth	r3, r3
 2896 11a4 E318     		adds	r3, r4, r3
 2897 11a6 9CB2     		uxth	r4, r3
 714:../src/gps.c  ****                     get_D(rate_error[axis], &dTnav, &navPID[axis], &navPID_PARAM);
 2898              		.loc 1 714 0 discriminator 3
 2899 11a8 2D4B     		ldr	r3, .L138+8
 2900 11aa 7A69     		ldr	r2, [r7, #20]
 2901 11ac 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 2902 11b0 19B2     		sxth	r1, r3
 2903 11b2 7A69     		ldr	r2, [r7, #20]
 2904 11b4 1346     		mov	r3, r2
 2905 11b6 4FEA8303 		lsl	r3, r3, #2
 2906 11ba 9B18     		adds	r3, r3, r2
 2907 11bc 4FEA8303 		lsl	r3, r3, #2
 2908 11c0 294A     		ldr	r2, .L138+16
 2909 11c2 9B18     		adds	r3, r3, r2
 2910 11c4 0846     		mov	r0, r1
 2911 11c6 2949     		ldr	r1, .L138+20
 2912 11c8 1A46     		mov	r2, r3
 2913 11ca 264B     		ldr	r3, .L138+12
 2914 11cc FFF7F0F8 		bl	get_D
 2915 11d0 0346     		mov	r3, r0
 712:../src/gps.c  ****         nav[axis] = get_P(rate_error[axis], &navPID_PARAM) +
 2916              		.loc 1 712 0 discriminator 3
 2917 11d2 9BB2     		uxth	r3, r3
 2918 11d4 E318     		adds	r3, r4, r3
 2919 11d6 9BB2     		uxth	r3, r3
 2920 11d8 99B2     		uxth	r1, r3
 2921 11da 254B     		ldr	r3, .L138+24
 2922 11dc 7A69     		ldr	r2, [r7, #20]
 2923 11de 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 715:../src/gps.c  **** 
 716:../src/gps.c  ****         nav[axis] = constrain(nav[axis], -NAV_BANK_MAX, NAV_BANK_MAX);
 2924              		.loc 1 716 0 discriminator 3
 2925 11e2 234B     		ldr	r3, .L138+24
 2926 11e4 7A69     		ldr	r2, [r7, #20]
 2927 11e6 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 2928 11ea 1AB2     		sxth	r2, r3
 2929 11ec 214B     		ldr	r3, .L138+28
 2930 11ee 9A42     		cmp	r2, r3
 2931 11f0 0BDB     		blt	.L135
 2932              		.loc 1 716 0 is_stmt 0 discriminator 1
 2933 11f2 1F4B     		ldr	r3, .L138+24
 2934 11f4 7A69     		ldr	r2, [r7, #20]
 2935 11f6 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 2936 11fa 1AB2     		sxth	r2, r3
 2937 11fc 40F6B833 		movw	r3, #3000
 2938 1200 9A42     		cmp	r2, r3
 2939 1202 B8BF     		it	lt
 2940 1204 1346     		movlt	r3, r2
 2941 1206 9BB2     		uxth	r3, r3
 2942 1208 01E0     		b	.L136
 2943              	.L135:
 2944              		.loc 1 716 0 discriminator 2
 2945 120a 4FF24843 		movw	r3, #62536
 2946              	.L136:
 2947              		.loc 1 716 0 discriminator 3
 2948 120e 184A     		ldr	r2, .L138+24
 2949 1210 7969     		ldr	r1, [r7, #20]
 2950 1212 22F81130 		strh	r3, [r2, r1, lsl #1]	@ movhi
 717:../src/gps.c  ****         poshold_ratePID[axis].integrator = navPID[axis].integrator;
 2951              		.loc 1 717 0 is_stmt 1 discriminator 3
 2952 1216 1449     		ldr	r1, .L138+16
 2953 1218 7A69     		ldr	r2, [r7, #20]
 2954 121a 1346     		mov	r3, r2
 2955 121c 4FEA8303 		lsl	r3, r3, #2
 2956 1220 9B18     		adds	r3, r3, r2
 2957 1222 4FEA8303 		lsl	r3, r3, #2
 2958 1226 CB18     		adds	r3, r1, r3
 2959 1228 1968     		ldr	r1, [r3, #0]	@ float
 2960 122a 1348     		ldr	r0, .L138+32
 2961 122c 7A69     		ldr	r2, [r7, #20]
 2962 122e 1346     		mov	r3, r2
 2963 1230 4FEA8303 		lsl	r3, r3, #2
 2964 1234 9B18     		adds	r3, r3, r2
 2965 1236 4FEA8303 		lsl	r3, r3, #2
 2966 123a C318     		adds	r3, r0, r3
 2967 123c 1960     		str	r1, [r3, #0]	@ float
 708:../src/gps.c  ****     for (axis = 0; axis < 2; axis++) {
 2968              		.loc 1 708 0 discriminator 3
 2969 123e 7B69     		ldr	r3, [r7, #20]
 2970 1240 03F10103 		add	r3, r3, #1
 2971 1244 7B61     		str	r3, [r7, #20]
 2972              	.L132:
 708:../src/gps.c  ****     for (axis = 0; axis < 2; axis++) {
 2973              		.loc 1 708 0 is_stmt 0 discriminator 1
 2974 1246 7B69     		ldr	r3, [r7, #20]
 2975 1248 012B     		cmp	r3, #1
 2976 124a 7FF747AF 		ble	.L137
 718:../src/gps.c  ****     }
 719:../src/gps.c  **** }
 2977              		.loc 1 719 0 is_stmt 1
 2978 124e 07F11C07 		add	r7, r7, #28
 2979 1252 BD46     		mov	sp, r7
 2980 1254 90BD     		pop	{r4, r7, pc}
 2981              	.L139:
 2982 1256 00BF     		.align	2
 2983              	.L138:
 2984 1258 28010000 		.word	nav_bearing
 2985 125c AC000000 		.word	actual_speed
 2986 1260 B4000000 		.word	rate_error
 2987 1264 20000000 		.word	navPID_PARAM
 2988 1268 80000000 		.word	navPID
 2989 126c A8000000 		.word	dTnav
 2990 1270 00000000 		.word	nav
 2991 1274 48F4FFFF 		.word	-3000
 2992 1278 58000000 		.word	poshold_ratePID
 2993 127c D3023739 		.word	959906515
 2994              		.cfi_endproc
 2995              	.LFE49:
 2997              		.align	2
 2998              		.thumb
 2999              		.thumb_func
 3001              	GPS_update_crosstrack:
 3002              	.LFB50:
 720:../src/gps.c  **** 
 721:../src/gps.c  **** ////////////////////////////////////////////////////////////////////////////////////
 722:../src/gps.c  **** // Calculating cross track error, this tries to keep the copter on a direct line
 723:../src/gps.c  **** // when flying to a waypoint.
 724:../src/gps.c  **** //
 725:../src/gps.c  **** static void GPS_update_crosstrack(void)
 726:../src/gps.c  **** {
 3003              		.loc 1 726 0
 3004              		.cfi_startproc
 3005              		@ args = 0, pretend = 0, frame = 8
 3006              		@ frame_needed = 1, uses_anonymous_args = 0
 3007 1280 90B5     		push	{r4, r7, lr}
 3008              	.LCFI61:
 3009              		.cfi_def_cfa_offset 12
 3010              		.cfi_offset 4, -12
 3011              		.cfi_offset 7, -8
 3012              		.cfi_offset 14, -4
 3013 1282 83B0     		sub	sp, sp, #12
 3014              	.LCFI62:
 3015              		.cfi_def_cfa_offset 24
 3016 1284 00AF     		add	r7, sp, #0
 3017              	.LCFI63:
 3018              		.cfi_def_cfa_register 7
 727:../src/gps.c  ****     if (abs(wrap_18000(target_bearing - original_target_bearing)) < 4500) {     // If we are too fa
 3019              		.loc 1 727 0
 3020 1286 3E4B     		ldr	r3, .L147
 3021 1288 1A68     		ldr	r2, [r3, #0]
 3022 128a 3E4B     		ldr	r3, .L147+4
 3023 128c 1B68     		ldr	r3, [r3, #0]
 3024 128e D31A     		subs	r3, r2, r3
 3025 1290 1846     		mov	r0, r3
 3026 1292 FFF7FEFF 		bl	wrap_18000
 3027 1296 0346     		mov	r3, r0
 3028 1298 002B     		cmp	r3, #0
 3029 129a 10DD     		ble	.L141
 3030              		.loc 1 727 0 is_stmt 0 discriminator 1
 3031 129c 384B     		ldr	r3, .L147
 3032 129e 1A68     		ldr	r2, [r3, #0]
 3033 12a0 384B     		ldr	r3, .L147+4
 3034 12a2 1B68     		ldr	r3, [r3, #0]
 3035 12a4 D31A     		subs	r3, r2, r3
 3036 12a6 1846     		mov	r0, r3
 3037 12a8 FFF7FEFF 		bl	wrap_18000
 3038 12ac 0246     		mov	r2, r0
 3039 12ae 41F29313 		movw	r3, #4499
 3040 12b2 9A42     		cmp	r2, r3
 3041 12b4 CCBF     		ite	gt
 3042 12b6 0023     		movgt	r3, #0
 3043 12b8 0123     		movle	r3, #1
 3044 12ba DBB2     		uxtb	r3, r3
 3045 12bc 11E0     		b	.L142
 3046              	.L141:
 3047              		.loc 1 727 0 discriminator 2
 3048 12be 304B     		ldr	r3, .L147
 3049 12c0 1A68     		ldr	r2, [r3, #0]
 3050 12c2 304B     		ldr	r3, .L147+4
 3051 12c4 1B68     		ldr	r3, [r3, #0]
 3052 12c6 D31A     		subs	r3, r2, r3
 3053 12c8 1846     		mov	r0, r3
 3054 12ca FFF7FEFF 		bl	wrap_18000
 3055 12ce 0346     		mov	r3, r0
 3056 12d0 C3F10002 		rsb	r2, r3, #0
 3057 12d4 41F29313 		movw	r3, #4499
 3058 12d8 9A42     		cmp	r2, r3
 3059 12da CCBF     		ite	gt
 3060 12dc 0023     		movgt	r3, #0
 3061 12de 0123     		movle	r3, #1
 3062 12e0 DBB2     		uxtb	r3, r3
 3063              	.L142:
 3064              		.loc 1 727 0 discriminator 3
 3065 12e2 002B     		cmp	r3, #0
 3066 12e4 44D0     		beq	.L143
 3067              	.LBB3:
 728:../src/gps.c  ****         float temp = (target_bearing - original_target_bearing) * RADX100;
 3068              		.loc 1 728 0 is_stmt 1
 3069 12e6 264B     		ldr	r3, .L147
 3070 12e8 1A68     		ldr	r2, [r3, #0]
 3071 12ea 264B     		ldr	r3, .L147+4
 3072 12ec 1B68     		ldr	r3, [r3, #0]
 3073 12ee D31A     		subs	r3, r2, r3
 3074 12f0 1846     		mov	r0, r3
 3075 12f2 FFF7FEFF 		bl	__aeabi_i2f
 3076 12f6 0346     		mov	r3, r0
 3077 12f8 1846     		mov	r0, r3
 3078 12fa 2749     		ldr	r1, .L147+24	@ float
 3079 12fc FFF7FEFF 		bl	__aeabi_fmul
 3080 1300 0346     		mov	r3, r0
 3081 1302 7B60     		str	r3, [r7, #4]	@ float
 729:../src/gps.c  ****         crosstrack_error = sinf(temp) * (wp_distance * CROSSTRACK_GAIN); // Meters we are off track
 3082              		.loc 1 729 0
 3083 1304 7868     		ldr	r0, [r7, #4]	@ float
 3084 1306 FFF7FEFF 		bl	sinf
 3085 130a 0446     		mov	r4, r0
 3086 130c 1E4B     		ldr	r3, .L147+8
 3087 130e 1B68     		ldr	r3, [r3, #0]
 3088 1310 1846     		mov	r0, r3
 3089 1312 FFF7FEFF 		bl	__aeabi_ui2f
 3090 1316 0346     		mov	r3, r0
 3091 1318 2046     		mov	r0, r4
 3092 131a 1946     		mov	r1, r3
 3093 131c FFF7FEFF 		bl	__aeabi_fmul
 3094 1320 0346     		mov	r3, r0
 3095 1322 1846     		mov	r0, r3
 3096 1324 FFF7FEFF 		bl	__aeabi_f2iz
 3097 1328 0346     		mov	r3, r0
 3098 132a 9AB2     		uxth	r2, r3
 3099 132c 174B     		ldr	r3, .L147+12
 3100 132e 1A80     		strh	r2, [r3, #0]	@ movhi
 730:../src/gps.c  ****         nav_bearing = target_bearing + constrain(crosstrack_error, -3000, 3000);
 3101              		.loc 1 730 0
 3102 1330 164B     		ldr	r3, .L147+12
 3103 1332 1B88     		ldrh	r3, [r3, #0]
 3104 1334 1AB2     		sxth	r2, r3
 3105 1336 164B     		ldr	r3, .L147+16
 3106 1338 9A42     		cmp	r2, r3
 3107 133a 0ADB     		blt	.L144
 3108              		.loc 1 730 0 is_stmt 0 discriminator 1
 3109 133c 134B     		ldr	r3, .L147+12
 3110 133e 1B88     		ldrh	r3, [r3, #0]
 3111 1340 1AB2     		sxth	r2, r3
 3112 1342 40F6B833 		movw	r3, #3000
 3113 1346 9A42     		cmp	r2, r3
 3114 1348 B8BF     		it	lt
 3115 134a 1346     		movlt	r3, r2
 3116 134c 9BB2     		uxth	r3, r3
 3117 134e 1BB2     		sxth	r3, r3
 3118 1350 00E0     		b	.L145
 3119              	.L144:
 3120              		.loc 1 730 0 discriminator 2
 3121 1352 0F4B     		ldr	r3, .L147+16
 3122              	.L145:
 3123              		.loc 1 730 0 discriminator 3
 3124 1354 0A4A     		ldr	r2, .L147
 3125 1356 1268     		ldr	r2, [r2, #0]
 3126 1358 9A18     		adds	r2, r3, r2
 3127 135a 0E4B     		ldr	r3, .L147+20
 3128 135c 1A60     		str	r2, [r3, #0]
 731:../src/gps.c  ****         nav_bearing = wrap_36000(nav_bearing);
 3129              		.loc 1 731 0 is_stmt 1 discriminator 3
 3130 135e 0D4B     		ldr	r3, .L147+20
 3131 1360 1B68     		ldr	r3, [r3, #0]
 3132 1362 1846     		mov	r0, r3
 3133 1364 00F092F8 		bl	wrap_36000
 3134 1368 0246     		mov	r2, r0
 3135 136a 0A4B     		ldr	r3, .L147+20
 3136 136c 1A60     		str	r2, [r3, #0]
 3137 136e 03E0     		b	.L140
 3138              	.L143:
 3139              	.LBE3:
 732:../src/gps.c  ****     } else {
 733:../src/gps.c  ****         nav_bearing = target_bearing;
 3140              		.loc 1 733 0
 3141 1370 034B     		ldr	r3, .L147
 3142 1372 1A68     		ldr	r2, [r3, #0]
 3143 1374 074B     		ldr	r3, .L147+20
 3144 1376 1A60     		str	r2, [r3, #0]
 3145              	.L140:
 734:../src/gps.c  ****     }
 735:../src/gps.c  **** }
 3146              		.loc 1 735 0
 3147 1378 07F10C07 		add	r7, r7, #12
 3148 137c BD46     		mov	sp, r7
 3149 137e 90BD     		pop	{r4, r7, pc}
 3150              	.L148:
 3151              		.align	2
 3152              	.L147:
 3153 1380 C8000000 		.word	target_bearing
 3154 1384 CC000000 		.word	original_target_bearing
 3155 1388 D4000000 		.word	wp_distance
 3156 138c D0000000 		.word	crosstrack_error
 3157 1390 48F4FFFF 		.word	-3000
 3158 1394 28010000 		.word	nav_bearing
 3159 1398 D3023739 		.word	959906515
 3160              		.cfi_endproc
 3161              	.LFE50:
 3163              		.align	2
 3164              		.thumb
 3165              		.thumb_func
 3167              	GPS_calc_desired_speed:
 3168              	.LFB51:
 736:../src/gps.c  **** 
 737:../src/gps.c  **** ////////////////////////////////////////////////////////////////////////////////////
 738:../src/gps.c  **** // Determine desired speed when navigating towards a waypoint, also implement slow
 739:../src/gps.c  **** // speed rampup when starting a navigation
 740:../src/gps.c  **** //
 741:../src/gps.c  **** //      |< WP Radius
 742:../src/gps.c  **** //      0  1   2   3   4   5   6   7   8m
 743:../src/gps.c  **** //      ...|...|...|...|...|...|...|...|
 744:../src/gps.c  **** //                100  |  200     300     400cm/s
 745:../src/gps.c  **** //                 |                                        +|+
 746:../src/gps.c  **** //                 |< we should slow to 1.5 m/s as we hit the target
 747:../src/gps.c  **** //
 748:../src/gps.c  **** static int16_t GPS_calc_desired_speed(int16_t max_speed, bool _slow)
 749:../src/gps.c  **** {
 3169              		.loc 1 749 0
 3170              		.cfi_startproc
 3171              		@ args = 0, pretend = 0, frame = 8
 3172              		@ frame_needed = 1, uses_anonymous_args = 0
 3173 139c 80B5     		push	{r7, lr}
 3174              	.LCFI64:
 3175              		.cfi_def_cfa_offset 8
 3176              		.cfi_offset 7, -8
 3177              		.cfi_offset 14, -4
 3178 139e 82B0     		sub	sp, sp, #8
 3179              	.LCFI65:
 3180              		.cfi_def_cfa_offset 16
 3181 13a0 00AF     		add	r7, sp, #0
 3182              	.LCFI66:
 3183              		.cfi_def_cfa_register 7
 3184 13a2 0246     		mov	r2, r0
 3185 13a4 0B46     		mov	r3, r1
 3186 13a6 FA80     		strh	r2, [r7, #6]	@ movhi
 3187 13a8 7B71     		strb	r3, [r7, #5]
 750:../src/gps.c  ****     // max_speed is default 400 or 4m/s
 751:../src/gps.c  ****     if (_slow) {
 3188              		.loc 1 751 0
 3189 13aa 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 3190 13ac 002B     		cmp	r3, #0
 3191 13ae 0AD0     		beq	.L150
 752:../src/gps.c  ****         max_speed = min(max_speed, wp_distance / 2);
 3192              		.loc 1 752 0
 3193 13b0 204B     		ldr	r3, .L154
 3194 13b2 1B68     		ldr	r3, [r3, #0]
 3195 13b4 4FEA5302 		lsr	r2, r3, #1
 3196 13b8 B7F90630 		ldrsh	r3, [r7, #6]
 3197 13bc 9A42     		cmp	r2, r3
 3198 13be 38BF     		it	cc
 3199 13c0 1346     		movcc	r3, r2
 3200 13c2 FB80     		strh	r3, [r7, #6]	@ movhi
 3201 13c4 11E0     		b	.L151
 3202              	.L150:
 753:../src/gps.c  ****     } else {
 754:../src/gps.c  ****         max_speed = min(max_speed, wp_distance);
 3203              		.loc 1 754 0
 3204 13c6 B7F90620 		ldrsh	r2, [r7, #6]
 3205 13ca 1A4B     		ldr	r3, .L154
 3206 13cc 1B68     		ldr	r3, [r3, #0]
 3207 13ce 9A42     		cmp	r2, r3
 3208 13d0 38BF     		it	cc
 3209 13d2 1346     		movcc	r3, r2
 3210 13d4 FB80     		strh	r3, [r7, #6]	@ movhi
 755:../src/gps.c  ****         max_speed = max(max_speed, cfg.nav_speed_min);      // go at least 100cm/s
 3211              		.loc 1 755 0
 3212 13d6 184B     		ldr	r3, .L154+4
 3213 13d8 B3F89630 		ldrh	r3, [r3, #150]
 3214 13dc 1A46     		mov	r2, r3
 3215 13de B7F90630 		ldrsh	r3, [r7, #6]
 3216 13e2 9A42     		cmp	r2, r3
 3217 13e4 A8BF     		it	ge
 3218 13e6 1346     		movge	r3, r2
 3219 13e8 FB80     		strh	r3, [r7, #6]	@ movhi
 3220              	.L151:
 756:../src/gps.c  ****     }
 757:../src/gps.c  **** 
 758:../src/gps.c  ****     // limit the ramp up of the speed
 759:../src/gps.c  ****     // waypoint_speed_gov is reset to 0 at each new WP command
 760:../src/gps.c  ****     if (max_speed > waypoint_speed_gov) {
 3221              		.loc 1 760 0
 3222 13ea 144B     		ldr	r3, .L154+8
 3223 13ec 1B88     		ldrh	r3, [r3, #0]
 3224 13ee B7F90620 		ldrsh	r2, [r7, #6]
 3225 13f2 1BB2     		sxth	r3, r3
 3226 13f4 9A42     		cmp	r2, r3
 3227 13f6 16DD     		ble	.L152
 761:../src/gps.c  ****         waypoint_speed_gov += (int) (100.0f * dTnav);    // increase at .5/ms
 3228              		.loc 1 761 0
 3229 13f8 114B     		ldr	r3, .L154+12
 3230 13fa 1B68     		ldr	r3, [r3, #0]	@ float
 3231 13fc 1846     		mov	r0, r3
 3232 13fe 1149     		ldr	r1, .L154+16	@ float
 3233 1400 FFF7FEFF 		bl	__aeabi_fmul
 3234 1404 0346     		mov	r3, r0
 3235 1406 1846     		mov	r0, r3
 3236 1408 FFF7FEFF 		bl	__aeabi_f2iz
 3237 140c 0346     		mov	r3, r0
 3238 140e 9AB2     		uxth	r2, r3
 3239 1410 0A4B     		ldr	r3, .L154+8
 3240 1412 1B88     		ldrh	r3, [r3, #0]
 3241 1414 9BB2     		uxth	r3, r3
 3242 1416 D318     		adds	r3, r2, r3
 3243 1418 9BB2     		uxth	r3, r3
 3244 141a 9AB2     		uxth	r2, r3
 3245 141c 074B     		ldr	r3, .L154+8
 3246 141e 1A80     		strh	r2, [r3, #0]	@ movhi
 762:../src/gps.c  ****         max_speed = waypoint_speed_gov;
 3247              		.loc 1 762 0
 3248 1420 064B     		ldr	r3, .L154+8
 3249 1422 1B88     		ldrh	r3, [r3, #0]	@ movhi
 3250 1424 FB80     		strh	r3, [r7, #6]	@ movhi
 3251              	.L152:
 763:../src/gps.c  ****     }
 764:../src/gps.c  ****     return max_speed;
 3252              		.loc 1 764 0
 3253 1426 FB88     		ldrh	r3, [r7, #6]
 3254 1428 1BB2     		sxth	r3, r3
 765:../src/gps.c  **** }
 3255              		.loc 1 765 0
 3256 142a 1846     		mov	r0, r3
 3257 142c 07F10807 		add	r7, r7, #8
 3258 1430 BD46     		mov	sp, r7
 3259 1432 80BD     		pop	{r7, pc}
 3260              	.L155:
 3261              		.align	2
 3262              	.L154:
 3263 1434 D4000000 		.word	wp_distance
 3264 1438 00000000 		.word	cfg
 3265 143c D8000000 		.word	waypoint_speed_gov
 3266 1440 A8000000 		.word	dTnav
 3267 1444 0000C842 		.word	1120403456
 3268              		.cfi_endproc
 3269              	.LFE51:
 3271              		.align	2
 3272              		.global	wrap_18000
 3273              		.thumb
 3274              		.thumb_func
 3276              	wrap_18000:
 3277              	.LFB52:
 766:../src/gps.c  **** 
 767:../src/gps.c  **** ////////////////////////////////////////////////////////////////////////////////////
 768:../src/gps.c  **** // Utilities
 769:../src/gps.c  **** //
 770:../src/gps.c  **** int32_t wrap_18000(int32_t error)
 771:../src/gps.c  **** {
 3278              		.loc 1 771 0
 3279              		.cfi_startproc
 3280              		@ args = 0, pretend = 0, frame = 8
 3281              		@ frame_needed = 1, uses_anonymous_args = 0
 3282              		@ link register save eliminated.
 3283 1448 80B4     		push	{r7}
 3284              	.LCFI67:
 3285              		.cfi_def_cfa_offset 4
 3286              		.cfi_offset 7, -4
 3287 144a 83B0     		sub	sp, sp, #12
 3288              	.LCFI68:
 3289              		.cfi_def_cfa_offset 16
 3290 144c 00AF     		add	r7, sp, #0
 3291              	.LCFI69:
 3292              		.cfi_def_cfa_register 7
 3293 144e 7860     		str	r0, [r7, #4]
 772:../src/gps.c  ****     if (error > 18000)
 3294              		.loc 1 772 0
 3295 1450 7A68     		ldr	r2, [r7, #4]
 3296 1452 44F25063 		movw	r3, #18000
 3297 1456 9A42     		cmp	r2, r3
 3298 1458 05DD     		ble	.L157
 773:../src/gps.c  ****         error -= 36000;
 3299              		.loc 1 773 0
 3300 145a 7B68     		ldr	r3, [r7, #4]
 3301 145c A3F50C43 		sub	r3, r3, #35840
 3302 1460 A3F1A003 		sub	r3, r3, #160
 3303 1464 7B60     		str	r3, [r7, #4]
 3304              	.L157:
 774:../src/gps.c  ****     if (error < -18000)
 3305              		.loc 1 774 0
 3306 1466 7A68     		ldr	r2, [r7, #4]
 3307 1468 074B     		ldr	r3, .L160
 3308 146a 9A42     		cmp	r2, r3
 3309 146c 05DA     		bge	.L158
 775:../src/gps.c  ****         error += 36000;
 3310              		.loc 1 775 0
 3311 146e 7B68     		ldr	r3, [r7, #4]
 3312 1470 03F50C43 		add	r3, r3, #35840
 3313 1474 03F1A003 		add	r3, r3, #160
 3314 1478 7B60     		str	r3, [r7, #4]
 3315              	.L158:
 776:../src/gps.c  ****     return error;
 3316              		.loc 1 776 0
 3317 147a 7B68     		ldr	r3, [r7, #4]
 777:../src/gps.c  **** }
 3318              		.loc 1 777 0
 3319 147c 1846     		mov	r0, r3
 3320 147e 07F10C07 		add	r7, r7, #12
 3321 1482 BD46     		mov	sp, r7
 3322 1484 80BC     		pop	{r7}
 3323 1486 7047     		bx	lr
 3324              	.L161:
 3325              		.align	2
 3326              	.L160:
 3327 1488 B0B9FFFF 		.word	-18000
 3328              		.cfi_endproc
 3329              	.LFE52:
 3331              		.align	2
 3332              		.thumb
 3333              		.thumb_func
 3335              	wrap_36000:
 3336              	.LFB53:
 778:../src/gps.c  **** 
 779:../src/gps.c  **** static int32_t wrap_36000(int32_t angle)
 780:../src/gps.c  **** {
 3337              		.loc 1 780 0
 3338              		.cfi_startproc
 3339              		@ args = 0, pretend = 0, frame = 8
 3340              		@ frame_needed = 1, uses_anonymous_args = 0
 3341              		@ link register save eliminated.
 3342 148c 80B4     		push	{r7}
 3343              	.LCFI70:
 3344              		.cfi_def_cfa_offset 4
 3345              		.cfi_offset 7, -4
 3346 148e 83B0     		sub	sp, sp, #12
 3347              	.LCFI71:
 3348              		.cfi_def_cfa_offset 16
 3349 1490 00AF     		add	r7, sp, #0
 3350              	.LCFI72:
 3351              		.cfi_def_cfa_register 7
 3352 1492 7860     		str	r0, [r7, #4]
 781:../src/gps.c  ****     if (angle > 36000)
 3353              		.loc 1 781 0
 3354 1494 7A68     		ldr	r2, [r7, #4]
 3355 1496 48F6A043 		movw	r3, #36000
 3356 149a 9A42     		cmp	r2, r3
 3357 149c 05DD     		ble	.L163
 782:../src/gps.c  ****         angle -= 36000;
 3358              		.loc 1 782 0
 3359 149e 7B68     		ldr	r3, [r7, #4]
 3360 14a0 A3F50C43 		sub	r3, r3, #35840
 3361 14a4 A3F1A003 		sub	r3, r3, #160
 3362 14a8 7B60     		str	r3, [r7, #4]
 3363              	.L163:
 783:../src/gps.c  ****     if (angle < 0)
 3364              		.loc 1 783 0
 3365 14aa 7B68     		ldr	r3, [r7, #4]
 3366 14ac 002B     		cmp	r3, #0
 3367 14ae 05DA     		bge	.L164
 784:../src/gps.c  ****         angle += 36000;
 3368              		.loc 1 784 0
 3369 14b0 7B68     		ldr	r3, [r7, #4]
 3370 14b2 03F50C43 		add	r3, r3, #35840
 3371 14b6 03F1A003 		add	r3, r3, #160
 3372 14ba 7B60     		str	r3, [r7, #4]
 3373              	.L164:
 785:../src/gps.c  ****     return angle;
 3374              		.loc 1 785 0
 3375 14bc 7B68     		ldr	r3, [r7, #4]
 786:../src/gps.c  **** }
 3376              		.loc 1 786 0
 3377 14be 1846     		mov	r0, r3
 3378 14c0 07F10C07 		add	r7, r7, #12
 3379 14c4 BD46     		mov	sp, r7
 3380 14c6 80BC     		pop	{r7}
 3381 14c8 7047     		bx	lr
 3382              		.cfi_endproc
 3383              	.LFE53:
 3385 14ca 00BF     		.align	2
 3386              		.global	GPS_coord_to_degrees
 3387              		.thumb
 3388              		.thumb_func
 3390              	GPS_coord_to_degrees:
 3391              	.LFB54:
 787:../src/gps.c  **** 
 788:../src/gps.c  **** // This code is used for parsing NMEA data
 789:../src/gps.c  **** 
 790:../src/gps.c  **** /* Alex optimization
 791:../src/gps.c  ****   The latitude or longitude is coded this way in NMEA frames
 792:../src/gps.c  ****   dm.f   coded as degrees + minutes + minute decimal
 793:../src/gps.c  ****   Where:
 794:../src/gps.c  ****     - d can be 1 or more char long. generally: 2 char long for latitude, 3 char long for longitude
 795:../src/gps.c  ****     - m is always 2 char long
 796:../src/gps.c  ****     - f can be 1 or more char long
 797:../src/gps.c  ****   This function converts this format in a unique unsigned long where 1 degree = 10 000 000
 798:../src/gps.c  **** 
 799:../src/gps.c  ****   EOS increased the precision here, even if we think that the gps is not precise enough, with 10e5 
 800:../src/gps.c  ****   with 10e7 it's around 1 cm now. Increasing it further is irrelevant, since even 1cm resolution is
 801:../src/gps.c  ****   resolution also increased precision of nav calculations
 802:../src/gps.c  **** static uint32_t GPS_coord_to_degrees(char *s)
 803:../src/gps.c  **** {
 804:../src/gps.c  ****     char *p = s, *d = s;
 805:../src/gps.c  ****     uint8_t min, deg = 0;
 806:../src/gps.c  ****     uint16_t frac = 0, mult = 10000;
 807:../src/gps.c  **** 
 808:../src/gps.c  ****     while (*p) {                // parse the string until its end
 809:../src/gps.c  ****         if (d != s) {
 810:../src/gps.c  ****             frac += (*p - '0') * mult;  // calculate only fractional part on up to 5 digits  (d != 
 811:../src/gps.c  ****             mult /= 10;
 812:../src/gps.c  ****         }
 813:../src/gps.c  ****         if (*p == '.')
 814:../src/gps.c  ****             d = p;              // locate '.' char in the string
 815:../src/gps.c  ****         p++;
 816:../src/gps.c  ****     }
 817:../src/gps.c  ****     if (p == s)
 818:../src/gps.c  ****         return 0;
 819:../src/gps.c  ****     while (s < d - 2) {
 820:../src/gps.c  ****         deg *= 10;              // convert degrees : all chars before minutes ; for the first itera
 821:../src/gps.c  ****         deg += *(s++) - '0';
 822:../src/gps.c  ****     }
 823:../src/gps.c  ****     min = *(d - 1) - '0' + (*(d - 2) - '0') * 10;       // convert minutes : 2 previous char before
 824:../src/gps.c  ****     return deg * 10000000UL + (min * 100000UL + frac) * 10UL / 6;
 825:../src/gps.c  **** }
 826:../src/gps.c  **** */
 827:../src/gps.c  **** 
 828:../src/gps.c  **** #define DIGIT_TO_VAL(_x)    (_x - '0')
 829:../src/gps.c  **** uint32_t GPS_coord_to_degrees(char* s)
 830:../src/gps.c  **** {
 3392              		.loc 1 830 0
 3393              		.cfi_startproc
 3394              		@ args = 0, pretend = 0, frame = 32
 3395              		@ frame_needed = 1, uses_anonymous_args = 0
 3396              		@ link register save eliminated.
 3397 14cc 80B4     		push	{r7}
 3398              	.LCFI73:
 3399              		.cfi_def_cfa_offset 4
 3400              		.cfi_offset 7, -4
 3401 14ce 89B0     		sub	sp, sp, #36
 3402              	.LCFI74:
 3403              		.cfi_def_cfa_offset 40
 3404 14d0 00AF     		add	r7, sp, #0
 3405              	.LCFI75:
 3406              		.cfi_def_cfa_register 7
 3407 14d2 7860     		str	r0, [r7, #4]
 831:../src/gps.c  ****     char *p, *q;
 832:../src/gps.c  ****     uint8_t deg = 0, min = 0;
 3408              		.loc 1 832 0
 3409 14d4 4FF00003 		mov	r3, #0
 3410 14d8 FB75     		strb	r3, [r7, #23]
 3411 14da 4FF00003 		mov	r3, #0
 3412 14de BB75     		strb	r3, [r7, #22]
 833:../src/gps.c  ****     unsigned int frac_min = 0;
 3413              		.loc 1 833 0
 3414 14e0 4FF00003 		mov	r3, #0
 3415 14e4 3B61     		str	r3, [r7, #16]
 834:../src/gps.c  ****     int i;
 835:../src/gps.c  **** 
 836:../src/gps.c  ****     // scan for decimal point or end of field
 837:../src/gps.c  ****     for (p = s; isdigit(*p); p++)
 3416              		.loc 1 837 0
 3417 14e6 7B68     		ldr	r3, [r7, #4]
 3418 14e8 FB61     		str	r3, [r7, #28]
 3419 14ea 03E0     		b	.L167
 3420              	.L168:
 3421              		.loc 1 837 0 is_stmt 0 discriminator 2
 3422 14ec FB69     		ldr	r3, [r7, #28]
 3423 14ee 03F10103 		add	r3, r3, #1
 3424 14f2 FB61     		str	r3, [r7, #28]
 3425              	.L167:
 3426              		.loc 1 837 0 discriminator 1
 3427 14f4 494B     		ldr	r3, .L180
 3428 14f6 1A68     		ldr	r2, [r3, #0]
 3429 14f8 FB69     		ldr	r3, [r7, #28]
 3430 14fa 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3431 14fc 03F10103 		add	r3, r3, #1
 3432 1500 D318     		adds	r3, r2, r3
 3433 1502 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3434 1504 03F00403 		and	r3, r3, #4
 3435 1508 002B     		cmp	r3, #0
 3436 150a EFD1     		bne	.L168
 838:../src/gps.c  ****         ;
 839:../src/gps.c  ****     q = s;
 3437              		.loc 1 839 0 is_stmt 1
 3438 150c 7B68     		ldr	r3, [r7, #4]
 3439 150e BB61     		str	r3, [r7, #24]
 840:../src/gps.c  **** 
 841:../src/gps.c  ****     // convert degrees
 842:../src/gps.c  ****     while ((p - q) > 2) {
 3440              		.loc 1 842 0
 3441 1510 16E0     		b	.L169
 3442              	.L171:
 843:../src/gps.c  ****         if (deg)
 3443              		.loc 1 843 0
 3444 1512 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 3445 1514 002B     		cmp	r3, #0
 3446 1516 07D0     		beq	.L170
 844:../src/gps.c  ****             deg *= 10;
 3447              		.loc 1 844 0
 3448 1518 FB7D     		ldrb	r3, [r7, #23]
 3449 151a 1A46     		mov	r2, r3
 3450 151c 4FEA8202 		lsl	r2, r2, #2
 3451 1520 D318     		adds	r3, r2, r3
 3452 1522 4FEA4303 		lsl	r3, r3, #1
 3453 1526 FB75     		strb	r3, [r7, #23]
 3454              	.L170:
 845:../src/gps.c  ****         deg += DIGIT_TO_VAL(*q++);
 3455              		.loc 1 845 0
 3456 1528 BB69     		ldr	r3, [r7, #24]
 3457 152a 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 3458 152c FB7D     		ldrb	r3, [r7, #23]
 3459 152e D318     		adds	r3, r2, r3
 3460 1530 DBB2     		uxtb	r3, r3
 3461 1532 A3F13003 		sub	r3, r3, #48
 3462 1536 FB75     		strb	r3, [r7, #23]
 3463 1538 BB69     		ldr	r3, [r7, #24]
 3464 153a 03F10103 		add	r3, r3, #1
 3465 153e BB61     		str	r3, [r7, #24]
 3466              	.L169:
 842:../src/gps.c  ****     while ((p - q) > 2) {
 3467              		.loc 1 842 0 discriminator 1
 3468 1540 FA69     		ldr	r2, [r7, #28]
 3469 1542 BB69     		ldr	r3, [r7, #24]
 3470 1544 D31A     		subs	r3, r2, r3
 3471 1546 022B     		cmp	r3, #2
 3472 1548 E3DC     		bgt	.L171
 846:../src/gps.c  ****     }
 847:../src/gps.c  ****     // convert minutes
 848:../src/gps.c  ****     while (p > q) {
 3473              		.loc 1 848 0
 3474 154a 16E0     		b	.L172
 3475              	.L174:
 849:../src/gps.c  ****         if (min)
 3476              		.loc 1 849 0
 3477 154c BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 3478 154e 002B     		cmp	r3, #0
 3479 1550 07D0     		beq	.L173
 850:../src/gps.c  ****             min *= 10;
 3480              		.loc 1 850 0
 3481 1552 BB7D     		ldrb	r3, [r7, #22]
 3482 1554 1A46     		mov	r2, r3
 3483 1556 4FEA8202 		lsl	r2, r2, #2
 3484 155a D318     		adds	r3, r2, r3
 3485 155c 4FEA4303 		lsl	r3, r3, #1
 3486 1560 BB75     		strb	r3, [r7, #22]
 3487              	.L173:
 851:../src/gps.c  ****         min += DIGIT_TO_VAL(*q++);
 3488              		.loc 1 851 0
 3489 1562 BB69     		ldr	r3, [r7, #24]
 3490 1564 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 3491 1566 BB7D     		ldrb	r3, [r7, #22]
 3492 1568 D318     		adds	r3, r2, r3
 3493 156a DBB2     		uxtb	r3, r3
 3494 156c A3F13003 		sub	r3, r3, #48
 3495 1570 BB75     		strb	r3, [r7, #22]
 3496 1572 BB69     		ldr	r3, [r7, #24]
 3497 1574 03F10103 		add	r3, r3, #1
 3498 1578 BB61     		str	r3, [r7, #24]
 3499              	.L172:
 848:../src/gps.c  ****     while (p > q) {
 3500              		.loc 1 848 0 discriminator 1
 3501 157a FA69     		ldr	r2, [r7, #28]
 3502 157c BB69     		ldr	r3, [r7, #24]
 3503 157e 9A42     		cmp	r2, r3
 3504 1580 E4D8     		bhi	.L174
 852:../src/gps.c  ****     }
 853:../src/gps.c  ****     // convert fractional minutes
 854:../src/gps.c  ****     // expect up to four digits, result is in
 855:../src/gps.c  ****     // ten-thousandths of a minute
 856:../src/gps.c  ****     if (*p == '.') {
 3505              		.loc 1 856 0
 3506 1582 FB69     		ldr	r3, [r7, #28]
 3507 1584 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3508 1586 2E2B     		cmp	r3, #46
 3509 1588 2ED1     		bne	.L175
 857:../src/gps.c  ****         q = p + 1;
 3510              		.loc 1 857 0
 3511 158a FB69     		ldr	r3, [r7, #28]
 3512 158c 03F10103 		add	r3, r3, #1
 3513 1590 BB61     		str	r3, [r7, #24]
 858:../src/gps.c  ****         for (i = 0; i < 4; i++) {
 3514              		.loc 1 858 0
 3515 1592 4FF00003 		mov	r3, #0
 3516 1596 FB60     		str	r3, [r7, #12]
 3517 1598 23E0     		b	.L176
 3518              	.L178:
 859:../src/gps.c  ****             frac_min *= 10;
 3519              		.loc 1 859 0
 3520 159a 3A69     		ldr	r2, [r7, #16]
 3521 159c 1346     		mov	r3, r2
 3522 159e 4FEA8303 		lsl	r3, r3, #2
 3523 15a2 9B18     		adds	r3, r3, r2
 3524 15a4 4FEA4303 		lsl	r3, r3, #1
 3525 15a8 3B61     		str	r3, [r7, #16]
 860:../src/gps.c  ****             if (isdigit(*q))
 3526              		.loc 1 860 0
 3527 15aa 1C4B     		ldr	r3, .L180
 3528 15ac 1A68     		ldr	r2, [r3, #0]
 3529 15ae BB69     		ldr	r3, [r7, #24]
 3530 15b0 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3531 15b2 03F10103 		add	r3, r3, #1
 3532 15b6 D318     		adds	r3, r2, r3
 3533 15b8 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3534 15ba 03F00403 		and	r3, r3, #4
 3535 15be 002B     		cmp	r3, #0
 3536 15c0 0BD0     		beq	.L177
 861:../src/gps.c  ****                 frac_min += *q++ - '0';
 3537              		.loc 1 861 0
 3538 15c2 BB69     		ldr	r3, [r7, #24]
 3539 15c4 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3540 15c6 1A46     		mov	r2, r3
 3541 15c8 3B69     		ldr	r3, [r7, #16]
 3542 15ca D318     		adds	r3, r2, r3
 3543 15cc A3F13003 		sub	r3, r3, #48
 3544 15d0 3B61     		str	r3, [r7, #16]
 3545 15d2 BB69     		ldr	r3, [r7, #24]
 3546 15d4 03F10103 		add	r3, r3, #1
 3547 15d8 BB61     		str	r3, [r7, #24]
 3548              	.L177:
 858:../src/gps.c  ****         for (i = 0; i < 4; i++) {
 3549              		.loc 1 858 0
 3550 15da FB68     		ldr	r3, [r7, #12]
 3551 15dc 03F10103 		add	r3, r3, #1
 3552 15e0 FB60     		str	r3, [r7, #12]
 3553              	.L176:
 858:../src/gps.c  ****         for (i = 0; i < 4; i++) {
 3554              		.loc 1 858 0 is_stmt 0 discriminator 1
 3555 15e2 FB68     		ldr	r3, [r7, #12]
 3556 15e4 032B     		cmp	r3, #3
 3557 15e6 D8DD     		ble	.L178
 3558              	.L175:
 862:../src/gps.c  ****         }
 863:../src/gps.c  ****     }
 864:../src/gps.c  ****     return deg * 10000000UL + (min * 1000000UL + frac_min * 100UL) / 6;
 3559              		.loc 1 864 0 is_stmt 1
 3560 15e8 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 3561 15ea 0D4A     		ldr	r2, .L180+4
 3562 15ec 02FB03F2 		mul	r2, r2, r3
 3563 15f0 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 3564 15f2 0C49     		ldr	r1, .L180+8
 3565 15f4 01FB03F1 		mul	r1, r1, r3
 3566 15f8 3B69     		ldr	r3, [r7, #16]
 3567 15fa 4FF06400 		mov	r0, #100
 3568 15fe 00FB03F3 		mul	r3, r0, r3
 3569 1602 C918     		adds	r1, r1, r3
 3570 1604 084B     		ldr	r3, .L180+12
 3571 1606 A3FB0103 		umull	r0, r3, r3, r1
 3572 160a 4FEA9303 		lsr	r3, r3, #2
 3573 160e D318     		adds	r3, r2, r3
 865:../src/gps.c  **** }
 3574              		.loc 1 865 0
 3575 1610 1846     		mov	r0, r3
 3576 1612 07F12407 		add	r7, r7, #36
 3577 1616 BD46     		mov	sp, r7
 3578 1618 80BC     		pop	{r7}
 3579 161a 7047     		bx	lr
 3580              	.L181:
 3581              		.align	2
 3582              	.L180:
 3583 161c 00000000 		.word	__ctype_ptr__
 3584 1620 80969800 		.word	10000000
 3585 1624 40420F00 		.word	1000000
 3586 1628 ABAAAAAA 		.word	-1431655765
 3587              		.cfi_endproc
 3588              	.LFE54:
 3590              		.align	2
 3591              		.thumb
 3592              		.thumb_func
 3594              	grab_fields:
 3595              	.LFB55:
 866:../src/gps.c  **** 
 867:../src/gps.c  **** // helper functions
 868:../src/gps.c  **** static uint32_t grab_fields(char *src, uint8_t mult)
 869:../src/gps.c  **** {                               // convert string to uint32
 3596              		.loc 1 869 0
 3597              		.cfi_startproc
 3598              		@ args = 0, pretend = 0, frame = 16
 3599              		@ frame_needed = 1, uses_anonymous_args = 0
 3600              		@ link register save eliminated.
 3601 162c 80B4     		push	{r7}
 3602              	.LCFI76:
 3603              		.cfi_def_cfa_offset 4
 3604              		.cfi_offset 7, -4
 3605 162e 85B0     		sub	sp, sp, #20
 3606              	.LCFI77:
 3607              		.cfi_def_cfa_offset 24
 3608 1630 00AF     		add	r7, sp, #0
 3609              	.LCFI78:
 3610              		.cfi_def_cfa_register 7
 3611 1632 7860     		str	r0, [r7, #4]
 3612 1634 0B46     		mov	r3, r1
 3613 1636 FB70     		strb	r3, [r7, #3]
 870:../src/gps.c  ****     uint32_t i;
 871:../src/gps.c  ****     uint32_t tmp = 0;
 3614              		.loc 1 871 0
 3615 1638 4FF00003 		mov	r3, #0
 3616 163c BB60     		str	r3, [r7, #8]
 872:../src/gps.c  ****     for (i = 0; src[i] != 0; i++) {
 3617              		.loc 1 872 0
 3618 163e 4FF00003 		mov	r3, #0
 3619 1642 FB60     		str	r3, [r7, #12]
 3620 1644 36E0     		b	.L183
 3621              	.L188:
 873:../src/gps.c  ****         if (src[i] == '.') {
 3622              		.loc 1 873 0
 3623 1646 7A68     		ldr	r2, [r7, #4]
 3624 1648 FB68     		ldr	r3, [r7, #12]
 3625 164a D318     		adds	r3, r2, r3
 3626 164c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3627 164e 2E2B     		cmp	r3, #46
 3628 1650 0ED1     		bne	.L184
 874:../src/gps.c  ****             i++;
 3629              		.loc 1 874 0
 3630 1652 FB68     		ldr	r3, [r7, #12]
 3631 1654 03F10103 		add	r3, r3, #1
 3632 1658 FB60     		str	r3, [r7, #12]
 875:../src/gps.c  ****             if (mult == 0)
 3633              		.loc 1 875 0
 3634 165a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3635 165c 002B     		cmp	r3, #0
 3636 165e 30D0     		beq	.L190
 3637              	.L185:
 876:../src/gps.c  ****                 break;
 877:../src/gps.c  ****             else
 878:../src/gps.c  ****                 src[i + mult] = 0;
 3638              		.loc 1 878 0
 3639 1660 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 3640 1662 FB68     		ldr	r3, [r7, #12]
 3641 1664 D318     		adds	r3, r2, r3
 3642 1666 7A68     		ldr	r2, [r7, #4]
 3643 1668 D318     		adds	r3, r2, r3
 3644 166a 4FF00002 		mov	r2, #0
 3645 166e 1A70     		strb	r2, [r3, #0]
 3646              	.L184:
 879:../src/gps.c  ****         }
 880:../src/gps.c  ****         tmp *= 10;
 3647              		.loc 1 880 0
 3648 1670 BA68     		ldr	r2, [r7, #8]
 3649 1672 1346     		mov	r3, r2
 3650 1674 4FEA8303 		lsl	r3, r3, #2
 3651 1678 9B18     		adds	r3, r3, r2
 3652 167a 4FEA4303 		lsl	r3, r3, #1
 3653 167e BB60     		str	r3, [r7, #8]
 881:../src/gps.c  ****         if (src[i] >= '0' && src[i] <= '9')
 3654              		.loc 1 881 0
 3655 1680 7A68     		ldr	r2, [r7, #4]
 3656 1682 FB68     		ldr	r3, [r7, #12]
 3657 1684 D318     		adds	r3, r2, r3
 3658 1686 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3659 1688 2F2B     		cmp	r3, #47
 3660 168a 0FD9     		bls	.L187
 3661              		.loc 1 881 0 is_stmt 0 discriminator 1
 3662 168c 7A68     		ldr	r2, [r7, #4]
 3663 168e FB68     		ldr	r3, [r7, #12]
 3664 1690 D318     		adds	r3, r2, r3
 3665 1692 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3666 1694 392B     		cmp	r3, #57
 3667 1696 09D8     		bhi	.L187
 882:../src/gps.c  ****             tmp += src[i] - '0';
 3668              		.loc 1 882 0 is_stmt 1
 3669 1698 7A68     		ldr	r2, [r7, #4]
 3670 169a FB68     		ldr	r3, [r7, #12]
 3671 169c D318     		adds	r3, r2, r3
 3672 169e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3673 16a0 1A46     		mov	r2, r3
 3674 16a2 BB68     		ldr	r3, [r7, #8]
 3675 16a4 D318     		adds	r3, r2, r3
 3676 16a6 A3F13003 		sub	r3, r3, #48
 3677 16aa BB60     		str	r3, [r7, #8]
 3678              	.L187:
 872:../src/gps.c  ****     for (i = 0; src[i] != 0; i++) {
 3679              		.loc 1 872 0
 3680 16ac FB68     		ldr	r3, [r7, #12]
 3681 16ae 03F10103 		add	r3, r3, #1
 3682 16b2 FB60     		str	r3, [r7, #12]
 3683              	.L183:
 872:../src/gps.c  ****     for (i = 0; src[i] != 0; i++) {
 3684              		.loc 1 872 0 is_stmt 0 discriminator 1
 3685 16b4 7A68     		ldr	r2, [r7, #4]
 3686 16b6 FB68     		ldr	r3, [r7, #12]
 3687 16b8 D318     		adds	r3, r2, r3
 3688 16ba 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3689 16bc 002B     		cmp	r3, #0
 3690 16be C2D1     		bne	.L188
 3691 16c0 00E0     		b	.L186
 3692              	.L190:
 876:../src/gps.c  ****                 break;
 3693              		.loc 1 876 0 is_stmt 1
 3694 16c2 00BF     		nop
 3695              	.L186:
 883:../src/gps.c  ****     }
 884:../src/gps.c  ****     return tmp;
 3696              		.loc 1 884 0
 3697 16c4 BB68     		ldr	r3, [r7, #8]
 885:../src/gps.c  **** }
 3698              		.loc 1 885 0
 3699 16c6 1846     		mov	r0, r3
 3700 16c8 07F11407 		add	r7, r7, #20
 3701 16cc BD46     		mov	sp, r7
 3702 16ce 80BC     		pop	{r7}
 3703 16d0 7047     		bx	lr
 3704              		.cfi_endproc
 3705              	.LFE55:
 3707 16d2 00BF     		.align	2
 3708              		.thumb
 3709              		.thumb_func
 3711              	hex_c:
 3712              	.LFB56:
 886:../src/gps.c  **** 
 887:../src/gps.c  **** static uint8_t hex_c(uint8_t n)
 888:../src/gps.c  **** {                               // convert '0'..'9','A'..'F' to 0..15
 3713              		.loc 1 888 0
 3714              		.cfi_startproc
 3715              		@ args = 0, pretend = 0, frame = 8
 3716              		@ frame_needed = 1, uses_anonymous_args = 0
 3717              		@ link register save eliminated.
 3718 16d4 80B4     		push	{r7}
 3719              	.LCFI79:
 3720              		.cfi_def_cfa_offset 4
 3721              		.cfi_offset 7, -4
 3722 16d6 83B0     		sub	sp, sp, #12
 3723              	.LCFI80:
 3724              		.cfi_def_cfa_offset 16
 3725 16d8 00AF     		add	r7, sp, #0
 3726              	.LCFI81:
 3727              		.cfi_def_cfa_register 7
 3728 16da 0346     		mov	r3, r0
 3729 16dc FB71     		strb	r3, [r7, #7]
 889:../src/gps.c  ****     n -= '0';
 3730              		.loc 1 889 0
 3731 16de FB79     		ldrb	r3, [r7, #7]
 3732 16e0 A3F13003 		sub	r3, r3, #48
 3733 16e4 FB71     		strb	r3, [r7, #7]
 890:../src/gps.c  ****     if (n > 9)
 3734              		.loc 1 890 0
 3735 16e6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3736 16e8 092B     		cmp	r3, #9
 3737 16ea 03D9     		bls	.L192
 891:../src/gps.c  ****         n -= 7;
 3738              		.loc 1 891 0
 3739 16ec FB79     		ldrb	r3, [r7, #7]
 3740 16ee A3F10703 		sub	r3, r3, #7
 3741 16f2 FB71     		strb	r3, [r7, #7]
 3742              	.L192:
 892:../src/gps.c  ****     n &= 0x0F;
 3743              		.loc 1 892 0
 3744 16f4 FB79     		ldrb	r3, [r7, #7]
 3745 16f6 03F00F03 		and	r3, r3, #15
 3746 16fa FB71     		strb	r3, [r7, #7]
 893:../src/gps.c  ****     return n;
 3747              		.loc 1 893 0
 3748 16fc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 894:../src/gps.c  **** }
 3749              		.loc 1 894 0
 3750 16fe 1846     		mov	r0, r3
 3751 1700 07F10C07 		add	r7, r7, #12
 3752 1704 BD46     		mov	sp, r7
 3753 1706 80BC     		pop	{r7}
 3754 1708 7047     		bx	lr
 3755              		.cfi_endproc
 3756              	.LFE56:
 3758 170a 00BF     		.align	2
 3759              		.thumb
 3760              		.thumb_func
 3762              	GPS_newFrame:
 3763              	.LFB57:
 895:../src/gps.c  **** 
 896:../src/gps.c  **** static bool GPS_newFrame(char c)
 897:../src/gps.c  **** {
 3764              		.loc 1 897 0
 3765              		.cfi_startproc
 3766              		@ args = 0, pretend = 0, frame = 8
 3767              		@ frame_needed = 1, uses_anonymous_args = 0
 3768 170c 80B5     		push	{r7, lr}
 3769              	.LCFI82:
 3770              		.cfi_def_cfa_offset 8
 3771              		.cfi_offset 7, -8
 3772              		.cfi_offset 14, -4
 3773 170e 82B0     		sub	sp, sp, #8
 3774              	.LCFI83:
 3775              		.cfi_def_cfa_offset 16
 3776 1710 00AF     		add	r7, sp, #0
 3777              	.LCFI84:
 3778              		.cfi_def_cfa_register 7
 3779 1712 0346     		mov	r3, r0
 3780 1714 FB71     		strb	r3, [r7, #7]
 898:../src/gps.c  ****     switch (mcfg.gps_type) {
 3781              		.loc 1 898 0
 3782 1716 144B     		ldr	r3, .L201
 3783 1718 93F80F31 		ldrb	r3, [r3, #271]	@ zero_extendqisi2
 3784 171c 032B     		cmp	r3, #3
 3785 171e 1BD8     		bhi	.L195
 3786 1720 01A2     		adr	r2, .L199
 3787 1722 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 3788 1726 00BF     		.align	2
 3789              	.L199:
 3790 1728 39170000 		.word	.L196+1
 3791 172c 45170000 		.word	.L197+1
 3792 1730 39170000 		.word	.L196+1
 3793 1734 51170000 		.word	.L198+1
 3794              	.L196:
 899:../src/gps.c  ****         case GPS_NMEA: // NMEA
 900:../src/gps.c  ****         case GPS_MTK: // MTK outputs NMEA too
 901:../src/gps.c  ****             return GPS_NMEA_newFrame(c);
 3795              		.loc 1 901 0
 3796 1738 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3797 173a 1846     		mov	r0, r3
 3798 173c 00F07CF8 		bl	GPS_NMEA_newFrame
 3799 1740 0346     		mov	r3, r0
 3800 1742 0BE0     		b	.L200
 3801              	.L197:
 902:../src/gps.c  ****         case GPS_UBLOX: // UBX
 903:../src/gps.c  ****             return GPS_UBLOX_newFrame(c);
 3802              		.loc 1 903 0
 3803 1744 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3804 1746 1846     		mov	r0, r3
 3805 1748 00F03AFA 		bl	GPS_UBLOX_newFrame
 3806 174c 0346     		mov	r3, r0
 3807 174e 05E0     		b	.L200
 3808              	.L198:
 904:../src/gps.c  ****         case GPS_I2C:
 905:../src/gps.c  ****         	return GPS_I2C_newFrame();
 3809              		.loc 1 905 0
 3810 1750 00F00CF8 		bl	GPS_I2C_newFrame
 3811 1754 0346     		mov	r3, r0
 3812 1756 01E0     		b	.L200
 3813              	.L195:
 906:../src/gps.c  ****     }
 907:../src/gps.c  **** 
 908:../src/gps.c  ****     return false;
 3814              		.loc 1 908 0
 3815 1758 4FF00003 		mov	r3, #0
 3816              	.L200:
 909:../src/gps.c  **** }
 3817              		.loc 1 909 0
 3818 175c 1846     		mov	r0, r3
 3819 175e 07F10807 		add	r7, r7, #8
 3820 1762 BD46     		mov	sp, r7
 3821 1764 80BD     		pop	{r7, pc}
 3822              	.L202:
 3823 1766 00BF     		.align	2
 3824              	.L201:
 3825 1768 00000000 		.word	mcfg
 3826              		.cfi_endproc
 3827              	.LFE57:
 3829              		.align	2
 3830              		.thumb
 3831              		.thumb_func
 3833              	GPS_I2C_newFrame:
 3834              	.LFB58:
 910:../src/gps.c  **** 
 911:../src/gps.c  **** /* This is a light implementation of a GPS frame decoding
 912:../src/gps.c  ****    This should work with most of modern GPS devices configured to output NMEA frames.
 913:../src/gps.c  ****    It assumes there are some NMEA GGA frames to decode on the serial bus
 914:../src/gps.c  ****    Here we use only the following data :
 915:../src/gps.c  ****      - latitude
 916:../src/gps.c  ****      - longitude
 917:../src/gps.c  ****      - GPS fix is/is not ok
 918:../src/gps.c  ****      - GPS num sat (4 is enough to be +/- reliable)
 919:../src/gps.c  ****      // added by Mis
 920:../src/gps.c  ****      - GPS altitude (for OSD displaying)
 921:../src/gps.c  ****      - GPS speed (for OSD displaying)
 922:../src/gps.c  **** */
 923:../src/gps.c  **** #define FRAME_GGA  1
 924:../src/gps.c  **** #define FRAME_RMC  2
 925:../src/gps.c  **** 
 926:../src/gps.c  **** static bool GPS_I2C_newFrame()
 927:../src/gps.c  **** {
 3835              		.loc 1 927 0
 3836              		.cfi_startproc
 3837              		@ args = 0, pretend = 0, frame = 16
 3838              		@ frame_needed = 1, uses_anonymous_args = 0
 3839 176c 80B5     		push	{r7, lr}
 3840              	.LCFI85:
 3841              		.cfi_def_cfa_offset 8
 3842              		.cfi_offset 7, -8
 3843              		.cfi_offset 14, -4
 3844 176e 84B0     		sub	sp, sp, #16
 3845              	.LCFI86:
 3846              		.cfi_def_cfa_offset 24
 3847 1770 00AF     		add	r7, sp, #0
 3848              	.LCFI87:
 3849              		.cfi_def_cfa_register 7
 928:../src/gps.c  **** 	uint8_t stat=0xFF;
 3850              		.loc 1 928 0
 3851 1772 4FF0FF03 		mov	r3, #255
 3852 1776 FB73     		strb	r3, [r7, #15]
 929:../src/gps.c  **** 
 930:../src/gps.c  ****     union gpsloc {
 931:../src/gps.c  **** 		uint8_t buffer[8];
 932:../src/gps.c  **** 		struct {
 933:../src/gps.c  **** 			int32_t lat;
 934:../src/gps.c  **** 			int32_t lon;
 935:../src/gps.c  **** 		} loc;
 936:../src/gps.c  ****     } gps;
 937:../src/gps.c  **** 
 938:../src/gps.c  **** 	i2cRead(NAVIGATRON_I2C_ADDR, I2C_GPS_LOCATION, 8, (uint8_t*)&gps.buffer);
 3853              		.loc 1 938 0
 3854 1778 07F10403 		add	r3, r7, #4
 3855 177c 4FF02000 		mov	r0, #32
 3856 1780 4FF00701 		mov	r1, #7
 3857 1784 4FF00802 		mov	r2, #8
 3858 1788 FFF7FEFF 		bl	i2cRead
 939:../src/gps.c  ****     GPS_coord[LAT] = gps.loc.lat;
 3859              		.loc 1 939 0
 3860 178c 7A68     		ldr	r2, [r7, #4]
 3861 178e 244B     		ldr	r3, .L205
 3862 1790 1A60     		str	r2, [r3, #0]
 940:../src/gps.c  ****     GPS_coord[LON] = gps.loc.lon;
 3863              		.loc 1 940 0
 3864 1792 BA68     		ldr	r2, [r7, #8]
 3865 1794 224B     		ldr	r3, .L205
 3866 1796 5A60     		str	r2, [r3, #4]
 941:../src/gps.c  ****     //
 942:../src/gps.c  ****     i2cRead(NAVIGATRON_I2C_ADDR, I2C_GPS_STATUS_00, 1, &stat);
 3867              		.loc 1 942 0
 3868 1798 07F10F03 		add	r3, r7, #15
 3869 179c 4FF02000 		mov	r0, #32
 3870 17a0 4FF00001 		mov	r1, #0
 3871 17a4 4FF00102 		mov	r2, #1
 3872 17a8 FFF7FEFF 		bl	i2cRead
 943:../src/gps.c  ****     f.GPS_FIX = (stat & I2C_GPS_STATUS_3DFIX)>0?1:0;
 3873              		.loc 1 943 0
 3874 17ac FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3875 17ae 03F00403 		and	r3, r3, #4
 3876 17b2 002B     		cmp	r3, #0
 3877 17b4 D4BF     		ite	le
 3878 17b6 0023     		movle	r3, #0
 3879 17b8 0123     		movgt	r3, #1
 3880 17ba DBB2     		uxtb	r3, r3
 3881 17bc 1A46     		mov	r2, r3
 3882 17be 194B     		ldr	r3, .L205+4
 3883 17c0 DA72     		strb	r2, [r3, #11]
 944:../src/gps.c  ****     GPS_numSat = stat>>4;
 3884              		.loc 1 944 0
 3885 17c2 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3886 17c4 4FEA1313 		lsr	r3, r3, #4
 3887 17c8 DAB2     		uxtb	r2, r3
 3888 17ca 174B     		ldr	r3, .L205+8
 3889 17cc 1A70     		strb	r2, [r3, #0]
 945:../src/gps.c  ****     //
 946:../src/gps.c  ****     i2cRead(NAVIGATRON_I2C_ADDR, I2C_GPS_ALTITUDE, 2, (uint8_t*)&GPS_altitude);
 3890              		.loc 1 946 0
 3891 17ce 4FF02000 		mov	r0, #32
 3892 17d2 4FF02101 		mov	r1, #33
 3893 17d6 4FF00202 		mov	r2, #2
 3894 17da 144B     		ldr	r3, .L205+12
 3895 17dc FFF7FEFF 		bl	i2cRead
 947:../src/gps.c  ****     //GPS_altitude = grab_fields(string, 0);  // altitude in meters added by Mis
 948:../src/gps.c  ****     //
 949:../src/gps.c  ****     i2cRead(NAVIGATRON_I2C_ADDR, I2C_GPS_GROUND_SPEED, 2, (uint8_t*)&GPS_speed);
 3896              		.loc 1 949 0
 3897 17e0 4FF02000 		mov	r0, #32
 3898 17e4 4FF01F01 		mov	r1, #31
 3899 17e8 4FF00202 		mov	r2, #2
 3900 17ec 104B     		ldr	r3, .L205+16
 3901 17ee FFF7FEFF 		bl	i2cRead
 950:../src/gps.c  ****     //GPS_speed = (grab_fields(string, 1) * 5144L) / 1000L;   // speed in cm/s added by Mis
 951:../src/gps.c  ****     //
 952:../src/gps.c  ****     i2cRead(NAVIGATRON_I2C_ADDR, I2C_GPS_GROUND_COURSE, 2, (uint8_t*)&GPS_ground_course);
 3902              		.loc 1 952 0
 3903 17f2 4FF02000 		mov	r0, #32
 3904 17f6 4FF02301 		mov	r1, #35
 3905 17fa 4FF00202 		mov	r2, #2
 3906 17fe 0D4B     		ldr	r3, .L205+20
 3907 1800 FFF7FEFF 		bl	i2cRead
 953:../src/gps.c  ****     //GPS_ground_course = grab_fields(string, 1);             // ground course deg * 10
 954:../src/gps.c  ****     return (stat & I2C_GPS_STATUS_NEW_DATA);
 3908              		.loc 1 954 0
 3909 1804 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3910 1806 03F00103 		and	r3, r3, #1
 3911 180a 002B     		cmp	r3, #0
 3912 180c 0CBF     		ite	eq
 3913 180e 0023     		moveq	r3, #0
 3914 1810 0123     		movne	r3, #1
 3915 1812 DBB2     		uxtb	r3, r3
 955:../src/gps.c  **** }
 3916              		.loc 1 955 0
 3917 1814 1846     		mov	r0, r3
 3918 1816 07F11007 		add	r7, r7, #16
 3919 181a BD46     		mov	sp, r7
 3920 181c 80BD     		pop	{r7, pc}
 3921              	.L206:
 3922 181e 00BF     		.align	2
 3923              	.L205:
 3924 1820 00000000 		.word	GPS_coord
 3925 1824 00000000 		.word	f
 3926 1828 00000000 		.word	GPS_numSat
 3927 182c 00000000 		.word	GPS_altitude
 3928 1830 00000000 		.word	GPS_speed
 3929 1834 00000000 		.word	GPS_ground_course
 3930              		.cfi_endproc
 3931              	.LFE58:
 3933              		.align	2
 3934              		.thumb
 3935              		.thumb_func
 3937              	GPS_NMEA_newFrame:
 3938              	.LFB59:
 956:../src/gps.c  **** 
 957:../src/gps.c  **** static bool GPS_NMEA_newFrame(char c)
 958:../src/gps.c  **** {
 3939              		.loc 1 958 0
 3940              		.cfi_startproc
 3941              		@ args = 0, pretend = 0, frame = 16
 3942              		@ frame_needed = 1, uses_anonymous_args = 0
 3943 1838 80B5     		push	{r7, lr}
 3944              	.LCFI88:
 3945              		.cfi_def_cfa_offset 8
 3946              		.cfi_offset 7, -8
 3947              		.cfi_offset 14, -4
 3948 183a 84B0     		sub	sp, sp, #16
 3949              	.LCFI89:
 3950              		.cfi_def_cfa_offset 24
 3951 183c 00AF     		add	r7, sp, #0
 3952              	.LCFI90:
 3953              		.cfi_def_cfa_register 7
 3954 183e 0346     		mov	r3, r0
 3955 1840 FB71     		strb	r3, [r7, #7]
 959:../src/gps.c  ****     uint8_t frameOK = 0;
 3956              		.loc 1 959 0
 3957 1842 4FF00003 		mov	r3, #0
 3958 1846 FB73     		strb	r3, [r7, #15]
 960:../src/gps.c  ****     static uint8_t param = 0, offset = 0, parity = 0;
 961:../src/gps.c  ****     static char string[15];
 962:../src/gps.c  ****     static uint8_t checksum_param, frame = 0;
 963:../src/gps.c  **** 
 964:../src/gps.c  ****     if (c == '$') {
 3959              		.loc 1 964 0
 3960 1848 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3961 184a 242B     		cmp	r3, #36
 3962 184c 0CD1     		bne	.L208
 965:../src/gps.c  ****         param = 0;
 3963              		.loc 1 965 0
 3964 184e 814B     		ldr	r3, .L235
 3965 1850 4FF00002 		mov	r2, #0
 3966 1854 1A70     		strb	r2, [r3, #0]
 966:../src/gps.c  ****         offset = 0;
 3967              		.loc 1 966 0
 3968 1856 804B     		ldr	r3, .L235+4
 3969 1858 4FF00002 		mov	r2, #0
 3970 185c 1A70     		strb	r2, [r3, #0]
 967:../src/gps.c  ****         parity = 0;
 3971              		.loc 1 967 0
 3972 185e 7F4B     		ldr	r3, .L235+8
 3973 1860 4FF00002 		mov	r2, #0
 3974 1864 1A70     		strb	r2, [r3, #0]
 3975 1866 55E1     		b	.L209
 3976              	.L208:
 968:../src/gps.c  ****     } else if (c == ',' || c == '*') {
 3977              		.loc 1 968 0
 3978 1868 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3979 186a 2C2B     		cmp	r3, #44
 3980 186c 03D0     		beq	.L210
 3981              		.loc 1 968 0 is_stmt 0 discriminator 1
 3982 186e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3983 1870 2A2B     		cmp	r3, #42
 3984 1872 40F00981 		bne	.L211
 3985              	.L210:
 969:../src/gps.c  ****         string[offset] = 0;
 3986              		.loc 1 969 0 is_stmt 1
 3987 1876 784B     		ldr	r3, .L235+4
 3988 1878 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3989 187a 794A     		ldr	r2, .L235+12
 3990 187c 4FF00001 		mov	r1, #0
 3991 1880 D154     		strb	r1, [r2, r3]
 970:../src/gps.c  ****         if (param == 0) {       //frame identification
 3992              		.loc 1 970 0
 3993 1882 744B     		ldr	r3, .L235
 3994 1884 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3995 1886 002B     		cmp	r3, #0
 3996 1888 39D1     		bne	.L212
 971:../src/gps.c  ****             frame = 0;
 3997              		.loc 1 971 0
 3998 188a 764B     		ldr	r3, .L235+16
 3999 188c 4FF00002 		mov	r2, #0
 4000 1890 1A70     		strb	r2, [r3, #0]
 972:../src/gps.c  ****             if (string[0] == 'G' && string[1] == 'P' && string[2] == 'G' && string[3] == 'G' && str
 4001              		.loc 1 972 0
 4002 1892 734B     		ldr	r3, .L235+12
 4003 1894 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4004 1896 472B     		cmp	r3, #71
 4005 1898 13D1     		bne	.L213
 4006              		.loc 1 972 0 is_stmt 0 discriminator 1
 4007 189a 714B     		ldr	r3, .L235+12
 4008 189c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 4009 189e 502B     		cmp	r3, #80
 4010 18a0 0FD1     		bne	.L213
 4011 18a2 6F4B     		ldr	r3, .L235+12
 4012 18a4 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 4013 18a6 472B     		cmp	r3, #71
 4014 18a8 0BD1     		bne	.L213
 4015 18aa 6D4B     		ldr	r3, .L235+12
 4016 18ac DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 4017 18ae 472B     		cmp	r3, #71
 4018 18b0 07D1     		bne	.L213
 4019 18b2 6B4B     		ldr	r3, .L235+12
 4020 18b4 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 4021 18b6 412B     		cmp	r3, #65
 4022 18b8 03D1     		bne	.L213
 973:../src/gps.c  ****                 frame = FRAME_GGA;
 4023              		.loc 1 973 0 is_stmt 1
 4024 18ba 6A4B     		ldr	r3, .L235+16
 4025 18bc 4FF00102 		mov	r2, #1
 4026 18c0 1A70     		strb	r2, [r3, #0]
 4027              	.L213:
 974:../src/gps.c  ****             if (string[0] == 'G' && string[1] == 'P' && string[2] == 'R' && string[3] == 'M' && str
 4028              		.loc 1 974 0
 4029 18c2 674B     		ldr	r3, .L235+12
 4030 18c4 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4031 18c6 472B     		cmp	r3, #71
 4032 18c8 40F0A880 		bne	.L214
 4033              		.loc 1 974 0 is_stmt 0 discriminator 1
 4034 18cc 644B     		ldr	r3, .L235+12
 4035 18ce 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 4036 18d0 502B     		cmp	r3, #80
 4037 18d2 40F0A380 		bne	.L214
 4038 18d6 624B     		ldr	r3, .L235+12
 4039 18d8 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 4040 18da 522B     		cmp	r3, #82
 4041 18dc 40F09E80 		bne	.L214
 4042 18e0 5F4B     		ldr	r3, .L235+12
 4043 18e2 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 4044 18e4 4D2B     		cmp	r3, #77
 4045 18e6 40F09980 		bne	.L214
 4046 18ea 5D4B     		ldr	r3, .L235+12
 4047 18ec 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 4048 18ee 432B     		cmp	r3, #67
 4049 18f0 40F09480 		bne	.L214
 975:../src/gps.c  ****                 frame = FRAME_RMC;
 4050              		.loc 1 975 0 is_stmt 1
 4051 18f4 5B4B     		ldr	r3, .L235+16
 4052 18f6 4FF00202 		mov	r2, #2
 4053 18fa 1A70     		strb	r2, [r3, #0]
 4054 18fc 8EE0     		b	.L214
 4055              	.L212:
 976:../src/gps.c  ****         } else if (frame == FRAME_GGA) {
 4056              		.loc 1 976 0
 4057 18fe 594B     		ldr	r3, .L235+16
 4058 1900 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4059 1902 012B     		cmp	r3, #1
 4060 1904 60D1     		bne	.L215
 977:../src/gps.c  ****             if (param == 2) {
 4061              		.loc 1 977 0
 4062 1906 534B     		ldr	r3, .L235
 4063 1908 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4064 190a 022B     		cmp	r3, #2
 4065 190c 07D1     		bne	.L216
 978:../src/gps.c  ****                 GPS_coord[LAT] = GPS_coord_to_degrees(string);
 4066              		.loc 1 978 0
 4067 190e 5448     		ldr	r0, .L235+12
 4068 1910 FFF7FEFF 		bl	GPS_coord_to_degrees
 4069 1914 0346     		mov	r3, r0
 4070 1916 1A46     		mov	r2, r3
 4071 1918 534B     		ldr	r3, .L235+20
 4072 191a 1A60     		str	r2, [r3, #0]
 979:../src/gps.c  ****             } else if (param == 3 && string[0] == 'S')
 980:../src/gps.c  ****                 GPS_coord[LAT] = -GPS_coord[LAT];
 981:../src/gps.c  ****             else if (param == 4) {
 982:../src/gps.c  ****                 GPS_coord[LON] = GPS_coord_to_degrees(string);
 983:../src/gps.c  ****             } else if (param == 5 && string[0] == 'W')
 984:../src/gps.c  ****                 GPS_coord[LON] = -GPS_coord[LON];
 985:../src/gps.c  ****             else if (param == 6) {
 986:../src/gps.c  ****                 f.GPS_FIX = string[0] > '0';
 987:../src/gps.c  ****             } else if (param == 7) {
 988:../src/gps.c  ****                 GPS_numSat = grab_fields(string, 0);
 989:../src/gps.c  ****             } else if (param == 9) {
 990:../src/gps.c  ****                 GPS_altitude = grab_fields(string, 0);  // altitude in meters added by Mis
 4073              		.loc 1 990 0
 4074 191c 7DE0     		b	.L234
 4075              	.L216:
 979:../src/gps.c  ****             } else if (param == 3 && string[0] == 'S')
 4076              		.loc 1 979 0
 4077 191e 4D4B     		ldr	r3, .L235
 4078 1920 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4079 1922 032B     		cmp	r3, #3
 4080 1924 0AD1     		bne	.L218
 979:../src/gps.c  ****             } else if (param == 3 && string[0] == 'S')
 4081              		.loc 1 979 0 is_stmt 0 discriminator 1
 4082 1926 4E4B     		ldr	r3, .L235+12
 4083 1928 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4084 192a 532B     		cmp	r3, #83
 4085 192c 06D1     		bne	.L218
 980:../src/gps.c  ****                 GPS_coord[LAT] = -GPS_coord[LAT];
 4086              		.loc 1 980 0 is_stmt 1
 4087 192e 4E4B     		ldr	r3, .L235+20
 4088 1930 1B68     		ldr	r3, [r3, #0]
 4089 1932 C3F10002 		rsb	r2, r3, #0
 4090 1936 4C4B     		ldr	r3, .L235+20
 4091 1938 1A60     		str	r2, [r3, #0]
 4092 193a 6FE0     		b	.L214
 4093              	.L218:
 981:../src/gps.c  ****             else if (param == 4) {
 4094              		.loc 1 981 0
 4095 193c 454B     		ldr	r3, .L235
 4096 193e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4097 1940 042B     		cmp	r3, #4
 4098 1942 07D1     		bne	.L219
 982:../src/gps.c  ****                 GPS_coord[LON] = GPS_coord_to_degrees(string);
 4099              		.loc 1 982 0
 4100 1944 4648     		ldr	r0, .L235+12
 4101 1946 FFF7FEFF 		bl	GPS_coord_to_degrees
 4102 194a 0346     		mov	r3, r0
 4103 194c 1A46     		mov	r2, r3
 4104 194e 464B     		ldr	r3, .L235+20
 4105 1950 5A60     		str	r2, [r3, #4]
 4106              		.loc 1 990 0
 4107 1952 62E0     		b	.L234
 4108              	.L219:
 983:../src/gps.c  ****             } else if (param == 5 && string[0] == 'W')
 4109              		.loc 1 983 0
 4110 1954 3F4B     		ldr	r3, .L235
 4111 1956 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4112 1958 052B     		cmp	r3, #5
 4113 195a 0AD1     		bne	.L220
 983:../src/gps.c  ****             } else if (param == 5 && string[0] == 'W')
 4114              		.loc 1 983 0 is_stmt 0 discriminator 1
 4115 195c 404B     		ldr	r3, .L235+12
 4116 195e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4117 1960 572B     		cmp	r3, #87
 4118 1962 06D1     		bne	.L220
 984:../src/gps.c  ****                 GPS_coord[LON] = -GPS_coord[LON];
 4119              		.loc 1 984 0 is_stmt 1
 4120 1964 404B     		ldr	r3, .L235+20
 4121 1966 5B68     		ldr	r3, [r3, #4]
 4122 1968 C3F10002 		rsb	r2, r3, #0
 4123 196c 3E4B     		ldr	r3, .L235+20
 4124 196e 5A60     		str	r2, [r3, #4]
 4125 1970 54E0     		b	.L214
 4126              	.L220:
 985:../src/gps.c  ****             else if (param == 6) {
 4127              		.loc 1 985 0
 4128 1972 384B     		ldr	r3, .L235
 4129 1974 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4130 1976 062B     		cmp	r3, #6
 4131 1978 0AD1     		bne	.L221
 986:../src/gps.c  ****                 f.GPS_FIX = string[0] > '0';
 4132              		.loc 1 986 0
 4133 197a 394B     		ldr	r3, .L235+12
 4134 197c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4135 197e 302B     		cmp	r3, #48
 4136 1980 94BF     		ite	ls
 4137 1982 0023     		movls	r3, #0
 4138 1984 0123     		movhi	r3, #1
 4139 1986 DBB2     		uxtb	r3, r3
 4140 1988 1A46     		mov	r2, r3
 4141 198a 384B     		ldr	r3, .L235+24
 4142 198c DA72     		strb	r2, [r3, #11]
 4143              		.loc 1 990 0
 4144 198e 44E0     		b	.L234
 4145              	.L221:
 987:../src/gps.c  ****             } else if (param == 7) {
 4146              		.loc 1 987 0
 4147 1990 304B     		ldr	r3, .L235
 4148 1992 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4149 1994 072B     		cmp	r3, #7
 4150 1996 09D1     		bne	.L222
 988:../src/gps.c  ****                 GPS_numSat = grab_fields(string, 0);
 4151              		.loc 1 988 0
 4152 1998 3148     		ldr	r0, .L235+12
 4153 199a 4FF00001 		mov	r1, #0
 4154 199e FFF745FE 		bl	grab_fields
 4155 19a2 0346     		mov	r3, r0
 4156 19a4 DAB2     		uxtb	r2, r3
 4157 19a6 324B     		ldr	r3, .L235+28
 4158 19a8 1A70     		strb	r2, [r3, #0]
 4159              		.loc 1 990 0
 4160 19aa 36E0     		b	.L234
 4161              	.L222:
 989:../src/gps.c  ****             } else if (param == 9) {
 4162              		.loc 1 989 0
 4163 19ac 294B     		ldr	r3, .L235
 4164 19ae 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4165 19b0 092B     		cmp	r3, #9
 4166 19b2 32D1     		bne	.L234
 4167              		.loc 1 990 0
 4168 19b4 2A48     		ldr	r0, .L235+12
 4169 19b6 4FF00001 		mov	r1, #0
 4170 19ba FFF737FE 		bl	grab_fields
 4171 19be 0346     		mov	r3, r0
 4172 19c0 9AB2     		uxth	r2, r3
 4173 19c2 2C4B     		ldr	r3, .L235+32
 4174 19c4 1A80     		strh	r2, [r3, #0]	@ movhi
 4175 19c6 28E0     		b	.L234
 4176              	.L215:
 991:../src/gps.c  ****             }
 992:../src/gps.c  ****         } else if (frame == FRAME_RMC) {
 4177              		.loc 1 992 0
 4178 19c8 264B     		ldr	r3, .L235+16
 4179 19ca 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4180 19cc 022B     		cmp	r3, #2
 4181 19ce 25D1     		bne	.L214
 993:../src/gps.c  ****             if (param == 7) {
 4182              		.loc 1 993 0
 4183 19d0 204B     		ldr	r3, .L235
 4184 19d2 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4185 19d4 072B     		cmp	r3, #7
 4186 19d6 12D1     		bne	.L223
 994:../src/gps.c  ****                 GPS_speed = (grab_fields(string, 1) * 5144L) / 1000L;   // speed in cm/s added by M
 4187              		.loc 1 994 0
 4188 19d8 2148     		ldr	r0, .L235+12
 4189 19da 4FF00101 		mov	r1, #1
 4190 19de FFF725FE 		bl	grab_fields
 4191 19e2 0346     		mov	r3, r0
 4192 19e4 41F21842 		movw	r2, #5144
 4193 19e8 02FB03F2 		mul	r2, r2, r3
 4194 19ec 224B     		ldr	r3, .L235+36
 4195 19ee A3FB0213 		umull	r1, r3, r3, r2
 4196 19f2 4FEA9313 		lsr	r3, r3, #6
 4197 19f6 9AB2     		uxth	r2, r3
 4198 19f8 204B     		ldr	r3, .L235+40
 4199 19fa 1A80     		strh	r2, [r3, #0]	@ movhi
 4200 19fc 0EE0     		b	.L214
 4201              	.L223:
 995:../src/gps.c  ****             } else if (param == 8) {
 4202              		.loc 1 995 0
 4203 19fe 154B     		ldr	r3, .L235
 4204 1a00 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4205 1a02 082B     		cmp	r3, #8
 4206 1a04 0AD1     		bne	.L214
 996:../src/gps.c  ****                 GPS_ground_course = grab_fields(string, 1);             // ground course deg * 10
 4207              		.loc 1 996 0
 4208 1a06 1648     		ldr	r0, .L235+12
 4209 1a08 4FF00101 		mov	r1, #1
 4210 1a0c FFF70EFE 		bl	grab_fields
 4211 1a10 0346     		mov	r3, r0
 4212 1a12 9AB2     		uxth	r2, r3
 4213 1a14 1A4B     		ldr	r3, .L235+44
 4214 1a16 1A80     		strh	r2, [r3, #0]	@ movhi
 4215 1a18 00E0     		b	.L214
 4216              	.L234:
 990:../src/gps.c  ****                 GPS_altitude = grab_fields(string, 0);  // altitude in meters added by Mis
 4217              		.loc 1 990 0
 4218 1a1a 00BF     		nop
 4219              	.L214:
 997:../src/gps.c  ****             }
 998:../src/gps.c  ****         }
 999:../src/gps.c  ****         param++;
 4220              		.loc 1 999 0
 4221 1a1c 0D4B     		ldr	r3, .L235
 4222 1a1e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4223 1a20 03F10103 		add	r3, r3, #1
 4224 1a24 DAB2     		uxtb	r2, r3
 4225 1a26 0B4B     		ldr	r3, .L235
 4226 1a28 1A70     		strb	r2, [r3, #0]
1000:../src/gps.c  ****         offset = 0;
 4227              		.loc 1 1000 0
 4228 1a2a 0B4B     		ldr	r3, .L235+4
 4229 1a2c 4FF00002 		mov	r2, #0
 4230 1a30 1A70     		strb	r2, [r3, #0]
1001:../src/gps.c  ****         if (c == '*')
 4231              		.loc 1 1001 0
 4232 1a32 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4233 1a34 2A2B     		cmp	r3, #42
 4234 1a36 04D1     		bne	.L224
1002:../src/gps.c  ****             checksum_param = 1;
 4235              		.loc 1 1002 0
 4236 1a38 124B     		ldr	r3, .L235+48
 4237 1a3a 4FF00102 		mov	r2, #1
 4238 1a3e 1A70     		strb	r2, [r3, #0]
1001:../src/gps.c  ****         if (c == '*')
 4239              		.loc 1 1001 0
 4240 1a40 68E0     		b	.L209
 4241              	.L224:
1003:../src/gps.c  ****         else
1004:../src/gps.c  ****             parity ^= c;
 4242              		.loc 1 1004 0
 4243 1a42 064B     		ldr	r3, .L235+8
 4244 1a44 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 4245 1a46 FB79     		ldrb	r3, [r7, #7]
 4246 1a48 5340     		eors	r3, r3, r2
 4247 1a4a DAB2     		uxtb	r2, r3
 4248 1a4c 034B     		ldr	r3, .L235+8
 4249 1a4e 1A70     		strb	r2, [r3, #0]
1001:../src/gps.c  ****         if (c == '*')
 4250              		.loc 1 1001 0
 4251 1a50 60E0     		b	.L209
 4252              	.L236:
 4253 1a52 00BF     		.align	2
 4254              	.L235:
 4255 1a54 7C010000 		.word	param.9326
 4256 1a58 7D010000 		.word	offset.9327
 4257 1a5c 7E010000 		.word	parity.9328
 4258 1a60 80010000 		.word	string.9329
 4259 1a64 8F010000 		.word	frame.9331
 4260 1a68 00000000 		.word	GPS_coord
 4261 1a6c 00000000 		.word	f
 4262 1a70 00000000 		.word	GPS_numSat
 4263 1a74 00000000 		.word	GPS_altitude
 4264 1a78 D34D6210 		.word	274877907
 4265 1a7c 00000000 		.word	GPS_speed
 4266 1a80 00000000 		.word	GPS_ground_course
 4267 1a84 90010000 		.word	checksum_param.9330
 4268              	.L211:
1005:../src/gps.c  ****     } else if (c == '\r' || c == '\n') {
 4269              		.loc 1 1005 0
 4270 1a88 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4271 1a8a 0D2B     		cmp	r3, #13
 4272 1a8c 02D0     		beq	.L226
 4273              		.loc 1 1005 0 is_stmt 0 discriminator 1
 4274 1a8e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4275 1a90 0A2B     		cmp	r3, #10
 4276 1a92 25D1     		bne	.L227
 4277              	.L226:
1006:../src/gps.c  ****         if (checksum_param) {   // parity checksum
 4278              		.loc 1 1006 0 is_stmt 1
 4279 1a94 2D4B     		ldr	r3, .L237
 4280 1a96 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4281 1a98 002B     		cmp	r3, #0
 4282 1a9a 1CD0     		beq	.L228
 4283              	.LBB4:
1007:../src/gps.c  ****             uint8_t checksum = hex_c(string[0]);
 4284              		.loc 1 1007 0
 4285 1a9c 2C4B     		ldr	r3, .L237+4
 4286 1a9e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4287 1aa0 1846     		mov	r0, r3
 4288 1aa2 FFF717FE 		bl	hex_c
 4289 1aa6 0346     		mov	r3, r0
 4290 1aa8 BB73     		strb	r3, [r7, #14]
1008:../src/gps.c  ****             checksum <<= 4;
 4291              		.loc 1 1008 0
 4292 1aaa BB7B     		ldrb	r3, [r7, #14]
 4293 1aac 4FEA0313 		lsl	r3, r3, #4
 4294 1ab0 BB73     		strb	r3, [r7, #14]
1009:../src/gps.c  ****             checksum += hex_c(string[1]);
 4295              		.loc 1 1009 0
 4296 1ab2 274B     		ldr	r3, .L237+4
 4297 1ab4 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 4298 1ab6 1846     		mov	r0, r3
 4299 1ab8 FFF70CFE 		bl	hex_c
 4300 1abc 0346     		mov	r3, r0
 4301 1abe 1A46     		mov	r2, r3
 4302 1ac0 BB7B     		ldrb	r3, [r7, #14]
 4303 1ac2 D318     		adds	r3, r2, r3
 4304 1ac4 BB73     		strb	r3, [r7, #14]
1010:../src/gps.c  ****             if (checksum == parity)
 4305              		.loc 1 1010 0
 4306 1ac6 234B     		ldr	r3, .L237+8
 4307 1ac8 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4308 1aca BA7B     		ldrb	r2, [r7, #14]	@ zero_extendqisi2
 4309 1acc 9A42     		cmp	r2, r3
 4310 1ace 02D1     		bne	.L228
1011:../src/gps.c  ****                 frameOK = 1;
 4311              		.loc 1 1011 0
 4312 1ad0 4FF00103 		mov	r3, #1
 4313 1ad4 FB73     		strb	r3, [r7, #15]
 4314              	.L228:
 4315              	.LBE4:
1012:../src/gps.c  ****         }
1013:../src/gps.c  ****         checksum_param = 0;
 4316              		.loc 1 1013 0
 4317 1ad6 1D4B     		ldr	r3, .L237
 4318 1ad8 4FF00002 		mov	r2, #0
 4319 1adc 1A70     		strb	r2, [r3, #0]
 4320 1ade 19E0     		b	.L209
 4321              	.L227:
1014:../src/gps.c  ****     } else {
1015:../src/gps.c  ****         if (offset < 15)
 4322              		.loc 1 1015 0
 4323 1ae0 1D4B     		ldr	r3, .L237+12
 4324 1ae2 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4325 1ae4 0E2B     		cmp	r3, #14
 4326 1ae6 0AD8     		bhi	.L229
1016:../src/gps.c  ****             string[offset++] = c;
 4327              		.loc 1 1016 0
 4328 1ae8 1B4B     		ldr	r3, .L237+12
 4329 1aea 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4330 1aec 1A46     		mov	r2, r3
 4331 1aee 1849     		ldr	r1, .L237+4
 4332 1af0 F879     		ldrb	r0, [r7, #7]
 4333 1af2 8854     		strb	r0, [r1, r2]
 4334 1af4 03F10103 		add	r3, r3, #1
 4335 1af8 DAB2     		uxtb	r2, r3
 4336 1afa 174B     		ldr	r3, .L237+12
 4337 1afc 1A70     		strb	r2, [r3, #0]
 4338              	.L229:
1017:../src/gps.c  ****         if (!checksum_param)
 4339              		.loc 1 1017 0
 4340 1afe 134B     		ldr	r3, .L237
 4341 1b00 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4342 1b02 002B     		cmp	r3, #0
 4343 1b04 06D1     		bne	.L209
1018:../src/gps.c  ****             parity ^= c;
 4344              		.loc 1 1018 0
 4345 1b06 134B     		ldr	r3, .L237+8
 4346 1b08 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 4347 1b0a FB79     		ldrb	r3, [r7, #7]
 4348 1b0c 5340     		eors	r3, r3, r2
 4349 1b0e DAB2     		uxtb	r2, r3
 4350 1b10 104B     		ldr	r3, .L237+8
 4351 1b12 1A70     		strb	r2, [r3, #0]
 4352              	.L209:
1019:../src/gps.c  ****     }
1020:../src/gps.c  ****     if (frame)
 4353              		.loc 1 1020 0
 4354 1b14 114B     		ldr	r3, .L237+16
 4355 1b16 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4356 1b18 002B     		cmp	r3, #0
 4357 1b1a 03D0     		beq	.L230
1021:../src/gps.c  ****         GPS_Present = 1;
 4358              		.loc 1 1021 0
 4359 1b1c 104B     		ldr	r3, .L237+20
 4360 1b1e 4FF00102 		mov	r2, #1
 4361 1b22 1A70     		strb	r2, [r3, #0]
 4362              	.L230:
1022:../src/gps.c  ****     return frameOK && (frame == FRAME_GGA);
 4363              		.loc 1 1022 0
 4364 1b24 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4365 1b26 002B     		cmp	r3, #0
 4366 1b28 06D0     		beq	.L231
 4367              		.loc 1 1022 0 is_stmt 0 discriminator 1
 4368 1b2a 0C4B     		ldr	r3, .L237+16
 4369 1b2c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4370 1b2e 012B     		cmp	r3, #1
 4371 1b30 02D1     		bne	.L231
 4372              		.loc 1 1022 0 discriminator 3
 4373 1b32 4FF00103 		mov	r3, #1
 4374 1b36 01E0     		b	.L232
 4375              	.L231:
 4376              		.loc 1 1022 0 discriminator 2
 4377 1b38 4FF00003 		mov	r3, #0
 4378              	.L232:
 4379              		.loc 1 1022 0 discriminator 4
 4380 1b3c 03F00103 		and	r3, r3, #1
 4381 1b40 DBB2     		uxtb	r3, r3
1023:../src/gps.c  **** }
 4382              		.loc 1 1023 0 is_stmt 1 discriminator 4
 4383 1b42 1846     		mov	r0, r3
 4384 1b44 07F11007 		add	r7, r7, #16
 4385 1b48 BD46     		mov	sp, r7
 4386 1b4a 80BD     		pop	{r7, pc}
 4387              	.L238:
 4388              		.align	2
 4389              	.L237:
 4390 1b4c 90010000 		.word	checksum_param.9330
 4391 1b50 80010000 		.word	string.9329
 4392 1b54 7E010000 		.word	parity.9328
 4393 1b58 7D010000 		.word	offset.9327
 4394 1b5c 8F010000 		.word	frame.9331
 4395 1b60 00000000 		.word	GPS_Present
 4396              		.cfi_endproc
 4397              	.LFE59:
 4399              		.comm	ubs_protocol_bytes,1,1
 4400              		.comm	ubs_nav_fix_type,1,1
 4401              		.comm	ubx_nav_status_bits,1,1
 4402              		.bss
 4403              	_ck_a:
 4404 012e 00       		.space	1
 4405              	_ck_b:
 4406 012f 00       		.space	1
 4407              	_step:
 4408 0130 00       		.space	1
 4409              	_msg_id:
 4410 0131 00       		.space	1
 4411              		.align	1
 4412              	_payload_length:
 4413 0132 0000     		.space	2
 4414              		.align	1
 4415              	_payload_counter:
 4416 0134 0000     		.space	2
 4417              	next_fix:
 4418 0136 00       		.space	1
 4419              	_class:
 4420 0137 00       		.space	1
 4421              	_new_position:
 4422 0138 00       		.space	1
 4423              	_new_speed:
 4424 0139 00       		.space	1
 4425              	_disable_counter:
 4426 013a 00       		.space	1
 4427 013b 00       		.align	2
 4428              	_buffer:
 4429 013c 00000000 		.space	64
 4429      00000000 
 4429      00000000 
 4429      00000000 
 4429      00000000 
 4430              		.text
 4431              		.align	2
 4432              		.global	_update_checksum
 4433              		.thumb
 4434              		.thumb_func
 4436              	_update_checksum:
 4437              	.LFB60:
1024:../src/gps.c  **** 
1025:../src/gps.c  **** 
1026:../src/gps.c  **** // UBX support
1027:../src/gps.c  **** typedef struct {
1028:../src/gps.c  ****     uint8_t preamble1;
1029:../src/gps.c  ****     uint8_t preamble2;
1030:../src/gps.c  ****     uint8_t msg_class;
1031:../src/gps.c  ****     uint8_t msg_id;
1032:../src/gps.c  ****     uint16_t length;
1033:../src/gps.c  **** } ubx_header;
1034:../src/gps.c  **** 
1035:../src/gps.c  **** typedef struct {
1036:../src/gps.c  ****     uint32_t time;              // GPS msToW
1037:../src/gps.c  ****     int32_t longitude;
1038:../src/gps.c  ****     int32_t latitude;
1039:../src/gps.c  ****     int32_t altitude_ellipsoid;
1040:../src/gps.c  ****     int32_t altitude_msl;
1041:../src/gps.c  ****     uint32_t horizontal_accuracy;
1042:../src/gps.c  ****     uint32_t vertical_accuracy;
1043:../src/gps.c  **** } ubx_nav_posllh;
1044:../src/gps.c  **** 
1045:../src/gps.c  **** typedef struct {
1046:../src/gps.c  ****     uint32_t time;              // GPS msToW
1047:../src/gps.c  ****     uint8_t fix_type;
1048:../src/gps.c  ****     uint8_t fix_status;
1049:../src/gps.c  ****     uint8_t differential_status;
1050:../src/gps.c  ****     uint8_t res;
1051:../src/gps.c  ****     uint32_t time_to_first_fix;
1052:../src/gps.c  ****     uint32_t uptime;            // milliseconds
1053:../src/gps.c  **** } ubx_nav_status;
1054:../src/gps.c  **** 
1055:../src/gps.c  **** typedef struct {
1056:../src/gps.c  ****     uint32_t time;
1057:../src/gps.c  ****     int32_t time_nsec;
1058:../src/gps.c  ****     int16_t week;
1059:../src/gps.c  ****     uint8_t fix_type;
1060:../src/gps.c  ****     uint8_t fix_status;
1061:../src/gps.c  ****     int32_t ecef_x;
1062:../src/gps.c  ****     int32_t ecef_y;
1063:../src/gps.c  ****     int32_t ecef_z;
1064:../src/gps.c  ****     uint32_t position_accuracy_3d;
1065:../src/gps.c  ****     int32_t ecef_x_velocity;
1066:../src/gps.c  ****     int32_t ecef_y_velocity;
1067:../src/gps.c  ****     int32_t ecef_z_velocity;
1068:../src/gps.c  ****     uint32_t speed_accuracy;
1069:../src/gps.c  ****     uint16_t position_DOP;
1070:../src/gps.c  ****     uint8_t res;
1071:../src/gps.c  ****     uint8_t satellites;
1072:../src/gps.c  ****     uint32_t res2;
1073:../src/gps.c  **** } ubx_nav_solution;
1074:../src/gps.c  **** 
1075:../src/gps.c  **** typedef struct {
1076:../src/gps.c  ****     uint32_t time;              // GPS msToW
1077:../src/gps.c  ****     int32_t ned_north;
1078:../src/gps.c  ****     int32_t ned_east;
1079:../src/gps.c  ****     int32_t ned_down;
1080:../src/gps.c  ****     uint32_t speed_3d;
1081:../src/gps.c  ****     uint32_t speed_2d;
1082:../src/gps.c  ****     int32_t heading_2d;
1083:../src/gps.c  ****     uint32_t speed_accuracy;
1084:../src/gps.c  ****     uint32_t heading_accuracy;
1085:../src/gps.c  **** } ubx_nav_velned;
1086:../src/gps.c  **** 
1087:../src/gps.c  **** enum {
1088:../src/gps.c  ****     PREAMBLE1 = 0xb5,
1089:../src/gps.c  ****     PREAMBLE2 = 0x62,
1090:../src/gps.c  ****     CLASS_NAV = 0x01,
1091:../src/gps.c  ****     CLASS_ACK = 0x05,
1092:../src/gps.c  ****     CLASS_CFG = 0x06,
1093:../src/gps.c  ****     MSG_ACK_NACK = 0x00,
1094:../src/gps.c  ****     MSG_ACK_ACK = 0x01,
1095:../src/gps.c  ****     MSG_POSLLH = 0x2,
1096:../src/gps.c  ****     MSG_STATUS = 0x3,
1097:../src/gps.c  ****     MSG_SOL = 0x6,
1098:../src/gps.c  ****     MSG_VELNED = 0x12,
1099:../src/gps.c  ****     MSG_CFG_PRT = 0x00,
1100:../src/gps.c  ****     MSG_CFG_RATE = 0x08,
1101:../src/gps.c  ****     MSG_CFG_SET_RATE = 0x01,
1102:../src/gps.c  ****     MSG_CFG_NAV_SETTINGS = 0x24
1103:../src/gps.c  **** } ubs_protocol_bytes;
1104:../src/gps.c  **** 
1105:../src/gps.c  **** enum {
1106:../src/gps.c  ****     FIX_NONE = 0,
1107:../src/gps.c  ****     FIX_DEAD_RECKONING = 1,
1108:../src/gps.c  ****     FIX_2D = 2,
1109:../src/gps.c  ****     FIX_3D = 3,
1110:../src/gps.c  ****     FIX_GPS_DEAD_RECKONING = 4,
1111:../src/gps.c  ****     FIX_TIME = 5
1112:../src/gps.c  **** } ubs_nav_fix_type;
1113:../src/gps.c  **** 
1114:../src/gps.c  **** enum {
1115:../src/gps.c  ****     NAV_STATUS_FIX_VALID = 1
1116:../src/gps.c  **** } ubx_nav_status_bits;
1117:../src/gps.c  **** 
1118:../src/gps.c  **** // Packet checksum accumulators
1119:../src/gps.c  **** static uint8_t _ck_a;
1120:../src/gps.c  **** static uint8_t _ck_b;
1121:../src/gps.c  **** 
1122:../src/gps.c  **** // State machine state
1123:../src/gps.c  **** static uint8_t _step;
1124:../src/gps.c  **** static uint8_t _msg_id;
1125:../src/gps.c  **** static uint16_t _payload_length;
1126:../src/gps.c  **** static uint16_t _payload_counter;
1127:../src/gps.c  **** 
1128:../src/gps.c  **** static bool next_fix;
1129:../src/gps.c  **** static uint8_t _class;
1130:../src/gps.c  **** 
1131:../src/gps.c  **** // do we have new position information?
1132:../src/gps.c  **** static bool _new_position;
1133:../src/gps.c  **** 
1134:../src/gps.c  **** // do we have new speed information?
1135:../src/gps.c  **** static bool _new_speed;
1136:../src/gps.c  **** 
1137:../src/gps.c  **** static uint8_t _disable_counter;
1138:../src/gps.c  **** 
1139:../src/gps.c  **** // Receive buffer
1140:../src/gps.c  **** static union {
1141:../src/gps.c  ****     ubx_nav_posllh posllh;
1142:../src/gps.c  ****     ubx_nav_status status;
1143:../src/gps.c  ****     ubx_nav_solution solution;
1144:../src/gps.c  ****     ubx_nav_velned velned;
1145:../src/gps.c  ****     uint8_t bytes[64];
1146:../src/gps.c  **** } _buffer;
1147:../src/gps.c  **** 
1148:../src/gps.c  **** void _update_checksum(uint8_t *data, uint8_t len, uint8_t *ck_a, uint8_t *ck_b)
1149:../src/gps.c  **** {
 4438              		.loc 1 1149 0
 4439              		.cfi_startproc
 4440              		@ args = 0, pretend = 0, frame = 16
 4441              		@ frame_needed = 1, uses_anonymous_args = 0
 4442              		@ link register save eliminated.
 4443 1b64 80B4     		push	{r7}
 4444              	.LCFI91:
 4445              		.cfi_def_cfa_offset 4
 4446              		.cfi_offset 7, -4
 4447 1b66 85B0     		sub	sp, sp, #20
 4448              	.LCFI92:
 4449              		.cfi_def_cfa_offset 24
 4450 1b68 00AF     		add	r7, sp, #0
 4451              	.LCFI93:
 4452              		.cfi_def_cfa_register 7
 4453 1b6a F860     		str	r0, [r7, #12]
 4454 1b6c 7A60     		str	r2, [r7, #4]
 4455 1b6e 3B60     		str	r3, [r7, #0]
 4456 1b70 0B46     		mov	r3, r1
 4457 1b72 FB72     		strb	r3, [r7, #11]
1150:../src/gps.c  ****     while (len--) {
 4458              		.loc 1 1150 0
 4459 1b74 13E0     		b	.L240
 4460              	.L241:
1151:../src/gps.c  ****         *ck_a += *data;
 4461              		.loc 1 1151 0
 4462 1b76 7B68     		ldr	r3, [r7, #4]
 4463 1b78 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 4464 1b7a FB68     		ldr	r3, [r7, #12]
 4465 1b7c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4466 1b7e D318     		adds	r3, r2, r3
 4467 1b80 DAB2     		uxtb	r2, r3
 4468 1b82 7B68     		ldr	r3, [r7, #4]
 4469 1b84 1A70     		strb	r2, [r3, #0]
1152:../src/gps.c  ****         *ck_b += *ck_a;
 4470              		.loc 1 1152 0
 4471 1b86 3B68     		ldr	r3, [r7, #0]
 4472 1b88 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 4473 1b8a 7B68     		ldr	r3, [r7, #4]
 4474 1b8c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4475 1b8e D318     		adds	r3, r2, r3
 4476 1b90 DAB2     		uxtb	r2, r3
 4477 1b92 3B68     		ldr	r3, [r7, #0]
 4478 1b94 1A70     		strb	r2, [r3, #0]
1153:../src/gps.c  ****         data++;
 4479              		.loc 1 1153 0
 4480 1b96 FB68     		ldr	r3, [r7, #12]
 4481 1b98 03F10103 		add	r3, r3, #1
 4482 1b9c FB60     		str	r3, [r7, #12]
 4483              	.L240:
1150:../src/gps.c  ****     while (len--) {
 4484              		.loc 1 1150 0 discriminator 1
 4485 1b9e FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 4486 1ba0 002B     		cmp	r3, #0
 4487 1ba2 0CBF     		ite	eq
 4488 1ba4 0023     		moveq	r3, #0
 4489 1ba6 0123     		movne	r3, #1
 4490 1ba8 DBB2     		uxtb	r3, r3
 4491 1baa FA7A     		ldrb	r2, [r7, #11]
 4492 1bac 02F1FF32 		add	r2, r2, #-1
 4493 1bb0 FA72     		strb	r2, [r7, #11]
 4494 1bb2 002B     		cmp	r3, #0
 4495 1bb4 DFD1     		bne	.L241
1154:../src/gps.c  ****     }
1155:../src/gps.c  **** }
 4496              		.loc 1 1155 0
 4497 1bb6 07F11407 		add	r7, r7, #20
 4498 1bba BD46     		mov	sp, r7
 4499 1bbc 80BC     		pop	{r7}
 4500 1bbe 7047     		bx	lr
 4501              		.cfi_endproc
 4502              	.LFE60:
 4504              		.align	2
 4505              		.thumb
 4506              		.thumb_func
 4508              	GPS_UBLOX_newFrame:
 4509              	.LFB61:
1156:../src/gps.c  **** 
1157:../src/gps.c  **** static bool GPS_UBLOX_newFrame(uint8_t data)
1158:../src/gps.c  **** {
 4510              		.loc 1 1158 0
 4511              		.cfi_startproc
 4512              		@ args = 0, pretend = 0, frame = 16
 4513              		@ frame_needed = 1, uses_anonymous_args = 0
 4514 1bc0 80B5     		push	{r7, lr}
 4515              	.LCFI94:
 4516              		.cfi_def_cfa_offset 8
 4517              		.cfi_offset 7, -8
 4518              		.cfi_offset 14, -4
 4519 1bc2 84B0     		sub	sp, sp, #16
 4520              	.LCFI95:
 4521              		.cfi_def_cfa_offset 24
 4522 1bc4 00AF     		add	r7, sp, #0
 4523              	.LCFI96:
 4524              		.cfi_def_cfa_register 7
 4525 1bc6 0346     		mov	r3, r0
 4526 1bc8 FB71     		strb	r3, [r7, #7]
1159:../src/gps.c  ****     bool parsed = false;
 4527              		.loc 1 1159 0
 4528 1bca 4FF00003 		mov	r3, #0
 4529 1bce FB73     		strb	r3, [r7, #15]
1160:../src/gps.c  **** 
1161:../src/gps.c  ****     switch (_step) {
 4530              		.loc 1 1161 0
 4531 1bd0 874B     		ldr	r3, .L266
 4532 1bd2 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4533 1bd4 082B     		cmp	r3, #8
 4534 1bd6 00F20581 		bhi	.L243
 4535 1bda 01A2     		adr	r2, .L253
 4536 1bdc 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 4537              		.align	2
 4538              	.L253:
 4539 1be0 231C0000 		.word	.L244+1
 4540 1be4 051C0000 		.word	.L245+1
 4541 1be8 3B1C0000 		.word	.L246+1
 4542 1bec 5F1C0000 		.word	.L247+1
 4543 1bf0 931C0000 		.word	.L248+1
 4544 1bf4 C91C0000 		.word	.L249+1
 4545 1bf8 2F1D0000 		.word	.L250+1
 4546 1bfc 891D0000 		.word	.L251+1
 4547 1c00 AB1D0000 		.word	.L252+1
 4548              	.L245:
1162:../src/gps.c  ****         case 1:
1163:../src/gps.c  ****             if (PREAMBLE2 == data) {
 4549              		.loc 1 1163 0
 4550 1c04 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4551 1c06 622B     		cmp	r3, #98
 4552 1c08 07D1     		bne	.L254
1164:../src/gps.c  ****                 _step++;
 4553              		.loc 1 1164 0
 4554 1c0a 794B     		ldr	r3, .L266
 4555 1c0c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4556 1c0e 03F10103 		add	r3, r3, #1
 4557 1c12 DAB2     		uxtb	r2, r3
 4558 1c14 764B     		ldr	r3, .L266
 4559 1c16 1A70     		strb	r2, [r3, #0]
1165:../src/gps.c  ****                 break;
 4560              		.loc 1 1165 0
 4561 1c18 E4E0     		b	.L243
 4562              	.L254:
1166:../src/gps.c  ****             }
1167:../src/gps.c  ****             _step = 0;
 4563              		.loc 1 1167 0
 4564 1c1a 754B     		ldr	r3, .L266
 4565 1c1c 4FF00002 		mov	r2, #0
 4566 1c20 1A70     		strb	r2, [r3, #0]
 4567              	.L244:
1168:../src/gps.c  ****         case 0:
1169:../src/gps.c  ****             if (PREAMBLE1 == data)
 4568              		.loc 1 1169 0
 4569 1c22 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4570 1c24 B52B     		cmp	r3, #181
 4571 1c26 40F0D680 		bne	.L262
1170:../src/gps.c  ****                 _step++;
 4572              		.loc 1 1170 0
 4573 1c2a 714B     		ldr	r3, .L266
 4574 1c2c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4575 1c2e 03F10103 		add	r3, r3, #1
 4576 1c32 DAB2     		uxtb	r2, r3
 4577 1c34 6E4B     		ldr	r3, .L266
 4578 1c36 1A70     		strb	r2, [r3, #0]
1171:../src/gps.c  ****             break;
 4579              		.loc 1 1171 0
 4580 1c38 CDE0     		b	.L262
 4581              	.L246:
1172:../src/gps.c  ****         case 2:
1173:../src/gps.c  ****             _step++;
 4582              		.loc 1 1173 0
 4583 1c3a 6D4B     		ldr	r3, .L266
 4584 1c3c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4585 1c3e 03F10103 		add	r3, r3, #1
 4586 1c42 DAB2     		uxtb	r2, r3
 4587 1c44 6A4B     		ldr	r3, .L266
 4588 1c46 1A70     		strb	r2, [r3, #0]
1174:../src/gps.c  ****             _class = data;
 4589              		.loc 1 1174 0
 4590 1c48 6A4B     		ldr	r3, .L266+4
 4591 1c4a FA79     		ldrb	r2, [r7, #7]
 4592 1c4c 1A70     		strb	r2, [r3, #0]
1175:../src/gps.c  ****             _ck_b = _ck_a = data;   // reset the checksum accumulators
 4593              		.loc 1 1175 0
 4594 1c4e 6A4B     		ldr	r3, .L266+8
 4595 1c50 FA79     		ldrb	r2, [r7, #7]
 4596 1c52 1A70     		strb	r2, [r3, #0]
 4597 1c54 684B     		ldr	r3, .L266+8
 4598 1c56 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 4599 1c58 684B     		ldr	r3, .L266+12
 4600 1c5a 1A70     		strb	r2, [r3, #0]
1176:../src/gps.c  ****             break;
 4601              		.loc 1 1176 0
 4602 1c5c C2E0     		b	.L243
 4603              	.L247:
1177:../src/gps.c  ****         case 3:
1178:../src/gps.c  ****             _step++;
 4604              		.loc 1 1178 0
 4605 1c5e 644B     		ldr	r3, .L266
 4606 1c60 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4607 1c62 03F10103 		add	r3, r3, #1
 4608 1c66 DAB2     		uxtb	r2, r3
 4609 1c68 614B     		ldr	r3, .L266
 4610 1c6a 1A70     		strb	r2, [r3, #0]
1179:../src/gps.c  ****             _ck_b += (_ck_a += data);       // checksum byte
 4611              		.loc 1 1179 0
 4612 1c6c 624B     		ldr	r3, .L266+8
 4613 1c6e 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 4614 1c70 FB79     		ldrb	r3, [r7, #7]
 4615 1c72 D318     		adds	r3, r2, r3
 4616 1c74 DAB2     		uxtb	r2, r3
 4617 1c76 604B     		ldr	r3, .L266+8
 4618 1c78 1A70     		strb	r2, [r3, #0]
 4619 1c7a 5F4B     		ldr	r3, .L266+8
 4620 1c7c 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 4621 1c7e 5F4B     		ldr	r3, .L266+12
 4622 1c80 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4623 1c82 D318     		adds	r3, r2, r3
 4624 1c84 DAB2     		uxtb	r2, r3
 4625 1c86 5D4B     		ldr	r3, .L266+12
 4626 1c88 1A70     		strb	r2, [r3, #0]
1180:../src/gps.c  ****             _msg_id = data;
 4627              		.loc 1 1180 0
 4628 1c8a 5D4B     		ldr	r3, .L266+16
 4629 1c8c FA79     		ldrb	r2, [r7, #7]
 4630 1c8e 1A70     		strb	r2, [r3, #0]
1181:../src/gps.c  ****             break;
 4631              		.loc 1 1181 0
 4632 1c90 A8E0     		b	.L243
 4633              	.L248:
1182:../src/gps.c  ****         case 4:
1183:../src/gps.c  ****             _step++;
 4634              		.loc 1 1183 0
 4635 1c92 574B     		ldr	r3, .L266
 4636 1c94 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4637 1c96 03F10103 		add	r3, r3, #1
 4638 1c9a DAB2     		uxtb	r2, r3
 4639 1c9c 544B     		ldr	r3, .L266
 4640 1c9e 1A70     		strb	r2, [r3, #0]
1184:../src/gps.c  ****             _ck_b += (_ck_a += data);       // checksum byte
 4641              		.loc 1 1184 0
 4642 1ca0 554B     		ldr	r3, .L266+8
 4643 1ca2 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 4644 1ca4 FB79     		ldrb	r3, [r7, #7]
 4645 1ca6 D318     		adds	r3, r2, r3
 4646 1ca8 DAB2     		uxtb	r2, r3
 4647 1caa 534B     		ldr	r3, .L266+8
 4648 1cac 1A70     		strb	r2, [r3, #0]
 4649 1cae 524B     		ldr	r3, .L266+8
 4650 1cb0 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 4651 1cb2 524B     		ldr	r3, .L266+12
 4652 1cb4 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4653 1cb6 D318     		adds	r3, r2, r3
 4654 1cb8 DAB2     		uxtb	r2, r3
 4655 1cba 504B     		ldr	r3, .L266+12
 4656 1cbc 1A70     		strb	r2, [r3, #0]
1185:../src/gps.c  ****             _payload_length = data; // payload length low byte
 4657              		.loc 1 1185 0
 4658 1cbe FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4659 1cc0 9AB2     		uxth	r2, r3
 4660 1cc2 504B     		ldr	r3, .L266+20
 4661 1cc4 1A80     		strh	r2, [r3, #0]	@ movhi
1186:../src/gps.c  ****             break;
 4662              		.loc 1 1186 0
 4663 1cc6 8DE0     		b	.L243
 4664              	.L249:
1187:../src/gps.c  ****         case 5:
1188:../src/gps.c  ****             _step++;
 4665              		.loc 1 1188 0
 4666 1cc8 494B     		ldr	r3, .L266
 4667 1cca 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4668 1ccc 03F10103 		add	r3, r3, #1
 4669 1cd0 DAB2     		uxtb	r2, r3
 4670 1cd2 474B     		ldr	r3, .L266
 4671 1cd4 1A70     		strb	r2, [r3, #0]
1189:../src/gps.c  ****             _ck_b += (_ck_a += data);       // checksum byte
 4672              		.loc 1 1189 0
 4673 1cd6 484B     		ldr	r3, .L266+8
 4674 1cd8 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 4675 1cda FB79     		ldrb	r3, [r7, #7]
 4676 1cdc D318     		adds	r3, r2, r3
 4677 1cde DAB2     		uxtb	r2, r3
 4678 1ce0 454B     		ldr	r3, .L266+8
 4679 1ce2 1A70     		strb	r2, [r3, #0]
 4680 1ce4 444B     		ldr	r3, .L266+8
 4681 1ce6 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 4682 1ce8 444B     		ldr	r3, .L266+12
 4683 1cea 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4684 1cec D318     		adds	r3, r2, r3
 4685 1cee DAB2     		uxtb	r2, r3
 4686 1cf0 424B     		ldr	r3, .L266+12
 4687 1cf2 1A70     		strb	r2, [r3, #0]
1190:../src/gps.c  ****             _payload_length += (uint16_t) (data << 8);
 4688              		.loc 1 1190 0
 4689 1cf4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4690 1cf6 9BB2     		uxth	r3, r3
 4691 1cf8 4FEA0323 		lsl	r3, r3, #8
 4692 1cfc 9AB2     		uxth	r2, r3
 4693 1cfe 414B     		ldr	r3, .L266+20
 4694 1d00 1B88     		ldrh	r3, [r3, #0]
 4695 1d02 D318     		adds	r3, r2, r3
 4696 1d04 9AB2     		uxth	r2, r3
 4697 1d06 3F4B     		ldr	r3, .L266+20
 4698 1d08 1A80     		strh	r2, [r3, #0]	@ movhi
1191:../src/gps.c  ****             if (_payload_length > 512) {
 4699              		.loc 1 1191 0
 4700 1d0a 3E4B     		ldr	r3, .L266+20
 4701 1d0c 1B88     		ldrh	r3, [r3, #0]
 4702 1d0e B3F5007F 		cmp	r3, #512
 4703 1d12 07D9     		bls	.L256
1192:../src/gps.c  ****                 _payload_length = 0;
 4704              		.loc 1 1192 0
 4705 1d14 3B4B     		ldr	r3, .L266+20
 4706 1d16 4FF00002 		mov	r2, #0
 4707 1d1a 1A80     		strh	r2, [r3, #0]	@ movhi
1193:../src/gps.c  ****                 _step = 0;
 4708              		.loc 1 1193 0
 4709 1d1c 344B     		ldr	r3, .L266
 4710 1d1e 4FF00002 		mov	r2, #0
 4711 1d22 1A70     		strb	r2, [r3, #0]
 4712              	.L256:
1194:../src/gps.c  ****             }
1195:../src/gps.c  ****             _payload_counter = 0;   // prepare to receive payload
 4713              		.loc 1 1195 0
 4714 1d24 384B     		ldr	r3, .L266+24
 4715 1d26 4FF00002 		mov	r2, #0
 4716 1d2a 1A80     		strh	r2, [r3, #0]	@ movhi
1196:../src/gps.c  ****             break;
 4717              		.loc 1 1196 0
 4718 1d2c 5AE0     		b	.L243
 4719              	.L250:
1197:../src/gps.c  ****         case 6:
1198:../src/gps.c  ****             _ck_b += (_ck_a += data);       // checksum byte
 4720              		.loc 1 1198 0
 4721 1d2e 324B     		ldr	r3, .L266+8
 4722 1d30 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 4723 1d32 FB79     		ldrb	r3, [r7, #7]
 4724 1d34 D318     		adds	r3, r2, r3
 4725 1d36 DAB2     		uxtb	r2, r3
 4726 1d38 2F4B     		ldr	r3, .L266+8
 4727 1d3a 1A70     		strb	r2, [r3, #0]
 4728 1d3c 2E4B     		ldr	r3, .L266+8
 4729 1d3e 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 4730 1d40 2E4B     		ldr	r3, .L266+12
 4731 1d42 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4732 1d44 D318     		adds	r3, r2, r3
 4733 1d46 DAB2     		uxtb	r2, r3
 4734 1d48 2C4B     		ldr	r3, .L266+12
 4735 1d4a 1A70     		strb	r2, [r3, #0]
1199:../src/gps.c  ****             if (_payload_counter < sizeof(_buffer)) {
 4736              		.loc 1 1199 0
 4737 1d4c 2E4B     		ldr	r3, .L266+24
 4738 1d4e 1B88     		ldrh	r3, [r3, #0]
 4739 1d50 3F2B     		cmp	r3, #63
 4740 1d52 04D8     		bhi	.L257
1200:../src/gps.c  ****                 _buffer.bytes[_payload_counter] = data;
 4741              		.loc 1 1200 0
 4742 1d54 2C4B     		ldr	r3, .L266+24
 4743 1d56 1B88     		ldrh	r3, [r3, #0]
 4744 1d58 2C4A     		ldr	r2, .L266+28
 4745 1d5a F979     		ldrb	r1, [r7, #7]
 4746 1d5c D154     		strb	r1, [r2, r3]
 4747              	.L257:
1201:../src/gps.c  ****             }
1202:../src/gps.c  ****             if (++_payload_counter == _payload_length)
 4748              		.loc 1 1202 0
 4749 1d5e 2A4B     		ldr	r3, .L266+24
 4750 1d60 1B88     		ldrh	r3, [r3, #0]
 4751 1d62 03F10103 		add	r3, r3, #1
 4752 1d66 9AB2     		uxth	r2, r3
 4753 1d68 274B     		ldr	r3, .L266+24
 4754 1d6a 1A80     		strh	r2, [r3, #0]	@ movhi
 4755 1d6c 264B     		ldr	r3, .L266+24
 4756 1d6e 1A88     		ldrh	r2, [r3, #0]
 4757 1d70 244B     		ldr	r3, .L266+20
 4758 1d72 1B88     		ldrh	r3, [r3, #0]
 4759 1d74 9A42     		cmp	r2, r3
 4760 1d76 30D1     		bne	.L263
1203:../src/gps.c  ****                 _step++;
 4761              		.loc 1 1203 0
 4762 1d78 1D4B     		ldr	r3, .L266
 4763 1d7a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4764 1d7c 03F10103 		add	r3, r3, #1
 4765 1d80 DAB2     		uxtb	r2, r3
 4766 1d82 1B4B     		ldr	r3, .L266
 4767 1d84 1A70     		strb	r2, [r3, #0]
1204:../src/gps.c  ****             break;
 4768              		.loc 1 1204 0
 4769 1d86 28E0     		b	.L263
 4770              	.L251:
1205:../src/gps.c  ****         case 7:
1206:../src/gps.c  ****             _step++;
 4771              		.loc 1 1206 0
 4772 1d88 194B     		ldr	r3, .L266
 4773 1d8a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4774 1d8c 03F10103 		add	r3, r3, #1
 4775 1d90 DAB2     		uxtb	r2, r3
 4776 1d92 174B     		ldr	r3, .L266
 4777 1d94 1A70     		strb	r2, [r3, #0]
1207:../src/gps.c  ****             if (_ck_a != data)
 4778              		.loc 1 1207 0
 4779 1d96 184B     		ldr	r3, .L266+8
 4780 1d98 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4781 1d9a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4782 1d9c 9A42     		cmp	r2, r3
 4783 1d9e 1ED0     		beq	.L264
1208:../src/gps.c  ****                 _step = 0;          // bad checksum
 4784              		.loc 1 1208 0
 4785 1da0 134B     		ldr	r3, .L266
 4786 1da2 4FF00002 		mov	r2, #0
 4787 1da6 1A70     		strb	r2, [r3, #0]
1209:../src/gps.c  ****             break;
 4788              		.loc 1 1209 0
 4789 1da8 19E0     		b	.L264
 4790              	.L252:
1210:../src/gps.c  ****         case 8:
1211:../src/gps.c  ****             _step = 0;
 4791              		.loc 1 1211 0
 4792 1daa 114B     		ldr	r3, .L266
 4793 1dac 4FF00002 		mov	r2, #0
 4794 1db0 1A70     		strb	r2, [r3, #0]
1212:../src/gps.c  ****             if (_ck_b != data)
 4795              		.loc 1 1212 0
 4796 1db2 124B     		ldr	r3, .L266+12
 4797 1db4 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4798 1db6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4799 1db8 9A42     		cmp	r2, r3
 4800 1dba 12D1     		bne	.L265
 4801              	.L260:
1213:../src/gps.c  ****                 break;              // bad checksum
1214:../src/gps.c  ****             GPS_Present = 1;
 4802              		.loc 1 1214 0
 4803 1dbc 144B     		ldr	r3, .L266+32
 4804 1dbe 4FF00102 		mov	r2, #1
 4805 1dc2 1A70     		strb	r2, [r3, #0]
1215:../src/gps.c  ****             if (UBLOX_parse_gps()) {
 4806              		.loc 1 1215 0
 4807 1dc4 00F026F8 		bl	UBLOX_parse_gps
 4808 1dc8 0346     		mov	r3, r0
 4809 1dca 002B     		cmp	r3, #0
 4810 1dcc 0AD0     		beq	.L243
1216:../src/gps.c  ****                 parsed = true;
 4811              		.loc 1 1216 0
 4812 1dce 4FF00103 		mov	r3, #1
 4813 1dd2 FB73     		strb	r3, [r7, #15]
 4814 1dd4 06E0     		b	.L243
 4815              	.L262:
1171:../src/gps.c  ****             break;
 4816              		.loc 1 1171 0
 4817 1dd6 00BF     		nop
 4818 1dd8 04E0     		b	.L243
 4819              	.L263:
1204:../src/gps.c  ****             break;
 4820              		.loc 1 1204 0
 4821 1dda 00BF     		nop
 4822 1ddc 02E0     		b	.L243
 4823              	.L264:
1209:../src/gps.c  ****             break;
 4824              		.loc 1 1209 0
 4825 1dde 00BF     		nop
 4826 1de0 00E0     		b	.L243
 4827              	.L265:
1213:../src/gps.c  ****                 break;              // bad checksum
 4828              		.loc 1 1213 0
 4829 1de2 00BF     		nop
 4830              	.L243:
1217:../src/gps.c  ****             }
1218:../src/gps.c  ****     }                           //end switch
1219:../src/gps.c  ****     return parsed;
 4831              		.loc 1 1219 0
 4832 1de4 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1220:../src/gps.c  **** }
 4833              		.loc 1 1220 0
 4834 1de6 1846     		mov	r0, r3
 4835 1de8 07F11007 		add	r7, r7, #16
 4836 1dec BD46     		mov	sp, r7
 4837 1dee 80BD     		pop	{r7, pc}
 4838              	.L267:
 4839              		.align	2
 4840              	.L266:
 4841 1df0 30010000 		.word	_step
 4842 1df4 37010000 		.word	_class
 4843 1df8 2E010000 		.word	_ck_a
 4844 1dfc 2F010000 		.word	_ck_b
 4845 1e00 31010000 		.word	_msg_id
 4846 1e04 32010000 		.word	_payload_length
 4847 1e08 34010000 		.word	_payload_counter
 4848 1e0c 3C010000 		.word	_buffer
 4849 1e10 00000000 		.word	GPS_Present
 4850              		.cfi_endproc
 4851              	.LFE61:
 4853              		.align	2
 4854              		.thumb
 4855              		.thumb_func
 4857              	UBLOX_parse_gps:
 4858              	.LFB62:
1221:../src/gps.c  **** 
1222:../src/gps.c  **** static bool UBLOX_parse_gps(void)
1223:../src/gps.c  **** {
 4859              		.loc 1 1223 0
 4860              		.cfi_startproc
 4861              		@ args = 0, pretend = 0, frame = 0
 4862              		@ frame_needed = 1, uses_anonymous_args = 0
 4863              		@ link register save eliminated.
 4864 1e14 80B4     		push	{r7}
 4865              	.LCFI97:
 4866              		.cfi_def_cfa_offset 4
 4867              		.cfi_offset 7, -4
 4868 1e16 00AF     		add	r7, sp, #0
 4869              	.LCFI98:
 4870              		.cfi_def_cfa_register 7
1224:../src/gps.c  ****     switch (_msg_id) {
 4871              		.loc 1 1224 0
 4872 1e18 614B     		ldr	r3, .L285
 4873 1e1a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4874 1e1c A3F10203 		sub	r3, r3, #2
 4875 1e20 102B     		cmp	r3, #16
 4876 1e22 00F2A080 		bhi	.L269
 4877 1e26 01A1     		adr	r1, .L274
 4878 1e28 51F823F0 		ldr	pc, [r1, r3, lsl #2]
 4879              		.align	2
 4880              	.L274:
 4881 1e2c 711E0000 		.word	.L270+1
 4882 1e30 AF1E0000 		.word	.L271+1
 4883 1e34 671F0000 		.word	.L269+1
 4884 1e38 671F0000 		.word	.L269+1
 4885 1e3c EF1E0000 		.word	.L272+1
 4886 1e40 671F0000 		.word	.L269+1
 4887 1e44 671F0000 		.word	.L269+1
 4888 1e48 671F0000 		.word	.L269+1
 4889 1e4c 671F0000 		.word	.L269+1
 4890 1e50 671F0000 		.word	.L269+1
 4891 1e54 671F0000 		.word	.L269+1
 4892 1e58 671F0000 		.word	.L269+1
 4893 1e5c 671F0000 		.word	.L269+1
 4894 1e60 671F0000 		.word	.L269+1
 4895 1e64 671F0000 		.word	.L269+1
 4896 1e68 671F0000 		.word	.L269+1
 4897 1e6c 391F0000 		.word	.L273+1
 4898              	.L270:
1225:../src/gps.c  ****     case MSG_POSLLH:
1226:../src/gps.c  ****         //i2c_dataset.time                = _buffer.posllh.time;
1227:../src/gps.c  ****         GPS_coord[LON] = _buffer.posllh.longitude;
 4899              		.loc 1 1227 0
 4900 1e70 4C4B     		ldr	r3, .L285+4
 4901 1e72 5A68     		ldr	r2, [r3, #4]
 4902 1e74 4C4B     		ldr	r3, .L285+8
 4903 1e76 5A60     		str	r2, [r3, #4]
1228:../src/gps.c  ****         GPS_coord[LAT] = _buffer.posllh.latitude;
 4904              		.loc 1 1228 0
 4905 1e78 4A4B     		ldr	r3, .L285+4
 4906 1e7a 9A68     		ldr	r2, [r3, #8]
 4907 1e7c 4A4B     		ldr	r3, .L285+8
 4908 1e7e 1A60     		str	r2, [r3, #0]
1229:../src/gps.c  ****         GPS_altitude = _buffer.posllh.altitude_msl / 10 / 100;  //alt in m
 4909              		.loc 1 1229 0
 4910 1e80 484B     		ldr	r3, .L285+4
 4911 1e82 1B69     		ldr	r3, [r3, #16]
 4912 1e84 494A     		ldr	r2, .L285+12
 4913 1e86 82FB0312 		smull	r1, r2, r2, r3
 4914 1e8a 4FEAA212 		asr	r2, r2, #6
 4915 1e8e 4FEAE373 		asr	r3, r3, #31
 4916 1e92 D31A     		subs	r3, r2, r3
 4917 1e94 9AB2     		uxth	r2, r3
 4918 1e96 464B     		ldr	r3, .L285+16
 4919 1e98 1A80     		strh	r2, [r3, #0]	@ movhi
1230:../src/gps.c  ****         f.GPS_FIX = next_fix;
 4920              		.loc 1 1230 0
 4921 1e9a 464B     		ldr	r3, .L285+20
 4922 1e9c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4923 1e9e 1A46     		mov	r2, r3
 4924 1ea0 454B     		ldr	r3, .L285+24
 4925 1ea2 DA72     		strb	r2, [r3, #11]
1231:../src/gps.c  ****         _new_position = true;
 4926              		.loc 1 1231 0
 4927 1ea4 454B     		ldr	r3, .L285+28
 4928 1ea6 4FF00102 		mov	r2, #1
 4929 1eaa 1A70     		strb	r2, [r3, #0]
1232:../src/gps.c  ****         break;
 4930              		.loc 1 1232 0
 4931 1eac 5FE0     		b	.L275
 4932              	.L271:
1233:../src/gps.c  ****     case MSG_STATUS:
1234:../src/gps.c  ****         next_fix = (_buffer.status.fix_status & NAV_STATUS_FIX_VALID) && (_buffer.status.fix_type =
 4933              		.loc 1 1234 0
 4934 1eae 3D4B     		ldr	r3, .L285+4
 4935 1eb0 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 4936 1eb2 03F00103 		and	r3, r3, #1
 4937 1eb6 002B     		cmp	r3, #0
 4938 1eb8 06D0     		beq	.L276
 4939              		.loc 1 1234 0 is_stmt 0 discriminator 1
 4940 1eba 3A4B     		ldr	r3, .L285+4
 4941 1ebc 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 4942 1ebe 032B     		cmp	r3, #3
 4943 1ec0 02D1     		bne	.L276
 4944              		.loc 1 1234 0 discriminator 3
 4945 1ec2 4FF00103 		mov	r3, #1
 4946 1ec6 01E0     		b	.L277
 4947              	.L276:
 4948              		.loc 1 1234 0 discriminator 2
 4949 1ec8 4FF00003 		mov	r3, #0
 4950              	.L277:
 4951              		.loc 1 1234 0 discriminator 4
 4952 1ecc 03F00103 		and	r3, r3, #1
 4953 1ed0 DAB2     		uxtb	r2, r3
 4954 1ed2 384B     		ldr	r3, .L285+20
 4955 1ed4 1A70     		strb	r2, [r3, #0]
1235:../src/gps.c  ****         if (!next_fix)
 4956              		.loc 1 1235 0 is_stmt 1 discriminator 4
 4957 1ed6 374B     		ldr	r3, .L285+20
 4958 1ed8 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4959 1eda 83F00103 		eor	r3, r3, #1
 4960 1ede DBB2     		uxtb	r3, r3
 4961 1ee0 002B     		cmp	r3, #0
 4962 1ee2 43D0     		beq	.L284
1236:../src/gps.c  ****             f.GPS_FIX = false;
 4963              		.loc 1 1236 0
 4964 1ee4 344B     		ldr	r3, .L285+24
 4965 1ee6 4FF00002 		mov	r2, #0
 4966 1eea DA72     		strb	r2, [r3, #11]
1237:../src/gps.c  ****         break;
 4967              		.loc 1 1237 0
 4968 1eec 3EE0     		b	.L284
 4969              	.L272:
1238:../src/gps.c  ****     case MSG_SOL:
1239:../src/gps.c  ****         next_fix = (_buffer.solution.fix_status & NAV_STATUS_FIX_VALID) && (_buffer.solution.fix_ty
 4970              		.loc 1 1239 0
 4971 1eee 2D4B     		ldr	r3, .L285+4
 4972 1ef0 DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 4973 1ef2 03F00103 		and	r3, r3, #1
 4974 1ef6 002B     		cmp	r3, #0
 4975 1ef8 06D0     		beq	.L279
 4976              		.loc 1 1239 0 is_stmt 0 discriminator 1
 4977 1efa 2A4B     		ldr	r3, .L285+4
 4978 1efc 9B7A     		ldrb	r3, [r3, #10]	@ zero_extendqisi2
 4979 1efe 032B     		cmp	r3, #3
 4980 1f00 02D1     		bne	.L279
 4981              		.loc 1 1239 0 discriminator 3
 4982 1f02 4FF00103 		mov	r3, #1
 4983 1f06 01E0     		b	.L280
 4984              	.L279:
 4985              		.loc 1 1239 0 discriminator 2
 4986 1f08 4FF00003 		mov	r3, #0
 4987              	.L280:
 4988              		.loc 1 1239 0 discriminator 4
 4989 1f0c 03F00103 		and	r3, r3, #1
 4990 1f10 DAB2     		uxtb	r2, r3
 4991 1f12 284B     		ldr	r3, .L285+20
 4992 1f14 1A70     		strb	r2, [r3, #0]
1240:../src/gps.c  ****         if (!next_fix)
 4993              		.loc 1 1240 0 is_stmt 1 discriminator 4
 4994 1f16 274B     		ldr	r3, .L285+20
 4995 1f18 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4996 1f1a 83F00103 		eor	r3, r3, #1
 4997 1f1e DBB2     		uxtb	r3, r3
 4998 1f20 002B     		cmp	r3, #0
 4999 1f22 03D0     		beq	.L281
1241:../src/gps.c  ****             f.GPS_FIX = false;
 5000              		.loc 1 1241 0
 5001 1f24 244B     		ldr	r3, .L285+24
 5002 1f26 4FF00002 		mov	r2, #0
 5003 1f2a DA72     		strb	r2, [r3, #11]
 5004              	.L281:
1242:../src/gps.c  ****         GPS_numSat = _buffer.solution.satellites;
 5005              		.loc 1 1242 0
 5006 1f2c 1D4B     		ldr	r3, .L285+4
 5007 1f2e 93F82F20 		ldrb	r2, [r3, #47]	@ zero_extendqisi2
 5008 1f32 234B     		ldr	r3, .L285+32
 5009 1f34 1A70     		strb	r2, [r3, #0]
1243:../src/gps.c  ****         // GPS_hdop                        = _buffer.solution.position_DOP;
1244:../src/gps.c  ****         // debug[3] = GPS_hdop;
1245:../src/gps.c  ****         break;
 5010              		.loc 1 1245 0
 5011 1f36 1AE0     		b	.L275
 5012              	.L273:
1246:../src/gps.c  ****     case MSG_VELNED:
1247:../src/gps.c  ****         // speed_3d                        = _buffer.velned.speed_3d;  // cm/s
1248:../src/gps.c  ****         GPS_speed = _buffer.velned.speed_2d;    // cm/s
 5013              		.loc 1 1248 0
 5014 1f38 1A4B     		ldr	r3, .L285+4
 5015 1f3a 5B69     		ldr	r3, [r3, #20]
 5016 1f3c 9AB2     		uxth	r2, r3
 5017 1f3e 214B     		ldr	r3, .L285+36
 5018 1f40 1A80     		strh	r2, [r3, #0]	@ movhi
1249:../src/gps.c  ****         GPS_ground_course = (uint16_t) (_buffer.velned.heading_2d / 10000);     // Heading 2D deg *
 5019              		.loc 1 1249 0
 5020 1f42 184B     		ldr	r3, .L285+4
 5021 1f44 9B69     		ldr	r3, [r3, #24]
 5022 1f46 204A     		ldr	r2, .L285+40
 5023 1f48 82FB0312 		smull	r1, r2, r2, r3
 5024 1f4c 4FEA2232 		asr	r2, r2, #12
 5025 1f50 4FEAE373 		asr	r3, r3, #31
 5026 1f54 D31A     		subs	r3, r2, r3
 5027 1f56 9AB2     		uxth	r2, r3
 5028 1f58 1C4B     		ldr	r3, .L285+44
 5029 1f5a 1A80     		strh	r2, [r3, #0]	@ movhi
1250:../src/gps.c  ****         _new_speed = true;
 5030              		.loc 1 1250 0
 5031 1f5c 1C4B     		ldr	r3, .L285+48
 5032 1f5e 4FF00102 		mov	r2, #1
 5033 1f62 1A70     		strb	r2, [r3, #0]
1251:../src/gps.c  ****         break;
 5034              		.loc 1 1251 0
 5035 1f64 03E0     		b	.L275
 5036              	.L269:
1252:../src/gps.c  ****     default:
1253:../src/gps.c  ****         return false;
 5037              		.loc 1 1253 0
 5038 1f66 4FF00003 		mov	r3, #0
 5039 1f6a 15E0     		b	.L282
 5040              	.L284:
1237:../src/gps.c  ****         break;
 5041              		.loc 1 1237 0
 5042 1f6c 00BF     		nop
 5043              	.L275:
1254:../src/gps.c  ****     }
1255:../src/gps.c  **** 
1256:../src/gps.c  ****     // we only return true when we get new position and speed data
1257:../src/gps.c  ****     // this ensures we don't use stale data
1258:../src/gps.c  ****     if (_new_position && _new_speed) {
 5044              		.loc 1 1258 0
 5045 1f6e 134B     		ldr	r3, .L285+28
 5046 1f70 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 5047 1f72 002B     		cmp	r3, #0
 5048 1f74 0ED0     		beq	.L283
 5049              		.loc 1 1258 0 is_stmt 0 discriminator 1
 5050 1f76 164B     		ldr	r3, .L285+48
 5051 1f78 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 5052 1f7a 002B     		cmp	r3, #0
 5053 1f7c 0AD0     		beq	.L283
1259:../src/gps.c  ****         _new_speed = _new_position = false;
 5054              		.loc 1 1259 0 is_stmt 1
 5055 1f7e 0F4B     		ldr	r3, .L285+28
 5056 1f80 4FF00002 		mov	r2, #0
 5057 1f84 1A70     		strb	r2, [r3, #0]
 5058 1f86 0D4B     		ldr	r3, .L285+28
 5059 1f88 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 5060 1f8a 114B     		ldr	r3, .L285+48
 5061 1f8c 1A70     		strb	r2, [r3, #0]
1260:../src/gps.c  ****         return true;
 5062              		.loc 1 1260 0
 5063 1f8e 4FF00103 		mov	r3, #1
 5064 1f92 01E0     		b	.L282
 5065              	.L283:
1261:../src/gps.c  ****     }
1262:../src/gps.c  ****     return false;
 5066              		.loc 1 1262 0
 5067 1f94 4FF00003 		mov	r3, #0
 5068              	.L282:
1263:../src/gps.c  **** }
 5069              		.loc 1 1263 0
 5070 1f98 1846     		mov	r0, r3
 5071 1f9a BD46     		mov	sp, r7
 5072 1f9c 80BC     		pop	{r7}
 5073 1f9e 7047     		bx	lr
 5074              	.L286:
 5075              		.align	2
 5076              	.L285:
 5077 1fa0 31010000 		.word	_msg_id
 5078 1fa4 3C010000 		.word	_buffer
 5079 1fa8 00000000 		.word	GPS_coord
 5080 1fac D34D6210 		.word	274877907
 5081 1fb0 00000000 		.word	GPS_altitude
 5082 1fb4 36010000 		.word	next_fix
 5083 1fb8 00000000 		.word	f
 5084 1fbc 38010000 		.word	_new_position
 5085 1fc0 00000000 		.word	GPS_numSat
 5086 1fc4 00000000 		.word	GPS_speed
 5087 1fc8 AD8BDB68 		.word	1759218605
 5088 1fcc 00000000 		.word	GPS_ground_course
 5089 1fd0 39010000 		.word	_new_speed
 5090              		.cfi_endproc
 5091              	.LFE62:
 5093              		.bss
 5094              	param.9326:
 5095 017c 00       		.space	1
 5096              	offset.9327:
 5097 017d 00       		.space	1
 5098              	parity.9328:
 5099 017e 00       		.space	1
 5100 017f 00       		.align	2
 5101              	string.9329:
 5102 0180 00000000 		.space	15
 5102      00000000 
 5102      00000000 
 5102      000000
 5103              	frame.9331:
 5104 018f 00       		.space	1
 5105              	checksum_param.9330:
 5106 0190 00       		.space	1
 5107              	init.9232:
 5108 0191 00       		.space	1
 5109 0192 0000     		.align	2
 5110              	last.9231:
 5111 0194 00000000 		.space	8
 5111      00000000 
 5112              		.align	2
 5113              	speed_old.9230:
 5114 019c 00000000 		.space	4
 5115              		.align	2
 5116              	nav_loopTimer.9182:
 5117 01a0 00000000 		.space	4
 5118              		.text
 5119              	.Letext0:
 5120              		.file 2 "/home/oni/ARM_EABI/bin/../lib/gcc/arm-none-eabi/4.7.2/../../../../arm-none-eabi/include/s
 5121              		.file 3 "../src/board.h"
 5122              		.file 4 "../src/mw.h"
 5123              		.file 5 "/home/oni/ARM_EABI/bin/../lib/gcc/arm-none-eabi/4.7.2/../../../../arm-none-eabi/include/c
 5124              		.file 6 "/home/oni/workspace/Naze32/lib/CMSIS/CM3/CoreSupport/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:00000000 gps.c
     /tmp/ccyDx3k8.s:23     .rodata:00000000 init_speed
     /tmp/ccyDx3k8.s:20     .rodata:00000000 $d
     /tmp/ccyDx3k8.s:56     .rodata:000000f8 gpsInitStrings
     /tmp/ccyDx3k8.s:68     .rodata:00000118 ubloxInit
     /tmp/ccyDx3k8.s:210    .text:00000000 $t
     /tmp/ccyDx3k8.s:215    .text:00000000 navigatron2Init
     /tmp/ccyDx3k8.s:258    .text:00000038 $d
     /tmp/ccyDx3k8.s:271    .text:0000003c $t
     /tmp/ccyDx3k8.s:276    .text:0000003c gpsInit
     /tmp/ccyDx3k8.s:1813   .text:00000a24 GPS_set_pids
     /tmp/ccyDx3k8.s:508    .text:000001dc gpsPrint
     /tmp/ccyDx3k8.s:493    .text:000001bc $d
     /tmp/ccyDx3k8.s:1159   .text:00000520 GPS_NewData
     /tmp/ccyDx3k8.s:504    .text:000001dc $t
     /tmp/ccyDx3k8.s:573    .text:00000234 $d
     /tmp/ccyDx3k8.s:577    .text:00000238 $t
     /tmp/ccyDx3k8.s:582    .text:00000238 leadFilter_clear
     /tmp/ccyDx3k8.s:620    .text:00000254 leadFilter_getPosition
                            *COM*:00000002 xLeadFilter
                            *COM*:00000002 yLeadFilter
     /tmp/ccyDx3k8.s:697    .bss:00000000 $d
     /tmp/ccyDx3k8.s:698    .bss:00000000 posholdPID_PARAM
     /tmp/ccyDx3k8.s:701    .bss:00000010 poshold_ratePID_PARAM
     /tmp/ccyDx3k8.s:704    .bss:00000020 navPID_PARAM
     /tmp/ccyDx3k8.s:707    .bss:00000030 posholdPID
     /tmp/ccyDx3k8.s:710    .bss:00000058 poshold_ratePID
     /tmp/ccyDx3k8.s:713    .bss:00000080 navPID
     /tmp/ccyDx3k8.s:720    .text:000002d4 get_P
     /tmp/ccyDx3k8.s:767    .text:00000308 get_I
     /tmp/ccyDx3k8.s:885    .text:000003b0 get_D
     /tmp/ccyDx3k8.s:1041   .text:000004e8 $d
     /tmp/ccyDx3k8.s:1047   .text:000004f4 $t
     /tmp/ccyDx3k8.s:1051   .text:000004f4 reset_PID
     /tmp/ccyDx3k8.s:1089   .text:0000051c $d
     /tmp/ccyDx3k8.s:1095   .bss:000000a8 dTnav
     /tmp/ccyDx3k8.s:1098   .bss:000000ac actual_speed
     /tmp/ccyDx3k8.s:1101   .bss:000000b0 GPS_scaleLonDown
     /tmp/ccyDx3k8.s:1104   .bss:000000b4 rate_error
     /tmp/ccyDx3k8.s:1107   .bss:000000b8 error
     /tmp/ccyDx3k8.s:1110   .bss:000000c0 GPS_WP
     /tmp/ccyDx3k8.s:1113   .bss:000000c8 target_bearing
     /tmp/ccyDx3k8.s:1116   .bss:000000cc original_target_bearing
     /tmp/ccyDx3k8.s:1119   .bss:000000d0 crosstrack_error
     /tmp/ccyDx3k8.s:1122   .bss:000000d4 wp_distance
     /tmp/ccyDx3k8.s:1125   .bss:000000d8 waypoint_speed_gov
     /tmp/ccyDx3k8.s:1127   .bss:000000da GPS_filter_index
     /tmp/ccyDx3k8.s:1130   .bss:000000dc GPS_filter
     /tmp/ccyDx3k8.s:1133   .bss:00000104 GPS_filter_sum
     /tmp/ccyDx3k8.s:1136   .bss:0000010c GPS_read
     /tmp/ccyDx3k8.s:1139   .bss:00000114 GPS_filtered
     /tmp/ccyDx3k8.s:1142   .bss:0000011c GPS_degree
     /tmp/ccyDx3k8.s:1145   .bss:00000124 fraction3
     /tmp/ccyDx3k8.s:1148   .bss:00000128 nav_bearing
     /tmp/ccyDx3k8.s:1151   .bss:0000012c nav_takeoff_bearing
     /tmp/ccyDx3k8.s:1154   .text:00000520 $t
     /tmp/ccyDx3k8.s:3762   .text:0000170c GPS_newFrame
     /tmp/ccyDx3k8.s:1649   .text:00000924 GPS_reset_home_position
     /tmp/ccyDx3k8.s:1443   .text:00000760 $d
     /tmp/ccyDx3k8.s:5116   .bss:000001a0 nav_loopTimer.9182
     /tmp/ccyDx3k8.s:1466   .text:000007b4 $t
     /tmp/ccyDx3k8.s:2193   .text:00000c94 GPS_distance_cm_bearing
     /tmp/ccyDx3k8.s:2318   .text:00000d78 GPS_calc_velocity
     /tmp/ccyDx3k8.s:2469   .text:00000e84 GPS_calc_location_error
     /tmp/ccyDx3k8.s:2534   .text:00000edc GPS_calc_poshold
     /tmp/ccyDx3k8.s:3167   .text:0000139c GPS_calc_desired_speed
     /tmp/ccyDx3k8.s:2760   .text:00001094 GPS_calc_nav_rate
     /tmp/ccyDx3k8.s:2137   .text:00000c50 check_missed_wp
     /tmp/ccyDx3k8.s:1622   .text:000008d8 $d
     /tmp/ccyDx3k8.s:1644   .text:00000924 $t
     /tmp/ccyDx3k8.s:1963   .text:00000b3c GPS_calc_longitude_scaling
     /tmp/ccyDx3k8.s:1703   .text:00000964 $d
     /tmp/ccyDx3k8.s:1712   .text:0000097c $t
     /tmp/ccyDx3k8.s:1717   .text:0000097c GPS_reset_nav
     /tmp/ccyDx3k8.s:1800   .text:00000a0c $d
     /tmp/ccyDx3k8.s:1809   .text:00000a24 $t
     /tmp/ccyDx3k8.s:1948   .text:00000b1c $d
     /tmp/ccyDx3k8.s:1959   .text:00000b3c $t
     /tmp/ccyDx3k8.s:2035   .text:00000bb0 $d
     /tmp/ccyDx3k8.s:2042   .text:00000bc0 $t
     /tmp/ccyDx3k8.s:2047   .text:00000bc0 GPS_set_next_wp
     /tmp/ccyDx3k8.s:2120   .text:00000c28 $d
     /tmp/ccyDx3k8.s:2133   .text:00000c50 $t
     /tmp/ccyDx3k8.s:3276   .text:00001448 wrap_18000
     /tmp/ccyDx3k8.s:2183   .text:00000c8c $d
     /tmp/ccyDx3k8.s:2189   .text:00000c94 $t
     /tmp/ccyDx3k8.s:2307   .text:00000d68 $d
     /tmp/ccyDx3k8.s:2314   .text:00000d78 $t
     /tmp/ccyDx3k8.s:2454   .text:00000e64 $d
     /tmp/ccyDx3k8.s:5107   .bss:00000191 init.9232
     /tmp/ccyDx3k8.s:5110   .bss:00000194 last.9231
     /tmp/ccyDx3k8.s:5113   .bss:0000019c speed_old.9230
     /tmp/ccyDx3k8.s:2465   .text:00000e84 $t
     /tmp/ccyDx3k8.s:2525   .text:00000ed4 $d
     /tmp/ccyDx3k8.s:2530   .text:00000edc $t
     /tmp/ccyDx3k8.s:2742   .text:00001068 $d
     /tmp/ccyDx3k8.s:2756   .text:00001094 $t
     /tmp/ccyDx3k8.s:3001   .text:00001280 GPS_update_crosstrack
     /tmp/ccyDx3k8.s:2984   .text:00001258 $d
     /tmp/ccyDx3k8.s:2997   .text:00001280 $t
     /tmp/ccyDx3k8.s:3335   .text:0000148c wrap_36000
     /tmp/ccyDx3k8.s:3153   .text:00001380 $d
     /tmp/ccyDx3k8.s:3163   .text:0000139c $t
     /tmp/ccyDx3k8.s:3263   .text:00001434 $d
     /tmp/ccyDx3k8.s:3271   .text:00001448 $t
     /tmp/ccyDx3k8.s:3327   .text:00001488 $d
     /tmp/ccyDx3k8.s:3331   .text:0000148c $t
     /tmp/ccyDx3k8.s:3390   .text:000014cc GPS_coord_to_degrees
     /tmp/ccyDx3k8.s:3583   .text:0000161c $d
     /tmp/ccyDx3k8.s:3590   .text:0000162c $t
     /tmp/ccyDx3k8.s:3594   .text:0000162c grab_fields
     /tmp/ccyDx3k8.s:3711   .text:000016d4 hex_c
     /tmp/ccyDx3k8.s:3790   .text:00001728 $d
     /tmp/ccyDx3k8.s:3796   .text:00001738 $t
     /tmp/ccyDx3k8.s:3937   .text:00001838 GPS_NMEA_newFrame
     /tmp/ccyDx3k8.s:4508   .text:00001bc0 GPS_UBLOX_newFrame
     /tmp/ccyDx3k8.s:3833   .text:0000176c GPS_I2C_newFrame
     /tmp/ccyDx3k8.s:3825   .text:00001768 $d
     /tmp/ccyDx3k8.s:3829   .text:0000176c $t
     /tmp/ccyDx3k8.s:3924   .text:00001820 $d
     /tmp/ccyDx3k8.s:3933   .text:00001838 $t
     /tmp/ccyDx3k8.s:4255   .text:00001a54 $d
     /tmp/ccyDx3k8.s:5094   .bss:0000017c param.9326
     /tmp/ccyDx3k8.s:5096   .bss:0000017d offset.9327
     /tmp/ccyDx3k8.s:5098   .bss:0000017e parity.9328
     /tmp/ccyDx3k8.s:5101   .bss:00000180 string.9329
     /tmp/ccyDx3k8.s:5103   .bss:0000018f frame.9331
     /tmp/ccyDx3k8.s:5105   .bss:00000190 checksum_param.9330
     /tmp/ccyDx3k8.s:4270   .text:00001a88 $t
     /tmp/ccyDx3k8.s:4390   .text:00001b4c $d
                            *COM*:00000001 ubs_protocol_bytes
                            *COM*:00000001 ubs_nav_fix_type
                            *COM*:00000001 ubx_nav_status_bits
     /tmp/ccyDx3k8.s:4403   .bss:0000012e _ck_a
     /tmp/ccyDx3k8.s:4405   .bss:0000012f _ck_b
     /tmp/ccyDx3k8.s:4407   .bss:00000130 _step
     /tmp/ccyDx3k8.s:4409   .bss:00000131 _msg_id
     /tmp/ccyDx3k8.s:4412   .bss:00000132 _payload_length
     /tmp/ccyDx3k8.s:4415   .bss:00000134 _payload_counter
     /tmp/ccyDx3k8.s:4417   .bss:00000136 next_fix
     /tmp/ccyDx3k8.s:4419   .bss:00000137 _class
     /tmp/ccyDx3k8.s:4421   .bss:00000138 _new_position
     /tmp/ccyDx3k8.s:4423   .bss:00000139 _new_speed
     /tmp/ccyDx3k8.s:4425   .bss:0000013a _disable_counter
     /tmp/ccyDx3k8.s:4428   .bss:0000013c _buffer
     /tmp/ccyDx3k8.s:4431   .text:00001b64 $t
     /tmp/ccyDx3k8.s:4436   .text:00001b64 _update_checksum
     /tmp/ccyDx3k8.s:4539   .text:00001be0 $d
     /tmp/ccyDx3k8.s:4550   .text:00001c04 $t
     /tmp/ccyDx3k8.s:4857   .text:00001e14 UBLOX_parse_gps
     /tmp/ccyDx3k8.s:4841   .text:00001df0 $d
     /tmp/ccyDx3k8.s:4853   .text:00001e14 $t
     /tmp/ccyDx3k8.s:4881   .text:00001e2c $d
     /tmp/ccyDx3k8.s:4900   .text:00001e70 $t
     /tmp/ccyDx3k8.s:5077   .text:00001fa0 $d
                     .debug_frame:00000010 $d
     /tmp/ccyDx3k8.s:5125   .text:00001fd4 $t
                           .group:00000000 wm4.1.809c0ff785d6d6219236c5d51f444c16
                           .group:00000000 wm4.stdbool.h.29.1c9ee6859ce8145f7838a4f2549ccec2
                           .group:00000000 wm4.newlib.h.8.e1d498e57c12962fc6d7be5061a6981a
                           .group:00000000 wm4.config.h.148.52fe83653334d06815a0c57b59a3e584
                           .group:00000000 wm4._ansi.h.23.95dee4059009fe3ab635a191bb73dc66
                           .group:00000000 wm4.stdlib.h.18.6f6153fd5cb89acd58c0f0ab1f77e147
                           .group:00000000 wm4.stddef.h.187.40b3a084f9bc2c020a9e00b9eabe9c14
                           .group:00000000 wm4._default_types.h.6.1dbd2e581fd590860c7c17f21d147e91
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.349.31f4c5baff3fa2689010b32028da9c47
                           .group:00000000 wm4.reent.h.16.58b23a9f0faf0e7f2dfe7e2d33154afd
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.55.22eafe60f8565d898cbb44515781114b
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.math.h.49.5da716593b937b9fb02bef6ed6537c13
                           .group:00000000 wm4.ctype.h.2.fecd14bb6f4e162ef31748cc97760e21
                           .group:00000000 wm4.string.h.8.ef946ad0bc9ad5c970c365dcd1fc4b0a
                           .group:00000000 wm4.stddef.h.235.d9f4f80b8c4429535175712282cda6a6
                           .group:00000000 wm4.string.h.86.d5c872ff52e2712c985b588a0ef39f3c
                           .group:00000000 wm4.stdio.h.27.f2ac352bab34f31f9f478442827b2ba6
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.types.h.23.0d949686bbcadd1621462d4fa1f884f9
                           .group:00000000 wm4.stddef.h.40.b60a1c1ee3f272eef5327a730cbabca6
                           .group:00000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:00000000 wm4.types.h.80.f2bfdfeee9f340633702c07fad9b5e01
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.63.1f4bc553faa62c5c69dd9cb47f9f1417
                           .group:00000000 wm4.stm32f10x.h.51.b859cb68ed44ee02c916b41cb8c68f1c
                           .group:00000000 wm4.core_cm3.h.25.119fe996be41b62fbd915b59177e39d1
                           .group:00000000 wm4.stm32f10x.h.522.9a9f642c8c562acb4a63ad5d933b7c01
                           .group:00000000 wm4.stm32f10x.h.8304.f7d8ad90959e99679b3257267c3aadfe
                           .group:00000000 wm4.stm32f10x_adc.h.83.4d35a50d598070ecea6f33bcef02c922
                           .group:00000000 wm4.stm32f10x_bkp.h.25.4622919f1e30efdad5eb44e12edd5513
                           .group:00000000 wm4.stm32f10x_can.h.25.48aab46fcce6d08400bf960b028e4698
                           .group:00000000 wm4.stm32f10x_cec.h.25.8f03450e7bbb704d96e7bc73ec0f66a7
                           .group:00000000 wm4.stm32f10x_dac.h.25.6e7f2924f39c60c10815105b99b8b446
                           .group:00000000 wm4.stm32f10x_dbgmcu.h.25.d3351200fc7f9c8615d1ae81d40db08a
                           .group:00000000 wm4.stm32f10x_dma.h.25.94e36204daa98cae5dcc70a10a9694d5
                           .group:00000000 wm4.stm32f10x_exti.h.25.b9064155c5c006b5154b39788c79001a
                           .group:00000000 wm4.stm32f10x_flash.h.25.4be61fcb02863962a1e006449d310650
                           .group:00000000 wm4.stm32f10x_fsmc.h.25.bca154da2699cdb6024c0c6c4fc5aa89
                           .group:00000000 wm4.stm32f10x_gpio.h.25.80c981af0e637567395034c576cfb3ce
                           .group:00000000 wm4.stm32f10x_i2c.h.25.7b6cbaea24c6f25f538f8516d1814cb2
                           .group:00000000 wm4.stm32f10x_iwdg.h.25.da9374ab9856795610487f312ccf3122
                           .group:00000000 wm4.stm32f10x_pwr.h.25.37ef75009f751ef5fe27910e0bf00a62
                           .group:00000000 wm4.stm32f10x_rcc.h.25.968bcf08d813e68e57c280a4da69fa5a
                           .group:00000000 wm4.stm32f10x_rtc.h.25.361142606ba98ddcd10369f321f6e636
                           .group:00000000 wm4.stm32f10x_sdio.h.25.1fb5280a7690ef99070096bf8c866b3a
                           .group:00000000 wm4.stm32f10x_spi.h.25.68b3d5ccfcf895f9fe505ce20c0c300f
                           .group:00000000 wm4.stm32f10x_tim.h.25.21c6ec062f1e74898cb96a57da276fec
                           .group:00000000 wm4.stm32f10x_usart.h.25.29629c699b65db3f3efd3561f66b0bf6
                           .group:00000000 wm4.stm32f10x_wwdg.h.25.dde12201d86b5aa9ecaafb5eccdc6549
                           .group:00000000 wm4.misc.h.25.068e106f368fa5369a681ef57c106f4b
                           .group:00000000 wm4.stdarg.h.31.fa591a4b1df9e413e9f5b8097f9ae89d
                           .group:00000000 wm4.printf.h.118.ab3672ee221610a07496c11f46394049
                           .group:00000000 wm4.board.h.22.3e17243136ce51e89ad1cec38a12dc6f
                           .group:00000000 wm4.drv_adc.h.3.0c1a2a90f0739aca31cc38e66ffab3f5
                           .group:00000000 wm4.drv_pwm.h.3.1f878ba1925c00079825df97e09db15d
                           .group:00000000 wm4.mw.h.4.b0e233e0e6ae9c4c07b142ad41413d4c

UNDEFINED SYMBOLS
i2cRead
GPS_Present
uart2Init
uart2ChangeBaud
delay
uart2Write
sensorsSet
mcfg
uart2TransmitEmpty
__aeabi_i2f
__aeabi_fmul
__aeabi_f2iz
__aeabi_fadd
__aeabi_fcmplt
__aeabi_fcmpgt
__aeabi_fdiv
__aeabi_f2d
__aeabi_ui2f
__aeabi_dmul
__aeabi_ddiv
__aeabi_dadd
__aeabi_fsub
__aeabi_d2f
cfg
millis
GPS_update
f
GPS_numSat
GPS_coord
nav_mode
GPS_home
GPS_distanceToHome
GPS_directionToHome
magHold
heading
GPS_angle
nav_rated
nav
cosf
__aeabi_f2uiz
sqrtf
atan2f
sinf
__ctype_ptr__
GPS_altitude
GPS_speed
GPS_ground_course
