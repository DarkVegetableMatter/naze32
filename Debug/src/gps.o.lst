   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"gps.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.global	init_speed
  19              		.section	.rodata
  20              		.align	2
  23              	init_speed:
  24 0000 80250000 		.word	9600
  25 0004 004B0000 		.word	19200
  26 0008 00960000 		.word	38400
  27 000c 00E10000 		.word	57600
  28 0010 00C20100 		.word	115200
  29              		.align	2
  30              	.LC0:
  31 0014 24505542 		.ascii	"$PUBX,41,1,0003,0001,19200,0*23\015\012\000"
  31      582C3431 
  31      2C312C30 
  31      3030332C 
  31      30303031 
  32 0036 0000     		.align	2
  33              	.LC1:
  34 0038 24505542 		.ascii	"$PUBX,41,1,0003,0001,38400,0*26\015\012\000"
  34      582C3431 
  34      2C312C30 
  34      3030332C 
  34      30303031 
  35 005a 0000     		.align	2
  36              	.LC2:
  37 005c 24505542 		.ascii	"$PUBX,41,1,0003,0001,57600,0*2D\015\012\000"
  37      582C3431 
  37      2C312C30 
  37      3030332C 
  37      30303031 
  38 007e 0000     		.align	2
  39              	.LC3:
  40 0080 24505542 		.ascii	"$PUBX,41,1,0003,0001,115200,0*1E\015\012\000"
  40      582C3431 
  40      2C312C30 
  40      3030332C 
  40      30303031 
  41 00a3 00       		.align	2
  42              	.LC4:
  43 00a4 24504D54 		.ascii	"$PMTK251,19200*22\015\012\000"
  43      4B323531 
  43      2C313932 
  43      30302A32 
  43      320D0A00 
  44              		.align	2
  45              	.LC5:
  46 00b8 24504D54 		.ascii	"$PMTK251,38400*27\015\012\000"
  46      4B323531 
  46      2C333834 
  46      30302A32 
  46      370D0A00 
  47              		.align	2
  48              	.LC6:
  49 00cc 24504D54 		.ascii	"$PMTK251,57600*2C\015\012\000"
  49      4B323531 
  49      2C353736 
  49      30302A32 
  49      430D0A00 
  50              		.align	2
  51              	.LC7:
  52 00e0 24504D54 		.ascii	"$PMTK251,115200*1F\015\012\000"
  52      4B323531 
  52      2C313135 
  52      3230302A 
  52      31460D0A 
  53 00f5 000000   		.align	2
  56              	gpsInitStrings:
  57 00f8 14000000 		.word	.LC0
  58 00fc 38000000 		.word	.LC1
  59 0100 5C000000 		.word	.LC2
  60 0104 80000000 		.word	.LC3
  61 0108 A4000000 		.word	.LC4
  62 010c B8000000 		.word	.LC5
  63 0110 CC000000 		.word	.LC6
  64 0114 E0000000 		.word	.LC7
  65              		.align	2
  68              	ubloxInit:
  69 0118 B5       		.byte	-75
  70 0119 62       		.byte	98
  71 011a 06       		.byte	6
  72 011b 01       		.byte	1
  73 011c 03       		.byte	3
  74 011d 00       		.byte	0
  75 011e F0       		.byte	-16
  76 011f 05       		.byte	5
  77 0120 00       		.byte	0
  78 0121 FF       		.byte	-1
  79 0122 19       		.byte	25
  80 0123 B5       		.byte	-75
  81 0124 62       		.byte	98
  82 0125 06       		.byte	6
  83 0126 01       		.byte	1
  84 0127 03       		.byte	3
  85 0128 00       		.byte	0
  86 0129 F0       		.byte	-16
  87 012a 03       		.byte	3
  88 012b 00       		.byte	0
  89 012c FD       		.byte	-3
  90 012d 15       		.byte	21
  91 012e B5       		.byte	-75
  92 012f 62       		.byte	98
  93 0130 06       		.byte	6
  94 0131 01       		.byte	1
  95 0132 03       		.byte	3
  96 0133 00       		.byte	0
  97 0134 F0       		.byte	-16
  98 0135 01       		.byte	1
  99 0136 00       		.byte	0
 100 0137 FB       		.byte	-5
 101 0138 11       		.byte	17
 102 0139 B5       		.byte	-75
 103 013a 62       		.byte	98
 104 013b 06       		.byte	6
 105 013c 01       		.byte	1
 106 013d 03       		.byte	3
 107 013e 00       		.byte	0
 108 013f F0       		.byte	-16
 109 0140 00       		.byte	0
 110 0141 00       		.byte	0
 111 0142 FA       		.byte	-6
 112 0143 0F       		.byte	15
 113 0144 B5       		.byte	-75
 114 0145 62       		.byte	98
 115 0146 06       		.byte	6
 116 0147 01       		.byte	1
 117 0148 03       		.byte	3
 118 0149 00       		.byte	0
 119 014a F0       		.byte	-16
 120 014b 02       		.byte	2
 121 014c 00       		.byte	0
 122 014d FC       		.byte	-4
 123 014e 13       		.byte	19
 124 014f B5       		.byte	-75
 125 0150 62       		.byte	98
 126 0151 06       		.byte	6
 127 0152 01       		.byte	1
 128 0153 03       		.byte	3
 129 0154 00       		.byte	0
 130 0155 F0       		.byte	-16
 131 0156 04       		.byte	4
 132 0157 00       		.byte	0
 133 0158 FE       		.byte	-2
 134 0159 17       		.byte	23
 135 015a B5       		.byte	-75
 136 015b 62       		.byte	98
 137 015c 06       		.byte	6
 138 015d 01       		.byte	1
 139 015e 03       		.byte	3
 140 015f 00       		.byte	0
 141 0160 01       		.byte	1
 142 0161 02       		.byte	2
 143 0162 01       		.byte	1
 144 0163 0E       		.byte	14
 145 0164 47       		.byte	71
 146 0165 B5       		.byte	-75
 147 0166 62       		.byte	98
 148 0167 06       		.byte	6
 149 0168 01       		.byte	1
 150 0169 03       		.byte	3
 151 016a 00       		.byte	0
 152 016b 01       		.byte	1
 153 016c 03       		.byte	3
 154 016d 01       		.byte	1
 155 016e 0F       		.byte	15
 156 016f 49       		.byte	73
 157 0170 B5       		.byte	-75
 158 0171 62       		.byte	98
 159 0172 06       		.byte	6
 160 0173 01       		.byte	1
 161 0174 03       		.byte	3
 162 0175 00       		.byte	0
 163 0176 01       		.byte	1
 164 0177 06       		.byte	6
 165 0178 01       		.byte	1
 166 0179 12       		.byte	18
 167 017a 4F       		.byte	79
 168 017b B5       		.byte	-75
 169 017c 62       		.byte	98
 170 017d 06       		.byte	6
 171 017e 01       		.byte	1
 172 017f 03       		.byte	3
 173 0180 00       		.byte	0
 174 0181 01       		.byte	1
 175 0182 12       		.byte	18
 176 0183 01       		.byte	1
 177 0184 1E       		.byte	30
 178 0185 67       		.byte	103
 179 0186 B5       		.byte	-75
 180 0187 62       		.byte	98
 181 0188 06       		.byte	6
 182 0189 16       		.byte	22
 183 018a 08       		.byte	8
 184 018b 00       		.byte	0
 185 018c 03       		.byte	3
 186 018d 07       		.byte	7
 187 018e 03       		.byte	3
 188 018f 00       		.byte	0
 189 0190 51       		.byte	81
 190 0191 08       		.byte	8
 191 0192 00       		.byte	0
 192 0193 00       		.byte	0
 193 0194 8A       		.byte	-118
 194 0195 41       		.byte	65
 195 0196 B5       		.byte	-75
 196 0197 62       		.byte	98
 197 0198 06       		.byte	6
 198 0199 08       		.byte	8
 199 019a 06       		.byte	6
 200 019b 00       		.byte	0
 201 019c C8       		.byte	-56
 202 019d 00       		.byte	0
 203 019e 01       		.byte	1
 204 019f 00       		.byte	0
 205 01a0 01       		.byte	1
 206 01a1 00       		.byte	0
 207 01a2 DE       		.byte	-34
 208 01a3 6A       		.byte	106
 209              		.text
 210              		.align	2
 211              		.global	navigatron2Init
 212              		.thumb
 213              		.thumb_func
 215              	navigatron2Init:
 216              	.LFB29:
 217              		.file 1 "../src/gps.c"
   1:../src/gps.c  **** #include "board.h"
   2:../src/gps.c  **** #include "mw.h"
   3:../src/gps.c  **** 
   4:../src/gps.c  **** #ifndef sq
   5:../src/gps.c  **** #define sq(x) ((x)*(x))
   6:../src/gps.c  **** #endif
   7:../src/gps.c  **** 
   8:../src/gps.c  **** const uint32_t init_speed[5] = { 9600, 19200, 38400, 57600, 115200 };
   9:../src/gps.c  **** 
  10:../src/gps.c  **** void GPS_NewData(uint16_t c);
  11:../src/gps.c  **** static void GPS_set_pids(void);
  12:../src/gps.c  **** static void gpsPrint(const char *str);
  13:../src/gps.c  **** 
  14:../src/gps.c  **** #define NAVIGATRON_I2C_ADDR        0x20
  15:../src/gps.c  **** 
  16:../src/gps.c  **** 
  17:../src/gps.c  **** ///////////////////////////////////////////////////////////////////////////////////////////////////
  18:../src/gps.c  **** // Begin register definitions
  19:../src/gps.c  **** ///////////////////////////////////////////////////////////////////////////////////////////////////
  20:../src/gps.c  **** 
  21:../src/gps.c  **** #define I2C_GPS_STATUS_00                            00 //(Read only)
  22:../src/gps.c  ****         #define I2C_GPS_STATUS_NEW_DATA       		0x01
  23:../src/gps.c  ****         #define I2C_GPS_STATUS_2DFIX          		0x02
  24:../src/gps.c  ****         #define I2C_GPS_STATUS_3DFIX          		0x04
  25:../src/gps.c  ****         #define I2C_GPS_STATUS_WP_REACHED     		0x08      //Active waypoint has been reached (not c
  26:../src/gps.c  ****         #define I2C_GPS_STATUS_NUMSATS        		0xF0
  27:../src/gps.c  **** 
  28:../src/gps.c  **** #define I2C_GPS_COMMAND                              01 //(write only)
  29:../src/gps.c  ****         #define I2C_GPS_COMMAND_POSHOLD       		0x01      // copy current position to internal targ
  30:../src/gps.c  ****         #define I2C_GPS_COMMAND_START_NAV     		0x02      // get the WP from the command and start 
  31:../src/gps.c  ****         #define I2C_GPS_COMMAND_SET_WP        		0x03      // copy current position to given WP
  32:../src/gps.c  ****         #define I2C_GPS_COMMAND_UPDATE_PIDS   		0x04      // update PI and PID controllers from the
  33:../src/gps.c  ****         #define I2C_GPS_COMMAND_NAV_OVERRIDE  		0x05      // do not nav since we tring to controll 
  34:../src/gps.c  ****         #define I2C_GPS_COMMAND_STOP_NAV      		0x06
  35:../src/gps.c  ****         #define I2C_GPS_COMMAND__7            		0x07
  36:../src/gps.c  ****         #define I2C_GPS_COMMAND__8            		0x08
  37:../src/gps.c  ****         #define I2C_GPS_COMMAND__9            		0x09
  38:../src/gps.c  ****         #define I2C_GPS_COMMAND__a            		0x0a
  39:../src/gps.c  ****         #define I2C_GPS_COMMAND__b            		0x0b
  40:../src/gps.c  ****         #define I2C_GPS_COMMAND__c            		0x0c
  41:../src/gps.c  ****         #define I2C_GPS_COMMAND__d            		0x0d
  42:../src/gps.c  ****         #define I2C_GPS_COMMAND__e            		0x0e
  43:../src/gps.c  ****         #define I2C_GPS_COMMAND__f            		0x0f
  44:../src/gps.c  **** 
  45:../src/gps.c  ****         #define I2C_GPS_COMMAND_WP_MASK       		0xF0      //Waypoint number
  46:../src/gps.c  **** 
  47:../src/gps.c  **** #define I2C_GPS_WP_REG                              02   //Waypoint register (Read only)
  48:../src/gps.c  ****         #define I2C_GPS_WP_REG_ACTIVE_MASK     		0x0F      //Active Waypoint lower 4 bits
  49:../src/gps.c  ****         #define I2C_GPS_WP_REG_PERVIOUS_MASK   		0xF0      //pervious Waypoint upper 4 bits
  50:../src/gps.c  **** 
  51:../src/gps.c  **** #define I2C_GPS_REG_VERSION                         03    //Version of the I2C_NAV SW uint8_t
  52:../src/gps.c  **** #define I2C_GPS_REG_RES2                            04
  53:../src/gps.c  **** #define I2C_GPS_REG_RES3                            05
  54:../src/gps.c  **** #define I2C_GPS_REG_RES4                            06
  55:../src/gps.c  **** 
  56:../src/gps.c  **** 
  57:../src/gps.c  **** #define I2C_GPS_LOCATION                            07    // current location 8 byte (lat, lon) int
  58:../src/gps.c  **** #define I2C_GPS_NAV_LAT                             15    // Desired banking towards north/south in
  59:../src/gps.c  **** #define I2C_GPS_NAV_LON                             17    // Desired banking toward east/west    in
  60:../src/gps.c  **** #define I2C_GPS_WP_DISTANCE                         19    // Distance to current WP in cm uint32
  61:../src/gps.c  **** #define I2C_GPS_WP_TARGET_BEARING                   23    // bearing towards current wp 1deg = 1000
  62:../src/gps.c  **** #define I2C_GPS_NAV_BEARING                         25    // crosstrack corrected bearing towards c
  63:../src/gps.c  **** #define I2C_GPS_HOME_TO_COPTER_BEARING              27    // bearing from home to copter 1deg = 100
  64:../src/gps.c  **** #define I2C_GPS_DISTANCE_TO_HOME                    29    // distance to home in m int16_t
  65:../src/gps.c  **** 
  66:../src/gps.c  **** #define I2C_GPS_GROUND_SPEED                        31   //GPS ground speed in m/s*100 (uint16_t)  
  67:../src/gps.c  **** #define I2C_GPS_ALTITUDE                            33   //GPS altitude in meters (uint16_t)       
  68:../src/gps.c  **** #define I2C_GPS_GROUND_COURSE			    		35   //GPS ground course (uint16_t)
  69:../src/gps.c  **** #define I2C_GPS_RES1                                37   // reserved for future use (uint16_t)
  70:../src/gps.c  **** #define I2C_GPS_TIME                                39   //UTC Time from GPS in hhmmss.sss * 100 (u
  71:../src/gps.c  **** 
  72:../src/gps.c  **** //Writeable registers from here
  73:../src/gps.c  **** 
  74:../src/gps.c  **** #define I2C_GPS_CROSSTRACK_GAIN                     43    //Crosstrack gain *100 (1 - 0.01 100 -1) 
  75:../src/gps.c  **** #define I2C_GPS_SPEED_MIN                           44    //Minimum navigation speed cm/s uint8_t
  76:../src/gps.c  **** #define I2C_GPS_SPEED_MAX                           45    //Maximum navigation speed cm/s uint16_t
  77:../src/gps.c  **** #define I2C_GPS_RESERVED                            47    //Reserved for future use
  78:../src/gps.c  **** #define I2C_GPS_WP_RADIUS                           49    //Radius of the wp in cm, within this rad
  79:../src/gps.c  **** 
  80:../src/gps.c  **** #define I2C_GPS_NAV_FLAGS                           51    //Navigation flags uint8_t to be defined
  81:../src/gps.c  **** 
  82:../src/gps.c  **** 
  83:../src/gps.c  **** #define I2C_GPS_HOLD_P                              52    // poshold_P  *100 uint16_t
  84:../src/gps.c  **** #define I2C_GPS_HOLD_I                              53    // poshold_I  *100 uint16_t
  85:../src/gps.c  **** #define I2C_GPS_HOLD_IMAX                           54    // poshold_IMAX *1 uint8_t
  86:../src/gps.c  **** 
  87:../src/gps.c  **** #define I2C_GPS_HOLD_RATE_P                         55    // poshold_rate_P  *100 uint16_t
  88:../src/gps.c  **** #define I2C_GPS_HOLD_RATE_I                         56    // poshold_rate_I  *100 uint16_t
  89:../src/gps.c  **** #define I2C_GPS_HOLD_RATE_D                         57    // poshold_rate_D  *1000 uint16_t
  90:../src/gps.c  **** #define I2C_GPS_HOLD_RATE_IMAX                      58    // poshold_rate_IMAX *1 uint8_t
  91:../src/gps.c  **** 
  92:../src/gps.c  **** #define I2C_GPS_NAV_P                               59    // nav_P  *100 uint16_t
  93:../src/gps.c  **** #define I2C_GPS_NAV_I                               60    // nav_I  *100 uint16_t
  94:../src/gps.c  **** #define I2C_GPS_NAV_D                               61    // nav_D  *1000 uint16_t
  95:../src/gps.c  **** #define I2C_GPS_NAV_IMAX                            62    // nav_IMAX *1 uint8_t
  96:../src/gps.c  **** 
  97:../src/gps.c  **** #define I2C_GPS_WP0                                 63   //Waypoint 0 used for RTH location      (R
  98:../src/gps.c  **** #define	I2C_GPS_WP1		                    		74
  99:../src/gps.c  **** #define	I2C_GPS_WP2		                    		85
 100:../src/gps.c  **** #define	I2C_GPS_WP3		                    		96
 101:../src/gps.c  **** #define	I2C_GPS_WP4		                    		107
 102:../src/gps.c  **** #define	I2C_GPS_WP5		                    		118
 103:../src/gps.c  **** #define	I2C_GPS_WP6		                    		129
 104:../src/gps.c  **** #define	I2C_GPS_WP7		                    		140
 105:../src/gps.c  **** #define	I2C_GPS_WP8		                    		151
 106:../src/gps.c  **** #define	I2C_GPS_WP9		                    		162
 107:../src/gps.c  **** #define	I2C_GPS_WP10		                    	173
 108:../src/gps.c  **** #define	I2C_GPS_WP11		                    	184
 109:../src/gps.c  **** #define	I2C_GPS_WP12		                    	195
 110:../src/gps.c  **** #define	I2C_GPS_WP13		                    	206
 111:../src/gps.c  **** #define	I2C_GPS_WP14		                    	217
 112:../src/gps.c  **** #define	I2C_GPS_WP15		                    	228
 113:../src/gps.c  **** ///////////////////////////////////////////////////////////////////////////////////////////////////
 114:../src/gps.c  **** // End register definition
 115:../src/gps.c  **** ///////////////////////////////////////////////////////////////////////////////////////////////////
 116:../src/gps.c  **** 
 117:../src/gps.c  **** static const char * const gpsInitStrings[] = {
 118:../src/gps.c  ****     "$PUBX,41,1,0003,0001,19200,0*23\r\n",      // UBX0..3
 119:../src/gps.c  ****     "$PUBX,41,1,0003,0001,38400,0*26\r\n",
 120:../src/gps.c  ****     "$PUBX,41,1,0003,0001,57600,0*2D\r\n",
 121:../src/gps.c  ****     "$PUBX,41,1,0003,0001,115200,0*1E\r\n",
 122:../src/gps.c  ****     "$PMTK251,19200*22\r\n",                    // MTK4..7
 123:../src/gps.c  ****     "$PMTK251,38400*27\r\n",
 124:../src/gps.c  ****     "$PMTK251,57600*2C\r\n",
 125:../src/gps.c  ****     "$PMTK251,115200*1F\r\n",
 126:../src/gps.c  **** };
 127:../src/gps.c  **** 
 128:../src/gps.c  **** static const uint8_t ubloxInit[] = {
 129:../src/gps.c  ****      0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x05, 0x00, 0xFF, 0x19,                             
 130:../src/gps.c  ****      0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x03, 0x00, 0xFD, 0x15,
 131:../src/gps.c  ****      0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x01, 0x00, 0xFB, 0x11,
 132:../src/gps.c  ****      0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x00, 0x00, 0xFA, 0x0F,
 133:../src/gps.c  ****      0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x02, 0x00, 0xFC, 0x13,
 134:../src/gps.c  ****      0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x04, 0x00, 0xFE, 0x17,
 135:../src/gps.c  ****      0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0x01, 0x02, 0x01, 0x0E, 0x47,                             
 136:../src/gps.c  ****      0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0x01, 0x03, 0x01, 0x0F, 0x49,                             
 137:../src/gps.c  ****      0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0x01, 0x06, 0x01, 0x12, 0x4F,                             
 138:../src/gps.c  ****      0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0x01, 0x12, 0x01, 0x1E, 0x67,                             
 139:../src/gps.c  ****      0xB5, 0x62, 0x06, 0x16, 0x08, 0x00, 0x03, 0x07, 0x03, 0x00, 0x51, 0x08, 0x00, 0x00, 0x8A, 0x41
 140:../src/gps.c  ****      0xB5, 0x62, 0x06, 0x08, 0x06, 0x00, 0xC8, 0x00, 0x01, 0x00, 0x01, 0x00, 0xDE, 0x6A            
 141:../src/gps.c  **** };
 142:../src/gps.c  **** 
 143:../src/gps.c  **** void navigatron2Init()
 144:../src/gps.c  **** {
 218              		.loc 1 144 0
 219              		.cfi_startproc
 220              		@ args = 0, pretend = 0, frame = 8
 221              		@ frame_needed = 1, uses_anonymous_args = 0
 222 0000 80B5     		push	{r7, lr}
 223              	.LCFI0:
 224              		.cfi_def_cfa_offset 8
 225              		.cfi_offset 7, -8
 226              		.cfi_offset 14, -4
 227 0002 82B0     		sub	sp, sp, #8
 228              	.LCFI1:
 229              		.cfi_def_cfa_offset 16
 230 0004 00AF     		add	r7, sp, #0
 231              	.LCFI2:
 232              		.cfi_def_cfa_register 7
 145:../src/gps.c  **** 	//Todo Init Navigatron here!
 146:../src/gps.c  **** 	//If init successfull set GPS to present!
 147:../src/gps.c  **** 	uint8_t ver=0xFF;
 233              		.loc 1 147 0
 234 0006 4FF0FF03 		mov	r3, #255
 235 000a FB71     		strb	r3, [r7, #7]
 148:../src/gps.c  **** 	delay(3000);
 236              		.loc 1 148 0
 237 000c 40F6B830 		movw	r0, #3000
 238 0010 FFF7FEFF 		bl	delay
 149:../src/gps.c  **** 	i2cRead(NAVIGATRON_I2C_ADDR, I2C_GPS_REG_VERSION, 1, (uint8_t*)&ver);
 239              		.loc 1 149 0
 240 0014 07F10703 		add	r3, r7, #7
 241 0018 4FF02000 		mov	r0, #32
 242 001c 4FF00301 		mov	r1, #3
 243 0020 4FF00102 		mov	r2, #1
 244 0024 FFF7FEFF 		bl	i2cRead
 150:../src/gps.c  **** 	if (ver==0x42)
 245              		.loc 1 150 0
 246 0028 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 247 002a 422B     		cmp	r3, #66
 248 002c 03D1     		bne	.L1
 151:../src/gps.c  **** 		GPS_Present = 1;
 249              		.loc 1 151 0
 250 002e 044B     		ldr	r3, .L3
 251 0030 4FF00102 		mov	r2, #1
 252 0034 1A70     		strb	r2, [r3, #0]
 253              	.L1:
 152:../src/gps.c  **** }
 254              		.loc 1 152 0
 255 0036 07F10807 		add	r7, r7, #8
 256 003a BD46     		mov	sp, r7
 257 003c 80BD     		pop	{r7, pc}
 258              	.L4:
 259 003e 00BF     		.align	2
 260              	.L3:
 261 0040 00000000 		.word	GPS_Present
 262              		.cfi_endproc
 263              	.LFE29:
 265              		.section	.rodata
 266              		.align	2
 267              	.LC8:
 268 01a4 24504D54 		.ascii	"$PMTK314,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*28\015"
 268      4B333134 
 268      2C302C31 
 268      2C302C31 
 268      2C302C30 
 269 01d6 0A00     		.ascii	"\012\000"
 270              		.align	2
 271              	.LC9:
 272 01d8 24504D54 		.ascii	"$PMTK220,200*2C\015\012\000"
 272      4B323230 
 272      2C323030 
 272      2A32430D 
 272      0A00
 273 01ea 0000     		.text
 274              		.align	2
 275              		.global	gpsInit
 276              		.thumb
 277              		.thumb_func
 279              	gpsInit:
 280              	.LFB30:
 153:../src/gps.c  **** 
 154:../src/gps.c  **** void gpsInit(uint32_t baudrate)
 155:../src/gps.c  **** {
 281              		.loc 1 155 0
 282              		.cfi_startproc
 283              		@ args = 0, pretend = 0, frame = 16
 284              		@ frame_needed = 1, uses_anonymous_args = 0
 285 0044 80B5     		push	{r7, lr}
 286              	.LCFI3:
 287              		.cfi_def_cfa_offset 8
 288              		.cfi_offset 7, -8
 289              		.cfi_offset 14, -4
 290 0046 84B0     		sub	sp, sp, #16
 291              	.LCFI4:
 292              		.cfi_def_cfa_offset 24
 293 0048 00AF     		add	r7, sp, #0
 294              	.LCFI5:
 295              		.cfi_def_cfa_register 7
 296 004a 7860     		str	r0, [r7, #4]
 156:../src/gps.c  ****     int i;
 157:../src/gps.c  ****     int offset = 0;
 297              		.loc 1 157 0
 298 004c 4FF00003 		mov	r3, #0
 299 0050 BB60     		str	r3, [r7, #8]
 158:../src/gps.c  **** 
 159:../src/gps.c  ****     GPS_set_pids();
 300              		.loc 1 159 0
 301 0052 00F0EBFC 		bl	GPS_set_pids
 160:../src/gps.c  **** 
 161:../src/gps.c  ****     if (mcfg.gps_type != GPS_I2C)
 302              		.loc 1 161 0
 303 0056 5B4B     		ldr	r3, .L24
 304 0058 93F80F31 		ldrb	r3, [r3, #271]	@ zero_extendqisi2
 305 005c 032B     		cmp	r3, #3
 306 005e 06D0     		beq	.L6
 162:../src/gps.c  ****     	uart2Init(baudrate, GPS_NewData, false);
 307              		.loc 1 162 0
 308 0060 7868     		ldr	r0, [r7, #4]
 309 0062 5949     		ldr	r1, .L24+4
 310 0064 4FF00002 		mov	r2, #0
 311 0068 FFF7FEFF 		bl	uart2Init
 312 006c 01E0     		b	.L7
 313              	.L6:
 163:../src/gps.c  ****     else
 164:../src/gps.c  ****     	navigatron2Init();
 314              		.loc 1 164 0
 315 006e FFF7FEFF 		bl	navigatron2Init
 316              	.L7:
 165:../src/gps.c  **** 
 166:../src/gps.c  ****     if (mcfg.gps_type == GPS_UBLOX)
 317              		.loc 1 166 0
 318 0072 544B     		ldr	r3, .L24
 319 0074 93F80F31 		ldrb	r3, [r3, #271]	@ zero_extendqisi2
 320 0078 012B     		cmp	r3, #1
 321 007a 03D1     		bne	.L8
 167:../src/gps.c  ****         offset = 0;
 322              		.loc 1 167 0
 323 007c 4FF00003 		mov	r3, #0
 324 0080 BB60     		str	r3, [r7, #8]
 325 0082 07E0     		b	.L9
 326              	.L8:
 168:../src/gps.c  ****     else if (mcfg.gps_type == GPS_MTK)
 327              		.loc 1 168 0
 328 0084 4F4B     		ldr	r3, .L24
 329 0086 93F80F31 		ldrb	r3, [r3, #271]	@ zero_extendqisi2
 330 008a 022B     		cmp	r3, #2
 331 008c 02D1     		bne	.L9
 169:../src/gps.c  ****         offset = 4;
 332              		.loc 1 169 0
 333 008e 4FF00403 		mov	r3, #4
 334 0092 BB60     		str	r3, [r7, #8]
 335              	.L9:
 170:../src/gps.c  **** 
 171:../src/gps.c  ****     if (mcfg.gps_type != GPS_NMEA && mcfg.gps_type != GPS_I2C) {
 336              		.loc 1 171 0
 337 0094 4B4B     		ldr	r3, .L24
 338 0096 93F80F31 		ldrb	r3, [r3, #271]	@ zero_extendqisi2
 339 009a 002B     		cmp	r3, #0
 340 009c 52D0     		beq	.L10
 341              		.loc 1 171 0 is_stmt 0 discriminator 1
 342 009e 494B     		ldr	r3, .L24
 343 00a0 93F80F31 		ldrb	r3, [r3, #271]	@ zero_extendqisi2
 344 00a4 032B     		cmp	r3, #3
 345 00a6 4DD0     		beq	.L10
 172:../src/gps.c  ****         for (i = 0; i < 5; i++) {
 346              		.loc 1 172 0 is_stmt 1
 347 00a8 4FF00003 		mov	r3, #0
 348 00ac FB60     		str	r3, [r7, #12]
 349 00ae 46E0     		b	.L11
 350              	.L18:
 173:../src/gps.c  ****             uart2ChangeBaud(init_speed[i]);
 351              		.loc 1 173 0
 352 00b0 464B     		ldr	r3, .L24+8
 353 00b2 FA68     		ldr	r2, [r7, #12]
 354 00b4 53F82230 		ldr	r3, [r3, r2, lsl #2]
 355 00b8 1846     		mov	r0, r3
 356 00ba FFF7FEFF 		bl	uart2ChangeBaud
 174:../src/gps.c  ****             switch (baudrate) {
 357              		.loc 1 174 0
 358 00be 7B68     		ldr	r3, [r7, #4]
 359 00c0 B3F5164F 		cmp	r3, #38400
 360 00c4 15D0     		beq	.L14
 361 00c6 B3F5164F 		cmp	r3, #38400
 362 00ca 03D8     		bhi	.L17
 363 00cc B3F5964F 		cmp	r3, #19200
 364 00d0 07D0     		beq	.L13
 365 00d2 2CE0     		b	.L12
 366              	.L17:
 367 00d4 B3F5614F 		cmp	r3, #57600
 368 00d8 15D0     		beq	.L15
 369 00da B3F5E13F 		cmp	r3, #115200
 370 00de 1CD0     		beq	.L16
 371 00e0 25E0     		b	.L12
 372              	.L13:
 175:../src/gps.c  ****                 case 19200:
 176:../src/gps.c  ****                     gpsPrint(gpsInitStrings[offset]);
 373              		.loc 1 176 0
 374 00e2 3B4B     		ldr	r3, .L24+12
 375 00e4 BA68     		ldr	r2, [r7, #8]
 376 00e6 53F82230 		ldr	r3, [r3, r2, lsl #2]
 377 00ea 1846     		mov	r0, r3
 378 00ec 00F07AF8 		bl	gpsPrint
 177:../src/gps.c  ****                     break;
 379              		.loc 1 177 0
 380 00f0 1DE0     		b	.L12
 381              	.L14:
 178:../src/gps.c  ****                 case 38400:
 179:../src/gps.c  ****                     gpsPrint(gpsInitStrings[offset + 1]);
 382              		.loc 1 179 0
 383 00f2 BB68     		ldr	r3, [r7, #8]
 384 00f4 03F10102 		add	r2, r3, #1
 385 00f8 354B     		ldr	r3, .L24+12
 386 00fa 53F82230 		ldr	r3, [r3, r2, lsl #2]
 387 00fe 1846     		mov	r0, r3
 388 0100 00F070F8 		bl	gpsPrint
 180:../src/gps.c  ****                     break;
 389              		.loc 1 180 0
 390 0104 13E0     		b	.L12
 391              	.L15:
 181:../src/gps.c  ****                 case 57600:
 182:../src/gps.c  ****                     gpsPrint(gpsInitStrings[offset + 2]);
 392              		.loc 1 182 0
 393 0106 BB68     		ldr	r3, [r7, #8]
 394 0108 03F10202 		add	r2, r3, #2
 395 010c 304B     		ldr	r3, .L24+12
 396 010e 53F82230 		ldr	r3, [r3, r2, lsl #2]
 397 0112 1846     		mov	r0, r3
 398 0114 00F066F8 		bl	gpsPrint
 183:../src/gps.c  ****                     break;
 399              		.loc 1 183 0
 400 0118 09E0     		b	.L12
 401              	.L16:
 184:../src/gps.c  ****                 case 115200:
 185:../src/gps.c  ****                     gpsPrint(gpsInitStrings[offset + 3]);
 402              		.loc 1 185 0
 403 011a BB68     		ldr	r3, [r7, #8]
 404 011c 03F10302 		add	r2, r3, #3
 405 0120 2B4B     		ldr	r3, .L24+12
 406 0122 53F82230 		ldr	r3, [r3, r2, lsl #2]
 407 0126 1846     		mov	r0, r3
 408 0128 00F05CF8 		bl	gpsPrint
 186:../src/gps.c  ****                     break;
 409              		.loc 1 186 0
 410 012c 00BF     		nop
 411              	.L12:
 187:../src/gps.c  ****             }
 188:../src/gps.c  ****             delay(10);
 412              		.loc 1 188 0
 413 012e 4FF00A00 		mov	r0, #10
 414 0132 FFF7FEFF 		bl	delay
 172:../src/gps.c  ****         for (i = 0; i < 5; i++) {
 415              		.loc 1 172 0
 416 0136 FB68     		ldr	r3, [r7, #12]
 417 0138 03F10103 		add	r3, r3, #1
 418 013c FB60     		str	r3, [r7, #12]
 419              	.L11:
 172:../src/gps.c  ****         for (i = 0; i < 5; i++) {
 420              		.loc 1 172 0 is_stmt 0 discriminator 1
 421 013e FB68     		ldr	r3, [r7, #12]
 422 0140 042B     		cmp	r3, #4
 423 0142 B5DD     		ble	.L18
 424              	.L10:
 189:../src/gps.c  ****         }
 190:../src/gps.c  ****     }
 191:../src/gps.c  **** 
 192:../src/gps.c  ****     if (mcfg.gps_type != GPS_I2C)
 425              		.loc 1 192 0 is_stmt 1
 426 0144 1F4B     		ldr	r3, .L24
 427 0146 93F80F31 		ldrb	r3, [r3, #271]	@ zero_extendqisi2
 428 014a 032B     		cmp	r3, #3
 429 014c 29D0     		beq	.L19
 193:../src/gps.c  ****     {
 194:../src/gps.c  ****     	uart2ChangeBaud(baudrate);
 430              		.loc 1 194 0
 431 014e 7868     		ldr	r0, [r7, #4]
 432 0150 FFF7FEFF 		bl	uart2ChangeBaud
 195:../src/gps.c  ****     	if (mcfg.gps_type == GPS_UBLOX) {
 433              		.loc 1 195 0
 434 0154 1B4B     		ldr	r3, .L24
 435 0156 93F80F31 		ldrb	r3, [r3, #271]	@ zero_extendqisi2
 436 015a 012B     		cmp	r3, #1
 437 015c 16D1     		bne	.L20
 196:../src/gps.c  ****     		for (i = 0; i < sizeof(ubloxInit); i++) {
 438              		.loc 1 196 0
 439 015e 4FF00003 		mov	r3, #0
 440 0162 FB60     		str	r3, [r7, #12]
 441 0164 0EE0     		b	.L21
 442              	.L22:
 197:../src/gps.c  ****     			uart2Write(ubloxInit[i]); // send ubx init binary
 443              		.loc 1 197 0 discriminator 2
 444 0166 1B4A     		ldr	r2, .L24+16
 445 0168 FB68     		ldr	r3, [r7, #12]
 446 016a D318     		adds	r3, r2, r3
 447 016c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 448 016e 1846     		mov	r0, r3
 449 0170 FFF7FEFF 		bl	uart2Write
 198:../src/gps.c  ****     			delay(4);
 450              		.loc 1 198 0 discriminator 2
 451 0174 4FF00400 		mov	r0, #4
 452 0178 FFF7FEFF 		bl	delay
 196:../src/gps.c  ****     		for (i = 0; i < sizeof(ubloxInit); i++) {
 453              		.loc 1 196 0 discriminator 2
 454 017c FB68     		ldr	r3, [r7, #12]
 455 017e 03F10103 		add	r3, r3, #1
 456 0182 FB60     		str	r3, [r7, #12]
 457              	.L21:
 196:../src/gps.c  ****     		for (i = 0; i < sizeof(ubloxInit); i++) {
 458              		.loc 1 196 0 is_stmt 0 discriminator 1
 459 0184 FB68     		ldr	r3, [r7, #12]
 460 0186 8B2B     		cmp	r3, #139
 461 0188 EDD9     		bls	.L22
 196:../src/gps.c  ****     		for (i = 0; i < sizeof(ubloxInit); i++) {
 462              		.loc 1 196 0
 463 018a 0AE0     		b	.L19
 464              	.L20:
 199:../src/gps.c  ****     		}
 200:../src/gps.c  ****     	} else if (mcfg.gps_type == GPS_MTK) {
 465              		.loc 1 200 0 is_stmt 1
 466 018c 0D4B     		ldr	r3, .L24
 467 018e 93F80F31 		ldrb	r3, [r3, #271]	@ zero_extendqisi2
 468 0192 022B     		cmp	r3, #2
 469 0194 05D1     		bne	.L19
 201:../src/gps.c  ****     		gpsPrint("$PMTK314,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*28\r\n");  // only GGA and RMC sente
 470              		.loc 1 201 0
 471 0196 1048     		ldr	r0, .L24+20
 472 0198 00F024F8 		bl	gpsPrint
 202:../src/gps.c  ****     		gpsPrint("$PMTK220,200*2C\r\n");                                    // 5 Hz update rate
 473              		.loc 1 202 0
 474 019c 0F48     		ldr	r0, .L24+24
 475 019e 00F021F8 		bl	gpsPrint
 476              	.L19:
 203:../src/gps.c  ****     	}
 204:../src/gps.c  ****     }
 205:../src/gps.c  ****     // catch some GPS frames. TODO check this
 206:../src/gps.c  ****     delay(1000);
 477              		.loc 1 206 0
 478 01a2 4FF47A70 		mov	r0, #1000
 479 01a6 FFF7FEFF 		bl	delay
 207:../src/gps.c  ****     if (GPS_Present)
 480              		.loc 1 207 0
 481 01aa 0D4B     		ldr	r3, .L24+28
 482 01ac 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 483 01ae 002B     		cmp	r3, #0
 484 01b0 03D0     		beq	.L5
 208:../src/gps.c  ****         sensorsSet(SENSOR_GPS);
 485              		.loc 1 208 0
 486 01b2 4FF01000 		mov	r0, #16
 487 01b6 FFF7FEFF 		bl	sensorsSet
 488              	.L5:
 209:../src/gps.c  **** }
 489              		.loc 1 209 0
 490 01ba 07F11007 		add	r7, r7, #16
 491 01be BD46     		mov	sp, r7
 492 01c0 80BD     		pop	{r7, pc}
 493              	.L25:
 494 01c2 00BF     		.align	2
 495              	.L24:
 496 01c4 00000000 		.word	mcfg
 497 01c8 00000000 		.word	GPS_NewData
 498 01cc 00000000 		.word	init_speed
 499 01d0 F8000000 		.word	gpsInitStrings
 500 01d4 18010000 		.word	ubloxInit
 501 01d8 A4010000 		.word	.LC8
 502 01dc D8010000 		.word	.LC9
 503 01e0 00000000 		.word	GPS_Present
 504              		.cfi_endproc
 505              	.LFE30:
 507              		.align	2
 508              		.thumb
 509              		.thumb_func
 511              	gpsPrint:
 512              	.LFB31:
 210:../src/gps.c  **** 
 211:../src/gps.c  **** static void gpsPrint(const char *str)
 212:../src/gps.c  **** {
 513              		.loc 1 212 0
 514              		.cfi_startproc
 515              		@ args = 0, pretend = 0, frame = 8
 516              		@ frame_needed = 1, uses_anonymous_args = 0
 517 01e4 80B5     		push	{r7, lr}
 518              	.LCFI6:
 519              		.cfi_def_cfa_offset 8
 520              		.cfi_offset 7, -8
 521              		.cfi_offset 14, -4
 522 01e6 82B0     		sub	sp, sp, #8
 523              	.LCFI7:
 524              		.cfi_def_cfa_offset 16
 525 01e8 00AF     		add	r7, sp, #0
 526              	.LCFI8:
 527              		.cfi_def_cfa_register 7
 528 01ea 7860     		str	r0, [r7, #4]
 213:../src/gps.c  ****     while (*str) {
 529              		.loc 1 213 0
 530 01ec 11E0     		b	.L27
 531              	.L29:
 214:../src/gps.c  ****         uart2Write(*str);
 532              		.loc 1 214 0
 533 01ee 7B68     		ldr	r3, [r7, #4]
 534 01f0 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 535 01f2 1846     		mov	r0, r3
 536 01f4 FFF7FEFF 		bl	uart2Write
 215:../src/gps.c  ****         if (mcfg.gps_type == GPS_UBLOX)
 537              		.loc 1 215 0
 538 01f8 104B     		ldr	r3, .L31
 539 01fa 93F80F31 		ldrb	r3, [r3, #271]	@ zero_extendqisi2
 540 01fe 012B     		cmp	r3, #1
 541 0200 03D1     		bne	.L28
 216:../src/gps.c  ****             delay(4);
 542              		.loc 1 216 0
 543 0202 4FF00400 		mov	r0, #4
 544 0206 FFF7FEFF 		bl	delay
 545              	.L28:
 217:../src/gps.c  ****         str++;
 546              		.loc 1 217 0
 547 020a 7B68     		ldr	r3, [r7, #4]
 548 020c 03F10103 		add	r3, r3, #1
 549 0210 7B60     		str	r3, [r7, #4]
 550              	.L27:
 213:../src/gps.c  ****     while (*str) {
 551              		.loc 1 213 0 discriminator 1
 552 0212 7B68     		ldr	r3, [r7, #4]
 553 0214 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 554 0216 002B     		cmp	r3, #0
 555 0218 E9D1     		bne	.L29
 218:../src/gps.c  ****     }
 219:../src/gps.c  ****     // wait to send all
 220:../src/gps.c  ****     while (!uart2TransmitEmpty());
 556              		.loc 1 220 0
 557 021a 00BF     		nop
 558              	.L30:
 559              		.loc 1 220 0 is_stmt 0 discriminator 1
 560 021c FFF7FEFF 		bl	uart2TransmitEmpty
 561 0220 0346     		mov	r3, r0
 562 0222 83F00103 		eor	r3, r3, #1
 563 0226 DBB2     		uxtb	r3, r3
 564 0228 002B     		cmp	r3, #0
 565 022a F7D1     		bne	.L30
 221:../src/gps.c  ****     delay(30);
 566              		.loc 1 221 0 is_stmt 1
 567 022c 4FF01E00 		mov	r0, #30
 568 0230 FFF7FEFF 		bl	delay
 222:../src/gps.c  **** }
 569              		.loc 1 222 0
 570 0234 07F10807 		add	r7, r7, #8
 571 0238 BD46     		mov	sp, r7
 572 023a 80BD     		pop	{r7, pc}
 573              	.L32:
 574              		.align	2
 575              	.L31:
 576 023c 00000000 		.word	mcfg
 577              		.cfi_endproc
 578              	.LFE31:
 580              		.align	2
 581              		.global	leadFilter_clear
 582              		.thumb
 583              		.thumb_func
 585              	leadFilter_clear:
 586              	.LFB32:
 223:../src/gps.c  **** 
 224:../src/gps.c  **** /*-----------------------------------------------------------
 225:../src/gps.c  ****  *
 226:../src/gps.c  ****  * Multiwii GPS code - revision: 1097
 227:../src/gps.c  ****  *
 228:../src/gps.c  ****  *-----------------------------------------------------------*/
 229:../src/gps.c  **** #define POSHOLD_IMAX           20       // degrees
 230:../src/gps.c  **** #define POSHOLD_RATE_IMAX      20       // degrees
 231:../src/gps.c  **** #define NAV_IMAX               20       // degrees
 232:../src/gps.c  **** 
 233:../src/gps.c  **** /* GPS navigation can control the heading */
 234:../src/gps.c  **** #define NAV_TAIL_FIRST             0    // true - copter comes in with tail first
 235:../src/gps.c  **** #define NAV_SET_TAKEOFF_HEADING    1    // true - when copter arrives to home position it rotates i
 236:../src/gps.c  **** 
 237:../src/gps.c  **** #define GPS_FILTERING              1    // add a 5 element moving average filter to GPS coordinates
 238:../src/gps.c  **** #define GPS_LOW_SPEED_D_FILTER     1    // below .5m/s speed ignore D term for POSHOLD_RATE, theore
 239:../src/gps.c  **** 
 240:../src/gps.c  **** static bool check_missed_wp(void);
 241:../src/gps.c  **** static void GPS_distance_cm_bearing(int32_t * lat1, int32_t * lon1, int32_t * lat2, int32_t * lon2,
 242:../src/gps.c  **** //static void GPS_distance(int32_t lat1, int32_t lon1, int32_t lat2, int32_t lon2, uint16_t* dist, 
 243:../src/gps.c  **** static void GPS_calc_longitude_scaling(int32_t lat);
 244:../src/gps.c  **** static void GPS_calc_velocity(void);
 245:../src/gps.c  **** static void GPS_calc_location_error(int32_t * target_lat, int32_t * target_lng, int32_t * gps_lat, 
 246:../src/gps.c  **** static void GPS_calc_poshold(void);
 247:../src/gps.c  **** static void GPS_calc_nav_rate(int max_speed);
 248:../src/gps.c  **** static void GPS_update_crosstrack(void);
 249:../src/gps.c  **** static bool GPS_newFrame(char c);
 250:../src/gps.c  **** static bool GPS_NMEA_newFrame(char c);
 251:../src/gps.c  **** static bool GPS_I2C_newFrame();
 252:../src/gps.c  **** static bool GPS_UBLOX_newFrame(uint8_t data);
 253:../src/gps.c  **** static bool UBLOX_parse_gps(void);
 254:../src/gps.c  **** static int16_t GPS_calc_desired_speed(int16_t max_speed, bool _slow);
 255:../src/gps.c  **** int32_t wrap_18000(int32_t error);
 256:../src/gps.c  **** static int32_t wrap_36000(int32_t angle);
 257:../src/gps.c  **** 
 258:../src/gps.c  **** typedef struct {
 259:../src/gps.c  ****     int16_t last_velocity;
 260:../src/gps.c  **** } LeadFilter_PARAM;
 261:../src/gps.c  **** 
 262:../src/gps.c  **** void leadFilter_clear(LeadFilter_PARAM *param)
 263:../src/gps.c  **** {
 587              		.loc 1 263 0
 588              		.cfi_startproc
 589              		@ args = 0, pretend = 0, frame = 8
 590              		@ frame_needed = 1, uses_anonymous_args = 0
 591              		@ link register save eliminated.
 592 0240 80B4     		push	{r7}
 593              	.LCFI9:
 594              		.cfi_def_cfa_offset 4
 595              		.cfi_offset 7, -4
 596 0242 83B0     		sub	sp, sp, #12
 597              	.LCFI10:
 598              		.cfi_def_cfa_offset 16
 599 0244 00AF     		add	r7, sp, #0
 600              	.LCFI11:
 601              		.cfi_def_cfa_register 7
 602 0246 7860     		str	r0, [r7, #4]
 264:../src/gps.c  ****     param->last_velocity = 0;
 603              		.loc 1 264 0
 604 0248 7B68     		ldr	r3, [r7, #4]
 605 024a 4FF00002 		mov	r2, #0
 606 024e 1A80     		strh	r2, [r3, #0]	@ movhi
 265:../src/gps.c  **** }
 607              		.loc 1 265 0
 608 0250 07F10C07 		add	r7, r7, #12
 609 0254 BD46     		mov	sp, r7
 610 0256 80BC     		pop	{r7}
 611 0258 7047     		bx	lr
 612              		.cfi_endproc
 613              	.LFE32:
 615              		.global	__aeabi_i2f
 616              		.global	__aeabi_fmul
 617              		.global	__aeabi_f2iz
 618 025a 00BF     		.align	2
 619              		.global	leadFilter_getPosition
 620              		.thumb
 621              		.thumb_func
 623              	leadFilter_getPosition:
 624              	.LFB33:
 266:../src/gps.c  **** 
 267:../src/gps.c  **** int32_t leadFilter_getPosition(LeadFilter_PARAM *param, int32_t pos, int16_t vel, float lag_in_seco
 268:../src/gps.c  **** {
 625              		.loc 1 268 0
 626              		.cfi_startproc
 627              		@ args = 0, pretend = 0, frame = 24
 628              		@ frame_needed = 1, uses_anonymous_args = 0
 629 025c 80B5     		push	{r7, lr}
 630              	.LCFI12:
 631              		.cfi_def_cfa_offset 8
 632              		.cfi_offset 7, -8
 633              		.cfi_offset 14, -4
 634 025e 86B0     		sub	sp, sp, #24
 635              	.LCFI13:
 636              		.cfi_def_cfa_offset 32
 637 0260 00AF     		add	r7, sp, #0
 638              	.LCFI14:
 639              		.cfi_def_cfa_register 7
 640 0262 F860     		str	r0, [r7, #12]
 641 0264 B960     		str	r1, [r7, #8]
 642 0266 3B60     		str	r3, [r7, #0]	@ float
 643 0268 1346     		mov	r3, r2	@ movhi
 644 026a FB80     		strh	r3, [r7, #6]	@ movhi
 269:../src/gps.c  ****     int16_t accel_contribution = (vel - param->last_velocity) * lag_in_seconds * lag_in_seconds;
 645              		.loc 1 269 0
 646 026c B7F90620 		ldrsh	r2, [r7, #6]
 647 0270 FB68     		ldr	r3, [r7, #12]
 648 0272 1B88     		ldrh	r3, [r3, #0]
 649 0274 1BB2     		sxth	r3, r3
 650 0276 D31A     		subs	r3, r2, r3
 651 0278 1846     		mov	r0, r3
 652 027a FFF7FEFF 		bl	__aeabi_i2f
 653 027e 0346     		mov	r3, r0
 654 0280 1846     		mov	r0, r3
 655 0282 3968     		ldr	r1, [r7, #0]	@ float
 656 0284 FFF7FEFF 		bl	__aeabi_fmul
 657 0288 0346     		mov	r3, r0
 658 028a 1846     		mov	r0, r3
 659 028c 3968     		ldr	r1, [r7, #0]	@ float
 660 028e FFF7FEFF 		bl	__aeabi_fmul
 661 0292 0346     		mov	r3, r0
 662 0294 1846     		mov	r0, r3
 663 0296 FFF7FEFF 		bl	__aeabi_f2iz
 664 029a 0346     		mov	r3, r0
 665 029c FB82     		strh	r3, [r7, #22]	@ movhi
 270:../src/gps.c  ****     int16_t vel_contribution = vel * lag_in_seconds;
 666              		.loc 1 270 0
 667 029e B7F90630 		ldrsh	r3, [r7, #6]
 668 02a2 1846     		mov	r0, r3
 669 02a4 FFF7FEFF 		bl	__aeabi_i2f
 670 02a8 0346     		mov	r3, r0
 671 02aa 1846     		mov	r0, r3
 672 02ac 3968     		ldr	r1, [r7, #0]	@ float
 673 02ae FFF7FEFF 		bl	__aeabi_fmul
 674 02b2 0346     		mov	r3, r0
 675 02b4 1846     		mov	r0, r3
 676 02b6 FFF7FEFF 		bl	__aeabi_f2iz
 677 02ba 0346     		mov	r3, r0
 678 02bc BB82     		strh	r3, [r7, #20]	@ movhi
 271:../src/gps.c  **** 
 272:../src/gps.c  ****     // store velocity for next iteration
 273:../src/gps.c  ****     param->last_velocity = vel;
 679              		.loc 1 273 0
 680 02be FB68     		ldr	r3, [r7, #12]
 681 02c0 FA88     		ldrh	r2, [r7, #6]	@ movhi
 682 02c2 1A80     		strh	r2, [r3, #0]	@ movhi
 274:../src/gps.c  **** 
 275:../src/gps.c  ****     return pos + vel_contribution + accel_contribution;
 683              		.loc 1 275 0
 684 02c4 B7F91420 		ldrsh	r2, [r7, #20]
 685 02c8 BB68     		ldr	r3, [r7, #8]
 686 02ca D218     		adds	r2, r2, r3
 687 02cc B7F91630 		ldrsh	r3, [r7, #22]
 688 02d0 D318     		adds	r3, r2, r3
 276:../src/gps.c  **** }
 689              		.loc 1 276 0
 690 02d2 1846     		mov	r0, r3
 691 02d4 07F11807 		add	r7, r7, #24
 692 02d8 BD46     		mov	sp, r7
 693 02da 80BD     		pop	{r7, pc}
 694              		.cfi_endproc
 695              	.LFE33:
 697              		.comm	xLeadFilter,2,4
 698              		.comm	yLeadFilter,2,4
 699              		.bss
 700              		.align	2
 701              	posholdPID_PARAM:
 702 0000 00000000 		.space	16
 702      00000000 
 702      00000000 
 702      00000000 
 703              		.align	2
 704              	poshold_ratePID_PARAM:
 705 0010 00000000 		.space	16
 705      00000000 
 705      00000000 
 705      00000000 
 706              		.align	2
 707              	navPID_PARAM:
 708 0020 00000000 		.space	16
 708      00000000 
 708      00000000 
 708      00000000 
 709              		.align	2
 710              	posholdPID:
 711 0030 00000000 		.space	40
 711      00000000 
 711      00000000 
 711      00000000 
 711      00000000 
 712              		.align	2
 713              	poshold_ratePID:
 714 0058 00000000 		.space	40
 714      00000000 
 714      00000000 
 714      00000000 
 714      00000000 
 715              		.align	2
 716              	navPID:
 717 0080 00000000 		.space	40
 717      00000000 
 717      00000000 
 717      00000000 
 717      00000000 
 718              		.text
 719              		.align	2
 720              		.thumb
 721              		.thumb_func
 723              	get_P:
 724              	.LFB34:
 277:../src/gps.c  **** 
 278:../src/gps.c  **** LeadFilter_PARAM xLeadFilter;
 279:../src/gps.c  **** LeadFilter_PARAM yLeadFilter;
 280:../src/gps.c  **** 
 281:../src/gps.c  **** typedef struct {
 282:../src/gps.c  ****     float kP;
 283:../src/gps.c  ****     float kI;
 284:../src/gps.c  ****     float kD;
 285:../src/gps.c  ****     float Imax;
 286:../src/gps.c  **** } PID_PARAM;
 287:../src/gps.c  **** 
 288:../src/gps.c  **** static PID_PARAM posholdPID_PARAM;
 289:../src/gps.c  **** static PID_PARAM poshold_ratePID_PARAM;
 290:../src/gps.c  **** static PID_PARAM navPID_PARAM;
 291:../src/gps.c  **** 
 292:../src/gps.c  **** typedef struct {
 293:../src/gps.c  ****     float integrator;          // integrator value
 294:../src/gps.c  ****     int32_t last_input;        // last input for derivative
 295:../src/gps.c  ****     float last_derivative;     // last derivative for low-pass filter
 296:../src/gps.c  ****     float output;
 297:../src/gps.c  ****     float derivative;
 298:../src/gps.c  **** } PID;
 299:../src/gps.c  **** 
 300:../src/gps.c  **** static PID posholdPID[2];
 301:../src/gps.c  **** static PID poshold_ratePID[2];
 302:../src/gps.c  **** static PID navPID[2];
 303:../src/gps.c  **** 
 304:../src/gps.c  **** static int32_t get_P(int32_t error, PID_PARAM *pid)
 305:../src/gps.c  **** {
 725              		.loc 1 305 0
 726              		.cfi_startproc
 727              		@ args = 0, pretend = 0, frame = 8
 728              		@ frame_needed = 1, uses_anonymous_args = 0
 729 02dc 80B5     		push	{r7, lr}
 730              	.LCFI15:
 731              		.cfi_def_cfa_offset 8
 732              		.cfi_offset 7, -8
 733              		.cfi_offset 14, -4
 734 02de 82B0     		sub	sp, sp, #8
 735              	.LCFI16:
 736              		.cfi_def_cfa_offset 16
 737 02e0 00AF     		add	r7, sp, #0
 738              	.LCFI17:
 739              		.cfi_def_cfa_register 7
 740 02e2 7860     		str	r0, [r7, #4]
 741 02e4 3960     		str	r1, [r7, #0]
 306:../src/gps.c  ****     return (float)error * pid->kP;
 742              		.loc 1 306 0
 743 02e6 7868     		ldr	r0, [r7, #4]
 744 02e8 FFF7FEFF 		bl	__aeabi_i2f
 745 02ec 0246     		mov	r2, r0
 746 02ee 3B68     		ldr	r3, [r7, #0]
 747 02f0 1B68     		ldr	r3, [r3, #0]	@ float
 748 02f2 1046     		mov	r0, r2
 749 02f4 1946     		mov	r1, r3
 750 02f6 FFF7FEFF 		bl	__aeabi_fmul
 751 02fa 0346     		mov	r3, r0
 752 02fc 1846     		mov	r0, r3
 753 02fe FFF7FEFF 		bl	__aeabi_f2iz
 754 0302 0346     		mov	r3, r0
 307:../src/gps.c  **** }
 755              		.loc 1 307 0
 756 0304 1846     		mov	r0, r3
 757 0306 07F10807 		add	r7, r7, #8
 758 030a BD46     		mov	sp, r7
 759 030c 80BD     		pop	{r7, pc}
 760              		.cfi_endproc
 761              	.LFE34:
 763              		.global	__aeabi_fadd
 764              		.global	__aeabi_fcmplt
 765              		.global	__aeabi_fcmpgt
 766 030e 00BF     		.align	2
 767              		.thumb
 768              		.thumb_func
 770              	get_I:
 771              	.LFB35:
 308:../src/gps.c  **** 
 309:../src/gps.c  **** static int32_t get_I(int32_t error, float *dt, PID *pid, PID_PARAM *pid_param)
 310:../src/gps.c  **** {
 772              		.loc 1 310 0
 773              		.cfi_startproc
 774              		@ args = 0, pretend = 0, frame = 16
 775              		@ frame_needed = 1, uses_anonymous_args = 0
 776 0310 90B5     		push	{r4, r7, lr}
 777              	.LCFI18:
 778              		.cfi_def_cfa_offset 12
 779              		.cfi_offset 4, -12
 780              		.cfi_offset 7, -8
 781              		.cfi_offset 14, -4
 782 0312 85B0     		sub	sp, sp, #20
 783              	.LCFI19:
 784              		.cfi_def_cfa_offset 32
 785 0314 00AF     		add	r7, sp, #0
 786              	.LCFI20:
 787              		.cfi_def_cfa_register 7
 788 0316 F860     		str	r0, [r7, #12]
 789 0318 B960     		str	r1, [r7, #8]
 790 031a 7A60     		str	r2, [r7, #4]
 791 031c 3B60     		str	r3, [r7, #0]
 311:../src/gps.c  ****     pid->integrator += ((float)error * pid_param->kI) * *dt;
 792              		.loc 1 311 0
 793 031e 7B68     		ldr	r3, [r7, #4]
 794 0320 1C68     		ldr	r4, [r3, #0]	@ float
 795 0322 F868     		ldr	r0, [r7, #12]
 796 0324 FFF7FEFF 		bl	__aeabi_i2f
 797 0328 0246     		mov	r2, r0
 798 032a 3B68     		ldr	r3, [r7, #0]
 799 032c 5B68     		ldr	r3, [r3, #4]	@ float
 800 032e 1046     		mov	r0, r2
 801 0330 1946     		mov	r1, r3
 802 0332 FFF7FEFF 		bl	__aeabi_fmul
 803 0336 0346     		mov	r3, r0
 804 0338 1A46     		mov	r2, r3
 805 033a BB68     		ldr	r3, [r7, #8]
 806 033c 1B68     		ldr	r3, [r3, #0]	@ float
 807 033e 1046     		mov	r0, r2
 808 0340 1946     		mov	r1, r3
 809 0342 FFF7FEFF 		bl	__aeabi_fmul
 810 0346 0346     		mov	r3, r0
 811 0348 2046     		mov	r0, r4
 812 034a 1946     		mov	r1, r3
 813 034c FFF7FEFF 		bl	__aeabi_fadd
 814 0350 0346     		mov	r3, r0
 815 0352 1A46     		mov	r2, r3
 816 0354 7B68     		ldr	r3, [r7, #4]
 817 0356 1A60     		str	r2, [r3, #0]	@ float
 312:../src/gps.c  ****     pid->integrator = constrain(pid->integrator, -pid_param->Imax, pid_param->Imax);
 818              		.loc 1 312 0
 819 0358 7B68     		ldr	r3, [r7, #4]
 820 035a 1A68     		ldr	r2, [r3, #0]	@ float
 821 035c 3B68     		ldr	r3, [r7, #0]
 822 035e DB68     		ldr	r3, [r3, #12]	@ float
 823 0360 83F00043 		eor	r3, r3, #-2147483648
 824 0364 1046     		mov	r0, r2
 825 0366 1946     		mov	r1, r3
 826 0368 FFF7FEFF 		bl	__aeabi_fcmplt
 827 036c 0346     		mov	r3, r0
 828 036e 002B     		cmp	r3, #0
 829 0370 04D0     		beq	.L48
 830              	.L46:
 831              		.loc 1 312 0 is_stmt 0 discriminator 1
 832 0372 3B68     		ldr	r3, [r7, #0]
 833 0374 DB68     		ldr	r3, [r3, #12]	@ float
 834 0376 83F00043 		eor	r3, r3, #-2147483648
 835 037a 0FE0     		b	.L41
 836              	.L48:
 837              		.loc 1 312 0 discriminator 2
 838 037c 7B68     		ldr	r3, [r7, #4]
 839 037e 1A68     		ldr	r2, [r3, #0]	@ float
 840 0380 3B68     		ldr	r3, [r7, #0]
 841 0382 DB68     		ldr	r3, [r3, #12]	@ float
 842 0384 1046     		mov	r0, r2
 843 0386 1946     		mov	r1, r3
 844 0388 FFF7FEFF 		bl	__aeabi_fcmpgt
 845 038c 0346     		mov	r3, r0
 846 038e 002B     		cmp	r3, #0
 847 0390 02D0     		beq	.L49
 848              	.L47:
 849              		.loc 1 312 0 discriminator 3
 850 0392 3B68     		ldr	r3, [r7, #0]
 851 0394 DB68     		ldr	r3, [r3, #12]	@ float
 852 0396 01E0     		b	.L44
 853              	.L49:
 854              		.loc 1 312 0 discriminator 4
 855 0398 7B68     		ldr	r3, [r7, #4]
 856 039a 1B68     		ldr	r3, [r3, #0]	@ float
 857              	.L44:
 858              	.L41:
 859              		.loc 1 312 0 discriminator 6
 860 039c 7A68     		ldr	r2, [r7, #4]
 861 039e 1360     		str	r3, [r2, #0]	@ float
 313:../src/gps.c  ****     return pid->integrator;
 862              		.loc 1 313 0 is_stmt 1 discriminator 6
 863 03a0 7B68     		ldr	r3, [r7, #4]
 864 03a2 1B68     		ldr	r3, [r3, #0]	@ float
 865 03a4 1846     		mov	r0, r3
 866 03a6 FFF7FEFF 		bl	__aeabi_f2iz
 867 03aa 0346     		mov	r3, r0
 314:../src/gps.c  **** }
 868              		.loc 1 314 0 discriminator 6
 869 03ac 1846     		mov	r0, r3
 870 03ae 07F11407 		add	r7, r7, #20
 871 03b2 BD46     		mov	sp, r7
 872 03b4 90BD     		pop	{r4, r7, pc}
 873              		.cfi_endproc
 874              	.LFE35:
 876              		.global	__aeabi_fdiv
 877              		.global	__aeabi_f2d
 878              		.global	__aeabi_ui2f
 879              		.global	__aeabi_dmul
 880              		.global	__aeabi_ddiv
 881              		.global	__aeabi_dadd
 882              		.global	__aeabi_fsub
 883              		.global	__aeabi_d2f
 884 03b6 00BF     		.align	2
 885              		.thumb
 886              		.thumb_func
 888              	get_D:
 889              	.LFB36:
 315:../src/gps.c  **** 
 316:../src/gps.c  **** static int32_t get_D(int32_t input, float *dt, PID *pid, PID_PARAM *pid_param)
 317:../src/gps.c  **** {
 890              		.loc 1 317 0
 891              		.cfi_startproc
 892              		@ args = 0, pretend = 0, frame = 16
 893              		@ frame_needed = 1, uses_anonymous_args = 0
 894 03b8 2DE9B04F 		push	{r4, r5, r7, r8, r9, sl, fp, lr}
 895              	.LCFI21:
 896              		.cfi_def_cfa_offset 32
 897              		.cfi_offset 4, -32
 898              		.cfi_offset 5, -28
 899              		.cfi_offset 7, -24
 900              		.cfi_offset 8, -20
 901              		.cfi_offset 9, -16
 902              		.cfi_offset 10, -12
 903              		.cfi_offset 11, -8
 904              		.cfi_offset 14, -4
 905 03bc 84B0     		sub	sp, sp, #16
 906              	.LCFI22:
 907              		.cfi_def_cfa_offset 48
 908 03be 00AF     		add	r7, sp, #0
 909              	.LCFI23:
 910              		.cfi_def_cfa_register 7
 911 03c0 F860     		str	r0, [r7, #12]
 912 03c2 B960     		str	r1, [r7, #8]
 913 03c4 7A60     		str	r2, [r7, #4]
 914 03c6 3B60     		str	r3, [r7, #0]
 318:../src/gps.c  ****     pid->derivative = (input - pid->last_input) / *dt;
 915              		.loc 1 318 0
 916 03c8 7B68     		ldr	r3, [r7, #4]
 917 03ca 5B68     		ldr	r3, [r3, #4]
 918 03cc FA68     		ldr	r2, [r7, #12]
 919 03ce D31A     		subs	r3, r2, r3
 920 03d0 1846     		mov	r0, r3
 921 03d2 FFF7FEFF 		bl	__aeabi_i2f
 922 03d6 0246     		mov	r2, r0
 923 03d8 BB68     		ldr	r3, [r7, #8]
 924 03da 1B68     		ldr	r3, [r3, #0]	@ float
 925 03dc 1046     		mov	r0, r2
 926 03de 1946     		mov	r1, r3
 927 03e0 FFF7FEFF 		bl	__aeabi_fdiv
 928 03e4 0346     		mov	r3, r0
 929 03e6 1A46     		mov	r2, r3
 930 03e8 7B68     		ldr	r3, [r7, #4]
 931 03ea 1A61     		str	r2, [r3, #16]	@ float
 319:../src/gps.c  **** 
 320:../src/gps.c  ****     // Low pass filter cut frequency for derivative calculation
 321:../src/gps.c  ****     // Set to  "1 / ( 2 * PI * gps_lpf )"
 322:../src/gps.c  **** #define PID_FILTER       (1.0f / (2.0f * M_PI * (float)cfg.gps_lpf))
 323:../src/gps.c  ****     // discrete low pass filter, cuts out the
 324:../src/gps.c  ****     // high frequency noise that can drive the controller crazy
 325:../src/gps.c  ****     pid->derivative = pid->last_derivative + (*dt / (PID_FILTER + *dt)) * (pid->derivative - pid->l
 932              		.loc 1 325 0
 933 03ec 7B68     		ldr	r3, [r7, #4]
 934 03ee 9B68     		ldr	r3, [r3, #8]	@ float
 935 03f0 1846     		mov	r0, r3
 936 03f2 FFF7FEFF 		bl	__aeabi_f2d
 937 03f6 0446     		mov	r4, r0
 938 03f8 0D46     		mov	r5, r1
 939 03fa BB68     		ldr	r3, [r7, #8]
 940 03fc 1B68     		ldr	r3, [r3, #0]	@ float
 941 03fe 1846     		mov	r0, r3
 942 0400 FFF7FEFF 		bl	__aeabi_f2d
 943 0404 8046     		mov	r8, r0
 944 0406 8946     		mov	r9, r1
 945 0408 3B4B     		ldr	r3, .L52+8
 946 040a 93F89230 		ldrb	r3, [r3, #146]	@ zero_extendqisi2
 947 040e 1846     		mov	r0, r3
 948 0410 FFF7FEFF 		bl	__aeabi_ui2f
 949 0414 0346     		mov	r3, r0
 950 0416 1846     		mov	r0, r3
 951 0418 FFF7FEFF 		bl	__aeabi_f2d
 952 041c 0246     		mov	r2, r0
 953 041e 0B46     		mov	r3, r1
 954 0420 1046     		mov	r0, r2
 955 0422 1946     		mov	r1, r3
 956 0424 32A3     		adr	r3, .L52
 957 0426 D3E90023 		ldrd	r2, [r3]
 958 042a FFF7FEFF 		bl	__aeabi_dmul
 959 042e 0246     		mov	r2, r0
 960 0430 0B46     		mov	r3, r1
 961 0432 4FF00000 		mov	r0, #0
 962 0436 4FF07F51 		mov	r1, #1069547520
 963 043a 01F54011 		add	r1, r1, #3145728
 964 043e FFF7FEFF 		bl	__aeabi_ddiv
 965 0442 0246     		mov	r2, r0
 966 0444 0B46     		mov	r3, r1
 967 0446 9246     		mov	sl, r2
 968 0448 9B46     		mov	fp, r3
 969 044a BB68     		ldr	r3, [r7, #8]
 970 044c 1B68     		ldr	r3, [r3, #0]	@ float
 971 044e 1846     		mov	r0, r3
 972 0450 FFF7FEFF 		bl	__aeabi_f2d
 973 0454 0246     		mov	r2, r0
 974 0456 0B46     		mov	r3, r1
 975 0458 5046     		mov	r0, sl
 976 045a 5946     		mov	r1, fp
 977 045c FFF7FEFF 		bl	__aeabi_dadd
 978 0460 0246     		mov	r2, r0
 979 0462 0B46     		mov	r3, r1
 980 0464 4046     		mov	r0, r8
 981 0466 4946     		mov	r1, r9
 982 0468 FFF7FEFF 		bl	__aeabi_ddiv
 983 046c 0246     		mov	r2, r0
 984 046e 0B46     		mov	r3, r1
 985 0470 9046     		mov	r8, r2
 986 0472 9946     		mov	r9, r3
 987 0474 7B68     		ldr	r3, [r7, #4]
 988 0476 1A69     		ldr	r2, [r3, #16]	@ float
 989 0478 7B68     		ldr	r3, [r7, #4]
 990 047a 9B68     		ldr	r3, [r3, #8]	@ float
 991 047c 1046     		mov	r0, r2
 992 047e 1946     		mov	r1, r3
 993 0480 FFF7FEFF 		bl	__aeabi_fsub
 994 0484 0346     		mov	r3, r0
 995 0486 1846     		mov	r0, r3
 996 0488 FFF7FEFF 		bl	__aeabi_f2d
 997 048c 0246     		mov	r2, r0
 998 048e 0B46     		mov	r3, r1
 999 0490 4046     		mov	r0, r8
 1000 0492 4946     		mov	r1, r9
 1001 0494 FFF7FEFF 		bl	__aeabi_dmul
 1002 0498 0246     		mov	r2, r0
 1003 049a 0B46     		mov	r3, r1
 1004 049c 2046     		mov	r0, r4
 1005 049e 2946     		mov	r1, r5
 1006 04a0 FFF7FEFF 		bl	__aeabi_dadd
 1007 04a4 0246     		mov	r2, r0
 1008 04a6 0B46     		mov	r3, r1
 1009 04a8 1046     		mov	r0, r2
 1010 04aa 1946     		mov	r1, r3
 1011 04ac FFF7FEFF 		bl	__aeabi_d2f
 1012 04b0 0246     		mov	r2, r0
 1013 04b2 7B68     		ldr	r3, [r7, #4]
 1014 04b4 1A61     		str	r2, [r3, #16]	@ float
 326:../src/gps.c  ****     // update state
 327:../src/gps.c  ****     pid->last_input = input;
 1015              		.loc 1 327 0
 1016 04b6 7B68     		ldr	r3, [r7, #4]
 1017 04b8 FA68     		ldr	r2, [r7, #12]
 1018 04ba 5A60     		str	r2, [r3, #4]
 328:../src/gps.c  ****     pid->last_derivative = pid->derivative;
 1019              		.loc 1 328 0
 1020 04bc 7B68     		ldr	r3, [r7, #4]
 1021 04be 1A69     		ldr	r2, [r3, #16]	@ float
 1022 04c0 7B68     		ldr	r3, [r7, #4]
 1023 04c2 9A60     		str	r2, [r3, #8]	@ float
 329:../src/gps.c  ****     // add in derivative component
 330:../src/gps.c  ****     return pid_param->kD * pid->derivative;
 1024              		.loc 1 330 0
 1025 04c4 3B68     		ldr	r3, [r7, #0]
 1026 04c6 9A68     		ldr	r2, [r3, #8]	@ float
 1027 04c8 7B68     		ldr	r3, [r7, #4]
 1028 04ca 1B69     		ldr	r3, [r3, #16]	@ float
 1029 04cc 1046     		mov	r0, r2
 1030 04ce 1946     		mov	r1, r3
 1031 04d0 FFF7FEFF 		bl	__aeabi_fmul
 1032 04d4 0346     		mov	r3, r0
 1033 04d6 1846     		mov	r0, r3
 1034 04d8 FFF7FEFF 		bl	__aeabi_f2iz
 1035 04dc 0346     		mov	r3, r0
 331:../src/gps.c  **** }
 1036              		.loc 1 331 0
 1037 04de 1846     		mov	r0, r3
 1038 04e0 07F11007 		add	r7, r7, #16
 1039 04e4 BD46     		mov	sp, r7
 1040 04e6 BDE8B08F 		pop	{r4, r5, r7, r8, r9, sl, fp, pc}
 1041              	.L53:
 1042 04ea 00BFAFF3 		.align	3
 1042      0080
 1043              	.L52:
 1044 04f0 182D4454 		.word	1413754136
 1045 04f4 FB211940 		.word	1075388923
 1046 04f8 00000000 		.word	cfg
 1047              		.cfi_endproc
 1048              	.LFE36:
 1050              		.align	2
 1051              		.thumb
 1052              		.thumb_func
 1054              	reset_PID:
 1055              	.LFB37:
 332:../src/gps.c  **** 
 333:../src/gps.c  **** static void reset_PID(PID *pid)
 334:../src/gps.c  **** {
 1056              		.loc 1 334 0
 1057              		.cfi_startproc
 1058              		@ args = 0, pretend = 0, frame = 8
 1059              		@ frame_needed = 1, uses_anonymous_args = 0
 1060              		@ link register save eliminated.
 1061 04fc 80B4     		push	{r7}
 1062              	.LCFI24:
 1063              		.cfi_def_cfa_offset 4
 1064              		.cfi_offset 7, -4
 1065 04fe 83B0     		sub	sp, sp, #12
 1066              	.LCFI25:
 1067              		.cfi_def_cfa_offset 16
 1068 0500 00AF     		add	r7, sp, #0
 1069              	.LCFI26:
 1070              		.cfi_def_cfa_register 7
 1071 0502 7860     		str	r0, [r7, #4]
 335:../src/gps.c  ****     pid->integrator = 0;
 1072              		.loc 1 335 0
 1073 0504 7B68     		ldr	r3, [r7, #4]
 1074 0506 074A     		ldr	r2, .L55	@ float
 1075 0508 1A60     		str	r2, [r3, #0]	@ float
 336:../src/gps.c  ****     pid->last_input = 0;
 1076              		.loc 1 336 0
 1077 050a 7B68     		ldr	r3, [r7, #4]
 1078 050c 4FF00002 		mov	r2, #0
 1079 0510 5A60     		str	r2, [r3, #4]
 337:../src/gps.c  ****     pid->last_derivative = 0;
 1080              		.loc 1 337 0
 1081 0512 7B68     		ldr	r3, [r7, #4]
 1082 0514 034A     		ldr	r2, .L55	@ float
 1083 0516 9A60     		str	r2, [r3, #8]	@ float
 338:../src/gps.c  **** }
 1084              		.loc 1 338 0
 1085 0518 07F10C07 		add	r7, r7, #12
 1086 051c BD46     		mov	sp, r7
 1087 051e 80BC     		pop	{r7}
 1088 0520 7047     		bx	lr
 1089              	.L56:
 1090 0522 00BF     		.align	2
 1091              	.L55:
 1092 0524 00000000 		.word	0
 1093              		.cfi_endproc
 1094              	.LFE37:
 1096              		.bss
 1097              		.align	2
 1098              	dTnav:
 1099 00a8 00000000 		.space	4
 1100              		.align	2
 1101              	actual_speed:
 1102 00ac 00000000 		.space	4
 1103              		.align	2
 1104              	GPS_scaleLonDown:
 1105 00b0 00000000 		.space	4
 1106              		.align	2
 1107              	rate_error:
 1108 00b4 00000000 		.space	4
 1109              		.align	2
 1110              	error:
 1111 00b8 00000000 		.space	8
 1111      00000000 
 1112              		.align	2
 1113              	GPS_WP:
 1114 00c0 00000000 		.space	8
 1114      00000000 
 1115              		.align	2
 1116              	target_bearing:
 1117 00c8 00000000 		.space	4
 1118              		.align	2
 1119              	original_target_bearing:
 1120 00cc 00000000 		.space	4
 1121              		.align	1
 1122              	crosstrack_error:
 1123 00d0 0000     		.space	2
 1124 00d2 0000     		.align	2
 1125              	wp_distance:
 1126 00d4 00000000 		.space	4
 1127              		.align	1
 1128              	waypoint_speed_gov:
 1129 00d8 0000     		.space	2
 1130              	GPS_filter_index:
 1131 00da 00       		.space	1
 1132 00db 00       		.align	2
 1133              	GPS_filter:
 1134 00dc 00000000 		.space	40
 1134      00000000 
 1134      00000000 
 1134      00000000 
 1134      00000000 
 1135              		.align	2
 1136              	GPS_filter_sum:
 1137 0104 00000000 		.space	8
 1137      00000000 
 1138              		.align	2
 1139              	GPS_read:
 1140 010c 00000000 		.space	8
 1140      00000000 
 1141              		.align	2
 1142              	GPS_filtered:
 1143 0114 00000000 		.space	8
 1143      00000000 
 1144              		.align	2
 1145              	GPS_degree:
 1146 011c 00000000 		.space	8
 1146      00000000 
 1147              		.align	2
 1148              	fraction3:
 1149 0124 00000000 		.space	4
 1150              		.align	2
 1151              	nav_bearing:
 1152 0128 00000000 		.space	4
 1153              		.align	1
 1154              	nav_takeoff_bearing:
 1155 012c 0000     		.space	2
 1156              		.text
 1157              		.align	2
 1158              		.global	GPS_NewData
 1159              		.thumb
 1160              		.thumb_func
 1162              	GPS_NewData:
 1163              	.LFB38:
 339:../src/gps.c  **** 
 340:../src/gps.c  **** #define GPS_X 1
 341:../src/gps.c  **** #define GPS_Y 0
 342:../src/gps.c  **** 
 343:../src/gps.c  **** /****************** PI and PID controllers for GPS ********************///32938 -> 33160
 344:../src/gps.c  **** 
 345:../src/gps.c  **** #define RADX100                    0.000174532925f
 346:../src/gps.c  **** #define CROSSTRACK_GAIN            1
 347:../src/gps.c  **** #define NAV_SLOW_NAV               true
 348:../src/gps.c  **** #define NAV_BANK_MAX               3000 // 30deg max banking when navigating (just for security and
 349:../src/gps.c  **** 
 350:../src/gps.c  **** static float dTnav;             // Delta Time in milliseconds for navigation computations, updated 
 351:../src/gps.c  **** static int16_t actual_speed[2] = { 0, 0 };
 352:../src/gps.c  **** static float GPS_scaleLonDown;  // this is used to offset the shrinking longitude as we go towards 
 353:../src/gps.c  **** 
 354:../src/gps.c  **** // The difference between the desired rate of travel and the actual rate of travel
 355:../src/gps.c  **** // updated after GPS read - 5-10hz
 356:../src/gps.c  **** static int16_t rate_error[2];
 357:../src/gps.c  **** static int32_t error[2];
 358:../src/gps.c  **** 
 359:../src/gps.c  **** // Currently used WP
 360:../src/gps.c  **** static int32_t GPS_WP[2];
 361:../src/gps.c  **** 
 362:../src/gps.c  **** ////////////////////////////////////////////////////////////////////////////////
 363:../src/gps.c  **** // Location & Navigation
 364:../src/gps.c  **** ////////////////////////////////////////////////////////////////////////////////
 365:../src/gps.c  **** // This is the angle from the copter to the "next_WP" location in degrees * 100
 366:../src/gps.c  **** static int32_t target_bearing;
 367:../src/gps.c  **** ////////////////////////////////////////////////////////////////////////////////
 368:../src/gps.c  **** // Crosstrack
 369:../src/gps.c  **** ////////////////////////////////////////////////////////////////////////////////
 370:../src/gps.c  **** // deg * 100, The original angle to the next_WP when the next_WP was set
 371:../src/gps.c  **** // Also used to check when we pass a WP
 372:../src/gps.c  **** static int32_t original_target_bearing;
 373:../src/gps.c  **** // The amount of angle correction applied to target_bearing to bring the copter back on its optimum
 374:../src/gps.c  **** static int16_t crosstrack_error;
 375:../src/gps.c  **** ////////////////////////////////////////////////////////////////////////////////
 376:../src/gps.c  **** // The location of the copter in relation to home, updated every GPS read (1deg - 100)
 377:../src/gps.c  **** //static int32_t home_to_copter_bearing;
 378:../src/gps.c  **** // distance between plane and home in cm
 379:../src/gps.c  **** //static int32_t home_distance;
 380:../src/gps.c  **** // distance between plane and next_WP in cm
 381:../src/gps.c  **** static uint32_t wp_distance;
 382:../src/gps.c  **** 
 383:../src/gps.c  **** // used for slow speed wind up when start navigation;
 384:../src/gps.c  **** static int16_t waypoint_speed_gov;
 385:../src/gps.c  **** 
 386:../src/gps.c  **** ////////////////////////////////////////////////////////////////////////////////////
 387:../src/gps.c  **** // moving average filter variables
 388:../src/gps.c  **** //
 389:../src/gps.c  **** #define GPS_FILTER_VECTOR_LENGTH 5
 390:../src/gps.c  **** 
 391:../src/gps.c  **** static uint8_t GPS_filter_index = 0;
 392:../src/gps.c  **** static int32_t GPS_filter[2][GPS_FILTER_VECTOR_LENGTH];
 393:../src/gps.c  **** static int32_t GPS_filter_sum[2];
 394:../src/gps.c  **** static int32_t GPS_read[2];
 395:../src/gps.c  **** static int32_t GPS_filtered[2];
 396:../src/gps.c  **** static int32_t GPS_degree[2];   //the lat lon degree without any decimals (lat/10 000 000)
 397:../src/gps.c  **** static uint16_t fraction3[2];
 398:../src/gps.c  **** 
 399:../src/gps.c  **** // This is the angle from the copter to the "next_WP" location
 400:../src/gps.c  **** // with the addition of Crosstrack error in degrees * 100
 401:../src/gps.c  **** static int32_t nav_bearing;
 402:../src/gps.c  **** // saves the bearing at takeof (1deg = 1) used to rotate to takeoff direction when arrives at home
 403:../src/gps.c  **** static int16_t nav_takeoff_bearing;
 404:../src/gps.c  **** 
 405:../src/gps.c  **** void GPS_NewData(uint16_t c)
 406:../src/gps.c  **** {
 1164              		.loc 1 406 0
 1165              		.cfi_startproc
 1166              		@ args = 0, pretend = 0, frame = 24
 1167              		@ frame_needed = 1, uses_anonymous_args = 0
 1168 0528 90B5     		push	{r4, r7, lr}
 1169              	.LCFI27:
 1170              		.cfi_def_cfa_offset 12
 1171              		.cfi_offset 4, -12
 1172              		.cfi_offset 7, -8
 1173              		.cfi_offset 14, -4
 1174 052a 89B0     		sub	sp, sp, #36
 1175              	.LCFI28:
 1176              		.cfi_def_cfa_offset 48
 1177 052c 02AF     		add	r7, sp, #8
 1178              	.LCFI29:
 1179              		.cfi_def_cfa 7, 40
 1180 052e 0346     		mov	r3, r0
 1181 0530 FB80     		strh	r3, [r7, #6]	@ movhi
 407:../src/gps.c  ****     int axis;
 408:../src/gps.c  ****     static uint32_t nav_loopTimer;
 409:../src/gps.c  ****     uint32_t dist;
 410:../src/gps.c  ****     int32_t dir;
 411:../src/gps.c  ****     int16_t speed;
 412:../src/gps.c  **** 
 413:../src/gps.c  ****     if (GPS_newFrame(c)) {
 1182              		.loc 1 413 0
 1183 0532 FB88     		ldrh	r3, [r7, #6]	@ movhi
 1184 0534 DBB2     		uxtb	r3, r3
 1185 0536 1846     		mov	r0, r3
 1186 0538 01F0ECF8 		bl	GPS_newFrame
 1187 053c 0346     		mov	r3, r0
 1188 053e 002B     		cmp	r3, #0
 1189 0540 00F0CA81 		beq	.L57
 414:../src/gps.c  ****         if (GPS_update == 1)
 1190              		.loc 1 414 0
 1191 0544 884B     		ldr	r3, .L79
 1192 0546 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1193 0548 012B     		cmp	r3, #1
 1194 054a 04D1     		bne	.L59
 415:../src/gps.c  ****             GPS_update = 0;
 1195              		.loc 1 415 0
 1196 054c 864B     		ldr	r3, .L79
 1197 054e 4FF00002 		mov	r2, #0
 1198 0552 1A70     		strb	r2, [r3, #0]
 1199 0554 03E0     		b	.L60
 1200              	.L59:
 416:../src/gps.c  ****         else
 417:../src/gps.c  ****             GPS_update = 1;
 1201              		.loc 1 417 0
 1202 0556 844B     		ldr	r3, .L79
 1203 0558 4FF00102 		mov	r2, #1
 1204 055c 1A70     		strb	r2, [r3, #0]
 1205              	.L60:
 418:../src/gps.c  ****         if (f.GPS_FIX && GPS_numSat >= 5) {
 1206              		.loc 1 418 0
 1207 055e 834B     		ldr	r3, .L79+4
 1208 0560 DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 1209 0562 002B     		cmp	r3, #0
 1210 0564 00F0B881 		beq	.L57
 1211              		.loc 1 418 0 is_stmt 0 discriminator 1
 1212 0568 814B     		ldr	r3, .L79+8
 1213 056a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1214 056c 042B     		cmp	r3, #4
 1215 056e 40F2B381 		bls	.L57
 419:../src/gps.c  ****             if (!f.ARMED)
 1216              		.loc 1 419 0 is_stmt 1
 1217 0572 7E4B     		ldr	r3, .L79+4
 1218 0574 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1219 0576 002B     		cmp	r3, #0
 1220 0578 03D1     		bne	.L61
 420:../src/gps.c  ****                 f.GPS_FIX_HOME = 0;
 1221              		.loc 1 420 0
 1222 057a 7C4B     		ldr	r3, .L79+4
 1223 057c 4FF00002 		mov	r2, #0
 1224 0580 1A73     		strb	r2, [r3, #12]
 1225              	.L61:
 421:../src/gps.c  ****             if (!f.GPS_FIX_HOME && f.ARMED)
 1226              		.loc 1 421 0
 1227 0582 7A4B     		ldr	r3, .L79+4
 1228 0584 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1229 0586 002B     		cmp	r3, #0
 1230 0588 05D1     		bne	.L62
 1231              		.loc 1 421 0 is_stmt 0 discriminator 1
 1232 058a 784B     		ldr	r3, .L79+4
 1233 058c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1234 058e 002B     		cmp	r3, #0
 1235 0590 01D0     		beq	.L62
 422:../src/gps.c  ****                 GPS_reset_home_position();
 1236              		.loc 1 422 0 is_stmt 1
 1237 0592 FFF7FEFF 		bl	GPS_reset_home_position
 1238              	.L62:
 423:../src/gps.c  ****             // Apply moving average filter to GPS data
 424:../src/gps.c  **** #if defined(GPS_FILTERING)
 425:../src/gps.c  ****             GPS_filter_index = (GPS_filter_index + 1) % GPS_FILTER_VECTOR_LENGTH;
 1239              		.loc 1 425 0
 1240 0596 774B     		ldr	r3, .L79+12
 1241 0598 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1242 059a 03F10101 		add	r1, r3, #1
 1243 059e 764B     		ldr	r3, .L79+16
 1244 05a0 83FB0123 		smull	r2, r3, r3, r1
 1245 05a4 4FEA6302 		asr	r2, r3, #1
 1246 05a8 4FEAE173 		asr	r3, r1, #31
 1247 05ac D21A     		subs	r2, r2, r3
 1248 05ae 1346     		mov	r3, r2
 1249 05b0 4FEA8303 		lsl	r3, r3, #2
 1250 05b4 9B18     		adds	r3, r3, r2
 1251 05b6 CA1A     		subs	r2, r1, r3
 1252 05b8 D2B2     		uxtb	r2, r2
 1253 05ba 6E4B     		ldr	r3, .L79+12
 1254 05bc 1A70     		strb	r2, [r3, #0]
 426:../src/gps.c  ****             for (axis = 0; axis < 2; axis++) {
 1255              		.loc 1 426 0
 1256 05be 4FF00003 		mov	r3, #0
 1257 05c2 7B61     		str	r3, [r7, #20]
 1258 05c4 A9E0     		b	.L63
 1259              	.L65:
 427:../src/gps.c  ****                 GPS_read[axis] = GPS_coord[axis];               // latest unfiltered data is in GPS
 1260              		.loc 1 427 0
 1261 05c6 6D4B     		ldr	r3, .L79+20
 1262 05c8 7A69     		ldr	r2, [r7, #20]
 1263 05ca 53F82210 		ldr	r1, [r3, r2, lsl #2]
 1264 05ce 6C4B     		ldr	r3, .L79+24
 1265 05d0 7A69     		ldr	r2, [r7, #20]
 1266 05d2 43F82210 		str	r1, [r3, r2, lsl #2]
 428:../src/gps.c  ****                 GPS_degree[axis] = GPS_read[axis] / 10000000;   // get the degree to assure the sum
 1267              		.loc 1 428 0
 1268 05d6 6A4B     		ldr	r3, .L79+24
 1269 05d8 7A69     		ldr	r2, [r7, #20]
 1270 05da 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1271 05de 694A     		ldr	r2, .L79+28
 1272 05e0 82FB0312 		smull	r1, r2, r2, r3
 1273 05e4 4FEAA252 		asr	r2, r2, #22
 1274 05e8 4FEAE373 		asr	r3, r3, #31
 1275 05ec D11A     		subs	r1, r2, r3
 1276 05ee 664B     		ldr	r3, .L79+32
 1277 05f0 7A69     		ldr	r2, [r7, #20]
 1278 05f2 43F82210 		str	r1, [r3, r2, lsl #2]
 429:../src/gps.c  **** 
 430:../src/gps.c  ****                 // How close we are to a degree line ? its the first three digits from the fraction
 431:../src/gps.c  ****                 // later we use it to Check if we are close to a degree line, if yes, disable avera
 432:../src/gps.c  ****                 fraction3[axis] = (GPS_read[axis] - GPS_degree[axis] * 10000000) / 10000;
 1279              		.loc 1 432 0
 1280 05f6 624B     		ldr	r3, .L79+24
 1281 05f8 7A69     		ldr	r2, [r7, #20]
 1282 05fa 53F82220 		ldr	r2, [r3, r2, lsl #2]
 1283 05fe 624B     		ldr	r3, .L79+32
 1284 0600 7969     		ldr	r1, [r7, #20]
 1285 0602 53F82130 		ldr	r3, [r3, r1, lsl #2]
 1286 0606 6149     		ldr	r1, .L79+36
 1287 0608 01FB03F3 		mul	r3, r1, r3
 1288 060c D318     		adds	r3, r2, r3
 1289 060e 604A     		ldr	r2, .L79+40
 1290 0610 82FB0312 		smull	r1, r2, r2, r3
 1291 0614 4FEA2232 		asr	r2, r2, #12
 1292 0618 4FEAE373 		asr	r3, r3, #31
 1293 061c D31A     		subs	r3, r2, r3
 1294 061e 99B2     		uxth	r1, r3
 1295 0620 5C4B     		ldr	r3, .L79+44
 1296 0622 7A69     		ldr	r2, [r7, #20]
 1297 0624 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 433:../src/gps.c  **** 
 434:../src/gps.c  ****                 GPS_filter_sum[axis] -= GPS_filter[axis][GPS_filter_index];
 1298              		.loc 1 434 0
 1299 0628 5B4B     		ldr	r3, .L79+48
 1300 062a 7A69     		ldr	r2, [r7, #20]
 1301 062c 53F82210 		ldr	r1, [r3, r2, lsl #2]
 1302 0630 504B     		ldr	r3, .L79+12
 1303 0632 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1304 0634 1C46     		mov	r4, r3
 1305 0636 5948     		ldr	r0, .L79+52
 1306 0638 7A69     		ldr	r2, [r7, #20]
 1307 063a 1346     		mov	r3, r2
 1308 063c 4FEA8303 		lsl	r3, r3, #2
 1309 0640 9B18     		adds	r3, r3, r2
 1310 0642 1B19     		adds	r3, r3, r4
 1311 0644 50F82330 		ldr	r3, [r0, r3, lsl #2]
 1312 0648 C91A     		subs	r1, r1, r3
 1313 064a 534B     		ldr	r3, .L79+48
 1314 064c 7A69     		ldr	r2, [r7, #20]
 1315 064e 43F82210 		str	r1, [r3, r2, lsl #2]
 435:../src/gps.c  ****                 GPS_filter[axis][GPS_filter_index] = GPS_read[axis] - (GPS_degree[axis] * 10000000)
 1316              		.loc 1 435 0
 1317 0652 484B     		ldr	r3, .L79+12
 1318 0654 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1319 0656 1C46     		mov	r4, r3
 1320 0658 494B     		ldr	r3, .L79+24
 1321 065a 7A69     		ldr	r2, [r7, #20]
 1322 065c 53F82220 		ldr	r2, [r3, r2, lsl #2]
 1323 0660 494B     		ldr	r3, .L79+32
 1324 0662 7969     		ldr	r1, [r7, #20]
 1325 0664 53F82130 		ldr	r3, [r3, r1, lsl #2]
 1326 0668 4849     		ldr	r1, .L79+36
 1327 066a 01FB03F3 		mul	r3, r1, r3
 1328 066e D018     		adds	r0, r2, r3
 1329 0670 4A49     		ldr	r1, .L79+52
 1330 0672 7A69     		ldr	r2, [r7, #20]
 1331 0674 1346     		mov	r3, r2
 1332 0676 4FEA8303 		lsl	r3, r3, #2
 1333 067a 9B18     		adds	r3, r3, r2
 1334 067c 1B19     		adds	r3, r3, r4
 1335 067e 41F82300 		str	r0, [r1, r3, lsl #2]
 436:../src/gps.c  ****                 GPS_filter_sum[axis] += GPS_filter[axis][GPS_filter_index];
 1336              		.loc 1 436 0
 1337 0682 454B     		ldr	r3, .L79+48
 1338 0684 7A69     		ldr	r2, [r7, #20]
 1339 0686 53F82210 		ldr	r1, [r3, r2, lsl #2]
 1340 068a 3A4B     		ldr	r3, .L79+12
 1341 068c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1342 068e 1C46     		mov	r4, r3
 1343 0690 4248     		ldr	r0, .L79+52
 1344 0692 7A69     		ldr	r2, [r7, #20]
 1345 0694 1346     		mov	r3, r2
 1346 0696 4FEA8303 		lsl	r3, r3, #2
 1347 069a 9B18     		adds	r3, r3, r2
 1348 069c 1B19     		adds	r3, r3, r4
 1349 069e 50F82330 		ldr	r3, [r0, r3, lsl #2]
 1350 06a2 C918     		adds	r1, r1, r3
 1351 06a4 3C4B     		ldr	r3, .L79+48
 1352 06a6 7A69     		ldr	r2, [r7, #20]
 1353 06a8 43F82210 		str	r1, [r3, r2, lsl #2]
 437:../src/gps.c  ****                 GPS_filtered[axis] = GPS_filter_sum[axis] / GPS_FILTER_VECTOR_LENGTH + (GPS_degree[
 1354              		.loc 1 437 0
 1355 06ac 3A4B     		ldr	r3, .L79+48
 1356 06ae 7A69     		ldr	r2, [r7, #20]
 1357 06b0 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1358 06b4 304A     		ldr	r2, .L79+16
 1359 06b6 82FB0312 		smull	r1, r2, r2, r3
 1360 06ba 4FEA6202 		asr	r2, r2, #1
 1361 06be 4FEAE373 		asr	r3, r3, #31
 1362 06c2 D21A     		subs	r2, r2, r3
 1363 06c4 304B     		ldr	r3, .L79+32
 1364 06c6 7969     		ldr	r1, [r7, #20]
 1365 06c8 53F82130 		ldr	r3, [r3, r1, lsl #2]
 1366 06cc 3449     		ldr	r1, .L79+56
 1367 06ce 01FB03F3 		mul	r3, r1, r3
 1368 06d2 D118     		adds	r1, r2, r3
 1369 06d4 334B     		ldr	r3, .L79+60
 1370 06d6 7A69     		ldr	r2, [r7, #20]
 1371 06d8 43F82210 		str	r1, [r3, r2, lsl #2]
 438:../src/gps.c  ****                 if (nav_mode == NAV_MODE_POSHOLD) {             // we use gps averaging only in pos
 1372              		.loc 1 438 0
 1373 06dc 324B     		ldr	r3, .L79+64
 1374 06de 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1375 06e0 5BB2     		sxtb	r3, r3
 1376 06e2 012B     		cmp	r3, #1
 1377 06e4 15D1     		bne	.L64
 439:../src/gps.c  ****                     if (fraction3[axis] > 1 && fraction3[axis] < 999)
 1378              		.loc 1 439 0
 1379 06e6 2B4B     		ldr	r3, .L79+44
 1380 06e8 7A69     		ldr	r2, [r7, #20]
 1381 06ea 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 1382 06ee 012B     		cmp	r3, #1
 1383 06f0 0FD9     		bls	.L64
 1384              		.loc 1 439 0 is_stmt 0 discriminator 1
 1385 06f2 284B     		ldr	r3, .L79+44
 1386 06f4 7A69     		ldr	r2, [r7, #20]
 1387 06f6 33F81220 		ldrh	r2, [r3, r2, lsl #1]
 1388 06fa 40F2E633 		movw	r3, #998
 1389 06fe 9A42     		cmp	r2, r3
 1390 0700 07D8     		bhi	.L64
 440:../src/gps.c  ****                         GPS_coord[axis] = GPS_filtered[axis];
 1391              		.loc 1 440 0 is_stmt 1
 1392 0702 284B     		ldr	r3, .L79+60
 1393 0704 7A69     		ldr	r2, [r7, #20]
 1394 0706 53F82210 		ldr	r1, [r3, r2, lsl #2]
 1395 070a 1C4B     		ldr	r3, .L79+20
 1396 070c 7A69     		ldr	r2, [r7, #20]
 1397 070e 43F82210 		str	r1, [r3, r2, lsl #2]
 1398              	.L64:
 426:../src/gps.c  ****             for (axis = 0; axis < 2; axis++) {
 1399              		.loc 1 426 0
 1400 0712 7B69     		ldr	r3, [r7, #20]
 1401 0714 03F10103 		add	r3, r3, #1
 1402 0718 7B61     		str	r3, [r7, #20]
 1403              	.L63:
 426:../src/gps.c  ****             for (axis = 0; axis < 2; axis++) {
 1404              		.loc 1 426 0 is_stmt 0 discriminator 1
 1405 071a 7B69     		ldr	r3, [r7, #20]
 1406 071c 012B     		cmp	r3, #1
 1407 071e 7FF752AF 		ble	.L65
 441:../src/gps.c  ****                 }
 442:../src/gps.c  ****             }
 443:../src/gps.c  **** #endif
 444:../src/gps.c  ****             // dTnav calculation
 445:../src/gps.c  ****             // Time for calculating x,y speed and navigation pids
 446:../src/gps.c  ****             dTnav = (float) (millis() - nav_loopTimer) / 1000.0f;
 1408              		.loc 1 446 0 is_stmt 1
 1409 0722 FFF7FEFF 		bl	millis
 1410 0726 0246     		mov	r2, r0
 1411 0728 204B     		ldr	r3, .L79+68
 1412 072a 1B68     		ldr	r3, [r3, #0]
 1413 072c D31A     		subs	r3, r2, r3
 1414 072e 1846     		mov	r0, r3
 1415 0730 FFF7FEFF 		bl	__aeabi_ui2f
 1416 0734 0346     		mov	r3, r0
 1417 0736 1846     		mov	r0, r3
 1418 0738 1E49     		ldr	r1, .L79+76	@ float
 1419 073a FFF7FEFF 		bl	__aeabi_fdiv
 1420 073e 0346     		mov	r3, r0
 1421 0740 1A46     		mov	r2, r3
 1422 0742 1B4B     		ldr	r3, .L79+72
 1423 0744 1A60     		str	r2, [r3, #0]	@ float
 447:../src/gps.c  ****             nav_loopTimer = millis();
 1424              		.loc 1 447 0
 1425 0746 FFF7FEFF 		bl	millis
 1426 074a 0246     		mov	r2, r0
 1427 074c 174B     		ldr	r3, .L79+68
 1428 074e 1A60     		str	r2, [r3, #0]
 448:../src/gps.c  ****             // prevent runup from bad GPS
 449:../src/gps.c  ****             dTnav = min(dTnav, 1.0f);
 1429              		.loc 1 449 0
 1430 0750 174B     		ldr	r3, .L79+72
 1431 0752 1B68     		ldr	r3, [r3, #0]	@ float
 1432 0754 1846     		mov	r0, r3
 1433 0756 1849     		ldr	r1, .L79+80	@ float
 1434 0758 FFF7FEFF 		bl	__aeabi_fcmplt
 1435 075c 0346     		mov	r3, r0
 1436 075e 002B     		cmp	r3, #0
 1437 0760 2CD0     		beq	.L77
 1438              	.L76:
 1439              		.loc 1 449 0 is_stmt 0 discriminator 1
 1440 0762 134B     		ldr	r3, .L79+72
 1441 0764 1B68     		ldr	r3, [r3, #0]	@ float
 1442 0766 2AE0     		b	.L68
 1443              	.L80:
 1444              		.align	2
 1445              	.L79:
 1446 0768 00000000 		.word	GPS_update
 1447 076c 00000000 		.word	f
 1448 0770 00000000 		.word	GPS_numSat
 1449 0774 DA000000 		.word	GPS_filter_index
 1450 0778 67666666 		.word	1717986919
 1451 077c 00000000 		.word	GPS_coord
 1452 0780 0C010000 		.word	GPS_read
 1453 0784 6BCA5F6B 		.word	1801439851
 1454 0788 1C010000 		.word	GPS_degree
 1455 078c 806967FF 		.word	-10000000
 1456 0790 AD8BDB68 		.word	1759218605
 1457 0794 24010000 		.word	fraction3
 1458 0798 04010000 		.word	GPS_filter_sum
 1459 079c DC000000 		.word	GPS_filter
 1460 07a0 80969800 		.word	10000000
 1461 07a4 14010000 		.word	GPS_filtered
 1462 07a8 00000000 		.word	nav_mode
 1463 07ac A0010000 		.word	nav_loopTimer.9182
 1464 07b0 A8000000 		.word	dTnav
 1465 07b4 00007A44 		.word	1148846080
 1466 07b8 0000803F 		.word	1065353216
 1467              	.L77:
 1468              		.loc 1 449 0 discriminator 2
 1469 07bc 5A4B     		ldr	r3, .L81+72	@ float
 1470              	.L68:
 1471              		.loc 1 449 0 discriminator 3
 1472 07be 484A     		ldr	r2, .L81
 1473 07c0 1360     		str	r3, [r2, #0]	@ float
 450:../src/gps.c  **** 
 451:../src/gps.c  ****             // calculate distance and bearings for gui and other stuff continously - From home to c
 452:../src/gps.c  ****             GPS_distance_cm_bearing(&GPS_coord[LAT], &GPS_coord[LON], &GPS_home[LAT], &GPS_home[LON
 1474              		.loc 1 452 0 is_stmt 1 discriminator 3
 1475 07c2 07F10C03 		add	r3, r7, #12
 1476 07c6 0093     		str	r3, [sp, #0]
 1477 07c8 07F10803 		add	r3, r7, #8
 1478 07cc 0193     		str	r3, [sp, #4]
 1479 07ce 4548     		ldr	r0, .L81+4
 1480 07d0 4549     		ldr	r1, .L81+8
 1481 07d2 464A     		ldr	r2, .L81+12
 1482 07d4 464B     		ldr	r3, .L81+16
 1483 07d6 00F061FA 		bl	GPS_distance_cm_bearing
 453:../src/gps.c  ****             GPS_distanceToHome = dist / 100;
 1484              		.loc 1 453 0 discriminator 3
 1485 07da FA68     		ldr	r2, [r7, #12]
 1486 07dc 454B     		ldr	r3, .L81+20
 1487 07de A3FB0213 		umull	r1, r3, r3, r2
 1488 07e2 4FEA5313 		lsr	r3, r3, #5
 1489 07e6 9AB2     		uxth	r2, r3
 1490 07e8 434B     		ldr	r3, .L81+24
 1491 07ea 1A80     		strh	r2, [r3, #0]	@ movhi
 454:../src/gps.c  ****             GPS_directionToHome = dir / 100;
 1492              		.loc 1 454 0 discriminator 3
 1493 07ec BB68     		ldr	r3, [r7, #8]
 1494 07ee 414A     		ldr	r2, .L81+20
 1495 07f0 82FB0312 		smull	r1, r2, r2, r3
 1496 07f4 4FEA6212 		asr	r2, r2, #5
 1497 07f8 4FEAE373 		asr	r3, r3, #31
 1498 07fc D31A     		subs	r3, r2, r3
 1499 07fe 9AB2     		uxth	r2, r3
 1500 0800 3E4B     		ldr	r3, .L81+28
 1501 0802 1A80     		strh	r2, [r3, #0]	@ movhi
 455:../src/gps.c  **** 
 456:../src/gps.c  ****             if (!f.GPS_FIX_HOME) {      // If we don't have home set, do not display anything
 1502              		.loc 1 456 0 discriminator 3
 1503 0804 3E4B     		ldr	r3, .L81+32
 1504 0806 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1505 0808 002B     		cmp	r3, #0
 1506 080a 07D1     		bne	.L69
 457:../src/gps.c  ****                 GPS_distanceToHome = 0;
 1507              		.loc 1 457 0
 1508 080c 3A4B     		ldr	r3, .L81+24
 1509 080e 4FF00002 		mov	r2, #0
 1510 0812 1A80     		strh	r2, [r3, #0]	@ movhi
 458:../src/gps.c  ****                 GPS_directionToHome = 0;
 1511              		.loc 1 458 0
 1512 0814 394B     		ldr	r3, .L81+28
 1513 0816 4FF00002 		mov	r2, #0
 1514 081a 1A80     		strh	r2, [r3, #0]	@ movhi
 1515              	.L69:
 459:../src/gps.c  ****             }
 460:../src/gps.c  **** 
 461:../src/gps.c  ****             // calculate the current velocity based on gps coordinates continously to get a valid s
 462:../src/gps.c  ****             GPS_calc_velocity();
 1516              		.loc 1 462 0
 1517 081c 00F0B0FA 		bl	GPS_calc_velocity
 463:../src/gps.c  **** 
 464:../src/gps.c  ****             if (f.GPS_HOLD_MODE || f.GPS_HOME_MODE) { // ok we are navigating
 1518              		.loc 1 464 0
 1519 0820 374B     		ldr	r3, .L81+32
 1520 0822 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 1521 0824 002B     		cmp	r3, #0
 1522 0826 03D1     		bne	.L70
 1523              		.loc 1 464 0 is_stmt 0 discriminator 1
 1524 0828 354B     		ldr	r3, .L81+32
 1525 082a DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 1526 082c 002B     		cmp	r3, #0
 1527 082e 53D0     		beq	.L57
 1528              	.L70:
 465:../src/gps.c  ****                 // do gps nav calculations here, these are common for nav and poshold
 466:../src/gps.c  ****                 GPS_distance_cm_bearing(&GPS_coord[LAT], &GPS_coord[LON], &GPS_WP[LAT], &GPS_WP[LON
 1529              		.loc 1 466 0 is_stmt 1
 1530 0830 344B     		ldr	r3, .L81+36
 1531 0832 0093     		str	r3, [sp, #0]
 1532 0834 344B     		ldr	r3, .L81+40
 1533 0836 0193     		str	r3, [sp, #4]
 1534 0838 2A48     		ldr	r0, .L81+4
 1535 083a 2B49     		ldr	r1, .L81+8
 1536 083c 334A     		ldr	r2, .L81+44
 1537 083e 344B     		ldr	r3, .L81+48
 1538 0840 00F02CFA 		bl	GPS_distance_cm_bearing
 467:../src/gps.c  ****                 GPS_calc_location_error(&GPS_WP[LAT], &GPS_WP[LON], &GPS_coord[LAT], &GPS_coord[LON
 1539              		.loc 1 467 0
 1540 0844 3148     		ldr	r0, .L81+44
 1541 0846 3249     		ldr	r1, .L81+48
 1542 0848 264A     		ldr	r2, .L81+4
 1543 084a 274B     		ldr	r3, .L81+8
 1544 084c 00F01EFB 		bl	GPS_calc_location_error
 468:../src/gps.c  **** 
 469:../src/gps.c  ****                 switch (nav_mode) {
 1545              		.loc 1 469 0
 1546 0850 304B     		ldr	r3, .L81+52
 1547 0852 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1548 0854 5BB2     		sxtb	r3, r3
 1549 0856 012B     		cmp	r3, #1
 1550 0858 02D0     		beq	.L71
 1551 085a 022B     		cmp	r3, #2
 1552 085c 03D0     		beq	.L72
 1553 085e 3BE0     		b	.L57
 1554              	.L71:
 470:../src/gps.c  ****                 case NAV_MODE_POSHOLD:
 471:../src/gps.c  ****                     // Desired output is in nav_lat and nav_lon where 1deg inclination is 100
 472:../src/gps.c  ****                     GPS_calc_poshold();
 1555              		.loc 1 472 0
 1556 0860 00F040FB 		bl	GPS_calc_poshold
 473:../src/gps.c  ****                     break;
 1557              		.loc 1 473 0
 1558 0864 38E0     		b	.L57
 1559              	.L72:
 474:../src/gps.c  **** 
 475:../src/gps.c  ****                 case NAV_MODE_WP:
 476:../src/gps.c  ****                     speed = GPS_calc_desired_speed(cfg.nav_speed_max, NAV_SLOW_NAV);    // slow nav
 1560              		.loc 1 476 0
 1561 0866 2C4B     		ldr	r3, .L81+56
 1562 0868 B3F89830 		ldrh	r3, [r3, #152]
 1563 086c 9BB2     		uxth	r3, r3
 1564 086e 1BB2     		sxth	r3, r3
 1565 0870 1846     		mov	r0, r3
 1566 0872 4FF00101 		mov	r1, #1
 1567 0876 00F095FD 		bl	GPS_calc_desired_speed
 1568 087a 0346     		mov	r3, r0
 1569 087c 7B82     		strh	r3, [r7, #18]	@ movhi
 477:../src/gps.c  ****                     // use error as the desired rate towards the target
 478:../src/gps.c  ****                     // Desired output is in nav_lat and nav_lon where 1deg inclination is 100
 479:../src/gps.c  ****                     GPS_calc_nav_rate(speed);
 1570              		.loc 1 479 0
 1571 087e B7F91230 		ldrsh	r3, [r7, #18]
 1572 0882 1846     		mov	r0, r3
 1573 0884 00F00AFC 		bl	GPS_calc_nav_rate
 480:../src/gps.c  **** 
 481:../src/gps.c  ****                     // Tail control
 482:../src/gps.c  ****                     if (cfg.nav_controls_heading) {
 1574              		.loc 1 482 0
 1575 0888 234B     		ldr	r3, .L81+56
 1576 088a 93F89430 		ldrb	r3, [r3, #148]	@ zero_extendqisi2
 1577 088e 002B     		cmp	r3, #0
 1578 0890 0CD0     		beq	.L73
 483:../src/gps.c  ****                         if (NAV_TAIL_FIRST) {
 484:../src/gps.c  ****                             magHold = wrap_18000(nav_bearing - 18000) / 100;
 485:../src/gps.c  ****                         } else {
 486:../src/gps.c  ****                             magHold = nav_bearing / 100;
 1579              		.loc 1 486 0
 1580 0892 224B     		ldr	r3, .L81+60
 1581 0894 1B68     		ldr	r3, [r3, #0]
 1582 0896 174A     		ldr	r2, .L81+20
 1583 0898 82FB0312 		smull	r1, r2, r2, r3
 1584 089c 4FEA6212 		asr	r2, r2, #5
 1585 08a0 4FEAE373 		asr	r3, r3, #31
 1586 08a4 D31A     		subs	r3, r2, r3
 1587 08a6 9AB2     		uxth	r2, r3
 1588 08a8 1D4B     		ldr	r3, .L81+64
 1589 08aa 1A80     		strh	r2, [r3, #0]	@ movhi
 1590              	.L73:
 487:../src/gps.c  ****                         }
 488:../src/gps.c  ****                     }
 489:../src/gps.c  ****                     // Are we there yet ?(within x meters of the destination)
 490:../src/gps.c  ****                     if ((wp_distance <= cfg.gps_wp_radius) || check_missed_wp()) {      // if yes s
 1591              		.loc 1 490 0
 1592 08ac 1A4B     		ldr	r3, .L81+56
 1593 08ae B3F89030 		ldrh	r3, [r3, #144]
 1594 08b2 1A46     		mov	r2, r3
 1595 08b4 134B     		ldr	r3, .L81+36
 1596 08b6 1B68     		ldr	r3, [r3, #0]
 1597 08b8 9A42     		cmp	r2, r3
 1598 08ba 04D2     		bcs	.L74
 1599              		.loc 1 490 0 is_stmt 0 discriminator 1
 1600 08bc 00F0CCF9 		bl	check_missed_wp
 1601 08c0 0346     		mov	r3, r0
 1602 08c2 002B     		cmp	r3, #0
 1603 08c4 07D0     		beq	.L78
 1604              	.L74:
 491:../src/gps.c  ****                         nav_mode = NAV_MODE_POSHOLD;
 1605              		.loc 1 491 0 is_stmt 1
 1606 08c6 134B     		ldr	r3, .L81+52
 1607 08c8 4FF00102 		mov	r2, #1
 1608 08cc 1A70     		strb	r2, [r3, #0]
 492:../src/gps.c  ****                         if (NAV_SET_TAKEOFF_HEADING) {
 493:../src/gps.c  ****                             magHold = nav_takeoff_bearing;
 1609              		.loc 1 493 0
 1610 08ce 154B     		ldr	r3, .L81+68
 1611 08d0 1A88     		ldrh	r2, [r3, #0]
 1612 08d2 134B     		ldr	r3, .L81+64
 1613 08d4 1A80     		strh	r2, [r3, #0]	@ movhi
 1614              	.L78:
 494:../src/gps.c  ****                         }
 495:../src/gps.c  ****                     }
 496:../src/gps.c  ****                     break;
 1615              		.loc 1 496 0
 1616 08d6 00BF     		nop
 1617              	.L57:
 497:../src/gps.c  ****                 }
 498:../src/gps.c  ****             }                   //end of gps calcs
 499:../src/gps.c  ****         }
 500:../src/gps.c  ****     }
 501:../src/gps.c  **** }
 1618              		.loc 1 501 0
 1619 08d8 07F11C07 		add	r7, r7, #28
 1620 08dc BD46     		mov	sp, r7
 1621 08de 90BD     		pop	{r4, r7, pc}
 1622              	.L82:
 1623              		.align	2
 1624              	.L81:
 1625 08e0 A8000000 		.word	dTnav
 1626 08e4 00000000 		.word	GPS_coord
 1627 08e8 04000000 		.word	GPS_coord+4
 1628 08ec 00000000 		.word	GPS_home
 1629 08f0 04000000 		.word	GPS_home+4
 1630 08f4 1F85EB51 		.word	1374389535
 1631 08f8 00000000 		.word	GPS_distanceToHome
 1632 08fc 00000000 		.word	GPS_directionToHome
 1633 0900 00000000 		.word	f
 1634 0904 D4000000 		.word	wp_distance
 1635 0908 C8000000 		.word	target_bearing
 1636 090c C0000000 		.word	GPS_WP
 1637 0910 C4000000 		.word	GPS_WP+4
 1638 0914 00000000 		.word	nav_mode
 1639 0918 00000000 		.word	cfg
 1640 091c 28010000 		.word	nav_bearing
 1641 0920 00000000 		.word	magHold
 1642 0924 2C010000 		.word	nav_takeoff_bearing
 1643 0928 0000803F 		.word	1065353216
 1644              		.cfi_endproc
 1645              	.LFE38:
 1647              		.align	2
 1648              		.global	GPS_reset_home_position
 1649              		.thumb
 1650              		.thumb_func
 1652              	GPS_reset_home_position:
 1653              	.LFB39:
 502:../src/gps.c  **** 
 503:../src/gps.c  **** void GPS_reset_home_position(void)
 504:../src/gps.c  **** {
 1654              		.loc 1 504 0
 1655              		.cfi_startproc
 1656              		@ args = 0, pretend = 0, frame = 0
 1657              		@ frame_needed = 1, uses_anonymous_args = 0
 1658 092c 80B5     		push	{r7, lr}
 1659              	.LCFI30:
 1660              		.cfi_def_cfa_offset 8
 1661              		.cfi_offset 7, -8
 1662              		.cfi_offset 14, -4
 1663 092e 00AF     		add	r7, sp, #0
 1664              	.LCFI31:
 1665              		.cfi_def_cfa_register 7
 505:../src/gps.c  ****     if (f.GPS_FIX && GPS_numSat >= 5) {
 1666              		.loc 1 505 0
 1667 0930 0E4B     		ldr	r3, .L85
 1668 0932 DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 1669 0934 002B     		cmp	r3, #0
 1670 0936 18D0     		beq	.L83
 1671              		.loc 1 505 0 is_stmt 0 discriminator 1
 1672 0938 0D4B     		ldr	r3, .L85+4
 1673 093a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1674 093c 042B     		cmp	r3, #4
 1675 093e 14D9     		bls	.L83
 506:../src/gps.c  ****         GPS_home[LAT] = GPS_coord[LAT];
 1676              		.loc 1 506 0 is_stmt 1
 1677 0940 0C4B     		ldr	r3, .L85+8
 1678 0942 1A68     		ldr	r2, [r3, #0]
 1679 0944 0C4B     		ldr	r3, .L85+12
 1680 0946 1A60     		str	r2, [r3, #0]
 507:../src/gps.c  ****         GPS_home[LON] = GPS_coord[LON];
 1681              		.loc 1 507 0
 1682 0948 0A4B     		ldr	r3, .L85+8
 1683 094a 5A68     		ldr	r2, [r3, #4]
 1684 094c 0A4B     		ldr	r3, .L85+12
 1685 094e 5A60     		str	r2, [r3, #4]
 508:../src/gps.c  ****         GPS_calc_longitude_scaling(GPS_coord[LAT]); // need an initial value for distance and beari
 1686              		.loc 1 508 0
 1687 0950 084B     		ldr	r3, .L85+8
 1688 0952 1B68     		ldr	r3, [r3, #0]
 1689 0954 1846     		mov	r0, r3
 1690 0956 00F0F5F8 		bl	GPS_calc_longitude_scaling
 509:../src/gps.c  ****         nav_takeoff_bearing = heading;              // save takeoff heading
 1691              		.loc 1 509 0
 1692 095a 084B     		ldr	r3, .L85+16
 1693 095c 1A88     		ldrh	r2, [r3, #0]
 1694 095e 084B     		ldr	r3, .L85+20
 1695 0960 1A80     		strh	r2, [r3, #0]	@ movhi
 510:../src/gps.c  ****         // Set ground altitude
 511:../src/gps.c  ****         f.GPS_FIX_HOME = 1;
 1696              		.loc 1 511 0
 1697 0962 024B     		ldr	r3, .L85
 1698 0964 4FF00102 		mov	r2, #1
 1699 0968 1A73     		strb	r2, [r3, #12]
 1700              	.L83:
 512:../src/gps.c  ****     }
 513:../src/gps.c  **** }
 1701              		.loc 1 513 0
 1702 096a 80BD     		pop	{r7, pc}
 1703              	.L86:
 1704              		.align	2
 1705              	.L85:
 1706 096c 00000000 		.word	f
 1707 0970 00000000 		.word	GPS_numSat
 1708 0974 00000000 		.word	GPS_coord
 1709 0978 00000000 		.word	GPS_home
 1710 097c 00000000 		.word	heading
 1711 0980 2C010000 		.word	nav_takeoff_bearing
 1712              		.cfi_endproc
 1713              	.LFE39:
 1715              		.align	2
 1716              		.global	GPS_reset_nav
 1717              		.thumb
 1718              		.thumb_func
 1720              	GPS_reset_nav:
 1721              	.LFB40:
 514:../src/gps.c  **** 
 515:../src/gps.c  **** //reset navigation (stop the navigation processor, and clear nav)
 516:../src/gps.c  **** void GPS_reset_nav(void)
 517:../src/gps.c  **** {
 1722              		.loc 1 517 0
 1723              		.cfi_startproc
 1724              		@ args = 0, pretend = 0, frame = 8
 1725              		@ frame_needed = 1, uses_anonymous_args = 0
 1726 0984 80B5     		push	{r7, lr}
 1727              	.LCFI32:
 1728              		.cfi_def_cfa_offset 8
 1729              		.cfi_offset 7, -8
 1730              		.cfi_offset 14, -4
 1731 0986 82B0     		sub	sp, sp, #8
 1732              	.LCFI33:
 1733              		.cfi_def_cfa_offset 16
 1734 0988 00AF     		add	r7, sp, #0
 1735              	.LCFI34:
 1736              		.cfi_def_cfa_register 7
 518:../src/gps.c  ****     int i;
 519:../src/gps.c  **** 
 520:../src/gps.c  ****     for (i = 0; i < 2; i++) {
 1737              		.loc 1 520 0
 1738 098a 4FF00003 		mov	r3, #0
 1739 098e 7B60     		str	r3, [r7, #4]
 1740 0990 39E0     		b	.L88
 1741              	.L89:
 521:../src/gps.c  ****         GPS_angle[i] = 0;
 1742              		.loc 1 521 0 discriminator 2
 1743 0992 204B     		ldr	r3, .L90
 1744 0994 7A68     		ldr	r2, [r7, #4]
 1745 0996 4FF00001 		mov	r1, #0
 1746 099a 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 522:../src/gps.c  ****         nav_rated[i] = 0;
 1747              		.loc 1 522 0 discriminator 2
 1748 099e 1E4B     		ldr	r3, .L90+4
 1749 09a0 7A68     		ldr	r2, [r7, #4]
 1750 09a2 4FF00001 		mov	r1, #0
 1751 09a6 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 523:../src/gps.c  ****         nav[i] = 0;
 1752              		.loc 1 523 0 discriminator 2
 1753 09aa 1C4B     		ldr	r3, .L90+8
 1754 09ac 7A68     		ldr	r2, [r7, #4]
 1755 09ae 4FF00001 		mov	r1, #0
 1756 09b2 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 524:../src/gps.c  ****         reset_PID(&posholdPID[i]);
 1757              		.loc 1 524 0 discriminator 2
 1758 09b6 7A68     		ldr	r2, [r7, #4]
 1759 09b8 1346     		mov	r3, r2
 1760 09ba 4FEA8303 		lsl	r3, r3, #2
 1761 09be 9B18     		adds	r3, r3, r2
 1762 09c0 4FEA8303 		lsl	r3, r3, #2
 1763 09c4 164A     		ldr	r2, .L90+12
 1764 09c6 9B18     		adds	r3, r3, r2
 1765 09c8 1846     		mov	r0, r3
 1766 09ca FFF797FD 		bl	reset_PID
 525:../src/gps.c  ****         reset_PID(&poshold_ratePID[i]);
 1767              		.loc 1 525 0 discriminator 2
 1768 09ce 7A68     		ldr	r2, [r7, #4]
 1769 09d0 1346     		mov	r3, r2
 1770 09d2 4FEA8303 		lsl	r3, r3, #2
 1771 09d6 9B18     		adds	r3, r3, r2
 1772 09d8 4FEA8303 		lsl	r3, r3, #2
 1773 09dc 114A     		ldr	r2, .L90+16
 1774 09de 9B18     		adds	r3, r3, r2
 1775 09e0 1846     		mov	r0, r3
 1776 09e2 FFF78BFD 		bl	reset_PID
 526:../src/gps.c  ****         reset_PID(&navPID[i]);
 1777              		.loc 1 526 0 discriminator 2
 1778 09e6 7A68     		ldr	r2, [r7, #4]
 1779 09e8 1346     		mov	r3, r2
 1780 09ea 4FEA8303 		lsl	r3, r3, #2
 1781 09ee 9B18     		adds	r3, r3, r2
 1782 09f0 4FEA8303 		lsl	r3, r3, #2
 1783 09f4 0C4A     		ldr	r2, .L90+20
 1784 09f6 9B18     		adds	r3, r3, r2
 1785 09f8 1846     		mov	r0, r3
 1786 09fa FFF77FFD 		bl	reset_PID
 520:../src/gps.c  ****     for (i = 0; i < 2; i++) {
 1787              		.loc 1 520 0 discriminator 2
 1788 09fe 7B68     		ldr	r3, [r7, #4]
 1789 0a00 03F10103 		add	r3, r3, #1
 1790 0a04 7B60     		str	r3, [r7, #4]
 1791              	.L88:
 520:../src/gps.c  ****     for (i = 0; i < 2; i++) {
 1792              		.loc 1 520 0 is_stmt 0 discriminator 1
 1793 0a06 7B68     		ldr	r3, [r7, #4]
 1794 0a08 012B     		cmp	r3, #1
 1795 0a0a C2DD     		ble	.L89
 527:../src/gps.c  ****     }
 528:../src/gps.c  **** }
 1796              		.loc 1 528 0 is_stmt 1
 1797 0a0c 07F10807 		add	r7, r7, #8
 1798 0a10 BD46     		mov	sp, r7
 1799 0a12 80BD     		pop	{r7, pc}
 1800              	.L91:
 1801              		.align	2
 1802              	.L90:
 1803 0a14 00000000 		.word	GPS_angle
 1804 0a18 00000000 		.word	nav_rated
 1805 0a1c 00000000 		.word	nav
 1806 0a20 30000000 		.word	posholdPID
 1807 0a24 58000000 		.word	poshold_ratePID
 1808 0a28 80000000 		.word	navPID
 1809              		.cfi_endproc
 1810              	.LFE40:
 1812              		.align	2
 1813              		.thumb
 1814              		.thumb_func
 1816              	GPS_set_pids:
 1817              	.LFB41:
 529:../src/gps.c  **** 
 530:../src/gps.c  **** //Get the relevant P I D values and set the PID controllers
 531:../src/gps.c  **** static void GPS_set_pids(void)
 532:../src/gps.c  **** {
 1818              		.loc 1 532 0
 1819              		.cfi_startproc
 1820              		@ args = 0, pretend = 0, frame = 0
 1821              		@ frame_needed = 1, uses_anonymous_args = 0
 1822 0a2c 80B5     		push	{r7, lr}
 1823              	.LCFI35:
 1824              		.cfi_def_cfa_offset 8
 1825              		.cfi_offset 7, -8
 1826              		.cfi_offset 14, -4
 1827 0a2e 00AF     		add	r7, sp, #0
 1828              	.LCFI36:
 1829              		.cfi_def_cfa_register 7
 533:../src/gps.c  ****     posholdPID_PARAM.kP = (float)cfg.P8[PIDPOS] / 100.0f;
 1830              		.loc 1 533 0
 1831 0a30 3C4B     		ldr	r3, .L93
 1832 0a32 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1833 0a34 1846     		mov	r0, r3
 1834 0a36 FFF7FEFF 		bl	__aeabi_ui2f
 1835 0a3a 0346     		mov	r3, r0
 1836 0a3c 1846     		mov	r0, r3
 1837 0a3e 3D49     		ldr	r1, .L93+16	@ float
 1838 0a40 FFF7FEFF 		bl	__aeabi_fdiv
 1839 0a44 0346     		mov	r3, r0
 1840 0a46 1A46     		mov	r2, r3
 1841 0a48 374B     		ldr	r3, .L93+4
 1842 0a4a 1A60     		str	r2, [r3, #0]	@ float
 534:../src/gps.c  ****     posholdPID_PARAM.kI = (float)cfg.I8[PIDPOS] / 100.0f;
 1843              		.loc 1 534 0
 1844 0a4c 354B     		ldr	r3, .L93
 1845 0a4e 9B7B     		ldrb	r3, [r3, #14]	@ zero_extendqisi2
 1846 0a50 1846     		mov	r0, r3
 1847 0a52 FFF7FEFF 		bl	__aeabi_ui2f
 1848 0a56 0346     		mov	r3, r0
 1849 0a58 1846     		mov	r0, r3
 1850 0a5a 3649     		ldr	r1, .L93+16	@ float
 1851 0a5c FFF7FEFF 		bl	__aeabi_fdiv
 1852 0a60 0346     		mov	r3, r0
 1853 0a62 1A46     		mov	r2, r3
 1854 0a64 304B     		ldr	r3, .L93+4
 1855 0a66 5A60     		str	r2, [r3, #4]	@ float
 535:../src/gps.c  ****     posholdPID_PARAM.Imax = POSHOLD_RATE_IMAX * 100;
 1856              		.loc 1 535 0
 1857 0a68 2F4B     		ldr	r3, .L93+4
 1858 0a6a 334A     		ldr	r2, .L93+20	@ float
 1859 0a6c DA60     		str	r2, [r3, #12]	@ float
 536:../src/gps.c  **** 
 537:../src/gps.c  ****     poshold_ratePID_PARAM.kP = (float)cfg.P8[PIDPOSR] / 10.0f;
 1860              		.loc 1 537 0
 1861 0a6e 2D4B     		ldr	r3, .L93
 1862 0a70 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 1863 0a72 1846     		mov	r0, r3
 1864 0a74 FFF7FEFF 		bl	__aeabi_ui2f
 1865 0a78 0346     		mov	r3, r0
 1866 0a7a 1846     		mov	r0, r3
 1867 0a7c 2F49     		ldr	r1, .L93+24	@ float
 1868 0a7e FFF7FEFF 		bl	__aeabi_fdiv
 1869 0a82 0346     		mov	r3, r0
 1870 0a84 1A46     		mov	r2, r3
 1871 0a86 294B     		ldr	r3, .L93+8
 1872 0a88 1A60     		str	r2, [r3, #0]	@ float
 538:../src/gps.c  ****     poshold_ratePID_PARAM.kI = (float)cfg.I8[PIDPOSR] / 100.0f;
 1873              		.loc 1 538 0
 1874 0a8a 264B     		ldr	r3, .L93
 1875 0a8c DB7B     		ldrb	r3, [r3, #15]	@ zero_extendqisi2
 1876 0a8e 1846     		mov	r0, r3
 1877 0a90 FFF7FEFF 		bl	__aeabi_ui2f
 1878 0a94 0346     		mov	r3, r0
 1879 0a96 1846     		mov	r0, r3
 1880 0a98 2649     		ldr	r1, .L93+16	@ float
 1881 0a9a FFF7FEFF 		bl	__aeabi_fdiv
 1882 0a9e 0346     		mov	r3, r0
 1883 0aa0 1A46     		mov	r2, r3
 1884 0aa2 224B     		ldr	r3, .L93+8
 1885 0aa4 5A60     		str	r2, [r3, #4]	@ float
 539:../src/gps.c  ****     poshold_ratePID_PARAM.kD = (float)cfg.D8[PIDPOSR] / 1000.0f;
 1886              		.loc 1 539 0
 1887 0aa6 1F4B     		ldr	r3, .L93
 1888 0aa8 5B7E     		ldrb	r3, [r3, #25]	@ zero_extendqisi2
 1889 0aaa 1846     		mov	r0, r3
 1890 0aac FFF7FEFF 		bl	__aeabi_ui2f
 1891 0ab0 0346     		mov	r3, r0
 1892 0ab2 1846     		mov	r0, r3
 1893 0ab4 2249     		ldr	r1, .L93+28	@ float
 1894 0ab6 FFF7FEFF 		bl	__aeabi_fdiv
 1895 0aba 0346     		mov	r3, r0
 1896 0abc 1A46     		mov	r2, r3
 1897 0abe 1B4B     		ldr	r3, .L93+8
 1898 0ac0 9A60     		str	r2, [r3, #8]	@ float
 540:../src/gps.c  ****     poshold_ratePID_PARAM.Imax = POSHOLD_RATE_IMAX * 100;
 1899              		.loc 1 540 0
 1900 0ac2 1A4B     		ldr	r3, .L93+8
 1901 0ac4 1C4A     		ldr	r2, .L93+20	@ float
 1902 0ac6 DA60     		str	r2, [r3, #12]	@ float
 541:../src/gps.c  **** 
 542:../src/gps.c  ****     navPID_PARAM.kP = (float)cfg.P8[PIDNAVR] / 10.0f;
 1903              		.loc 1 542 0
 1904 0ac8 164B     		ldr	r3, .L93
 1905 0aca 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 1906 0acc 1846     		mov	r0, r3
 1907 0ace FFF7FEFF 		bl	__aeabi_ui2f
 1908 0ad2 0346     		mov	r3, r0
 1909 0ad4 1846     		mov	r0, r3
 1910 0ad6 1949     		ldr	r1, .L93+24	@ float
 1911 0ad8 FFF7FEFF 		bl	__aeabi_fdiv
 1912 0adc 0346     		mov	r3, r0
 1913 0ade 1A46     		mov	r2, r3
 1914 0ae0 134B     		ldr	r3, .L93+12
 1915 0ae2 1A60     		str	r2, [r3, #0]	@ float
 543:../src/gps.c  ****     navPID_PARAM.kI = (float)cfg.I8[PIDNAVR] / 100.0f;
 1916              		.loc 1 543 0
 1917 0ae4 0F4B     		ldr	r3, .L93
 1918 0ae6 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 1919 0ae8 1846     		mov	r0, r3
 1920 0aea FFF7FEFF 		bl	__aeabi_ui2f
 1921 0aee 0346     		mov	r3, r0
 1922 0af0 1846     		mov	r0, r3
 1923 0af2 1049     		ldr	r1, .L93+16	@ float
 1924 0af4 FFF7FEFF 		bl	__aeabi_fdiv
 1925 0af8 0346     		mov	r3, r0
 1926 0afa 1A46     		mov	r2, r3
 1927 0afc 0C4B     		ldr	r3, .L93+12
 1928 0afe 5A60     		str	r2, [r3, #4]	@ float
 544:../src/gps.c  ****     navPID_PARAM.kD = (float)cfg.D8[PIDNAVR] / 1000.0f;
 1929              		.loc 1 544 0
 1930 0b00 084B     		ldr	r3, .L93
 1931 0b02 9B7E     		ldrb	r3, [r3, #26]	@ zero_extendqisi2
 1932 0b04 1846     		mov	r0, r3
 1933 0b06 FFF7FEFF 		bl	__aeabi_ui2f
 1934 0b0a 0346     		mov	r3, r0
 1935 0b0c 1846     		mov	r0, r3
 1936 0b0e 0C49     		ldr	r1, .L93+28	@ float
 1937 0b10 FFF7FEFF 		bl	__aeabi_fdiv
 1938 0b14 0346     		mov	r3, r0
 1939 0b16 1A46     		mov	r2, r3
 1940 0b18 054B     		ldr	r3, .L93+12
 1941 0b1a 9A60     		str	r2, [r3, #8]	@ float
 545:../src/gps.c  ****     navPID_PARAM.Imax = POSHOLD_RATE_IMAX * 100;
 1942              		.loc 1 545 0
 1943 0b1c 044B     		ldr	r3, .L93+12
 1944 0b1e 064A     		ldr	r2, .L93+20	@ float
 1945 0b20 DA60     		str	r2, [r3, #12]	@ float
 546:../src/gps.c  **** }
 1946              		.loc 1 546 0
 1947 0b22 80BD     		pop	{r7, pc}
 1948              	.L94:
 1949              		.align	2
 1950              	.L93:
 1951 0b24 00000000 		.word	cfg
 1952 0b28 00000000 		.word	posholdPID_PARAM
 1953 0b2c 10000000 		.word	poshold_ratePID_PARAM
 1954 0b30 20000000 		.word	navPID_PARAM
 1955 0b34 0000C842 		.word	1120403456
 1956 0b38 0000FA44 		.word	1157234688
 1957 0b3c 00002041 		.word	1092616192
 1958 0b40 00007A44 		.word	1148846080
 1959              		.cfi_endproc
 1960              	.LFE41:
 1962              		.align	2
 1963              		.thumb
 1964              		.thumb_func
 1966              	GPS_calc_longitude_scaling:
 1967              	.LFB42:
 547:../src/gps.c  **** 
 548:../src/gps.c  **** // OK here is the onboard GPS code
 549:../src/gps.c  **** 
 550:../src/gps.c  **** ////////////////////////////////////////////////////////////////////////////////////
 551:../src/gps.c  **** // PID based GPS navigation functions
 552:../src/gps.c  **** // Author : EOSBandi
 553:../src/gps.c  **** // Based on code and ideas from the Arducopter team: Jason Short,Randy Mackay, Pat Hickey, Jose Jul
 554:../src/gps.c  **** // Andrew Tridgell, Justin Beech, Adam Rivera, Jean-Louis Naudin, Roberto Navoni
 555:../src/gps.c  **** 
 556:../src/gps.c  **** ////////////////////////////////////////////////////////////////////////////////////
 557:../src/gps.c  **** // this is used to offset the shrinking longitude as we go towards the poles
 558:../src/gps.c  **** // It's ok to calculate this once per waypoint setting, since it changes a little within the reach 
 559:../src/gps.c  **** //
 560:../src/gps.c  **** static void GPS_calc_longitude_scaling(int32_t lat)
 561:../src/gps.c  **** {
 1968              		.loc 1 561 0
 1969              		.cfi_startproc
 1970              		@ args = 0, pretend = 0, frame = 16
 1971              		@ frame_needed = 1, uses_anonymous_args = 0
 1972 0b44 80B5     		push	{r7, lr}
 1973              	.LCFI37:
 1974              		.cfi_def_cfa_offset 8
 1975              		.cfi_offset 7, -8
 1976              		.cfi_offset 14, -4
 1977 0b46 84B0     		sub	sp, sp, #16
 1978              	.LCFI38:
 1979              		.cfi_def_cfa_offset 24
 1980 0b48 00AF     		add	r7, sp, #0
 1981              	.LCFI39:
 1982              		.cfi_def_cfa_register 7
 1983 0b4a 7860     		str	r0, [r7, #4]
 562:../src/gps.c  ****     float rads = (abs((float)lat) / 10000000.0f) * 0.0174532925f;
 1984              		.loc 1 562 0
 1985 0b4c 7868     		ldr	r0, [r7, #4]
 1986 0b4e FFF7FEFF 		bl	__aeabi_i2f
 1987 0b52 0346     		mov	r3, r0
 1988 0b54 1846     		mov	r0, r3
 1989 0b56 1949     		ldr	r1, .L101+4	@ float
 1990 0b58 FFF7FEFF 		bl	__aeabi_fcmpgt
 1991 0b5c 0346     		mov	r3, r0
 1992 0b5e 002B     		cmp	r3, #0
 1993 0b60 0ED0     		beq	.L100
 1994              	.L99:
 1995              		.loc 1 562 0 is_stmt 0 discriminator 1
 1996 0b62 7868     		ldr	r0, [r7, #4]
 1997 0b64 FFF7FEFF 		bl	__aeabi_i2f
 1998 0b68 0346     		mov	r3, r0
 1999 0b6a 1846     		mov	r0, r3
 2000 0b6c 1449     		ldr	r1, .L101+8	@ float
 2001 0b6e FFF7FEFF 		bl	__aeabi_fdiv
 2002 0b72 0346     		mov	r3, r0
 2003 0b74 1846     		mov	r0, r3
 2004 0b76 1349     		ldr	r1, .L101+12	@ float
 2005 0b78 FFF7FEFF 		bl	__aeabi_fmul
 2006 0b7c 0346     		mov	r3, r0
 2007 0b7e 0FE0     		b	.L98
 2008              	.L100:
 2009              		.loc 1 562 0 discriminator 2
 2010 0b80 7868     		ldr	r0, [r7, #4]
 2011 0b82 FFF7FEFF 		bl	__aeabi_i2f
 2012 0b86 0346     		mov	r3, r0
 2013 0b88 83F00043 		eor	r3, r3, #-2147483648
 2014 0b8c 1846     		mov	r0, r3
 2015 0b8e 0C49     		ldr	r1, .L101+8	@ float
 2016 0b90 FFF7FEFF 		bl	__aeabi_fdiv
 2017 0b94 0346     		mov	r3, r0
 2018 0b96 1846     		mov	r0, r3
 2019 0b98 0A49     		ldr	r1, .L101+12	@ float
 2020 0b9a FFF7FEFF 		bl	__aeabi_fmul
 2021 0b9e 0346     		mov	r3, r0
 2022              	.L98:
 2023              		.loc 1 562 0 discriminator 3
 2024 0ba0 FB60     		str	r3, [r7, #12]	@ float
 563:../src/gps.c  ****     GPS_scaleLonDown = cosf(rads);
 2025              		.loc 1 563 0 is_stmt 1 discriminator 3
 2026 0ba2 F868     		ldr	r0, [r7, #12]	@ float
 2027 0ba4 FFF7FEFF 		bl	cosf
 2028 0ba8 0246     		mov	r2, r0
 2029 0baa 034B     		ldr	r3, .L101
 2030 0bac 1A60     		str	r2, [r3, #0]	@ float
 564:../src/gps.c  **** }
 2031              		.loc 1 564 0 discriminator 3
 2032 0bae 07F11007 		add	r7, r7, #16
 2033 0bb2 BD46     		mov	sp, r7
 2034 0bb4 80BD     		pop	{r7, pc}
 2035              	.L102:
 2036 0bb6 00BF     		.align	2
 2037              	.L101:
 2038 0bb8 B0000000 		.word	GPS_scaleLonDown
 2039 0bbc 00000000 		.word	0
 2040 0bc0 8096184B 		.word	1259902592
 2041 0bc4 35FA8E3C 		.word	1016003125
 2042              		.cfi_endproc
 2043              	.LFE42:
 2045              		.align	2
 2046              		.global	GPS_set_next_wp
 2047              		.thumb
 2048              		.thumb_func
 2050              	GPS_set_next_wp:
 2051              	.LFB43:
 565:../src/gps.c  **** 
 566:../src/gps.c  **** ////////////////////////////////////////////////////////////////////////////////////
 567:../src/gps.c  **** // Sets the waypoint to navigate, reset neccessary variables and calculate initial values
 568:../src/gps.c  **** //
 569:../src/gps.c  **** void GPS_set_next_wp(int32_t *lat, int32_t *lon)
 570:../src/gps.c  **** {
 2052              		.loc 1 570 0
 2053              		.cfi_startproc
 2054              		@ args = 0, pretend = 0, frame = 8
 2055              		@ frame_needed = 1, uses_anonymous_args = 0
 2056 0bc8 80B5     		push	{r7, lr}
 2057              	.LCFI40:
 2058              		.cfi_def_cfa_offset 8
 2059              		.cfi_offset 7, -8
 2060              		.cfi_offset 14, -4
 2061 0bca 84B0     		sub	sp, sp, #16
 2062              	.LCFI41:
 2063              		.cfi_def_cfa_offset 24
 2064 0bcc 02AF     		add	r7, sp, #8
 2065              	.LCFI42:
 2066              		.cfi_def_cfa 7, 16
 2067 0bce 7860     		str	r0, [r7, #4]
 2068 0bd0 3960     		str	r1, [r7, #0]
 571:../src/gps.c  ****     GPS_WP[LAT] = *lat;
 2069              		.loc 1 571 0
 2070 0bd2 7B68     		ldr	r3, [r7, #4]
 2071 0bd4 1A68     		ldr	r2, [r3, #0]
 2072 0bd6 164B     		ldr	r3, .L104
 2073 0bd8 1A60     		str	r2, [r3, #0]
 572:../src/gps.c  ****     GPS_WP[LON] = *lon;
 2074              		.loc 1 572 0
 2075 0bda 3B68     		ldr	r3, [r7, #0]
 2076 0bdc 1A68     		ldr	r2, [r3, #0]
 2077 0bde 144B     		ldr	r3, .L104
 2078 0be0 5A60     		str	r2, [r3, #4]
 573:../src/gps.c  **** 
 574:../src/gps.c  ****     GPS_calc_longitude_scaling(*lat);
 2079              		.loc 1 574 0
 2080 0be2 7B68     		ldr	r3, [r7, #4]
 2081 0be4 1B68     		ldr	r3, [r3, #0]
 2082 0be6 1846     		mov	r0, r3
 2083 0be8 FFF7ACFF 		bl	GPS_calc_longitude_scaling
 575:../src/gps.c  ****     GPS_distance_cm_bearing(&GPS_coord[LAT], &GPS_coord[LON], &GPS_WP[LAT], &GPS_WP[LON], &wp_dista
 2084              		.loc 1 575 0
 2085 0bec 114B     		ldr	r3, .L104+4
 2086 0bee 0093     		str	r3, [sp, #0]
 2087 0bf0 114B     		ldr	r3, .L104+8
 2088 0bf2 0193     		str	r3, [sp, #4]
 2089 0bf4 1148     		ldr	r0, .L104+12
 2090 0bf6 1249     		ldr	r1, .L104+16
 2091 0bf8 0D4A     		ldr	r2, .L104
 2092 0bfa 124B     		ldr	r3, .L104+20
 2093 0bfc 00F04EF8 		bl	GPS_distance_cm_bearing
 576:../src/gps.c  **** 
 577:../src/gps.c  ****     nav_bearing = target_bearing;
 2094              		.loc 1 577 0
 2095 0c00 0D4B     		ldr	r3, .L104+8
 2096 0c02 1A68     		ldr	r2, [r3, #0]
 2097 0c04 104B     		ldr	r3, .L104+24
 2098 0c06 1A60     		str	r2, [r3, #0]
 578:../src/gps.c  ****     GPS_calc_location_error(&GPS_WP[LAT], &GPS_WP[LON], &GPS_coord[LAT], &GPS_coord[LON]);
 2099              		.loc 1 578 0
 2100 0c08 0948     		ldr	r0, .L104
 2101 0c0a 0E49     		ldr	r1, .L104+20
 2102 0c0c 0B4A     		ldr	r2, .L104+12
 2103 0c0e 0C4B     		ldr	r3, .L104+16
 2104 0c10 00F03CF9 		bl	GPS_calc_location_error
 579:../src/gps.c  ****     original_target_bearing = target_bearing;
 2105              		.loc 1 579 0
 2106 0c14 084B     		ldr	r3, .L104+8
 2107 0c16 1A68     		ldr	r2, [r3, #0]
 2108 0c18 0C4B     		ldr	r3, .L104+28
 2109 0c1a 1A60     		str	r2, [r3, #0]
 580:../src/gps.c  ****     waypoint_speed_gov = cfg.nav_speed_min;
 2110              		.loc 1 580 0
 2111 0c1c 0C4B     		ldr	r3, .L104+32
 2112 0c1e B3F89630 		ldrh	r3, [r3, #150]
 2113 0c22 9AB2     		uxth	r2, r3
 2114 0c24 0B4B     		ldr	r3, .L104+36
 2115 0c26 1A80     		strh	r2, [r3, #0]	@ movhi
 581:../src/gps.c  **** }
 2116              		.loc 1 581 0
 2117 0c28 07F10807 		add	r7, r7, #8
 2118 0c2c BD46     		mov	sp, r7
 2119 0c2e 80BD     		pop	{r7, pc}
 2120              	.L105:
 2121              		.align	2
 2122              	.L104:
 2123 0c30 C0000000 		.word	GPS_WP
 2124 0c34 D4000000 		.word	wp_distance
 2125 0c38 C8000000 		.word	target_bearing
 2126 0c3c 00000000 		.word	GPS_coord
 2127 0c40 04000000 		.word	GPS_coord+4
 2128 0c44 C4000000 		.word	GPS_WP+4
 2129 0c48 28010000 		.word	nav_bearing
 2130 0c4c CC000000 		.word	original_target_bearing
 2131 0c50 00000000 		.word	cfg
 2132 0c54 D8000000 		.word	waypoint_speed_gov
 2133              		.cfi_endproc
 2134              	.LFE43:
 2136              		.align	2
 2137              		.thumb
 2138              		.thumb_func
 2140              	check_missed_wp:
 2141              	.LFB44:
 582:../src/gps.c  **** 
 583:../src/gps.c  **** ////////////////////////////////////////////////////////////////////////////////////
 584:../src/gps.c  **** // Check if we missed the destination somehow
 585:../src/gps.c  **** //
 586:../src/gps.c  **** static bool check_missed_wp(void)
 587:../src/gps.c  **** {
 2142              		.loc 1 587 0
 2143              		.cfi_startproc
 2144              		@ args = 0, pretend = 0, frame = 8
 2145              		@ frame_needed = 1, uses_anonymous_args = 0
 2146 0c58 80B5     		push	{r7, lr}
 2147              	.LCFI43:
 2148              		.cfi_def_cfa_offset 8
 2149              		.cfi_offset 7, -8
 2150              		.cfi_offset 14, -4
 2151 0c5a 82B0     		sub	sp, sp, #8
 2152              	.LCFI44:
 2153              		.cfi_def_cfa_offset 16
 2154 0c5c 00AF     		add	r7, sp, #0
 2155              	.LCFI45:
 2156              		.cfi_def_cfa_register 7
 588:../src/gps.c  ****     int32_t temp;
 589:../src/gps.c  ****     temp = target_bearing - original_target_bearing;
 2157              		.loc 1 589 0
 2158 0c5e 0D4B     		ldr	r3, .L108
 2159 0c60 1A68     		ldr	r2, [r3, #0]
 2160 0c62 0D4B     		ldr	r3, .L108+4
 2161 0c64 1B68     		ldr	r3, [r3, #0]
 2162 0c66 D31A     		subs	r3, r2, r3
 2163 0c68 7B60     		str	r3, [r7, #4]
 590:../src/gps.c  ****     temp = wrap_18000(temp);
 2164              		.loc 1 590 0
 2165 0c6a 7868     		ldr	r0, [r7, #4]
 2166 0c6c FFF7FEFF 		bl	wrap_18000
 2167 0c70 7860     		str	r0, [r7, #4]
 591:../src/gps.c  ****     return (abs(temp) > 10000); // we passed the waypoint by 100 degrees
 2168              		.loc 1 591 0
 2169 0c72 7B68     		ldr	r3, [r7, #4]
 2170 0c74 83EAE372 		eor	r2, r3, r3, asr #31
 2171 0c78 A2EBE372 		sub	r2, r2, r3, asr #31
 2172 0c7c 42F21073 		movw	r3, #10000
 2173 0c80 9A42     		cmp	r2, r3
 2174 0c82 D4BF     		ite	le
 2175 0c84 0023     		movle	r3, #0
 2176 0c86 0123     		movgt	r3, #1
 2177 0c88 DBB2     		uxtb	r3, r3
 592:../src/gps.c  **** }
 2178              		.loc 1 592 0
 2179 0c8a 1846     		mov	r0, r3
 2180 0c8c 07F10807 		add	r7, r7, #8
 2181 0c90 BD46     		mov	sp, r7
 2182 0c92 80BD     		pop	{r7, pc}
 2183              	.L109:
 2184              		.align	2
 2185              	.L108:
 2186 0c94 C8000000 		.word	target_bearing
 2187 0c98 CC000000 		.word	original_target_bearing
 2188              		.cfi_endproc
 2189              	.LFE44:
 2191              		.global	__aeabi_f2uiz
 2192              		.align	2
 2193              		.thumb
 2194              		.thumb_func
 2196              	GPS_distance_cm_bearing:
 2197              	.LFB45:
 593:../src/gps.c  **** 
 594:../src/gps.c  **** ////////////////////////////////////////////////////////////////////////////////////
 595:../src/gps.c  **** // Get distance between two points in cm
 596:../src/gps.c  **** // Get bearing from pos1 to pos2, returns an 1deg = 100 precision
 597:../src/gps.c  **** static void GPS_distance_cm_bearing(int32_t * lat1, int32_t * lon1, int32_t * lat2, int32_t * lon2,
 598:../src/gps.c  **** {
 2198              		.loc 1 598 0
 2199              		.cfi_startproc
 2200              		@ args = 8, pretend = 0, frame = 24
 2201              		@ frame_needed = 1, uses_anonymous_args = 0
 2202 0c9c 90B5     		push	{r4, r7, lr}
 2203              	.LCFI46:
 2204              		.cfi_def_cfa_offset 12
 2205              		.cfi_offset 4, -12
 2206              		.cfi_offset 7, -8
 2207              		.cfi_offset 14, -4
 2208 0c9e 87B0     		sub	sp, sp, #28
 2209              	.LCFI47:
 2210              		.cfi_def_cfa_offset 40
 2211 0ca0 00AF     		add	r7, sp, #0
 2212              	.LCFI48:
 2213              		.cfi_def_cfa_register 7
 2214 0ca2 F860     		str	r0, [r7, #12]
 2215 0ca4 B960     		str	r1, [r7, #8]
 2216 0ca6 7A60     		str	r2, [r7, #4]
 2217 0ca8 3B60     		str	r3, [r7, #0]
 599:../src/gps.c  ****     float dLat = *lat2 - *lat1; // difference of latitude in 1/10 000 000 degrees
 2218              		.loc 1 599 0
 2219 0caa 7B68     		ldr	r3, [r7, #4]
 2220 0cac 1A68     		ldr	r2, [r3, #0]
 2221 0cae FB68     		ldr	r3, [r7, #12]
 2222 0cb0 1B68     		ldr	r3, [r3, #0]
 2223 0cb2 D31A     		subs	r3, r2, r3
 2224 0cb4 1846     		mov	r0, r3
 2225 0cb6 FFF7FEFF 		bl	__aeabi_i2f
 2226 0cba 0346     		mov	r3, r0
 2227 0cbc 7B61     		str	r3, [r7, #20]	@ float
 600:../src/gps.c  ****     float dLon = (float) (*lon2 - *lon1) * GPS_scaleLonDown;
 2228              		.loc 1 600 0
 2229 0cbe 3B68     		ldr	r3, [r7, #0]
 2230 0cc0 1A68     		ldr	r2, [r3, #0]
 2231 0cc2 BB68     		ldr	r3, [r7, #8]
 2232 0cc4 1B68     		ldr	r3, [r3, #0]
 2233 0cc6 D31A     		subs	r3, r2, r3
 2234 0cc8 1846     		mov	r0, r3
 2235 0cca FFF7FEFF 		bl	__aeabi_i2f
 2236 0cce 0246     		mov	r2, r0
 2237 0cd0 274B     		ldr	r3, .L112
 2238 0cd2 1B68     		ldr	r3, [r3, #0]	@ float
 2239 0cd4 1046     		mov	r0, r2
 2240 0cd6 1946     		mov	r1, r3
 2241 0cd8 FFF7FEFF 		bl	__aeabi_fmul
 2242 0cdc 0346     		mov	r3, r0
 2243 0cde 3B61     		str	r3, [r7, #16]	@ float
 601:../src/gps.c  ****     *dist = sqrtf(sq(dLat) + sq(dLon)) * 1.113195f;
 2244              		.loc 1 601 0
 2245 0ce0 7869     		ldr	r0, [r7, #20]	@ float
 2246 0ce2 7969     		ldr	r1, [r7, #20]	@ float
 2247 0ce4 FFF7FEFF 		bl	__aeabi_fmul
 2248 0ce8 0346     		mov	r3, r0
 2249 0cea 1C46     		mov	r4, r3
 2250 0cec 3869     		ldr	r0, [r7, #16]	@ float
 2251 0cee 3969     		ldr	r1, [r7, #16]	@ float
 2252 0cf0 FFF7FEFF 		bl	__aeabi_fmul
 2253 0cf4 0346     		mov	r3, r0
 2254 0cf6 2046     		mov	r0, r4
 2255 0cf8 1946     		mov	r1, r3
 2256 0cfa FFF7FEFF 		bl	__aeabi_fadd
 2257 0cfe 0346     		mov	r3, r0
 2258 0d00 1846     		mov	r0, r3
 2259 0d02 FFF7FEFF 		bl	sqrtf
 2260 0d06 0346     		mov	r3, r0
 2261 0d08 1846     		mov	r0, r3
 2262 0d0a 1A49     		ldr	r1, .L112+4	@ float
 2263 0d0c FFF7FEFF 		bl	__aeabi_fmul
 2264 0d10 0346     		mov	r3, r0
 2265 0d12 1846     		mov	r0, r3
 2266 0d14 FFF7FEFF 		bl	__aeabi_f2uiz
 2267 0d18 0246     		mov	r2, r0
 2268 0d1a BB6A     		ldr	r3, [r7, #40]
 2269 0d1c 1A60     		str	r2, [r3, #0]
 602:../src/gps.c  **** 
 603:../src/gps.c  ****     *bearing = 9000.0f + atan2f(-dLat, dLon) * 5729.57795f;      // Convert the output radians to 1
 2270              		.loc 1 603 0
 2271 0d1e 7B69     		ldr	r3, [r7, #20]
 2272 0d20 83F00043 		eor	r3, r3, #-2147483648
 2273 0d24 1846     		mov	r0, r3
 2274 0d26 3969     		ldr	r1, [r7, #16]	@ float
 2275 0d28 FFF7FEFF 		bl	atan2f
 2276 0d2c 0346     		mov	r3, r0
 2277 0d2e 1846     		mov	r0, r3
 2278 0d30 1149     		ldr	r1, .L112+8	@ float
 2279 0d32 FFF7FEFF 		bl	__aeabi_fmul
 2280 0d36 0346     		mov	r3, r0
 2281 0d38 1846     		mov	r0, r3
 2282 0d3a 1049     		ldr	r1, .L112+12	@ float
 2283 0d3c FFF7FEFF 		bl	__aeabi_fadd
 2284 0d40 0346     		mov	r3, r0
 2285 0d42 1846     		mov	r0, r3
 2286 0d44 FFF7FEFF 		bl	__aeabi_f2iz
 2287 0d48 0246     		mov	r2, r0
 2288 0d4a FB6A     		ldr	r3, [r7, #44]
 2289 0d4c 1A60     		str	r2, [r3, #0]
 604:../src/gps.c  ****     if (*bearing < 0)
 2290              		.loc 1 604 0
 2291 0d4e FB6A     		ldr	r3, [r7, #44]
 2292 0d50 1B68     		ldr	r3, [r3, #0]
 2293 0d52 002B     		cmp	r3, #0
 2294 0d54 07DA     		bge	.L110
 605:../src/gps.c  ****         *bearing += 36000;
 2295              		.loc 1 605 0
 2296 0d56 FB6A     		ldr	r3, [r7, #44]
 2297 0d58 1B68     		ldr	r3, [r3, #0]
 2298 0d5a 03F50C43 		add	r3, r3, #35840
 2299 0d5e 03F1A003 		add	r3, r3, #160
 2300 0d62 FA6A     		ldr	r2, [r7, #44]
 2301 0d64 1360     		str	r3, [r2, #0]
 2302              	.L110:
 606:../src/gps.c  **** }
 2303              		.loc 1 606 0
 2304 0d66 07F11C07 		add	r7, r7, #28
 2305 0d6a BD46     		mov	sp, r7
 2306 0d6c 90BD     		pop	{r4, r7, pc}
 2307              	.L113:
 2308 0d6e 00BF     		.align	2
 2309              	.L112:
 2310 0d70 B0000000 		.word	GPS_scaleLonDown
 2311 0d74 2C7D8E3F 		.word	1066302764
 2312 0d78 A00CB345 		.word	1169362080
 2313 0d7c 00A00C46 		.word	1175232512
 2314              		.cfi_endproc
 2315              	.LFE45:
 2317              		.align	2
 2318              		.thumb
 2319              		.thumb_func
 2321              	GPS_calc_velocity:
 2322              	.LFB46:
 607:../src/gps.c  **** 
 608:../src/gps.c  **** ////////////////////////////////////////////////////////////////////////////////////
 609:../src/gps.c  **** // keep old calculation function for compatibility (could be removed later) distance in meters, bea
 610:../src/gps.c  **** //
 611:../src/gps.c  **** //static void GPS_distance(int32_t lat1, int32_t lon1, int32_t lat2, int32_t lon2, uint16_t* dist, 
 612:../src/gps.c  **** //  uint32_t d1;
 613:../src/gps.c  **** //  int32_t  d2;
 614:../src/gps.c  **** //  GPS_distance_cm_bearing(&lat1,&lon1,&lat2,&lon2,&d1,&d2);
 615:../src/gps.c  **** //  *dist = d1 / 100;          //convert to meters
 616:../src/gps.c  **** //  *bearing = d2 /  100;      //convert to degrees
 617:../src/gps.c  **** //}
 618:../src/gps.c  **** 
 619:../src/gps.c  **** ////////////////////////////////////////////////////////////////////////////////////
 620:../src/gps.c  **** // Calculate our current speed vector from gps position data
 621:../src/gps.c  **** //
 622:../src/gps.c  **** static void GPS_calc_velocity(void)
 623:../src/gps.c  **** {
 2323              		.loc 1 623 0
 2324              		.cfi_startproc
 2325              		@ args = 0, pretend = 0, frame = 8
 2326              		@ frame_needed = 1, uses_anonymous_args = 0
 2327 0d80 80B5     		push	{r7, lr}
 2328              	.LCFI49:
 2329              		.cfi_def_cfa_offset 8
 2330              		.cfi_offset 7, -8
 2331              		.cfi_offset 14, -4
 2332 0d82 82B0     		sub	sp, sp, #8
 2333              	.LCFI50:
 2334              		.cfi_def_cfa_offset 16
 2335 0d84 00AF     		add	r7, sp, #0
 2336              	.LCFI51:
 2337              		.cfi_def_cfa_register 7
 624:../src/gps.c  ****     static int16_t speed_old[2] = { 0, 0 };
 625:../src/gps.c  ****     static int32_t last[2] = { 0, 0 };
 626:../src/gps.c  ****     static uint8_t init = 0;
 627:../src/gps.c  ****     // y_GPS_speed positve = Up
 628:../src/gps.c  ****     // x_GPS_speed positve = Right
 629:../src/gps.c  **** 
 630:../src/gps.c  ****     if (init) {
 2338              		.loc 1 630 0
 2339 0d86 394B     		ldr	r3, .L116
 2340 0d88 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2341 0d8a 002B     		cmp	r3, #0
 2342 0d8c 5ED0     		beq	.L115
 2343              	.LBB2:
 631:../src/gps.c  ****         float tmp = 1.0f / dTnav;
 2344              		.loc 1 631 0
 2345 0d8e 384B     		ldr	r3, .L116+4
 2346 0d90 1B68     		ldr	r3, [r3, #0]	@ float
 2347 0d92 3D48     		ldr	r0, .L116+28	@ float
 2348 0d94 1946     		mov	r1, r3
 2349 0d96 FFF7FEFF 		bl	__aeabi_fdiv
 2350 0d9a 0346     		mov	r3, r0
 2351 0d9c 7B60     		str	r3, [r7, #4]	@ float
 632:../src/gps.c  ****         actual_speed[GPS_X] = (float) (GPS_coord[LON] - last[LON]) * GPS_scaleLonDown * tmp;
 2352              		.loc 1 632 0
 2353 0d9e 354B     		ldr	r3, .L116+8
 2354 0da0 5A68     		ldr	r2, [r3, #4]
 2355 0da2 354B     		ldr	r3, .L116+12
 2356 0da4 5B68     		ldr	r3, [r3, #4]
 2357 0da6 D31A     		subs	r3, r2, r3
 2358 0da8 1846     		mov	r0, r3
 2359 0daa FFF7FEFF 		bl	__aeabi_i2f
 2360 0dae 0246     		mov	r2, r0
 2361 0db0 324B     		ldr	r3, .L116+16
 2362 0db2 1B68     		ldr	r3, [r3, #0]	@ float
 2363 0db4 1046     		mov	r0, r2
 2364 0db6 1946     		mov	r1, r3
 2365 0db8 FFF7FEFF 		bl	__aeabi_fmul
 2366 0dbc 0346     		mov	r3, r0
 2367 0dbe 1846     		mov	r0, r3
 2368 0dc0 7968     		ldr	r1, [r7, #4]	@ float
 2369 0dc2 FFF7FEFF 		bl	__aeabi_fmul
 2370 0dc6 0346     		mov	r3, r0
 2371 0dc8 1846     		mov	r0, r3
 2372 0dca FFF7FEFF 		bl	__aeabi_f2iz
 2373 0dce 0346     		mov	r3, r0
 2374 0dd0 9AB2     		uxth	r2, r3
 2375 0dd2 2B4B     		ldr	r3, .L116+20
 2376 0dd4 5A80     		strh	r2, [r3, #2]	@ movhi
 633:../src/gps.c  ****         actual_speed[GPS_Y] = (float) (GPS_coord[LAT] - last[LAT]) * tmp;
 2377              		.loc 1 633 0
 2378 0dd6 274B     		ldr	r3, .L116+8
 2379 0dd8 1A68     		ldr	r2, [r3, #0]
 2380 0dda 274B     		ldr	r3, .L116+12
 2381 0ddc 1B68     		ldr	r3, [r3, #0]
 2382 0dde D31A     		subs	r3, r2, r3
 2383 0de0 1846     		mov	r0, r3
 2384 0de2 FFF7FEFF 		bl	__aeabi_i2f
 2385 0de6 0346     		mov	r3, r0
 2386 0de8 1846     		mov	r0, r3
 2387 0dea 7968     		ldr	r1, [r7, #4]	@ float
 2388 0dec FFF7FEFF 		bl	__aeabi_fmul
 2389 0df0 0346     		mov	r3, r0
 2390 0df2 1846     		mov	r0, r3
 2391 0df4 FFF7FEFF 		bl	__aeabi_f2iz
 2392 0df8 0346     		mov	r3, r0
 2393 0dfa 9AB2     		uxth	r2, r3
 2394 0dfc 204B     		ldr	r3, .L116+20
 2395 0dfe 1A80     		strh	r2, [r3, #0]	@ movhi
 634:../src/gps.c  **** 
 635:../src/gps.c  ****         actual_speed[GPS_X] = (actual_speed[GPS_X] + speed_old[GPS_X]) / 2;
 2396              		.loc 1 635 0
 2397 0e00 1F4B     		ldr	r3, .L116+20
 2398 0e02 5B88     		ldrh	r3, [r3, #2]
 2399 0e04 1AB2     		sxth	r2, r3
 2400 0e06 1F4B     		ldr	r3, .L116+24
 2401 0e08 5B88     		ldrh	r3, [r3, #2]
 2402 0e0a 1BB2     		sxth	r3, r3
 2403 0e0c D318     		adds	r3, r2, r3
 2404 0e0e 4FEAD372 		lsr	r2, r3, #31
 2405 0e12 D318     		adds	r3, r2, r3
 2406 0e14 4FEA6303 		asr	r3, r3, #1
 2407 0e18 9AB2     		uxth	r2, r3
 2408 0e1a 194B     		ldr	r3, .L116+20
 2409 0e1c 5A80     		strh	r2, [r3, #2]	@ movhi
 636:../src/gps.c  ****         actual_speed[GPS_Y] = (actual_speed[GPS_Y] + speed_old[GPS_Y]) / 2;
 2410              		.loc 1 636 0
 2411 0e1e 184B     		ldr	r3, .L116+20
 2412 0e20 1B88     		ldrh	r3, [r3, #0]
 2413 0e22 1AB2     		sxth	r2, r3
 2414 0e24 174B     		ldr	r3, .L116+24
 2415 0e26 1B88     		ldrh	r3, [r3, #0]
 2416 0e28 1BB2     		sxth	r3, r3
 2417 0e2a D318     		adds	r3, r2, r3
 2418 0e2c 4FEAD372 		lsr	r2, r3, #31
 2419 0e30 D318     		adds	r3, r2, r3
 2420 0e32 4FEA6303 		asr	r3, r3, #1
 2421 0e36 9AB2     		uxth	r2, r3
 2422 0e38 114B     		ldr	r3, .L116+20
 2423 0e3a 1A80     		strh	r2, [r3, #0]	@ movhi
 637:../src/gps.c  **** 
 638:../src/gps.c  ****         speed_old[GPS_X] = actual_speed[GPS_X];
 2424              		.loc 1 638 0
 2425 0e3c 104B     		ldr	r3, .L116+20
 2426 0e3e 5A88     		ldrh	r2, [r3, #2]
 2427 0e40 104B     		ldr	r3, .L116+24
 2428 0e42 5A80     		strh	r2, [r3, #2]	@ movhi
 639:../src/gps.c  ****         speed_old[GPS_Y] = actual_speed[GPS_Y];
 2429              		.loc 1 639 0
 2430 0e44 0E4B     		ldr	r3, .L116+20
 2431 0e46 1A88     		ldrh	r2, [r3, #0]
 2432 0e48 0E4B     		ldr	r3, .L116+24
 2433 0e4a 1A80     		strh	r2, [r3, #0]	@ movhi
 2434              	.L115:
 2435              	.LBE2:
 640:../src/gps.c  ****     }
 641:../src/gps.c  ****     init = 1;
 2436              		.loc 1 641 0
 2437 0e4c 074B     		ldr	r3, .L116
 2438 0e4e 4FF00102 		mov	r2, #1
 2439 0e52 1A70     		strb	r2, [r3, #0]
 642:../src/gps.c  **** 
 643:../src/gps.c  ****     last[LON] = GPS_coord[LON];
 2440              		.loc 1 643 0
 2441 0e54 074B     		ldr	r3, .L116+8
 2442 0e56 5A68     		ldr	r2, [r3, #4]
 2443 0e58 074B     		ldr	r3, .L116+12
 2444 0e5a 5A60     		str	r2, [r3, #4]
 644:../src/gps.c  ****     last[LAT] = GPS_coord[LAT];
 2445              		.loc 1 644 0
 2446 0e5c 054B     		ldr	r3, .L116+8
 2447 0e5e 1A68     		ldr	r2, [r3, #0]
 2448 0e60 054B     		ldr	r3, .L116+12
 2449 0e62 1A60     		str	r2, [r3, #0]
 645:../src/gps.c  **** }
 2450              		.loc 1 645 0
 2451 0e64 07F10807 		add	r7, r7, #8
 2452 0e68 BD46     		mov	sp, r7
 2453 0e6a 80BD     		pop	{r7, pc}
 2454              	.L117:
 2455              		.align	2
 2456              	.L116:
 2457 0e6c 91010000 		.word	init.9232
 2458 0e70 A8000000 		.word	dTnav
 2459 0e74 00000000 		.word	GPS_coord
 2460 0e78 94010000 		.word	last.9231
 2461 0e7c B0000000 		.word	GPS_scaleLonDown
 2462 0e80 AC000000 		.word	actual_speed
 2463 0e84 9C010000 		.word	speed_old.9230
 2464 0e88 0000803F 		.word	1065353216
 2465              		.cfi_endproc
 2466              	.LFE46:
 2468              		.align	2
 2469              		.thumb
 2470              		.thumb_func
 2472              	GPS_calc_location_error:
 2473              	.LFB47:
 646:../src/gps.c  **** 
 647:../src/gps.c  **** ////////////////////////////////////////////////////////////////////////////////////
 648:../src/gps.c  **** // Calculate a location error between two gps coordinates
 649:../src/gps.c  **** // Because we are using lat and lon to do our distance errors here's a quick chart:
 650:../src/gps.c  **** //      100     = 1m
 651:../src/gps.c  **** //      1000    = 11m    = 36 feet
 652:../src/gps.c  **** //      1800    = 19.80m = 60 feet
 653:../src/gps.c  **** //      3000    = 33m
 654:../src/gps.c  **** //      10000   = 111m
 655:../src/gps.c  **** //
 656:../src/gps.c  **** static void GPS_calc_location_error(int32_t *target_lat, int32_t *target_lng, int32_t *gps_lat, int
 657:../src/gps.c  **** {
 2474              		.loc 1 657 0
 2475              		.cfi_startproc
 2476              		@ args = 0, pretend = 0, frame = 16
 2477              		@ frame_needed = 1, uses_anonymous_args = 0
 2478 0e8c 80B5     		push	{r7, lr}
 2479              	.LCFI52:
 2480              		.cfi_def_cfa_offset 8
 2481              		.cfi_offset 7, -8
 2482              		.cfi_offset 14, -4
 2483 0e8e 84B0     		sub	sp, sp, #16
 2484              	.LCFI53:
 2485              		.cfi_def_cfa_offset 24
 2486 0e90 00AF     		add	r7, sp, #0
 2487              	.LCFI54:
 2488              		.cfi_def_cfa_register 7
 2489 0e92 F860     		str	r0, [r7, #12]
 2490 0e94 B960     		str	r1, [r7, #8]
 2491 0e96 7A60     		str	r2, [r7, #4]
 2492 0e98 3B60     		str	r3, [r7, #0]
 658:../src/gps.c  ****     error[LON] = (float) (*target_lng - *gps_lng) * GPS_scaleLonDown;   // X Error
 2493              		.loc 1 658 0
 2494 0e9a BB68     		ldr	r3, [r7, #8]
 2495 0e9c 1A68     		ldr	r2, [r3, #0]
 2496 0e9e 3B68     		ldr	r3, [r7, #0]
 2497 0ea0 1B68     		ldr	r3, [r3, #0]
 2498 0ea2 D31A     		subs	r3, r2, r3
 2499 0ea4 1846     		mov	r0, r3
 2500 0ea6 FFF7FEFF 		bl	__aeabi_i2f
 2501 0eaa 0246     		mov	r2, r0
 2502 0eac 0B4B     		ldr	r3, .L119
 2503 0eae 1B68     		ldr	r3, [r3, #0]	@ float
 2504 0eb0 1046     		mov	r0, r2
 2505 0eb2 1946     		mov	r1, r3
 2506 0eb4 FFF7FEFF 		bl	__aeabi_fmul
 2507 0eb8 0346     		mov	r3, r0
 2508 0eba 1846     		mov	r0, r3
 2509 0ebc FFF7FEFF 		bl	__aeabi_f2iz
 2510 0ec0 0246     		mov	r2, r0
 2511 0ec2 074B     		ldr	r3, .L119+4
 2512 0ec4 5A60     		str	r2, [r3, #4]
 659:../src/gps.c  ****     error[LAT] = *target_lat - *gps_lat;        // Y Error
 2513              		.loc 1 659 0
 2514 0ec6 FB68     		ldr	r3, [r7, #12]
 2515 0ec8 1A68     		ldr	r2, [r3, #0]
 2516 0eca 7B68     		ldr	r3, [r7, #4]
 2517 0ecc 1B68     		ldr	r3, [r3, #0]
 2518 0ece D21A     		subs	r2, r2, r3
 2519 0ed0 034B     		ldr	r3, .L119+4
 2520 0ed2 1A60     		str	r2, [r3, #0]
 660:../src/gps.c  **** }
 2521              		.loc 1 660 0
 2522 0ed4 07F11007 		add	r7, r7, #16
 2523 0ed8 BD46     		mov	sp, r7
 2524 0eda 80BD     		pop	{r7, pc}
 2525              	.L120:
 2526              		.align	2
 2527              	.L119:
 2528 0edc B0000000 		.word	GPS_scaleLonDown
 2529 0ee0 B8000000 		.word	error
 2530              		.cfi_endproc
 2531              	.LFE47:
 2533              		.align	2
 2534              		.thumb
 2535              		.thumb_func
 2537              	GPS_calc_poshold:
 2538              	.LFB48:
 661:../src/gps.c  **** 
 662:../src/gps.c  **** ////////////////////////////////////////////////////////////////////////////////////
 663:../src/gps.c  **** // Calculate nav_lat and nav_lon from the x and y error and the speed
 664:../src/gps.c  **** //
 665:../src/gps.c  **** static void GPS_calc_poshold(void)
 666:../src/gps.c  **** {
 2539              		.loc 1 666 0
 2540              		.cfi_startproc
 2541              		@ args = 0, pretend = 0, frame = 16
 2542              		@ frame_needed = 1, uses_anonymous_args = 0
 2543 0ee4 90B5     		push	{r4, r7, lr}
 2544              	.LCFI55:
 2545              		.cfi_def_cfa_offset 12
 2546              		.cfi_offset 4, -12
 2547              		.cfi_offset 7, -8
 2548              		.cfi_offset 14, -4
 2549 0ee6 85B0     		sub	sp, sp, #20
 2550              	.LCFI56:
 2551              		.cfi_def_cfa_offset 32
 2552 0ee8 00AF     		add	r7, sp, #0
 2553              	.LCFI57:
 2554              		.cfi_def_cfa_register 7
 667:../src/gps.c  ****     int32_t d;
 668:../src/gps.c  ****     int32_t target_speed;
 669:../src/gps.c  ****     int axis;
 670:../src/gps.c  **** 
 671:../src/gps.c  ****     for (axis = 0; axis < 2; axis++) {
 2555              		.loc 1 671 0
 2556 0eea 4FF00003 		mov	r3, #0
 2557 0eee BB60     		str	r3, [r7, #8]
 2558 0ef0 B6E0     		b	.L122
 2559              	.L128:
 672:../src/gps.c  ****         target_speed = get_P(error[axis], &posholdPID_PARAM);       // calculate desired speed from
 2560              		.loc 1 672 0
 2561 0ef2 5F4B     		ldr	r3, .L129
 2562 0ef4 BA68     		ldr	r2, [r7, #8]
 2563 0ef6 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2564 0efa 1846     		mov	r0, r3
 2565 0efc 5D49     		ldr	r1, .L129+4
 2566 0efe FFF7EDF9 		bl	get_P
 2567 0f02 7860     		str	r0, [r7, #4]
 673:../src/gps.c  ****         rate_error[axis] = target_speed - actual_speed[axis];       // calc the speed error
 2568              		.loc 1 673 0
 2569 0f04 7B68     		ldr	r3, [r7, #4]
 2570 0f06 9AB2     		uxth	r2, r3
 2571 0f08 5B4B     		ldr	r3, .L129+8
 2572 0f0a B968     		ldr	r1, [r7, #8]
 2573 0f0c 33F81130 		ldrh	r3, [r3, r1, lsl #1]
 2574 0f10 9BB2     		uxth	r3, r3
 2575 0f12 D31A     		subs	r3, r2, r3
 2576 0f14 9BB2     		uxth	r3, r3
 2577 0f16 99B2     		uxth	r1, r3
 2578 0f18 584B     		ldr	r3, .L129+12
 2579 0f1a BA68     		ldr	r2, [r7, #8]
 2580 0f1c 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 674:../src/gps.c  **** 
 675:../src/gps.c  ****         nav[axis] = get_P(rate_error[axis], &poshold_ratePID_PARAM) +
 2581              		.loc 1 675 0
 2582 0f20 564B     		ldr	r3, .L129+12
 2583 0f22 BA68     		ldr	r2, [r7, #8]
 2584 0f24 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 2585 0f28 1BB2     		sxth	r3, r3
 2586 0f2a 1846     		mov	r0, r3
 2587 0f2c 5449     		ldr	r1, .L129+16
 2588 0f2e FFF7D5F9 		bl	get_P
 2589 0f32 0346     		mov	r3, r0
 2590 0f34 9CB2     		uxth	r4, r3
 676:../src/gps.c  ****                     get_I(rate_error[axis] + error[axis], &dTnav, &poshold_ratePID[axis], &poshold_
 2591              		.loc 1 676 0
 2592 0f36 514B     		ldr	r3, .L129+12
 2593 0f38 BA68     		ldr	r2, [r7, #8]
 2594 0f3a 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 2595 0f3e 1AB2     		sxth	r2, r3
 2596 0f40 4B4B     		ldr	r3, .L129
 2597 0f42 B968     		ldr	r1, [r7, #8]
 2598 0f44 53F82130 		ldr	r3, [r3, r1, lsl #2]
 2599 0f48 D118     		adds	r1, r2, r3
 2600 0f4a BA68     		ldr	r2, [r7, #8]
 2601 0f4c 1346     		mov	r3, r2
 2602 0f4e 4FEA8303 		lsl	r3, r3, #2
 2603 0f52 9B18     		adds	r3, r3, r2
 2604 0f54 4FEA8303 		lsl	r3, r3, #2
 2605 0f58 4A4A     		ldr	r2, .L129+20
 2606 0f5a 9B18     		adds	r3, r3, r2
 2607 0f5c 0846     		mov	r0, r1
 2608 0f5e 4A49     		ldr	r1, .L129+24
 2609 0f60 1A46     		mov	r2, r3
 2610 0f62 474B     		ldr	r3, .L129+16
 2611 0f64 FFF7D4F9 		bl	get_I
 2612 0f68 0346     		mov	r3, r0
 675:../src/gps.c  ****         nav[axis] = get_P(rate_error[axis], &poshold_ratePID_PARAM) +
 2613              		.loc 1 675 0
 2614 0f6a 9BB2     		uxth	r3, r3
 2615 0f6c E318     		adds	r3, r4, r3
 2616 0f6e 9BB2     		uxth	r3, r3
 2617 0f70 99B2     		uxth	r1, r3
 2618 0f72 464B     		ldr	r3, .L129+28
 2619 0f74 BA68     		ldr	r2, [r7, #8]
 2620 0f76 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 677:../src/gps.c  ****         d = get_D(error[axis], &dTnav, &poshold_ratePID[axis], &poshold_ratePID_PARAM);
 2621              		.loc 1 677 0
 2622 0f7a 3D4B     		ldr	r3, .L129
 2623 0f7c BA68     		ldr	r2, [r7, #8]
 2624 0f7e 53F82210 		ldr	r1, [r3, r2, lsl #2]
 2625 0f82 BA68     		ldr	r2, [r7, #8]
 2626 0f84 1346     		mov	r3, r2
 2627 0f86 4FEA8303 		lsl	r3, r3, #2
 2628 0f8a 9B18     		adds	r3, r3, r2
 2629 0f8c 4FEA8303 		lsl	r3, r3, #2
 2630 0f90 3C4A     		ldr	r2, .L129+20
 2631 0f92 9B18     		adds	r3, r3, r2
 2632 0f94 0846     		mov	r0, r1
 2633 0f96 3C49     		ldr	r1, .L129+24
 2634 0f98 1A46     		mov	r2, r3
 2635 0f9a 394B     		ldr	r3, .L129+16
 2636 0f9c FFF70CFA 		bl	get_D
 2637 0fa0 F860     		str	r0, [r7, #12]
 678:../src/gps.c  ****         d = constrain(d, -2000, 2000);
 2638              		.loc 1 678 0
 2639 0fa2 FB68     		ldr	r3, [r7, #12]
 2640 0fa4 13F5FA6F 		cmn	r3, #2000
 2641 0fa8 06DB     		blt	.L123
 2642              		.loc 1 678 0 is_stmt 0 discriminator 1
 2643 0faa FB68     		ldr	r3, [r7, #12]
 2644 0fac B3F5FA6F 		cmp	r3, #2000
 2645 0fb0 A8BF     		it	ge
 2646 0fb2 4FF4FA63 		movge	r3, #2000
 2647 0fb6 00E0     		b	.L124
 2648              	.L123:
 2649              		.loc 1 678 0 discriminator 2
 2650 0fb8 354B     		ldr	r3, .L129+32
 2651              	.L124:
 2652              		.loc 1 678 0 discriminator 3
 2653 0fba FB60     		str	r3, [r7, #12]
 679:../src/gps.c  **** 
 680:../src/gps.c  ****         // get rid of noise
 681:../src/gps.c  **** #if defined(GPS_LOW_SPEED_D_FILTER)
 682:../src/gps.c  ****         if (abs(actual_speed[axis]) < 50)
 2654              		.loc 1 682 0 is_stmt 1 discriminator 3
 2655 0fbc 2E4B     		ldr	r3, .L129+8
 2656 0fbe BA68     		ldr	r2, [r7, #8]
 2657 0fc0 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 2658 0fc4 1BB2     		sxth	r3, r3
 2659 0fc6 13F1310F 		cmn	r3, #49
 2660 0fca 09DB     		blt	.L125
 2661              		.loc 1 682 0 is_stmt 0 discriminator 1
 2662 0fcc 2A4B     		ldr	r3, .L129+8
 2663 0fce BA68     		ldr	r2, [r7, #8]
 2664 0fd0 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 2665 0fd4 1BB2     		sxth	r3, r3
 2666 0fd6 312B     		cmp	r3, #49
 2667 0fd8 02DC     		bgt	.L125
 683:../src/gps.c  ****             d = 0;
 2668              		.loc 1 683 0 is_stmt 1
 2669 0fda 4FF00003 		mov	r3, #0
 2670 0fde FB60     		str	r3, [r7, #12]
 2671              	.L125:
 684:../src/gps.c  **** #endif
 685:../src/gps.c  **** 
 686:../src/gps.c  ****         nav[axis] +=d;
 2672              		.loc 1 686 0
 2673 0fe0 2A4B     		ldr	r3, .L129+28
 2674 0fe2 BA68     		ldr	r2, [r7, #8]
 2675 0fe4 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 2676 0fe8 9AB2     		uxth	r2, r3
 2677 0fea FB68     		ldr	r3, [r7, #12]
 2678 0fec 9BB2     		uxth	r3, r3
 2679 0fee D318     		adds	r3, r2, r3
 2680 0ff0 9BB2     		uxth	r3, r3
 2681 0ff2 99B2     		uxth	r1, r3
 2682 0ff4 254B     		ldr	r3, .L129+28
 2683 0ff6 BA68     		ldr	r2, [r7, #8]
 2684 0ff8 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 687:../src/gps.c  ****         nav[axis] = constrain(nav[axis], -NAV_BANK_MAX, NAV_BANK_MAX);
 2685              		.loc 1 687 0
 2686 0ffc 234B     		ldr	r3, .L129+28
 2687 0ffe BA68     		ldr	r2, [r7, #8]
 2688 1000 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 2689 1004 1AB2     		sxth	r2, r3
 2690 1006 234B     		ldr	r3, .L129+36
 2691 1008 9A42     		cmp	r2, r3
 2692 100a 0BDB     		blt	.L126
 2693              		.loc 1 687 0 is_stmt 0 discriminator 1
 2694 100c 1F4B     		ldr	r3, .L129+28
 2695 100e BA68     		ldr	r2, [r7, #8]
 2696 1010 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 2697 1014 1AB2     		sxth	r2, r3
 2698 1016 40F6B833 		movw	r3, #3000
 2699 101a 9A42     		cmp	r2, r3
 2700 101c B8BF     		it	lt
 2701 101e 1346     		movlt	r3, r2
 2702 1020 9BB2     		uxth	r3, r3
 2703 1022 01E0     		b	.L127
 2704              	.L126:
 2705              		.loc 1 687 0 discriminator 2
 2706 1024 4FF24843 		movw	r3, #62536
 2707              	.L127:
 2708              		.loc 1 687 0 discriminator 3
 2709 1028 184A     		ldr	r2, .L129+28
 2710 102a B968     		ldr	r1, [r7, #8]
 2711 102c 22F81130 		strh	r3, [r2, r1, lsl #1]	@ movhi
 688:../src/gps.c  ****         navPID[axis].integrator = poshold_ratePID[axis].integrator;
 2712              		.loc 1 688 0 is_stmt 1 discriminator 3
 2713 1030 1449     		ldr	r1, .L129+20
 2714 1032 BA68     		ldr	r2, [r7, #8]
 2715 1034 1346     		mov	r3, r2
 2716 1036 4FEA8303 		lsl	r3, r3, #2
 2717 103a 9B18     		adds	r3, r3, r2
 2718 103c 4FEA8303 		lsl	r3, r3, #2
 2719 1040 CB18     		adds	r3, r1, r3
 2720 1042 1968     		ldr	r1, [r3, #0]	@ float
 2721 1044 1448     		ldr	r0, .L129+40
 2722 1046 BA68     		ldr	r2, [r7, #8]
 2723 1048 1346     		mov	r3, r2
 2724 104a 4FEA8303 		lsl	r3, r3, #2
 2725 104e 9B18     		adds	r3, r3, r2
 2726 1050 4FEA8303 		lsl	r3, r3, #2
 2727 1054 C318     		adds	r3, r0, r3
 2728 1056 1960     		str	r1, [r3, #0]	@ float
 671:../src/gps.c  ****     for (axis = 0; axis < 2; axis++) {
 2729              		.loc 1 671 0 discriminator 3
 2730 1058 BB68     		ldr	r3, [r7, #8]
 2731 105a 03F10103 		add	r3, r3, #1
 2732 105e BB60     		str	r3, [r7, #8]
 2733              	.L122:
 671:../src/gps.c  ****     for (axis = 0; axis < 2; axis++) {
 2734              		.loc 1 671 0 is_stmt 0 discriminator 1
 2735 1060 BB68     		ldr	r3, [r7, #8]
 2736 1062 012B     		cmp	r3, #1
 2737 1064 7FF745AF 		ble	.L128
 689:../src/gps.c  ****     }
 690:../src/gps.c  **** }
 2738              		.loc 1 690 0 is_stmt 1
 2739 1068 07F11407 		add	r7, r7, #20
 2740 106c BD46     		mov	sp, r7
 2741 106e 90BD     		pop	{r4, r7, pc}
 2742              	.L130:
 2743              		.align	2
 2744              	.L129:
 2745 1070 B8000000 		.word	error
 2746 1074 00000000 		.word	posholdPID_PARAM
 2747 1078 AC000000 		.word	actual_speed
 2748 107c B4000000 		.word	rate_error
 2749 1080 10000000 		.word	poshold_ratePID_PARAM
 2750 1084 58000000 		.word	poshold_ratePID
 2751 1088 A8000000 		.word	dTnav
 2752 108c 00000000 		.word	nav
 2753 1090 30F8FFFF 		.word	-2000
 2754 1094 48F4FFFF 		.word	-3000
 2755 1098 80000000 		.word	navPID
 2756              		.cfi_endproc
 2757              	.LFE48:
 2759              		.align	2
 2760              		.thumb
 2761              		.thumb_func
 2763              	GPS_calc_nav_rate:
 2764              	.LFB49:
 691:../src/gps.c  **** 
 692:../src/gps.c  **** ////////////////////////////////////////////////////////////////////////////////////
 693:../src/gps.c  **** // Calculate the desired nav_lat and nav_lon for distance flying such as RTH
 694:../src/gps.c  **** //
 695:../src/gps.c  **** static void GPS_calc_nav_rate(int max_speed)
 696:../src/gps.c  **** {
 2765              		.loc 1 696 0
 2766              		.cfi_startproc
 2767              		@ args = 0, pretend = 0, frame = 24
 2768              		@ frame_needed = 1, uses_anonymous_args = 0
 2769 109c 90B5     		push	{r4, r7, lr}
 2770              	.LCFI58:
 2771              		.cfi_def_cfa_offset 12
 2772              		.cfi_offset 4, -12
 2773              		.cfi_offset 7, -8
 2774              		.cfi_offset 14, -4
 2775 109e 87B0     		sub	sp, sp, #28
 2776              	.LCFI59:
 2777              		.cfi_def_cfa_offset 40
 2778 10a0 00AF     		add	r7, sp, #0
 2779              	.LCFI60:
 2780              		.cfi_def_cfa_register 7
 2781 10a2 7860     		str	r0, [r7, #4]
 697:../src/gps.c  ****     float trig[2];
 698:../src/gps.c  ****     float temp;
 699:../src/gps.c  ****     int axis;
 700:../src/gps.c  **** 
 701:../src/gps.c  ****     // push us towards the original track
 702:../src/gps.c  ****     GPS_update_crosstrack();
 2782              		.loc 1 702 0
 2783 10a4 00F0F0F8 		bl	GPS_update_crosstrack
 703:../src/gps.c  **** 
 704:../src/gps.c  ****     // nav_bearing includes crosstrack
 705:../src/gps.c  ****     temp = (9000l - nav_bearing) * RADX100;
 2784              		.loc 1 705 0
 2785 10a8 6D4B     		ldr	r3, .L138
 2786 10aa 1B68     		ldr	r3, [r3, #0]
 2787 10ac C3F50C53 		rsb	r3, r3, #8960
 2788 10b0 03F12803 		add	r3, r3, #40
 2789 10b4 1846     		mov	r0, r3
 2790 10b6 FFF7FEFF 		bl	__aeabi_i2f
 2791 10ba 0346     		mov	r3, r0
 2792 10bc 1846     		mov	r0, r3
 2793 10be 7149     		ldr	r1, .L138+36	@ float
 2794 10c0 FFF7FEFF 		bl	__aeabi_fmul
 2795 10c4 0346     		mov	r3, r0
 2796 10c6 3B61     		str	r3, [r7, #16]	@ float
 706:../src/gps.c  ****     trig[GPS_X] = cosf(temp);
 2797              		.loc 1 706 0
 2798 10c8 3869     		ldr	r0, [r7, #16]	@ float
 2799 10ca FFF7FEFF 		bl	cosf
 2800 10ce 0346     		mov	r3, r0
 2801 10d0 FB60     		str	r3, [r7, #12]	@ float
 707:../src/gps.c  ****     trig[GPS_Y] = sinf(temp);
 2802              		.loc 1 707 0
 2803 10d2 3869     		ldr	r0, [r7, #16]	@ float
 2804 10d4 FFF7FEFF 		bl	sinf
 2805 10d8 0346     		mov	r3, r0
 2806 10da BB60     		str	r3, [r7, #8]	@ float
 708:../src/gps.c  **** 
 709:../src/gps.c  ****     for (axis = 0; axis < 2; axis++) {
 2807              		.loc 1 709 0
 2808 10dc 4FF00003 		mov	r3, #0
 2809 10e0 7B61     		str	r3, [r7, #20]
 2810 10e2 B4E0     		b	.L132
 2811              	.L137:
 710:../src/gps.c  ****         rate_error[axis] = (trig[axis] * max_speed) - actual_speed[axis];
 2812              		.loc 1 710 0
 2813 10e4 7B69     		ldr	r3, [r7, #20]
 2814 10e6 4FEA8303 		lsl	r3, r3, #2
 2815 10ea 07F11802 		add	r2, r7, #24
 2816 10ee D318     		adds	r3, r2, r3
 2817 10f0 53F8104C 		ldr	r4, [r3, #-16]	@ float
 2818 10f4 7868     		ldr	r0, [r7, #4]
 2819 10f6 FFF7FEFF 		bl	__aeabi_i2f
 2820 10fa 0346     		mov	r3, r0
 2821 10fc 2046     		mov	r0, r4
 2822 10fe 1946     		mov	r1, r3
 2823 1100 FFF7FEFF 		bl	__aeabi_fmul
 2824 1104 0346     		mov	r3, r0
 2825 1106 1C46     		mov	r4, r3
 2826 1108 564B     		ldr	r3, .L138+4
 2827 110a 7A69     		ldr	r2, [r7, #20]
 2828 110c 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 2829 1110 1BB2     		sxth	r3, r3
 2830 1112 1846     		mov	r0, r3
 2831 1114 FFF7FEFF 		bl	__aeabi_i2f
 2832 1118 0346     		mov	r3, r0
 2833 111a 2046     		mov	r0, r4
 2834 111c 1946     		mov	r1, r3
 2835 111e FFF7FEFF 		bl	__aeabi_fsub
 2836 1122 0346     		mov	r3, r0
 2837 1124 1846     		mov	r0, r3
 2838 1126 FFF7FEFF 		bl	__aeabi_f2iz
 2839 112a 0346     		mov	r3, r0
 2840 112c 99B2     		uxth	r1, r3
 2841 112e 4E4B     		ldr	r3, .L138+8
 2842 1130 7A69     		ldr	r2, [r7, #20]
 2843 1132 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 711:../src/gps.c  ****         rate_error[axis] = constrain(rate_error[axis], -1000, 1000);
 2844              		.loc 1 711 0
 2845 1136 4C4B     		ldr	r3, .L138+8
 2846 1138 7A69     		ldr	r2, [r7, #20]
 2847 113a 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 2848 113e 1BB2     		sxth	r3, r3
 2849 1140 13F57A7F 		cmn	r3, #1000
 2850 1144 0BDB     		blt	.L133
 2851              		.loc 1 711 0 is_stmt 0 discriminator 1
 2852 1146 484B     		ldr	r3, .L138+8
 2853 1148 7A69     		ldr	r2, [r7, #20]
 2854 114a 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 2855 114e 1BB2     		sxth	r3, r3
 2856 1150 B3F57A7F 		cmp	r3, #1000
 2857 1154 A8BF     		it	ge
 2858 1156 4FF47A73 		movge	r3, #1000
 2859 115a 9BB2     		uxth	r3, r3
 2860 115c 01E0     		b	.L134
 2861              	.L133:
 2862              		.loc 1 711 0 discriminator 2
 2863 115e 4FF61843 		movw	r3, #64536
 2864              	.L134:
 2865              		.loc 1 711 0 discriminator 3
 2866 1162 414A     		ldr	r2, .L138+8
 2867 1164 7969     		ldr	r1, [r7, #20]
 2868 1166 22F81130 		strh	r3, [r2, r1, lsl #1]	@ movhi
 712:../src/gps.c  ****         // P + I + D
 713:../src/gps.c  ****         nav[axis] = get_P(rate_error[axis], &navPID_PARAM) +
 2869              		.loc 1 713 0 is_stmt 1 discriminator 3
 2870 116a 3F4B     		ldr	r3, .L138+8
 2871 116c 7A69     		ldr	r2, [r7, #20]
 2872 116e 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 2873 1172 1BB2     		sxth	r3, r3
 2874 1174 1846     		mov	r0, r3
 2875 1176 3D49     		ldr	r1, .L138+12
 2876 1178 FFF7B0F8 		bl	get_P
 2877 117c 0346     		mov	r3, r0
 2878 117e 9CB2     		uxth	r4, r3
 714:../src/gps.c  ****                     get_I(rate_error[axis], &dTnav, &navPID[axis], &navPID_PARAM) +
 2879              		.loc 1 714 0 discriminator 3
 2880 1180 394B     		ldr	r3, .L138+8
 2881 1182 7A69     		ldr	r2, [r7, #20]
 2882 1184 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 2883 1188 19B2     		sxth	r1, r3
 2884 118a 7A69     		ldr	r2, [r7, #20]
 2885 118c 1346     		mov	r3, r2
 2886 118e 4FEA8303 		lsl	r3, r3, #2
 2887 1192 9B18     		adds	r3, r3, r2
 2888 1194 4FEA8303 		lsl	r3, r3, #2
 2889 1198 354A     		ldr	r2, .L138+16
 2890 119a 9B18     		adds	r3, r3, r2
 2891 119c 0846     		mov	r0, r1
 2892 119e 3549     		ldr	r1, .L138+20
 2893 11a0 1A46     		mov	r2, r3
 2894 11a2 324B     		ldr	r3, .L138+12
 2895 11a4 FFF7B4F8 		bl	get_I
 2896 11a8 0346     		mov	r3, r0
 713:../src/gps.c  ****         nav[axis] = get_P(rate_error[axis], &navPID_PARAM) +
 2897              		.loc 1 713 0 discriminator 3
 2898 11aa 9BB2     		uxth	r3, r3
 2899 11ac E318     		adds	r3, r4, r3
 2900 11ae 9CB2     		uxth	r4, r3
 715:../src/gps.c  ****                     get_D(rate_error[axis], &dTnav, &navPID[axis], &navPID_PARAM);
 2901              		.loc 1 715 0 discriminator 3
 2902 11b0 2D4B     		ldr	r3, .L138+8
 2903 11b2 7A69     		ldr	r2, [r7, #20]
 2904 11b4 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 2905 11b8 19B2     		sxth	r1, r3
 2906 11ba 7A69     		ldr	r2, [r7, #20]
 2907 11bc 1346     		mov	r3, r2
 2908 11be 4FEA8303 		lsl	r3, r3, #2
 2909 11c2 9B18     		adds	r3, r3, r2
 2910 11c4 4FEA8303 		lsl	r3, r3, #2
 2911 11c8 294A     		ldr	r2, .L138+16
 2912 11ca 9B18     		adds	r3, r3, r2
 2913 11cc 0846     		mov	r0, r1
 2914 11ce 2949     		ldr	r1, .L138+20
 2915 11d0 1A46     		mov	r2, r3
 2916 11d2 264B     		ldr	r3, .L138+12
 2917 11d4 FFF7F0F8 		bl	get_D
 2918 11d8 0346     		mov	r3, r0
 713:../src/gps.c  ****         nav[axis] = get_P(rate_error[axis], &navPID_PARAM) +
 2919              		.loc 1 713 0 discriminator 3
 2920 11da 9BB2     		uxth	r3, r3
 2921 11dc E318     		adds	r3, r4, r3
 2922 11de 9BB2     		uxth	r3, r3
 2923 11e0 99B2     		uxth	r1, r3
 2924 11e2 254B     		ldr	r3, .L138+24
 2925 11e4 7A69     		ldr	r2, [r7, #20]
 2926 11e6 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 716:../src/gps.c  **** 
 717:../src/gps.c  ****         nav[axis] = constrain(nav[axis], -NAV_BANK_MAX, NAV_BANK_MAX);
 2927              		.loc 1 717 0 discriminator 3
 2928 11ea 234B     		ldr	r3, .L138+24
 2929 11ec 7A69     		ldr	r2, [r7, #20]
 2930 11ee 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 2931 11f2 1AB2     		sxth	r2, r3
 2932 11f4 214B     		ldr	r3, .L138+28
 2933 11f6 9A42     		cmp	r2, r3
 2934 11f8 0BDB     		blt	.L135
 2935              		.loc 1 717 0 is_stmt 0 discriminator 1
 2936 11fa 1F4B     		ldr	r3, .L138+24
 2937 11fc 7A69     		ldr	r2, [r7, #20]
 2938 11fe 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 2939 1202 1AB2     		sxth	r2, r3
 2940 1204 40F6B833 		movw	r3, #3000
 2941 1208 9A42     		cmp	r2, r3
 2942 120a B8BF     		it	lt
 2943 120c 1346     		movlt	r3, r2
 2944 120e 9BB2     		uxth	r3, r3
 2945 1210 01E0     		b	.L136
 2946              	.L135:
 2947              		.loc 1 717 0 discriminator 2
 2948 1212 4FF24843 		movw	r3, #62536
 2949              	.L136:
 2950              		.loc 1 717 0 discriminator 3
 2951 1216 184A     		ldr	r2, .L138+24
 2952 1218 7969     		ldr	r1, [r7, #20]
 2953 121a 22F81130 		strh	r3, [r2, r1, lsl #1]	@ movhi
 718:../src/gps.c  ****         poshold_ratePID[axis].integrator = navPID[axis].integrator;
 2954              		.loc 1 718 0 is_stmt 1 discriminator 3
 2955 121e 1449     		ldr	r1, .L138+16
 2956 1220 7A69     		ldr	r2, [r7, #20]
 2957 1222 1346     		mov	r3, r2
 2958 1224 4FEA8303 		lsl	r3, r3, #2
 2959 1228 9B18     		adds	r3, r3, r2
 2960 122a 4FEA8303 		lsl	r3, r3, #2
 2961 122e CB18     		adds	r3, r1, r3
 2962 1230 1968     		ldr	r1, [r3, #0]	@ float
 2963 1232 1348     		ldr	r0, .L138+32
 2964 1234 7A69     		ldr	r2, [r7, #20]
 2965 1236 1346     		mov	r3, r2
 2966 1238 4FEA8303 		lsl	r3, r3, #2
 2967 123c 9B18     		adds	r3, r3, r2
 2968 123e 4FEA8303 		lsl	r3, r3, #2
 2969 1242 C318     		adds	r3, r0, r3
 2970 1244 1960     		str	r1, [r3, #0]	@ float
 709:../src/gps.c  ****     for (axis = 0; axis < 2; axis++) {
 2971              		.loc 1 709 0 discriminator 3
 2972 1246 7B69     		ldr	r3, [r7, #20]
 2973 1248 03F10103 		add	r3, r3, #1
 2974 124c 7B61     		str	r3, [r7, #20]
 2975              	.L132:
 709:../src/gps.c  ****     for (axis = 0; axis < 2; axis++) {
 2976              		.loc 1 709 0 is_stmt 0 discriminator 1
 2977 124e 7B69     		ldr	r3, [r7, #20]
 2978 1250 012B     		cmp	r3, #1
 2979 1252 7FF747AF 		ble	.L137
 719:../src/gps.c  ****     }
 720:../src/gps.c  **** }
 2980              		.loc 1 720 0 is_stmt 1
 2981 1256 07F11C07 		add	r7, r7, #28
 2982 125a BD46     		mov	sp, r7
 2983 125c 90BD     		pop	{r4, r7, pc}
 2984              	.L139:
 2985 125e 00BF     		.align	2
 2986              	.L138:
 2987 1260 28010000 		.word	nav_bearing
 2988 1264 AC000000 		.word	actual_speed
 2989 1268 B4000000 		.word	rate_error
 2990 126c 20000000 		.word	navPID_PARAM
 2991 1270 80000000 		.word	navPID
 2992 1274 A8000000 		.word	dTnav
 2993 1278 00000000 		.word	nav
 2994 127c 48F4FFFF 		.word	-3000
 2995 1280 58000000 		.word	poshold_ratePID
 2996 1284 D3023739 		.word	959906515
 2997              		.cfi_endproc
 2998              	.LFE49:
 3000              		.align	2
 3001              		.thumb
 3002              		.thumb_func
 3004              	GPS_update_crosstrack:
 3005              	.LFB50:
 721:../src/gps.c  **** 
 722:../src/gps.c  **** ////////////////////////////////////////////////////////////////////////////////////
 723:../src/gps.c  **** // Calculating cross track error, this tries to keep the copter on a direct line
 724:../src/gps.c  **** // when flying to a waypoint.
 725:../src/gps.c  **** //
 726:../src/gps.c  **** static void GPS_update_crosstrack(void)
 727:../src/gps.c  **** {
 3006              		.loc 1 727 0
 3007              		.cfi_startproc
 3008              		@ args = 0, pretend = 0, frame = 8
 3009              		@ frame_needed = 1, uses_anonymous_args = 0
 3010 1288 90B5     		push	{r4, r7, lr}
 3011              	.LCFI61:
 3012              		.cfi_def_cfa_offset 12
 3013              		.cfi_offset 4, -12
 3014              		.cfi_offset 7, -8
 3015              		.cfi_offset 14, -4
 3016 128a 83B0     		sub	sp, sp, #12
 3017              	.LCFI62:
 3018              		.cfi_def_cfa_offset 24
 3019 128c 00AF     		add	r7, sp, #0
 3020              	.LCFI63:
 3021              		.cfi_def_cfa_register 7
 728:../src/gps.c  ****     if (abs(wrap_18000(target_bearing - original_target_bearing)) < 4500) {     // If we are too fa
 3022              		.loc 1 728 0
 3023 128e 3E4B     		ldr	r3, .L147
 3024 1290 1A68     		ldr	r2, [r3, #0]
 3025 1292 3E4B     		ldr	r3, .L147+4
 3026 1294 1B68     		ldr	r3, [r3, #0]
 3027 1296 D31A     		subs	r3, r2, r3
 3028 1298 1846     		mov	r0, r3
 3029 129a FFF7FEFF 		bl	wrap_18000
 3030 129e 0346     		mov	r3, r0
 3031 12a0 002B     		cmp	r3, #0
 3032 12a2 10DD     		ble	.L141
 3033              		.loc 1 728 0 is_stmt 0 discriminator 1
 3034 12a4 384B     		ldr	r3, .L147
 3035 12a6 1A68     		ldr	r2, [r3, #0]
 3036 12a8 384B     		ldr	r3, .L147+4
 3037 12aa 1B68     		ldr	r3, [r3, #0]
 3038 12ac D31A     		subs	r3, r2, r3
 3039 12ae 1846     		mov	r0, r3
 3040 12b0 FFF7FEFF 		bl	wrap_18000
 3041 12b4 0246     		mov	r2, r0
 3042 12b6 41F29313 		movw	r3, #4499
 3043 12ba 9A42     		cmp	r2, r3
 3044 12bc CCBF     		ite	gt
 3045 12be 0023     		movgt	r3, #0
 3046 12c0 0123     		movle	r3, #1
 3047 12c2 DBB2     		uxtb	r3, r3
 3048 12c4 11E0     		b	.L142
 3049              	.L141:
 3050              		.loc 1 728 0 discriminator 2
 3051 12c6 304B     		ldr	r3, .L147
 3052 12c8 1A68     		ldr	r2, [r3, #0]
 3053 12ca 304B     		ldr	r3, .L147+4
 3054 12cc 1B68     		ldr	r3, [r3, #0]
 3055 12ce D31A     		subs	r3, r2, r3
 3056 12d0 1846     		mov	r0, r3
 3057 12d2 FFF7FEFF 		bl	wrap_18000
 3058 12d6 0346     		mov	r3, r0
 3059 12d8 C3F10002 		rsb	r2, r3, #0
 3060 12dc 41F29313 		movw	r3, #4499
 3061 12e0 9A42     		cmp	r2, r3
 3062 12e2 CCBF     		ite	gt
 3063 12e4 0023     		movgt	r3, #0
 3064 12e6 0123     		movle	r3, #1
 3065 12e8 DBB2     		uxtb	r3, r3
 3066              	.L142:
 3067              		.loc 1 728 0 discriminator 3
 3068 12ea 002B     		cmp	r3, #0
 3069 12ec 44D0     		beq	.L143
 3070              	.LBB3:
 729:../src/gps.c  ****         float temp = (target_bearing - original_target_bearing) * RADX100;
 3071              		.loc 1 729 0 is_stmt 1
 3072 12ee 264B     		ldr	r3, .L147
 3073 12f0 1A68     		ldr	r2, [r3, #0]
 3074 12f2 264B     		ldr	r3, .L147+4
 3075 12f4 1B68     		ldr	r3, [r3, #0]
 3076 12f6 D31A     		subs	r3, r2, r3
 3077 12f8 1846     		mov	r0, r3
 3078 12fa FFF7FEFF 		bl	__aeabi_i2f
 3079 12fe 0346     		mov	r3, r0
 3080 1300 1846     		mov	r0, r3
 3081 1302 2749     		ldr	r1, .L147+24	@ float
 3082 1304 FFF7FEFF 		bl	__aeabi_fmul
 3083 1308 0346     		mov	r3, r0
 3084 130a 7B60     		str	r3, [r7, #4]	@ float
 730:../src/gps.c  ****         crosstrack_error = sinf(temp) * (wp_distance * CROSSTRACK_GAIN); // Meters we are off track
 3085              		.loc 1 730 0
 3086 130c 7868     		ldr	r0, [r7, #4]	@ float
 3087 130e FFF7FEFF 		bl	sinf
 3088 1312 0446     		mov	r4, r0
 3089 1314 1E4B     		ldr	r3, .L147+8
 3090 1316 1B68     		ldr	r3, [r3, #0]
 3091 1318 1846     		mov	r0, r3
 3092 131a FFF7FEFF 		bl	__aeabi_ui2f
 3093 131e 0346     		mov	r3, r0
 3094 1320 2046     		mov	r0, r4
 3095 1322 1946     		mov	r1, r3
 3096 1324 FFF7FEFF 		bl	__aeabi_fmul
 3097 1328 0346     		mov	r3, r0
 3098 132a 1846     		mov	r0, r3
 3099 132c FFF7FEFF 		bl	__aeabi_f2iz
 3100 1330 0346     		mov	r3, r0
 3101 1332 9AB2     		uxth	r2, r3
 3102 1334 174B     		ldr	r3, .L147+12
 3103 1336 1A80     		strh	r2, [r3, #0]	@ movhi
 731:../src/gps.c  ****         nav_bearing = target_bearing + constrain(crosstrack_error, -3000, 3000);
 3104              		.loc 1 731 0
 3105 1338 164B     		ldr	r3, .L147+12
 3106 133a 1B88     		ldrh	r3, [r3, #0]
 3107 133c 1AB2     		sxth	r2, r3
 3108 133e 164B     		ldr	r3, .L147+16
 3109 1340 9A42     		cmp	r2, r3
 3110 1342 0ADB     		blt	.L144
 3111              		.loc 1 731 0 is_stmt 0 discriminator 1
 3112 1344 134B     		ldr	r3, .L147+12
 3113 1346 1B88     		ldrh	r3, [r3, #0]
 3114 1348 1AB2     		sxth	r2, r3
 3115 134a 40F6B833 		movw	r3, #3000
 3116 134e 9A42     		cmp	r2, r3
 3117 1350 B8BF     		it	lt
 3118 1352 1346     		movlt	r3, r2
 3119 1354 9BB2     		uxth	r3, r3
 3120 1356 1BB2     		sxth	r3, r3
 3121 1358 00E0     		b	.L145
 3122              	.L144:
 3123              		.loc 1 731 0 discriminator 2
 3124 135a 0F4B     		ldr	r3, .L147+16
 3125              	.L145:
 3126              		.loc 1 731 0 discriminator 3
 3127 135c 0A4A     		ldr	r2, .L147
 3128 135e 1268     		ldr	r2, [r2, #0]
 3129 1360 9A18     		adds	r2, r3, r2
 3130 1362 0E4B     		ldr	r3, .L147+20
 3131 1364 1A60     		str	r2, [r3, #0]
 732:../src/gps.c  ****         nav_bearing = wrap_36000(nav_bearing);
 3132              		.loc 1 732 0 is_stmt 1 discriminator 3
 3133 1366 0D4B     		ldr	r3, .L147+20
 3134 1368 1B68     		ldr	r3, [r3, #0]
 3135 136a 1846     		mov	r0, r3
 3136 136c 00F092F8 		bl	wrap_36000
 3137 1370 0246     		mov	r2, r0
 3138 1372 0A4B     		ldr	r3, .L147+20
 3139 1374 1A60     		str	r2, [r3, #0]
 3140 1376 03E0     		b	.L140
 3141              	.L143:
 3142              	.LBE3:
 733:../src/gps.c  ****     } else {
 734:../src/gps.c  ****         nav_bearing = target_bearing;
 3143              		.loc 1 734 0
 3144 1378 034B     		ldr	r3, .L147
 3145 137a 1A68     		ldr	r2, [r3, #0]
 3146 137c 074B     		ldr	r3, .L147+20
 3147 137e 1A60     		str	r2, [r3, #0]
 3148              	.L140:
 735:../src/gps.c  ****     }
 736:../src/gps.c  **** }
 3149              		.loc 1 736 0
 3150 1380 07F10C07 		add	r7, r7, #12
 3151 1384 BD46     		mov	sp, r7
 3152 1386 90BD     		pop	{r4, r7, pc}
 3153              	.L148:
 3154              		.align	2
 3155              	.L147:
 3156 1388 C8000000 		.word	target_bearing
 3157 138c CC000000 		.word	original_target_bearing
 3158 1390 D4000000 		.word	wp_distance
 3159 1394 D0000000 		.word	crosstrack_error
 3160 1398 48F4FFFF 		.word	-3000
 3161 139c 28010000 		.word	nav_bearing
 3162 13a0 D3023739 		.word	959906515
 3163              		.cfi_endproc
 3164              	.LFE50:
 3166              		.align	2
 3167              		.thumb
 3168              		.thumb_func
 3170              	GPS_calc_desired_speed:
 3171              	.LFB51:
 737:../src/gps.c  **** 
 738:../src/gps.c  **** ////////////////////////////////////////////////////////////////////////////////////
 739:../src/gps.c  **** // Determine desired speed when navigating towards a waypoint, also implement slow
 740:../src/gps.c  **** // speed rampup when starting a navigation
 741:../src/gps.c  **** //
 742:../src/gps.c  **** //      |< WP Radius
 743:../src/gps.c  **** //      0  1   2   3   4   5   6   7   8m
 744:../src/gps.c  **** //      ...|...|...|...|...|...|...|...|
 745:../src/gps.c  **** //                100  |  200     300     400cm/s
 746:../src/gps.c  **** //                 |                                        +|+
 747:../src/gps.c  **** //                 |< we should slow to 1.5 m/s as we hit the target
 748:../src/gps.c  **** //
 749:../src/gps.c  **** static int16_t GPS_calc_desired_speed(int16_t max_speed, bool _slow)
 750:../src/gps.c  **** {
 3172              		.loc 1 750 0
 3173              		.cfi_startproc
 3174              		@ args = 0, pretend = 0, frame = 8
 3175              		@ frame_needed = 1, uses_anonymous_args = 0
 3176 13a4 80B5     		push	{r7, lr}
 3177              	.LCFI64:
 3178              		.cfi_def_cfa_offset 8
 3179              		.cfi_offset 7, -8
 3180              		.cfi_offset 14, -4
 3181 13a6 82B0     		sub	sp, sp, #8
 3182              	.LCFI65:
 3183              		.cfi_def_cfa_offset 16
 3184 13a8 00AF     		add	r7, sp, #0
 3185              	.LCFI66:
 3186              		.cfi_def_cfa_register 7
 3187 13aa 0246     		mov	r2, r0
 3188 13ac 0B46     		mov	r3, r1
 3189 13ae FA80     		strh	r2, [r7, #6]	@ movhi
 3190 13b0 7B71     		strb	r3, [r7, #5]
 751:../src/gps.c  ****     // max_speed is default 400 or 4m/s
 752:../src/gps.c  ****     if (_slow) {
 3191              		.loc 1 752 0
 3192 13b2 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 3193 13b4 002B     		cmp	r3, #0
 3194 13b6 0AD0     		beq	.L150
 753:../src/gps.c  ****         max_speed = min(max_speed, wp_distance / 2);
 3195              		.loc 1 753 0
 3196 13b8 204B     		ldr	r3, .L154
 3197 13ba 1B68     		ldr	r3, [r3, #0]
 3198 13bc 4FEA5302 		lsr	r2, r3, #1
 3199 13c0 B7F90630 		ldrsh	r3, [r7, #6]
 3200 13c4 9A42     		cmp	r2, r3
 3201 13c6 38BF     		it	cc
 3202 13c8 1346     		movcc	r3, r2
 3203 13ca FB80     		strh	r3, [r7, #6]	@ movhi
 3204 13cc 11E0     		b	.L151
 3205              	.L150:
 754:../src/gps.c  ****     } else {
 755:../src/gps.c  ****         max_speed = min(max_speed, wp_distance);
 3206              		.loc 1 755 0
 3207 13ce B7F90620 		ldrsh	r2, [r7, #6]
 3208 13d2 1A4B     		ldr	r3, .L154
 3209 13d4 1B68     		ldr	r3, [r3, #0]
 3210 13d6 9A42     		cmp	r2, r3
 3211 13d8 38BF     		it	cc
 3212 13da 1346     		movcc	r3, r2
 3213 13dc FB80     		strh	r3, [r7, #6]	@ movhi
 756:../src/gps.c  ****         max_speed = max(max_speed, cfg.nav_speed_min);      // go at least 100cm/s
 3214              		.loc 1 756 0
 3215 13de 184B     		ldr	r3, .L154+4
 3216 13e0 B3F89630 		ldrh	r3, [r3, #150]
 3217 13e4 1A46     		mov	r2, r3
 3218 13e6 B7F90630 		ldrsh	r3, [r7, #6]
 3219 13ea 9A42     		cmp	r2, r3
 3220 13ec A8BF     		it	ge
 3221 13ee 1346     		movge	r3, r2
 3222 13f0 FB80     		strh	r3, [r7, #6]	@ movhi
 3223              	.L151:
 757:../src/gps.c  ****     }
 758:../src/gps.c  **** 
 759:../src/gps.c  ****     // limit the ramp up of the speed
 760:../src/gps.c  ****     // waypoint_speed_gov is reset to 0 at each new WP command
 761:../src/gps.c  ****     if (max_speed > waypoint_speed_gov) {
 3224              		.loc 1 761 0
 3225 13f2 144B     		ldr	r3, .L154+8
 3226 13f4 1B88     		ldrh	r3, [r3, #0]
 3227 13f6 B7F90620 		ldrsh	r2, [r7, #6]
 3228 13fa 1BB2     		sxth	r3, r3
 3229 13fc 9A42     		cmp	r2, r3
 3230 13fe 16DD     		ble	.L152
 762:../src/gps.c  ****         waypoint_speed_gov += (int) (100.0f * dTnav);    // increase at .5/ms
 3231              		.loc 1 762 0
 3232 1400 114B     		ldr	r3, .L154+12
 3233 1402 1B68     		ldr	r3, [r3, #0]	@ float
 3234 1404 1846     		mov	r0, r3
 3235 1406 1149     		ldr	r1, .L154+16	@ float
 3236 1408 FFF7FEFF 		bl	__aeabi_fmul
 3237 140c 0346     		mov	r3, r0
 3238 140e 1846     		mov	r0, r3
 3239 1410 FFF7FEFF 		bl	__aeabi_f2iz
 3240 1414 0346     		mov	r3, r0
 3241 1416 9AB2     		uxth	r2, r3
 3242 1418 0A4B     		ldr	r3, .L154+8
 3243 141a 1B88     		ldrh	r3, [r3, #0]
 3244 141c 9BB2     		uxth	r3, r3
 3245 141e D318     		adds	r3, r2, r3
 3246 1420 9BB2     		uxth	r3, r3
 3247 1422 9AB2     		uxth	r2, r3
 3248 1424 074B     		ldr	r3, .L154+8
 3249 1426 1A80     		strh	r2, [r3, #0]	@ movhi
 763:../src/gps.c  ****         max_speed = waypoint_speed_gov;
 3250              		.loc 1 763 0
 3251 1428 064B     		ldr	r3, .L154+8
 3252 142a 1B88     		ldrh	r3, [r3, #0]	@ movhi
 3253 142c FB80     		strh	r3, [r7, #6]	@ movhi
 3254              	.L152:
 764:../src/gps.c  ****     }
 765:../src/gps.c  ****     return max_speed;
 3255              		.loc 1 765 0
 3256 142e FB88     		ldrh	r3, [r7, #6]
 3257 1430 1BB2     		sxth	r3, r3
 766:../src/gps.c  **** }
 3258              		.loc 1 766 0
 3259 1432 1846     		mov	r0, r3
 3260 1434 07F10807 		add	r7, r7, #8
 3261 1438 BD46     		mov	sp, r7
 3262 143a 80BD     		pop	{r7, pc}
 3263              	.L155:
 3264              		.align	2
 3265              	.L154:
 3266 143c D4000000 		.word	wp_distance
 3267 1440 00000000 		.word	cfg
 3268 1444 D8000000 		.word	waypoint_speed_gov
 3269 1448 A8000000 		.word	dTnav
 3270 144c 0000C842 		.word	1120403456
 3271              		.cfi_endproc
 3272              	.LFE51:
 3274              		.align	2
 3275              		.global	wrap_18000
 3276              		.thumb
 3277              		.thumb_func
 3279              	wrap_18000:
 3280              	.LFB52:
 767:../src/gps.c  **** 
 768:../src/gps.c  **** ////////////////////////////////////////////////////////////////////////////////////
 769:../src/gps.c  **** // Utilities
 770:../src/gps.c  **** //
 771:../src/gps.c  **** int32_t wrap_18000(int32_t error)
 772:../src/gps.c  **** {
 3281              		.loc 1 772 0
 3282              		.cfi_startproc
 3283              		@ args = 0, pretend = 0, frame = 8
 3284              		@ frame_needed = 1, uses_anonymous_args = 0
 3285              		@ link register save eliminated.
 3286 1450 80B4     		push	{r7}
 3287              	.LCFI67:
 3288              		.cfi_def_cfa_offset 4
 3289              		.cfi_offset 7, -4
 3290 1452 83B0     		sub	sp, sp, #12
 3291              	.LCFI68:
 3292              		.cfi_def_cfa_offset 16
 3293 1454 00AF     		add	r7, sp, #0
 3294              	.LCFI69:
 3295              		.cfi_def_cfa_register 7
 3296 1456 7860     		str	r0, [r7, #4]
 773:../src/gps.c  ****     if (error > 18000)
 3297              		.loc 1 773 0
 3298 1458 7A68     		ldr	r2, [r7, #4]
 3299 145a 44F25063 		movw	r3, #18000
 3300 145e 9A42     		cmp	r2, r3
 3301 1460 05DD     		ble	.L157
 774:../src/gps.c  ****         error -= 36000;
 3302              		.loc 1 774 0
 3303 1462 7B68     		ldr	r3, [r7, #4]
 3304 1464 A3F50C43 		sub	r3, r3, #35840
 3305 1468 A3F1A003 		sub	r3, r3, #160
 3306 146c 7B60     		str	r3, [r7, #4]
 3307              	.L157:
 775:../src/gps.c  ****     if (error < -18000)
 3308              		.loc 1 775 0
 3309 146e 7A68     		ldr	r2, [r7, #4]
 3310 1470 074B     		ldr	r3, .L160
 3311 1472 9A42     		cmp	r2, r3
 3312 1474 05DA     		bge	.L158
 776:../src/gps.c  ****         error += 36000;
 3313              		.loc 1 776 0
 3314 1476 7B68     		ldr	r3, [r7, #4]
 3315 1478 03F50C43 		add	r3, r3, #35840
 3316 147c 03F1A003 		add	r3, r3, #160
 3317 1480 7B60     		str	r3, [r7, #4]
 3318              	.L158:
 777:../src/gps.c  ****     return error;
 3319              		.loc 1 777 0
 3320 1482 7B68     		ldr	r3, [r7, #4]
 778:../src/gps.c  **** }
 3321              		.loc 1 778 0
 3322 1484 1846     		mov	r0, r3
 3323 1486 07F10C07 		add	r7, r7, #12
 3324 148a BD46     		mov	sp, r7
 3325 148c 80BC     		pop	{r7}
 3326 148e 7047     		bx	lr
 3327              	.L161:
 3328              		.align	2
 3329              	.L160:
 3330 1490 B0B9FFFF 		.word	-18000
 3331              		.cfi_endproc
 3332              	.LFE52:
 3334              		.align	2
 3335              		.thumb
 3336              		.thumb_func
 3338              	wrap_36000:
 3339              	.LFB53:
 779:../src/gps.c  **** 
 780:../src/gps.c  **** static int32_t wrap_36000(int32_t angle)
 781:../src/gps.c  **** {
 3340              		.loc 1 781 0
 3341              		.cfi_startproc
 3342              		@ args = 0, pretend = 0, frame = 8
 3343              		@ frame_needed = 1, uses_anonymous_args = 0
 3344              		@ link register save eliminated.
 3345 1494 80B4     		push	{r7}
 3346              	.LCFI70:
 3347              		.cfi_def_cfa_offset 4
 3348              		.cfi_offset 7, -4
 3349 1496 83B0     		sub	sp, sp, #12
 3350              	.LCFI71:
 3351              		.cfi_def_cfa_offset 16
 3352 1498 00AF     		add	r7, sp, #0
 3353              	.LCFI72:
 3354              		.cfi_def_cfa_register 7
 3355 149a 7860     		str	r0, [r7, #4]
 782:../src/gps.c  ****     if (angle > 36000)
 3356              		.loc 1 782 0
 3357 149c 7A68     		ldr	r2, [r7, #4]
 3358 149e 48F6A043 		movw	r3, #36000
 3359 14a2 9A42     		cmp	r2, r3
 3360 14a4 05DD     		ble	.L163
 783:../src/gps.c  ****         angle -= 36000;
 3361              		.loc 1 783 0
 3362 14a6 7B68     		ldr	r3, [r7, #4]
 3363 14a8 A3F50C43 		sub	r3, r3, #35840
 3364 14ac A3F1A003 		sub	r3, r3, #160
 3365 14b0 7B60     		str	r3, [r7, #4]
 3366              	.L163:
 784:../src/gps.c  ****     if (angle < 0)
 3367              		.loc 1 784 0
 3368 14b2 7B68     		ldr	r3, [r7, #4]
 3369 14b4 002B     		cmp	r3, #0
 3370 14b6 05DA     		bge	.L164
 785:../src/gps.c  ****         angle += 36000;
 3371              		.loc 1 785 0
 3372 14b8 7B68     		ldr	r3, [r7, #4]
 3373 14ba 03F50C43 		add	r3, r3, #35840
 3374 14be 03F1A003 		add	r3, r3, #160
 3375 14c2 7B60     		str	r3, [r7, #4]
 3376              	.L164:
 786:../src/gps.c  ****     return angle;
 3377              		.loc 1 786 0
 3378 14c4 7B68     		ldr	r3, [r7, #4]
 787:../src/gps.c  **** }
 3379              		.loc 1 787 0
 3380 14c6 1846     		mov	r0, r3
 3381 14c8 07F10C07 		add	r7, r7, #12
 3382 14cc BD46     		mov	sp, r7
 3383 14ce 80BC     		pop	{r7}
 3384 14d0 7047     		bx	lr
 3385              		.cfi_endproc
 3386              	.LFE53:
 3388 14d2 00BF     		.align	2
 3389              		.global	GPS_coord_to_degrees
 3390              		.thumb
 3391              		.thumb_func
 3393              	GPS_coord_to_degrees:
 3394              	.LFB54:
 788:../src/gps.c  **** 
 789:../src/gps.c  **** // This code is used for parsing NMEA data
 790:../src/gps.c  **** 
 791:../src/gps.c  **** /* Alex optimization
 792:../src/gps.c  ****   The latitude or longitude is coded this way in NMEA frames
 793:../src/gps.c  ****   dm.f   coded as degrees + minutes + minute decimal
 794:../src/gps.c  ****   Where:
 795:../src/gps.c  ****     - d can be 1 or more char long. generally: 2 char long for latitude, 3 char long for longitude
 796:../src/gps.c  ****     - m is always 2 char long
 797:../src/gps.c  ****     - f can be 1 or more char long
 798:../src/gps.c  ****   This function converts this format in a unique unsigned long where 1 degree = 10 000 000
 799:../src/gps.c  **** 
 800:../src/gps.c  ****   EOS increased the precision here, even if we think that the gps is not precise enough, with 10e5 
 801:../src/gps.c  ****   with 10e7 it's around 1 cm now. Increasing it further is irrelevant, since even 1cm resolution is
 802:../src/gps.c  ****   resolution also increased precision of nav calculations
 803:../src/gps.c  **** static uint32_t GPS_coord_to_degrees(char *s)
 804:../src/gps.c  **** {
 805:../src/gps.c  ****     char *p = s, *d = s;
 806:../src/gps.c  ****     uint8_t min, deg = 0;
 807:../src/gps.c  ****     uint16_t frac = 0, mult = 10000;
 808:../src/gps.c  **** 
 809:../src/gps.c  ****     while (*p) {                // parse the string until its end
 810:../src/gps.c  ****         if (d != s) {
 811:../src/gps.c  ****             frac += (*p - '0') * mult;  // calculate only fractional part on up to 5 digits  (d != 
 812:../src/gps.c  ****             mult /= 10;
 813:../src/gps.c  ****         }
 814:../src/gps.c  ****         if (*p == '.')
 815:../src/gps.c  ****             d = p;              // locate '.' char in the string
 816:../src/gps.c  ****         p++;
 817:../src/gps.c  ****     }
 818:../src/gps.c  ****     if (p == s)
 819:../src/gps.c  ****         return 0;
 820:../src/gps.c  ****     while (s < d - 2) {
 821:../src/gps.c  ****         deg *= 10;              // convert degrees : all chars before minutes ; for the first itera
 822:../src/gps.c  ****         deg += *(s++) - '0';
 823:../src/gps.c  ****     }
 824:../src/gps.c  ****     min = *(d - 1) - '0' + (*(d - 2) - '0') * 10;       // convert minutes : 2 previous char before
 825:../src/gps.c  ****     return deg * 10000000UL + (min * 100000UL + frac) * 10UL / 6;
 826:../src/gps.c  **** }
 827:../src/gps.c  **** */
 828:../src/gps.c  **** 
 829:../src/gps.c  **** #define DIGIT_TO_VAL(_x)    (_x - '0')
 830:../src/gps.c  **** uint32_t GPS_coord_to_degrees(char* s)
 831:../src/gps.c  **** {
 3395              		.loc 1 831 0
 3396              		.cfi_startproc
 3397              		@ args = 0, pretend = 0, frame = 32
 3398              		@ frame_needed = 1, uses_anonymous_args = 0
 3399              		@ link register save eliminated.
 3400 14d4 80B4     		push	{r7}
 3401              	.LCFI73:
 3402              		.cfi_def_cfa_offset 4
 3403              		.cfi_offset 7, -4
 3404 14d6 89B0     		sub	sp, sp, #36
 3405              	.LCFI74:
 3406              		.cfi_def_cfa_offset 40
 3407 14d8 00AF     		add	r7, sp, #0
 3408              	.LCFI75:
 3409              		.cfi_def_cfa_register 7
 3410 14da 7860     		str	r0, [r7, #4]
 832:../src/gps.c  ****     char *p, *q;
 833:../src/gps.c  ****     uint8_t deg = 0, min = 0;
 3411              		.loc 1 833 0
 3412 14dc 4FF00003 		mov	r3, #0
 3413 14e0 FB75     		strb	r3, [r7, #23]
 3414 14e2 4FF00003 		mov	r3, #0
 3415 14e6 BB75     		strb	r3, [r7, #22]
 834:../src/gps.c  ****     unsigned int frac_min = 0;
 3416              		.loc 1 834 0
 3417 14e8 4FF00003 		mov	r3, #0
 3418 14ec 3B61     		str	r3, [r7, #16]
 835:../src/gps.c  ****     int i;
 836:../src/gps.c  **** 
 837:../src/gps.c  ****     // scan for decimal point or end of field
 838:../src/gps.c  ****     for (p = s; isdigit(*p); p++)
 3419              		.loc 1 838 0
 3420 14ee 7B68     		ldr	r3, [r7, #4]
 3421 14f0 FB61     		str	r3, [r7, #28]
 3422 14f2 03E0     		b	.L167
 3423              	.L168:
 3424              		.loc 1 838 0 is_stmt 0 discriminator 2
 3425 14f4 FB69     		ldr	r3, [r7, #28]
 3426 14f6 03F10103 		add	r3, r3, #1
 3427 14fa FB61     		str	r3, [r7, #28]
 3428              	.L167:
 3429              		.loc 1 838 0 discriminator 1
 3430 14fc 494B     		ldr	r3, .L180
 3431 14fe 1A68     		ldr	r2, [r3, #0]
 3432 1500 FB69     		ldr	r3, [r7, #28]
 3433 1502 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3434 1504 03F10103 		add	r3, r3, #1
 3435 1508 D318     		adds	r3, r2, r3
 3436 150a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3437 150c 03F00403 		and	r3, r3, #4
 3438 1510 002B     		cmp	r3, #0
 3439 1512 EFD1     		bne	.L168
 839:../src/gps.c  ****         ;
 840:../src/gps.c  ****     q = s;
 3440              		.loc 1 840 0 is_stmt 1
 3441 1514 7B68     		ldr	r3, [r7, #4]
 3442 1516 BB61     		str	r3, [r7, #24]
 841:../src/gps.c  **** 
 842:../src/gps.c  ****     // convert degrees
 843:../src/gps.c  ****     while ((p - q) > 2) {
 3443              		.loc 1 843 0
 3444 1518 16E0     		b	.L169
 3445              	.L171:
 844:../src/gps.c  ****         if (deg)
 3446              		.loc 1 844 0
 3447 151a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 3448 151c 002B     		cmp	r3, #0
 3449 151e 07D0     		beq	.L170
 845:../src/gps.c  ****             deg *= 10;
 3450              		.loc 1 845 0
 3451 1520 FB7D     		ldrb	r3, [r7, #23]
 3452 1522 1A46     		mov	r2, r3
 3453 1524 4FEA8202 		lsl	r2, r2, #2
 3454 1528 D318     		adds	r3, r2, r3
 3455 152a 4FEA4303 		lsl	r3, r3, #1
 3456 152e FB75     		strb	r3, [r7, #23]
 3457              	.L170:
 846:../src/gps.c  ****         deg += DIGIT_TO_VAL(*q++);
 3458              		.loc 1 846 0
 3459 1530 BB69     		ldr	r3, [r7, #24]
 3460 1532 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 3461 1534 FB7D     		ldrb	r3, [r7, #23]
 3462 1536 D318     		adds	r3, r2, r3
 3463 1538 DBB2     		uxtb	r3, r3
 3464 153a A3F13003 		sub	r3, r3, #48
 3465 153e FB75     		strb	r3, [r7, #23]
 3466 1540 BB69     		ldr	r3, [r7, #24]
 3467 1542 03F10103 		add	r3, r3, #1
 3468 1546 BB61     		str	r3, [r7, #24]
 3469              	.L169:
 843:../src/gps.c  ****     while ((p - q) > 2) {
 3470              		.loc 1 843 0 discriminator 1
 3471 1548 FA69     		ldr	r2, [r7, #28]
 3472 154a BB69     		ldr	r3, [r7, #24]
 3473 154c D31A     		subs	r3, r2, r3
 3474 154e 022B     		cmp	r3, #2
 3475 1550 E3DC     		bgt	.L171
 847:../src/gps.c  ****     }
 848:../src/gps.c  ****     // convert minutes
 849:../src/gps.c  ****     while (p > q) {
 3476              		.loc 1 849 0
 3477 1552 16E0     		b	.L172
 3478              	.L174:
 850:../src/gps.c  ****         if (min)
 3479              		.loc 1 850 0
 3480 1554 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 3481 1556 002B     		cmp	r3, #0
 3482 1558 07D0     		beq	.L173
 851:../src/gps.c  ****             min *= 10;
 3483              		.loc 1 851 0
 3484 155a BB7D     		ldrb	r3, [r7, #22]
 3485 155c 1A46     		mov	r2, r3
 3486 155e 4FEA8202 		lsl	r2, r2, #2
 3487 1562 D318     		adds	r3, r2, r3
 3488 1564 4FEA4303 		lsl	r3, r3, #1
 3489 1568 BB75     		strb	r3, [r7, #22]
 3490              	.L173:
 852:../src/gps.c  ****         min += DIGIT_TO_VAL(*q++);
 3491              		.loc 1 852 0
 3492 156a BB69     		ldr	r3, [r7, #24]
 3493 156c 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 3494 156e BB7D     		ldrb	r3, [r7, #22]
 3495 1570 D318     		adds	r3, r2, r3
 3496 1572 DBB2     		uxtb	r3, r3
 3497 1574 A3F13003 		sub	r3, r3, #48
 3498 1578 BB75     		strb	r3, [r7, #22]
 3499 157a BB69     		ldr	r3, [r7, #24]
 3500 157c 03F10103 		add	r3, r3, #1
 3501 1580 BB61     		str	r3, [r7, #24]
 3502              	.L172:
 849:../src/gps.c  ****     while (p > q) {
 3503              		.loc 1 849 0 discriminator 1
 3504 1582 FA69     		ldr	r2, [r7, #28]
 3505 1584 BB69     		ldr	r3, [r7, #24]
 3506 1586 9A42     		cmp	r2, r3
 3507 1588 E4D8     		bhi	.L174
 853:../src/gps.c  ****     }
 854:../src/gps.c  ****     // convert fractional minutes
 855:../src/gps.c  ****     // expect up to four digits, result is in
 856:../src/gps.c  ****     // ten-thousandths of a minute
 857:../src/gps.c  ****     if (*p == '.') {
 3508              		.loc 1 857 0
 3509 158a FB69     		ldr	r3, [r7, #28]
 3510 158c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3511 158e 2E2B     		cmp	r3, #46
 3512 1590 2ED1     		bne	.L175
 858:../src/gps.c  ****         q = p + 1;
 3513              		.loc 1 858 0
 3514 1592 FB69     		ldr	r3, [r7, #28]
 3515 1594 03F10103 		add	r3, r3, #1
 3516 1598 BB61     		str	r3, [r7, #24]
 859:../src/gps.c  ****         for (i = 0; i < 4; i++) {
 3517              		.loc 1 859 0
 3518 159a 4FF00003 		mov	r3, #0
 3519 159e FB60     		str	r3, [r7, #12]
 3520 15a0 23E0     		b	.L176
 3521              	.L178:
 860:../src/gps.c  ****             frac_min *= 10;
 3522              		.loc 1 860 0
 3523 15a2 3A69     		ldr	r2, [r7, #16]
 3524 15a4 1346     		mov	r3, r2
 3525 15a6 4FEA8303 		lsl	r3, r3, #2
 3526 15aa 9B18     		adds	r3, r3, r2
 3527 15ac 4FEA4303 		lsl	r3, r3, #1
 3528 15b0 3B61     		str	r3, [r7, #16]
 861:../src/gps.c  ****             if (isdigit(*q))
 3529              		.loc 1 861 0
 3530 15b2 1C4B     		ldr	r3, .L180
 3531 15b4 1A68     		ldr	r2, [r3, #0]
 3532 15b6 BB69     		ldr	r3, [r7, #24]
 3533 15b8 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3534 15ba 03F10103 		add	r3, r3, #1
 3535 15be D318     		adds	r3, r2, r3
 3536 15c0 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3537 15c2 03F00403 		and	r3, r3, #4
 3538 15c6 002B     		cmp	r3, #0
 3539 15c8 0BD0     		beq	.L177
 862:../src/gps.c  ****                 frac_min += *q++ - '0';
 3540              		.loc 1 862 0
 3541 15ca BB69     		ldr	r3, [r7, #24]
 3542 15cc 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3543 15ce 1A46     		mov	r2, r3
 3544 15d0 3B69     		ldr	r3, [r7, #16]
 3545 15d2 D318     		adds	r3, r2, r3
 3546 15d4 A3F13003 		sub	r3, r3, #48
 3547 15d8 3B61     		str	r3, [r7, #16]
 3548 15da BB69     		ldr	r3, [r7, #24]
 3549 15dc 03F10103 		add	r3, r3, #1
 3550 15e0 BB61     		str	r3, [r7, #24]
 3551              	.L177:
 859:../src/gps.c  ****         for (i = 0; i < 4; i++) {
 3552              		.loc 1 859 0
 3553 15e2 FB68     		ldr	r3, [r7, #12]
 3554 15e4 03F10103 		add	r3, r3, #1
 3555 15e8 FB60     		str	r3, [r7, #12]
 3556              	.L176:
 859:../src/gps.c  ****         for (i = 0; i < 4; i++) {
 3557              		.loc 1 859 0 is_stmt 0 discriminator 1
 3558 15ea FB68     		ldr	r3, [r7, #12]
 3559 15ec 032B     		cmp	r3, #3
 3560 15ee D8DD     		ble	.L178
 3561              	.L175:
 863:../src/gps.c  ****         }
 864:../src/gps.c  ****     }
 865:../src/gps.c  ****     return deg * 10000000UL + (min * 1000000UL + frac_min * 100UL) / 6;
 3562              		.loc 1 865 0 is_stmt 1
 3563 15f0 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 3564 15f2 0D4A     		ldr	r2, .L180+4
 3565 15f4 02FB03F2 		mul	r2, r2, r3
 3566 15f8 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 3567 15fa 0C49     		ldr	r1, .L180+8
 3568 15fc 01FB03F1 		mul	r1, r1, r3
 3569 1600 3B69     		ldr	r3, [r7, #16]
 3570 1602 4FF06400 		mov	r0, #100
 3571 1606 00FB03F3 		mul	r3, r0, r3
 3572 160a C918     		adds	r1, r1, r3
 3573 160c 084B     		ldr	r3, .L180+12
 3574 160e A3FB0103 		umull	r0, r3, r3, r1
 3575 1612 4FEA9303 		lsr	r3, r3, #2
 3576 1616 D318     		adds	r3, r2, r3
 866:../src/gps.c  **** }
 3577              		.loc 1 866 0
 3578 1618 1846     		mov	r0, r3
 3579 161a 07F12407 		add	r7, r7, #36
 3580 161e BD46     		mov	sp, r7
 3581 1620 80BC     		pop	{r7}
 3582 1622 7047     		bx	lr
 3583              	.L181:
 3584              		.align	2
 3585              	.L180:
 3586 1624 00000000 		.word	__ctype_ptr__
 3587 1628 80969800 		.word	10000000
 3588 162c 40420F00 		.word	1000000
 3589 1630 ABAAAAAA 		.word	-1431655765
 3590              		.cfi_endproc
 3591              	.LFE54:
 3593              		.align	2
 3594              		.thumb
 3595              		.thumb_func
 3597              	grab_fields:
 3598              	.LFB55:
 867:../src/gps.c  **** 
 868:../src/gps.c  **** // helper functions
 869:../src/gps.c  **** static uint32_t grab_fields(char *src, uint8_t mult)
 870:../src/gps.c  **** {                               // convert string to uint32
 3599              		.loc 1 870 0
 3600              		.cfi_startproc
 3601              		@ args = 0, pretend = 0, frame = 16
 3602              		@ frame_needed = 1, uses_anonymous_args = 0
 3603              		@ link register save eliminated.
 3604 1634 80B4     		push	{r7}
 3605              	.LCFI76:
 3606              		.cfi_def_cfa_offset 4
 3607              		.cfi_offset 7, -4
 3608 1636 85B0     		sub	sp, sp, #20
 3609              	.LCFI77:
 3610              		.cfi_def_cfa_offset 24
 3611 1638 00AF     		add	r7, sp, #0
 3612              	.LCFI78:
 3613              		.cfi_def_cfa_register 7
 3614 163a 7860     		str	r0, [r7, #4]
 3615 163c 0B46     		mov	r3, r1
 3616 163e FB70     		strb	r3, [r7, #3]
 871:../src/gps.c  ****     uint32_t i;
 872:../src/gps.c  ****     uint32_t tmp = 0;
 3617              		.loc 1 872 0
 3618 1640 4FF00003 		mov	r3, #0
 3619 1644 BB60     		str	r3, [r7, #8]
 873:../src/gps.c  ****     for (i = 0; src[i] != 0; i++) {
 3620              		.loc 1 873 0
 3621 1646 4FF00003 		mov	r3, #0
 3622 164a FB60     		str	r3, [r7, #12]
 3623 164c 36E0     		b	.L183
 3624              	.L188:
 874:../src/gps.c  ****         if (src[i] == '.') {
 3625              		.loc 1 874 0
 3626 164e 7A68     		ldr	r2, [r7, #4]
 3627 1650 FB68     		ldr	r3, [r7, #12]
 3628 1652 D318     		adds	r3, r2, r3
 3629 1654 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3630 1656 2E2B     		cmp	r3, #46
 3631 1658 0ED1     		bne	.L184
 875:../src/gps.c  ****             i++;
 3632              		.loc 1 875 0
 3633 165a FB68     		ldr	r3, [r7, #12]
 3634 165c 03F10103 		add	r3, r3, #1
 3635 1660 FB60     		str	r3, [r7, #12]
 876:../src/gps.c  ****             if (mult == 0)
 3636              		.loc 1 876 0
 3637 1662 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3638 1664 002B     		cmp	r3, #0
 3639 1666 30D0     		beq	.L190
 3640              	.L185:
 877:../src/gps.c  ****                 break;
 878:../src/gps.c  ****             else
 879:../src/gps.c  ****                 src[i + mult] = 0;
 3641              		.loc 1 879 0
 3642 1668 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 3643 166a FB68     		ldr	r3, [r7, #12]
 3644 166c D318     		adds	r3, r2, r3
 3645 166e 7A68     		ldr	r2, [r7, #4]
 3646 1670 D318     		adds	r3, r2, r3
 3647 1672 4FF00002 		mov	r2, #0
 3648 1676 1A70     		strb	r2, [r3, #0]
 3649              	.L184:
 880:../src/gps.c  ****         }
 881:../src/gps.c  ****         tmp *= 10;
 3650              		.loc 1 881 0
 3651 1678 BA68     		ldr	r2, [r7, #8]
 3652 167a 1346     		mov	r3, r2
 3653 167c 4FEA8303 		lsl	r3, r3, #2
 3654 1680 9B18     		adds	r3, r3, r2
 3655 1682 4FEA4303 		lsl	r3, r3, #1
 3656 1686 BB60     		str	r3, [r7, #8]
 882:../src/gps.c  ****         if (src[i] >= '0' && src[i] <= '9')
 3657              		.loc 1 882 0
 3658 1688 7A68     		ldr	r2, [r7, #4]
 3659 168a FB68     		ldr	r3, [r7, #12]
 3660 168c D318     		adds	r3, r2, r3
 3661 168e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3662 1690 2F2B     		cmp	r3, #47
 3663 1692 0FD9     		bls	.L187
 3664              		.loc 1 882 0 is_stmt 0 discriminator 1
 3665 1694 7A68     		ldr	r2, [r7, #4]
 3666 1696 FB68     		ldr	r3, [r7, #12]
 3667 1698 D318     		adds	r3, r2, r3
 3668 169a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3669 169c 392B     		cmp	r3, #57
 3670 169e 09D8     		bhi	.L187
 883:../src/gps.c  ****             tmp += src[i] - '0';
 3671              		.loc 1 883 0 is_stmt 1
 3672 16a0 7A68     		ldr	r2, [r7, #4]
 3673 16a2 FB68     		ldr	r3, [r7, #12]
 3674 16a4 D318     		adds	r3, r2, r3
 3675 16a6 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3676 16a8 1A46     		mov	r2, r3
 3677 16aa BB68     		ldr	r3, [r7, #8]
 3678 16ac D318     		adds	r3, r2, r3
 3679 16ae A3F13003 		sub	r3, r3, #48
 3680 16b2 BB60     		str	r3, [r7, #8]
 3681              	.L187:
 873:../src/gps.c  ****     for (i = 0; src[i] != 0; i++) {
 3682              		.loc 1 873 0
 3683 16b4 FB68     		ldr	r3, [r7, #12]
 3684 16b6 03F10103 		add	r3, r3, #1
 3685 16ba FB60     		str	r3, [r7, #12]
 3686              	.L183:
 873:../src/gps.c  ****     for (i = 0; src[i] != 0; i++) {
 3687              		.loc 1 873 0 is_stmt 0 discriminator 1
 3688 16bc 7A68     		ldr	r2, [r7, #4]
 3689 16be FB68     		ldr	r3, [r7, #12]
 3690 16c0 D318     		adds	r3, r2, r3
 3691 16c2 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3692 16c4 002B     		cmp	r3, #0
 3693 16c6 C2D1     		bne	.L188
 3694 16c8 00E0     		b	.L186
 3695              	.L190:
 877:../src/gps.c  ****                 break;
 3696              		.loc 1 877 0 is_stmt 1
 3697 16ca 00BF     		nop
 3698              	.L186:
 884:../src/gps.c  ****     }
 885:../src/gps.c  ****     return tmp;
 3699              		.loc 1 885 0
 3700 16cc BB68     		ldr	r3, [r7, #8]
 886:../src/gps.c  **** }
 3701              		.loc 1 886 0
 3702 16ce 1846     		mov	r0, r3
 3703 16d0 07F11407 		add	r7, r7, #20
 3704 16d4 BD46     		mov	sp, r7
 3705 16d6 80BC     		pop	{r7}
 3706 16d8 7047     		bx	lr
 3707              		.cfi_endproc
 3708              	.LFE55:
 3710 16da 00BF     		.align	2
 3711              		.thumb
 3712              		.thumb_func
 3714              	hex_c:
 3715              	.LFB56:
 887:../src/gps.c  **** 
 888:../src/gps.c  **** static uint8_t hex_c(uint8_t n)
 889:../src/gps.c  **** {                               // convert '0'..'9','A'..'F' to 0..15
 3716              		.loc 1 889 0
 3717              		.cfi_startproc
 3718              		@ args = 0, pretend = 0, frame = 8
 3719              		@ frame_needed = 1, uses_anonymous_args = 0
 3720              		@ link register save eliminated.
 3721 16dc 80B4     		push	{r7}
 3722              	.LCFI79:
 3723              		.cfi_def_cfa_offset 4
 3724              		.cfi_offset 7, -4
 3725 16de 83B0     		sub	sp, sp, #12
 3726              	.LCFI80:
 3727              		.cfi_def_cfa_offset 16
 3728 16e0 00AF     		add	r7, sp, #0
 3729              	.LCFI81:
 3730              		.cfi_def_cfa_register 7
 3731 16e2 0346     		mov	r3, r0
 3732 16e4 FB71     		strb	r3, [r7, #7]
 890:../src/gps.c  ****     n -= '0';
 3733              		.loc 1 890 0
 3734 16e6 FB79     		ldrb	r3, [r7, #7]
 3735 16e8 A3F13003 		sub	r3, r3, #48
 3736 16ec FB71     		strb	r3, [r7, #7]
 891:../src/gps.c  ****     if (n > 9)
 3737              		.loc 1 891 0
 3738 16ee FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3739 16f0 092B     		cmp	r3, #9
 3740 16f2 03D9     		bls	.L192
 892:../src/gps.c  ****         n -= 7;
 3741              		.loc 1 892 0
 3742 16f4 FB79     		ldrb	r3, [r7, #7]
 3743 16f6 A3F10703 		sub	r3, r3, #7
 3744 16fa FB71     		strb	r3, [r7, #7]
 3745              	.L192:
 893:../src/gps.c  ****     n &= 0x0F;
 3746              		.loc 1 893 0
 3747 16fc FB79     		ldrb	r3, [r7, #7]
 3748 16fe 03F00F03 		and	r3, r3, #15
 3749 1702 FB71     		strb	r3, [r7, #7]
 894:../src/gps.c  ****     return n;
 3750              		.loc 1 894 0
 3751 1704 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 895:../src/gps.c  **** }
 3752              		.loc 1 895 0
 3753 1706 1846     		mov	r0, r3
 3754 1708 07F10C07 		add	r7, r7, #12
 3755 170c BD46     		mov	sp, r7
 3756 170e 80BC     		pop	{r7}
 3757 1710 7047     		bx	lr
 3758              		.cfi_endproc
 3759              	.LFE56:
 3761 1712 00BF     		.align	2
 3762              		.thumb
 3763              		.thumb_func
 3765              	GPS_newFrame:
 3766              	.LFB57:
 896:../src/gps.c  **** 
 897:../src/gps.c  **** static bool GPS_newFrame(char c)
 898:../src/gps.c  **** {
 3767              		.loc 1 898 0
 3768              		.cfi_startproc
 3769              		@ args = 0, pretend = 0, frame = 8
 3770              		@ frame_needed = 1, uses_anonymous_args = 0
 3771 1714 80B5     		push	{r7, lr}
 3772              	.LCFI82:
 3773              		.cfi_def_cfa_offset 8
 3774              		.cfi_offset 7, -8
 3775              		.cfi_offset 14, -4
 3776 1716 82B0     		sub	sp, sp, #8
 3777              	.LCFI83:
 3778              		.cfi_def_cfa_offset 16
 3779 1718 00AF     		add	r7, sp, #0
 3780              	.LCFI84:
 3781              		.cfi_def_cfa_register 7
 3782 171a 0346     		mov	r3, r0
 3783 171c FB71     		strb	r3, [r7, #7]
 899:../src/gps.c  ****     switch (mcfg.gps_type) {
 3784              		.loc 1 899 0
 3785 171e 144B     		ldr	r3, .L201
 3786 1720 93F80F31 		ldrb	r3, [r3, #271]	@ zero_extendqisi2
 3787 1724 032B     		cmp	r3, #3
 3788 1726 1BD8     		bhi	.L195
 3789 1728 01A2     		adr	r2, .L199
 3790 172a 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 3791 172e 00BF     		.align	2
 3792              	.L199:
 3793 1730 41170000 		.word	.L196+1
 3794 1734 4D170000 		.word	.L197+1
 3795 1738 41170000 		.word	.L196+1
 3796 173c 59170000 		.word	.L198+1
 3797              	.L196:
 900:../src/gps.c  ****         case GPS_NMEA: // NMEA
 901:../src/gps.c  ****         case GPS_MTK: // MTK outputs NMEA too
 902:../src/gps.c  ****             return GPS_NMEA_newFrame(c);
 3798              		.loc 1 902 0
 3799 1740 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3800 1742 1846     		mov	r0, r3
 3801 1744 00F07CF8 		bl	GPS_NMEA_newFrame
 3802 1748 0346     		mov	r3, r0
 3803 174a 0BE0     		b	.L200
 3804              	.L197:
 903:../src/gps.c  ****         case GPS_UBLOX: // UBX
 904:../src/gps.c  ****             return GPS_UBLOX_newFrame(c);
 3805              		.loc 1 904 0
 3806 174c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3807 174e 1846     		mov	r0, r3
 3808 1750 00F03AFA 		bl	GPS_UBLOX_newFrame
 3809 1754 0346     		mov	r3, r0
 3810 1756 05E0     		b	.L200
 3811              	.L198:
 905:../src/gps.c  ****         case GPS_I2C:
 906:../src/gps.c  ****         	return GPS_I2C_newFrame();
 3812              		.loc 1 906 0
 3813 1758 00F00CF8 		bl	GPS_I2C_newFrame
 3814 175c 0346     		mov	r3, r0
 3815 175e 01E0     		b	.L200
 3816              	.L195:
 907:../src/gps.c  ****     }
 908:../src/gps.c  **** 
 909:../src/gps.c  ****     return false;
 3817              		.loc 1 909 0
 3818 1760 4FF00003 		mov	r3, #0
 3819              	.L200:
 910:../src/gps.c  **** }
 3820              		.loc 1 910 0
 3821 1764 1846     		mov	r0, r3
 3822 1766 07F10807 		add	r7, r7, #8
 3823 176a BD46     		mov	sp, r7
 3824 176c 80BD     		pop	{r7, pc}
 3825              	.L202:
 3826 176e 00BF     		.align	2
 3827              	.L201:
 3828 1770 00000000 		.word	mcfg
 3829              		.cfi_endproc
 3830              	.LFE57:
 3832              		.align	2
 3833              		.thumb
 3834              		.thumb_func
 3836              	GPS_I2C_newFrame:
 3837              	.LFB58:
 911:../src/gps.c  **** 
 912:../src/gps.c  **** /* This is a light implementation of a GPS frame decoding
 913:../src/gps.c  ****    This should work with most of modern GPS devices configured to output NMEA frames.
 914:../src/gps.c  ****    It assumes there are some NMEA GGA frames to decode on the serial bus
 915:../src/gps.c  ****    Here we use only the following data :
 916:../src/gps.c  ****      - latitude
 917:../src/gps.c  ****      - longitude
 918:../src/gps.c  ****      - GPS fix is/is not ok
 919:../src/gps.c  ****      - GPS num sat (4 is enough to be +/- reliable)
 920:../src/gps.c  ****      // added by Mis
 921:../src/gps.c  ****      - GPS altitude (for OSD displaying)
 922:../src/gps.c  ****      - GPS speed (for OSD displaying)
 923:../src/gps.c  **** */
 924:../src/gps.c  **** #define FRAME_GGA  1
 925:../src/gps.c  **** #define FRAME_RMC  2
 926:../src/gps.c  **** 
 927:../src/gps.c  **** static bool GPS_I2C_newFrame()
 928:../src/gps.c  **** {
 3838              		.loc 1 928 0
 3839              		.cfi_startproc
 3840              		@ args = 0, pretend = 0, frame = 16
 3841              		@ frame_needed = 1, uses_anonymous_args = 0
 3842 1774 80B5     		push	{r7, lr}
 3843              	.LCFI85:
 3844              		.cfi_def_cfa_offset 8
 3845              		.cfi_offset 7, -8
 3846              		.cfi_offset 14, -4
 3847 1776 84B0     		sub	sp, sp, #16
 3848              	.LCFI86:
 3849              		.cfi_def_cfa_offset 24
 3850 1778 00AF     		add	r7, sp, #0
 3851              	.LCFI87:
 3852              		.cfi_def_cfa_register 7
 929:../src/gps.c  **** 	uint8_t stat=0xFF;
 3853              		.loc 1 929 0
 3854 177a 4FF0FF03 		mov	r3, #255
 3855 177e FB73     		strb	r3, [r7, #15]
 930:../src/gps.c  **** 
 931:../src/gps.c  ****     union gpsloc {
 932:../src/gps.c  **** 		uint8_t buffer[8];
 933:../src/gps.c  **** 		struct {
 934:../src/gps.c  **** 			int32_t lat;
 935:../src/gps.c  **** 			int32_t lon;
 936:../src/gps.c  **** 		} loc;
 937:../src/gps.c  ****     } gps;
 938:../src/gps.c  **** 
 939:../src/gps.c  **** 	i2cRead(NAVIGATRON_I2C_ADDR, I2C_GPS_LOCATION, 8, (uint8_t*)&gps.buffer);
 3856              		.loc 1 939 0
 3857 1780 07F10403 		add	r3, r7, #4
 3858 1784 4FF02000 		mov	r0, #32
 3859 1788 4FF00701 		mov	r1, #7
 3860 178c 4FF00802 		mov	r2, #8
 3861 1790 FFF7FEFF 		bl	i2cRead
 940:../src/gps.c  ****     GPS_coord[LAT] = gps.loc.lat;
 3862              		.loc 1 940 0
 3863 1794 7A68     		ldr	r2, [r7, #4]
 3864 1796 244B     		ldr	r3, .L205
 3865 1798 1A60     		str	r2, [r3, #0]
 941:../src/gps.c  ****     GPS_coord[LON] = gps.loc.lon;
 3866              		.loc 1 941 0
 3867 179a BA68     		ldr	r2, [r7, #8]
 3868 179c 224B     		ldr	r3, .L205
 3869 179e 5A60     		str	r2, [r3, #4]
 942:../src/gps.c  ****     //
 943:../src/gps.c  ****     i2cRead(NAVIGATRON_I2C_ADDR, I2C_GPS_STATUS_00, 1, &stat);
 3870              		.loc 1 943 0
 3871 17a0 07F10F03 		add	r3, r7, #15
 3872 17a4 4FF02000 		mov	r0, #32
 3873 17a8 4FF00001 		mov	r1, #0
 3874 17ac 4FF00102 		mov	r2, #1
 3875 17b0 FFF7FEFF 		bl	i2cRead
 944:../src/gps.c  ****     f.GPS_FIX = (stat & I2C_GPS_STATUS_3DFIX)>0?1:0;
 3876              		.loc 1 944 0
 3877 17b4 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3878 17b6 03F00403 		and	r3, r3, #4
 3879 17ba 002B     		cmp	r3, #0
 3880 17bc D4BF     		ite	le
 3881 17be 0023     		movle	r3, #0
 3882 17c0 0123     		movgt	r3, #1
 3883 17c2 DBB2     		uxtb	r3, r3
 3884 17c4 1A46     		mov	r2, r3
 3885 17c6 194B     		ldr	r3, .L205+4
 3886 17c8 DA72     		strb	r2, [r3, #11]
 945:../src/gps.c  ****     GPS_numSat = stat>>4;
 3887              		.loc 1 945 0
 3888 17ca FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3889 17cc 4FEA1313 		lsr	r3, r3, #4
 3890 17d0 DAB2     		uxtb	r2, r3
 3891 17d2 174B     		ldr	r3, .L205+8
 3892 17d4 1A70     		strb	r2, [r3, #0]
 946:../src/gps.c  ****     //
 947:../src/gps.c  ****     i2cRead(NAVIGATRON_I2C_ADDR, I2C_GPS_ALTITUDE, 2, (uint8_t*)&GPS_altitude);
 3893              		.loc 1 947 0
 3894 17d6 4FF02000 		mov	r0, #32
 3895 17da 4FF02101 		mov	r1, #33
 3896 17de 4FF00202 		mov	r2, #2
 3897 17e2 144B     		ldr	r3, .L205+12
 3898 17e4 FFF7FEFF 		bl	i2cRead
 948:../src/gps.c  ****     //GPS_altitude = grab_fields(string, 0);  // altitude in meters added by Mis
 949:../src/gps.c  ****     //
 950:../src/gps.c  ****     i2cRead(NAVIGATRON_I2C_ADDR, I2C_GPS_GROUND_SPEED, 2, (uint8_t*)&GPS_speed);
 3899              		.loc 1 950 0
 3900 17e8 4FF02000 		mov	r0, #32
 3901 17ec 4FF01F01 		mov	r1, #31
 3902 17f0 4FF00202 		mov	r2, #2
 3903 17f4 104B     		ldr	r3, .L205+16
 3904 17f6 FFF7FEFF 		bl	i2cRead
 951:../src/gps.c  ****     //GPS_speed = (grab_fields(string, 1) * 5144L) / 1000L;   // speed in cm/s added by Mis
 952:../src/gps.c  ****     //
 953:../src/gps.c  ****     i2cRead(NAVIGATRON_I2C_ADDR, I2C_GPS_GROUND_COURSE, 2, (uint8_t*)&GPS_ground_course);
 3905              		.loc 1 953 0
 3906 17fa 4FF02000 		mov	r0, #32
 3907 17fe 4FF02301 		mov	r1, #35
 3908 1802 4FF00202 		mov	r2, #2
 3909 1806 0D4B     		ldr	r3, .L205+20
 3910 1808 FFF7FEFF 		bl	i2cRead
 954:../src/gps.c  ****     //GPS_ground_course = grab_fields(string, 1);             // ground course deg * 10
 955:../src/gps.c  ****     return (stat & I2C_GPS_STATUS_NEW_DATA);
 3911              		.loc 1 955 0
 3912 180c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3913 180e 03F00103 		and	r3, r3, #1
 3914 1812 002B     		cmp	r3, #0
 3915 1814 0CBF     		ite	eq
 3916 1816 0023     		moveq	r3, #0
 3917 1818 0123     		movne	r3, #1
 3918 181a DBB2     		uxtb	r3, r3
 956:../src/gps.c  **** }
 3919              		.loc 1 956 0
 3920 181c 1846     		mov	r0, r3
 3921 181e 07F11007 		add	r7, r7, #16
 3922 1822 BD46     		mov	sp, r7
 3923 1824 80BD     		pop	{r7, pc}
 3924              	.L206:
 3925 1826 00BF     		.align	2
 3926              	.L205:
 3927 1828 00000000 		.word	GPS_coord
 3928 182c 00000000 		.word	f
 3929 1830 00000000 		.word	GPS_numSat
 3930 1834 00000000 		.word	GPS_altitude
 3931 1838 00000000 		.word	GPS_speed
 3932 183c 00000000 		.word	GPS_ground_course
 3933              		.cfi_endproc
 3934              	.LFE58:
 3936              		.align	2
 3937              		.thumb
 3938              		.thumb_func
 3940              	GPS_NMEA_newFrame:
 3941              	.LFB59:
 957:../src/gps.c  **** 
 958:../src/gps.c  **** static bool GPS_NMEA_newFrame(char c)
 959:../src/gps.c  **** {
 3942              		.loc 1 959 0
 3943              		.cfi_startproc
 3944              		@ args = 0, pretend = 0, frame = 16
 3945              		@ frame_needed = 1, uses_anonymous_args = 0
 3946 1840 80B5     		push	{r7, lr}
 3947              	.LCFI88:
 3948              		.cfi_def_cfa_offset 8
 3949              		.cfi_offset 7, -8
 3950              		.cfi_offset 14, -4
 3951 1842 84B0     		sub	sp, sp, #16
 3952              	.LCFI89:
 3953              		.cfi_def_cfa_offset 24
 3954 1844 00AF     		add	r7, sp, #0
 3955              	.LCFI90:
 3956              		.cfi_def_cfa_register 7
 3957 1846 0346     		mov	r3, r0
 3958 1848 FB71     		strb	r3, [r7, #7]
 960:../src/gps.c  ****     uint8_t frameOK = 0;
 3959              		.loc 1 960 0
 3960 184a 4FF00003 		mov	r3, #0
 3961 184e FB73     		strb	r3, [r7, #15]
 961:../src/gps.c  ****     static uint8_t param = 0, offset = 0, parity = 0;
 962:../src/gps.c  ****     static char string[15];
 963:../src/gps.c  ****     static uint8_t checksum_param, frame = 0;
 964:../src/gps.c  **** 
 965:../src/gps.c  ****     if (c == '$') {
 3962              		.loc 1 965 0
 3963 1850 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3964 1852 242B     		cmp	r3, #36
 3965 1854 0CD1     		bne	.L208
 966:../src/gps.c  ****         param = 0;
 3966              		.loc 1 966 0
 3967 1856 814B     		ldr	r3, .L235
 3968 1858 4FF00002 		mov	r2, #0
 3969 185c 1A70     		strb	r2, [r3, #0]
 967:../src/gps.c  ****         offset = 0;
 3970              		.loc 1 967 0
 3971 185e 804B     		ldr	r3, .L235+4
 3972 1860 4FF00002 		mov	r2, #0
 3973 1864 1A70     		strb	r2, [r3, #0]
 968:../src/gps.c  ****         parity = 0;
 3974              		.loc 1 968 0
 3975 1866 7F4B     		ldr	r3, .L235+8
 3976 1868 4FF00002 		mov	r2, #0
 3977 186c 1A70     		strb	r2, [r3, #0]
 3978 186e 55E1     		b	.L209
 3979              	.L208:
 969:../src/gps.c  ****     } else if (c == ',' || c == '*') {
 3980              		.loc 1 969 0
 3981 1870 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3982 1872 2C2B     		cmp	r3, #44
 3983 1874 03D0     		beq	.L210
 3984              		.loc 1 969 0 is_stmt 0 discriminator 1
 3985 1876 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3986 1878 2A2B     		cmp	r3, #42
 3987 187a 40F00981 		bne	.L211
 3988              	.L210:
 970:../src/gps.c  ****         string[offset] = 0;
 3989              		.loc 1 970 0 is_stmt 1
 3990 187e 784B     		ldr	r3, .L235+4
 3991 1880 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3992 1882 794A     		ldr	r2, .L235+12
 3993 1884 4FF00001 		mov	r1, #0
 3994 1888 D154     		strb	r1, [r2, r3]
 971:../src/gps.c  ****         if (param == 0) {       //frame identification
 3995              		.loc 1 971 0
 3996 188a 744B     		ldr	r3, .L235
 3997 188c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3998 188e 002B     		cmp	r3, #0
 3999 1890 39D1     		bne	.L212
 972:../src/gps.c  ****             frame = 0;
 4000              		.loc 1 972 0
 4001 1892 764B     		ldr	r3, .L235+16
 4002 1894 4FF00002 		mov	r2, #0
 4003 1898 1A70     		strb	r2, [r3, #0]
 973:../src/gps.c  ****             if (string[0] == 'G' && string[1] == 'P' && string[2] == 'G' && string[3] == 'G' && str
 4004              		.loc 1 973 0
 4005 189a 734B     		ldr	r3, .L235+12
 4006 189c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4007 189e 472B     		cmp	r3, #71
 4008 18a0 13D1     		bne	.L213
 4009              		.loc 1 973 0 is_stmt 0 discriminator 1
 4010 18a2 714B     		ldr	r3, .L235+12
 4011 18a4 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 4012 18a6 502B     		cmp	r3, #80
 4013 18a8 0FD1     		bne	.L213
 4014 18aa 6F4B     		ldr	r3, .L235+12
 4015 18ac 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 4016 18ae 472B     		cmp	r3, #71
 4017 18b0 0BD1     		bne	.L213
 4018 18b2 6D4B     		ldr	r3, .L235+12
 4019 18b4 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 4020 18b6 472B     		cmp	r3, #71
 4021 18b8 07D1     		bne	.L213
 4022 18ba 6B4B     		ldr	r3, .L235+12
 4023 18bc 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 4024 18be 412B     		cmp	r3, #65
 4025 18c0 03D1     		bne	.L213
 974:../src/gps.c  ****                 frame = FRAME_GGA;
 4026              		.loc 1 974 0 is_stmt 1
 4027 18c2 6A4B     		ldr	r3, .L235+16
 4028 18c4 4FF00102 		mov	r2, #1
 4029 18c8 1A70     		strb	r2, [r3, #0]
 4030              	.L213:
 975:../src/gps.c  ****             if (string[0] == 'G' && string[1] == 'P' && string[2] == 'R' && string[3] == 'M' && str
 4031              		.loc 1 975 0
 4032 18ca 674B     		ldr	r3, .L235+12
 4033 18cc 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4034 18ce 472B     		cmp	r3, #71
 4035 18d0 40F0A880 		bne	.L214
 4036              		.loc 1 975 0 is_stmt 0 discriminator 1
 4037 18d4 644B     		ldr	r3, .L235+12
 4038 18d6 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 4039 18d8 502B     		cmp	r3, #80
 4040 18da 40F0A380 		bne	.L214
 4041 18de 624B     		ldr	r3, .L235+12
 4042 18e0 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 4043 18e2 522B     		cmp	r3, #82
 4044 18e4 40F09E80 		bne	.L214
 4045 18e8 5F4B     		ldr	r3, .L235+12
 4046 18ea DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 4047 18ec 4D2B     		cmp	r3, #77
 4048 18ee 40F09980 		bne	.L214
 4049 18f2 5D4B     		ldr	r3, .L235+12
 4050 18f4 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 4051 18f6 432B     		cmp	r3, #67
 4052 18f8 40F09480 		bne	.L214
 976:../src/gps.c  ****                 frame = FRAME_RMC;
 4053              		.loc 1 976 0 is_stmt 1
 4054 18fc 5B4B     		ldr	r3, .L235+16
 4055 18fe 4FF00202 		mov	r2, #2
 4056 1902 1A70     		strb	r2, [r3, #0]
 4057 1904 8EE0     		b	.L214
 4058              	.L212:
 977:../src/gps.c  ****         } else if (frame == FRAME_GGA) {
 4059              		.loc 1 977 0
 4060 1906 594B     		ldr	r3, .L235+16
 4061 1908 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4062 190a 012B     		cmp	r3, #1
 4063 190c 60D1     		bne	.L215
 978:../src/gps.c  ****             if (param == 2) {
 4064              		.loc 1 978 0
 4065 190e 534B     		ldr	r3, .L235
 4066 1910 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4067 1912 022B     		cmp	r3, #2
 4068 1914 07D1     		bne	.L216
 979:../src/gps.c  ****                 GPS_coord[LAT] = GPS_coord_to_degrees(string);
 4069              		.loc 1 979 0
 4070 1916 5448     		ldr	r0, .L235+12
 4071 1918 FFF7FEFF 		bl	GPS_coord_to_degrees
 4072 191c 0346     		mov	r3, r0
 4073 191e 1A46     		mov	r2, r3
 4074 1920 534B     		ldr	r3, .L235+20
 4075 1922 1A60     		str	r2, [r3, #0]
 980:../src/gps.c  ****             } else if (param == 3 && string[0] == 'S')
 981:../src/gps.c  ****                 GPS_coord[LAT] = -GPS_coord[LAT];
 982:../src/gps.c  ****             else if (param == 4) {
 983:../src/gps.c  ****                 GPS_coord[LON] = GPS_coord_to_degrees(string);
 984:../src/gps.c  ****             } else if (param == 5 && string[0] == 'W')
 985:../src/gps.c  ****                 GPS_coord[LON] = -GPS_coord[LON];
 986:../src/gps.c  ****             else if (param == 6) {
 987:../src/gps.c  ****                 f.GPS_FIX = string[0] > '0';
 988:../src/gps.c  ****             } else if (param == 7) {
 989:../src/gps.c  ****                 GPS_numSat = grab_fields(string, 0);
 990:../src/gps.c  ****             } else if (param == 9) {
 991:../src/gps.c  ****                 GPS_altitude = grab_fields(string, 0);  // altitude in meters added by Mis
 4076              		.loc 1 991 0
 4077 1924 7DE0     		b	.L234
 4078              	.L216:
 980:../src/gps.c  ****             } else if (param == 3 && string[0] == 'S')
 4079              		.loc 1 980 0
 4080 1926 4D4B     		ldr	r3, .L235
 4081 1928 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4082 192a 032B     		cmp	r3, #3
 4083 192c 0AD1     		bne	.L218
 980:../src/gps.c  ****             } else if (param == 3 && string[0] == 'S')
 4084              		.loc 1 980 0 is_stmt 0 discriminator 1
 4085 192e 4E4B     		ldr	r3, .L235+12
 4086 1930 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4087 1932 532B     		cmp	r3, #83
 4088 1934 06D1     		bne	.L218
 981:../src/gps.c  ****                 GPS_coord[LAT] = -GPS_coord[LAT];
 4089              		.loc 1 981 0 is_stmt 1
 4090 1936 4E4B     		ldr	r3, .L235+20
 4091 1938 1B68     		ldr	r3, [r3, #0]
 4092 193a C3F10002 		rsb	r2, r3, #0
 4093 193e 4C4B     		ldr	r3, .L235+20
 4094 1940 1A60     		str	r2, [r3, #0]
 4095 1942 6FE0     		b	.L214
 4096              	.L218:
 982:../src/gps.c  ****             else if (param == 4) {
 4097              		.loc 1 982 0
 4098 1944 454B     		ldr	r3, .L235
 4099 1946 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4100 1948 042B     		cmp	r3, #4
 4101 194a 07D1     		bne	.L219
 983:../src/gps.c  ****                 GPS_coord[LON] = GPS_coord_to_degrees(string);
 4102              		.loc 1 983 0
 4103 194c 4648     		ldr	r0, .L235+12
 4104 194e FFF7FEFF 		bl	GPS_coord_to_degrees
 4105 1952 0346     		mov	r3, r0
 4106 1954 1A46     		mov	r2, r3
 4107 1956 464B     		ldr	r3, .L235+20
 4108 1958 5A60     		str	r2, [r3, #4]
 4109              		.loc 1 991 0
 4110 195a 62E0     		b	.L234
 4111              	.L219:
 984:../src/gps.c  ****             } else if (param == 5 && string[0] == 'W')
 4112              		.loc 1 984 0
 4113 195c 3F4B     		ldr	r3, .L235
 4114 195e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4115 1960 052B     		cmp	r3, #5
 4116 1962 0AD1     		bne	.L220
 984:../src/gps.c  ****             } else if (param == 5 && string[0] == 'W')
 4117              		.loc 1 984 0 is_stmt 0 discriminator 1
 4118 1964 404B     		ldr	r3, .L235+12
 4119 1966 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4120 1968 572B     		cmp	r3, #87
 4121 196a 06D1     		bne	.L220
 985:../src/gps.c  ****                 GPS_coord[LON] = -GPS_coord[LON];
 4122              		.loc 1 985 0 is_stmt 1
 4123 196c 404B     		ldr	r3, .L235+20
 4124 196e 5B68     		ldr	r3, [r3, #4]
 4125 1970 C3F10002 		rsb	r2, r3, #0
 4126 1974 3E4B     		ldr	r3, .L235+20
 4127 1976 5A60     		str	r2, [r3, #4]
 4128 1978 54E0     		b	.L214
 4129              	.L220:
 986:../src/gps.c  ****             else if (param == 6) {
 4130              		.loc 1 986 0
 4131 197a 384B     		ldr	r3, .L235
 4132 197c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4133 197e 062B     		cmp	r3, #6
 4134 1980 0AD1     		bne	.L221
 987:../src/gps.c  ****                 f.GPS_FIX = string[0] > '0';
 4135              		.loc 1 987 0
 4136 1982 394B     		ldr	r3, .L235+12
 4137 1984 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4138 1986 302B     		cmp	r3, #48
 4139 1988 94BF     		ite	ls
 4140 198a 0023     		movls	r3, #0
 4141 198c 0123     		movhi	r3, #1
 4142 198e DBB2     		uxtb	r3, r3
 4143 1990 1A46     		mov	r2, r3
 4144 1992 384B     		ldr	r3, .L235+24
 4145 1994 DA72     		strb	r2, [r3, #11]
 4146              		.loc 1 991 0
 4147 1996 44E0     		b	.L234
 4148              	.L221:
 988:../src/gps.c  ****             } else if (param == 7) {
 4149              		.loc 1 988 0
 4150 1998 304B     		ldr	r3, .L235
 4151 199a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4152 199c 072B     		cmp	r3, #7
 4153 199e 09D1     		bne	.L222
 989:../src/gps.c  ****                 GPS_numSat = grab_fields(string, 0);
 4154              		.loc 1 989 0
 4155 19a0 3148     		ldr	r0, .L235+12
 4156 19a2 4FF00001 		mov	r1, #0
 4157 19a6 FFF745FE 		bl	grab_fields
 4158 19aa 0346     		mov	r3, r0
 4159 19ac DAB2     		uxtb	r2, r3
 4160 19ae 324B     		ldr	r3, .L235+28
 4161 19b0 1A70     		strb	r2, [r3, #0]
 4162              		.loc 1 991 0
 4163 19b2 36E0     		b	.L234
 4164              	.L222:
 990:../src/gps.c  ****             } else if (param == 9) {
 4165              		.loc 1 990 0
 4166 19b4 294B     		ldr	r3, .L235
 4167 19b6 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4168 19b8 092B     		cmp	r3, #9
 4169 19ba 32D1     		bne	.L234
 4170              		.loc 1 991 0
 4171 19bc 2A48     		ldr	r0, .L235+12
 4172 19be 4FF00001 		mov	r1, #0
 4173 19c2 FFF737FE 		bl	grab_fields
 4174 19c6 0346     		mov	r3, r0
 4175 19c8 9AB2     		uxth	r2, r3
 4176 19ca 2C4B     		ldr	r3, .L235+32
 4177 19cc 1A80     		strh	r2, [r3, #0]	@ movhi
 4178 19ce 28E0     		b	.L234
 4179              	.L215:
 992:../src/gps.c  ****             }
 993:../src/gps.c  ****         } else if (frame == FRAME_RMC) {
 4180              		.loc 1 993 0
 4181 19d0 264B     		ldr	r3, .L235+16
 4182 19d2 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4183 19d4 022B     		cmp	r3, #2
 4184 19d6 25D1     		bne	.L214
 994:../src/gps.c  ****             if (param == 7) {
 4185              		.loc 1 994 0
 4186 19d8 204B     		ldr	r3, .L235
 4187 19da 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4188 19dc 072B     		cmp	r3, #7
 4189 19de 12D1     		bne	.L223
 995:../src/gps.c  ****                 GPS_speed = (grab_fields(string, 1) * 5144L) / 1000L;   // speed in cm/s added by M
 4190              		.loc 1 995 0
 4191 19e0 2148     		ldr	r0, .L235+12
 4192 19e2 4FF00101 		mov	r1, #1
 4193 19e6 FFF725FE 		bl	grab_fields
 4194 19ea 0346     		mov	r3, r0
 4195 19ec 41F21842 		movw	r2, #5144
 4196 19f0 02FB03F2 		mul	r2, r2, r3
 4197 19f4 224B     		ldr	r3, .L235+36
 4198 19f6 A3FB0213 		umull	r1, r3, r3, r2
 4199 19fa 4FEA9313 		lsr	r3, r3, #6
 4200 19fe 9AB2     		uxth	r2, r3
 4201 1a00 204B     		ldr	r3, .L235+40
 4202 1a02 1A80     		strh	r2, [r3, #0]	@ movhi
 4203 1a04 0EE0     		b	.L214
 4204              	.L223:
 996:../src/gps.c  ****             } else if (param == 8) {
 4205              		.loc 1 996 0
 4206 1a06 154B     		ldr	r3, .L235
 4207 1a08 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4208 1a0a 082B     		cmp	r3, #8
 4209 1a0c 0AD1     		bne	.L214
 997:../src/gps.c  ****                 GPS_ground_course = grab_fields(string, 1);             // ground course deg * 10
 4210              		.loc 1 997 0
 4211 1a0e 1648     		ldr	r0, .L235+12
 4212 1a10 4FF00101 		mov	r1, #1
 4213 1a14 FFF70EFE 		bl	grab_fields
 4214 1a18 0346     		mov	r3, r0
 4215 1a1a 9AB2     		uxth	r2, r3
 4216 1a1c 1A4B     		ldr	r3, .L235+44
 4217 1a1e 1A80     		strh	r2, [r3, #0]	@ movhi
 4218 1a20 00E0     		b	.L214
 4219              	.L234:
 991:../src/gps.c  ****                 GPS_altitude = grab_fields(string, 0);  // altitude in meters added by Mis
 4220              		.loc 1 991 0
 4221 1a22 00BF     		nop
 4222              	.L214:
 998:../src/gps.c  ****             }
 999:../src/gps.c  ****         }
1000:../src/gps.c  ****         param++;
 4223              		.loc 1 1000 0
 4224 1a24 0D4B     		ldr	r3, .L235
 4225 1a26 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4226 1a28 03F10103 		add	r3, r3, #1
 4227 1a2c DAB2     		uxtb	r2, r3
 4228 1a2e 0B4B     		ldr	r3, .L235
 4229 1a30 1A70     		strb	r2, [r3, #0]
1001:../src/gps.c  ****         offset = 0;
 4230              		.loc 1 1001 0
 4231 1a32 0B4B     		ldr	r3, .L235+4
 4232 1a34 4FF00002 		mov	r2, #0
 4233 1a38 1A70     		strb	r2, [r3, #0]
1002:../src/gps.c  ****         if (c == '*')
 4234              		.loc 1 1002 0
 4235 1a3a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4236 1a3c 2A2B     		cmp	r3, #42
 4237 1a3e 04D1     		bne	.L224
1003:../src/gps.c  ****             checksum_param = 1;
 4238              		.loc 1 1003 0
 4239 1a40 124B     		ldr	r3, .L235+48
 4240 1a42 4FF00102 		mov	r2, #1
 4241 1a46 1A70     		strb	r2, [r3, #0]
1002:../src/gps.c  ****         if (c == '*')
 4242              		.loc 1 1002 0
 4243 1a48 68E0     		b	.L209
 4244              	.L224:
1004:../src/gps.c  ****         else
1005:../src/gps.c  ****             parity ^= c;
 4245              		.loc 1 1005 0
 4246 1a4a 064B     		ldr	r3, .L235+8
 4247 1a4c 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 4248 1a4e FB79     		ldrb	r3, [r7, #7]
 4249 1a50 5340     		eors	r3, r3, r2
 4250 1a52 DAB2     		uxtb	r2, r3
 4251 1a54 034B     		ldr	r3, .L235+8
 4252 1a56 1A70     		strb	r2, [r3, #0]
1002:../src/gps.c  ****         if (c == '*')
 4253              		.loc 1 1002 0
 4254 1a58 60E0     		b	.L209
 4255              	.L236:
 4256 1a5a 00BF     		.align	2
 4257              	.L235:
 4258 1a5c 7C010000 		.word	param.9326
 4259 1a60 7D010000 		.word	offset.9327
 4260 1a64 7E010000 		.word	parity.9328
 4261 1a68 80010000 		.word	string.9329
 4262 1a6c 8F010000 		.word	frame.9331
 4263 1a70 00000000 		.word	GPS_coord
 4264 1a74 00000000 		.word	f
 4265 1a78 00000000 		.word	GPS_numSat
 4266 1a7c 00000000 		.word	GPS_altitude
 4267 1a80 D34D6210 		.word	274877907
 4268 1a84 00000000 		.word	GPS_speed
 4269 1a88 00000000 		.word	GPS_ground_course
 4270 1a8c 90010000 		.word	checksum_param.9330
 4271              	.L211:
1006:../src/gps.c  ****     } else if (c == '\r' || c == '\n') {
 4272              		.loc 1 1006 0
 4273 1a90 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4274 1a92 0D2B     		cmp	r3, #13
 4275 1a94 02D0     		beq	.L226
 4276              		.loc 1 1006 0 is_stmt 0 discriminator 1
 4277 1a96 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4278 1a98 0A2B     		cmp	r3, #10
 4279 1a9a 25D1     		bne	.L227
 4280              	.L226:
1007:../src/gps.c  ****         if (checksum_param) {   // parity checksum
 4281              		.loc 1 1007 0 is_stmt 1
 4282 1a9c 2D4B     		ldr	r3, .L237
 4283 1a9e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4284 1aa0 002B     		cmp	r3, #0
 4285 1aa2 1CD0     		beq	.L228
 4286              	.LBB4:
1008:../src/gps.c  ****             uint8_t checksum = hex_c(string[0]);
 4287              		.loc 1 1008 0
 4288 1aa4 2C4B     		ldr	r3, .L237+4
 4289 1aa6 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4290 1aa8 1846     		mov	r0, r3
 4291 1aaa FFF717FE 		bl	hex_c
 4292 1aae 0346     		mov	r3, r0
 4293 1ab0 BB73     		strb	r3, [r7, #14]
1009:../src/gps.c  ****             checksum <<= 4;
 4294              		.loc 1 1009 0
 4295 1ab2 BB7B     		ldrb	r3, [r7, #14]
 4296 1ab4 4FEA0313 		lsl	r3, r3, #4
 4297 1ab8 BB73     		strb	r3, [r7, #14]
1010:../src/gps.c  ****             checksum += hex_c(string[1]);
 4298              		.loc 1 1010 0
 4299 1aba 274B     		ldr	r3, .L237+4
 4300 1abc 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 4301 1abe 1846     		mov	r0, r3
 4302 1ac0 FFF70CFE 		bl	hex_c
 4303 1ac4 0346     		mov	r3, r0
 4304 1ac6 1A46     		mov	r2, r3
 4305 1ac8 BB7B     		ldrb	r3, [r7, #14]
 4306 1aca D318     		adds	r3, r2, r3
 4307 1acc BB73     		strb	r3, [r7, #14]
1011:../src/gps.c  ****             if (checksum == parity)
 4308              		.loc 1 1011 0
 4309 1ace 234B     		ldr	r3, .L237+8
 4310 1ad0 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4311 1ad2 BA7B     		ldrb	r2, [r7, #14]	@ zero_extendqisi2
 4312 1ad4 9A42     		cmp	r2, r3
 4313 1ad6 02D1     		bne	.L228
1012:../src/gps.c  ****                 frameOK = 1;
 4314              		.loc 1 1012 0
 4315 1ad8 4FF00103 		mov	r3, #1
 4316 1adc FB73     		strb	r3, [r7, #15]
 4317              	.L228:
 4318              	.LBE4:
1013:../src/gps.c  ****         }
1014:../src/gps.c  ****         checksum_param = 0;
 4319              		.loc 1 1014 0
 4320 1ade 1D4B     		ldr	r3, .L237
 4321 1ae0 4FF00002 		mov	r2, #0
 4322 1ae4 1A70     		strb	r2, [r3, #0]
 4323 1ae6 19E0     		b	.L209
 4324              	.L227:
1015:../src/gps.c  ****     } else {
1016:../src/gps.c  ****         if (offset < 15)
 4325              		.loc 1 1016 0
 4326 1ae8 1D4B     		ldr	r3, .L237+12
 4327 1aea 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4328 1aec 0E2B     		cmp	r3, #14
 4329 1aee 0AD8     		bhi	.L229
1017:../src/gps.c  ****             string[offset++] = c;
 4330              		.loc 1 1017 0
 4331 1af0 1B4B     		ldr	r3, .L237+12
 4332 1af2 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4333 1af4 1A46     		mov	r2, r3
 4334 1af6 1849     		ldr	r1, .L237+4
 4335 1af8 F879     		ldrb	r0, [r7, #7]
 4336 1afa 8854     		strb	r0, [r1, r2]
 4337 1afc 03F10103 		add	r3, r3, #1
 4338 1b00 DAB2     		uxtb	r2, r3
 4339 1b02 174B     		ldr	r3, .L237+12
 4340 1b04 1A70     		strb	r2, [r3, #0]
 4341              	.L229:
1018:../src/gps.c  ****         if (!checksum_param)
 4342              		.loc 1 1018 0
 4343 1b06 134B     		ldr	r3, .L237
 4344 1b08 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4345 1b0a 002B     		cmp	r3, #0
 4346 1b0c 06D1     		bne	.L209
1019:../src/gps.c  ****             parity ^= c;
 4347              		.loc 1 1019 0
 4348 1b0e 134B     		ldr	r3, .L237+8
 4349 1b10 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 4350 1b12 FB79     		ldrb	r3, [r7, #7]
 4351 1b14 5340     		eors	r3, r3, r2
 4352 1b16 DAB2     		uxtb	r2, r3
 4353 1b18 104B     		ldr	r3, .L237+8
 4354 1b1a 1A70     		strb	r2, [r3, #0]
 4355              	.L209:
1020:../src/gps.c  ****     }
1021:../src/gps.c  ****     if (frame)
 4356              		.loc 1 1021 0
 4357 1b1c 114B     		ldr	r3, .L237+16
 4358 1b1e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4359 1b20 002B     		cmp	r3, #0
 4360 1b22 03D0     		beq	.L230
1022:../src/gps.c  ****         GPS_Present = 1;
 4361              		.loc 1 1022 0
 4362 1b24 104B     		ldr	r3, .L237+20
 4363 1b26 4FF00102 		mov	r2, #1
 4364 1b2a 1A70     		strb	r2, [r3, #0]
 4365              	.L230:
1023:../src/gps.c  ****     return frameOK && (frame == FRAME_GGA);
 4366              		.loc 1 1023 0
 4367 1b2c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4368 1b2e 002B     		cmp	r3, #0
 4369 1b30 06D0     		beq	.L231
 4370              		.loc 1 1023 0 is_stmt 0 discriminator 1
 4371 1b32 0C4B     		ldr	r3, .L237+16
 4372 1b34 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4373 1b36 012B     		cmp	r3, #1
 4374 1b38 02D1     		bne	.L231
 4375              		.loc 1 1023 0 discriminator 3
 4376 1b3a 4FF00103 		mov	r3, #1
 4377 1b3e 01E0     		b	.L232
 4378              	.L231:
 4379              		.loc 1 1023 0 discriminator 2
 4380 1b40 4FF00003 		mov	r3, #0
 4381              	.L232:
 4382              		.loc 1 1023 0 discriminator 4
 4383 1b44 03F00103 		and	r3, r3, #1
 4384 1b48 DBB2     		uxtb	r3, r3
1024:../src/gps.c  **** }
 4385              		.loc 1 1024 0 is_stmt 1 discriminator 4
 4386 1b4a 1846     		mov	r0, r3
 4387 1b4c 07F11007 		add	r7, r7, #16
 4388 1b50 BD46     		mov	sp, r7
 4389 1b52 80BD     		pop	{r7, pc}
 4390              	.L238:
 4391              		.align	2
 4392              	.L237:
 4393 1b54 90010000 		.word	checksum_param.9330
 4394 1b58 80010000 		.word	string.9329
 4395 1b5c 7E010000 		.word	parity.9328
 4396 1b60 7D010000 		.word	offset.9327
 4397 1b64 8F010000 		.word	frame.9331
 4398 1b68 00000000 		.word	GPS_Present
 4399              		.cfi_endproc
 4400              	.LFE59:
 4402              		.comm	ubs_protocol_bytes,1,1
 4403              		.comm	ubs_nav_fix_type,1,1
 4404              		.comm	ubx_nav_status_bits,1,1
 4405              		.bss
 4406              	_ck_a:
 4407 012e 00       		.space	1
 4408              	_ck_b:
 4409 012f 00       		.space	1
 4410              	_step:
 4411 0130 00       		.space	1
 4412              	_msg_id:
 4413 0131 00       		.space	1
 4414              		.align	1
 4415              	_payload_length:
 4416 0132 0000     		.space	2
 4417              		.align	1
 4418              	_payload_counter:
 4419 0134 0000     		.space	2
 4420              	next_fix:
 4421 0136 00       		.space	1
 4422              	_class:
 4423 0137 00       		.space	1
 4424              	_new_position:
 4425 0138 00       		.space	1
 4426              	_new_speed:
 4427 0139 00       		.space	1
 4428              	_disable_counter:
 4429 013a 00       		.space	1
 4430 013b 00       		.align	2
 4431              	_buffer:
 4432 013c 00000000 		.space	64
 4432      00000000 
 4432      00000000 
 4432      00000000 
 4432      00000000 
 4433              		.text
 4434              		.align	2
 4435              		.global	_update_checksum
 4436              		.thumb
 4437              		.thumb_func
 4439              	_update_checksum:
 4440              	.LFB60:
1025:../src/gps.c  **** 
1026:../src/gps.c  **** 
1027:../src/gps.c  **** // UBX support
1028:../src/gps.c  **** typedef struct {
1029:../src/gps.c  ****     uint8_t preamble1;
1030:../src/gps.c  ****     uint8_t preamble2;
1031:../src/gps.c  ****     uint8_t msg_class;
1032:../src/gps.c  ****     uint8_t msg_id;
1033:../src/gps.c  ****     uint16_t length;
1034:../src/gps.c  **** } ubx_header;
1035:../src/gps.c  **** 
1036:../src/gps.c  **** typedef struct {
1037:../src/gps.c  ****     uint32_t time;              // GPS msToW
1038:../src/gps.c  ****     int32_t longitude;
1039:../src/gps.c  ****     int32_t latitude;
1040:../src/gps.c  ****     int32_t altitude_ellipsoid;
1041:../src/gps.c  ****     int32_t altitude_msl;
1042:../src/gps.c  ****     uint32_t horizontal_accuracy;
1043:../src/gps.c  ****     uint32_t vertical_accuracy;
1044:../src/gps.c  **** } ubx_nav_posllh;
1045:../src/gps.c  **** 
1046:../src/gps.c  **** typedef struct {
1047:../src/gps.c  ****     uint32_t time;              // GPS msToW
1048:../src/gps.c  ****     uint8_t fix_type;
1049:../src/gps.c  ****     uint8_t fix_status;
1050:../src/gps.c  ****     uint8_t differential_status;
1051:../src/gps.c  ****     uint8_t res;
1052:../src/gps.c  ****     uint32_t time_to_first_fix;
1053:../src/gps.c  ****     uint32_t uptime;            // milliseconds
1054:../src/gps.c  **** } ubx_nav_status;
1055:../src/gps.c  **** 
1056:../src/gps.c  **** typedef struct {
1057:../src/gps.c  ****     uint32_t time;
1058:../src/gps.c  ****     int32_t time_nsec;
1059:../src/gps.c  ****     int16_t week;
1060:../src/gps.c  ****     uint8_t fix_type;
1061:../src/gps.c  ****     uint8_t fix_status;
1062:../src/gps.c  ****     int32_t ecef_x;
1063:../src/gps.c  ****     int32_t ecef_y;
1064:../src/gps.c  ****     int32_t ecef_z;
1065:../src/gps.c  ****     uint32_t position_accuracy_3d;
1066:../src/gps.c  ****     int32_t ecef_x_velocity;
1067:../src/gps.c  ****     int32_t ecef_y_velocity;
1068:../src/gps.c  ****     int32_t ecef_z_velocity;
1069:../src/gps.c  ****     uint32_t speed_accuracy;
1070:../src/gps.c  ****     uint16_t position_DOP;
1071:../src/gps.c  ****     uint8_t res;
1072:../src/gps.c  ****     uint8_t satellites;
1073:../src/gps.c  ****     uint32_t res2;
1074:../src/gps.c  **** } ubx_nav_solution;
1075:../src/gps.c  **** 
1076:../src/gps.c  **** typedef struct {
1077:../src/gps.c  ****     uint32_t time;              // GPS msToW
1078:../src/gps.c  ****     int32_t ned_north;
1079:../src/gps.c  ****     int32_t ned_east;
1080:../src/gps.c  ****     int32_t ned_down;
1081:../src/gps.c  ****     uint32_t speed_3d;
1082:../src/gps.c  ****     uint32_t speed_2d;
1083:../src/gps.c  ****     int32_t heading_2d;
1084:../src/gps.c  ****     uint32_t speed_accuracy;
1085:../src/gps.c  ****     uint32_t heading_accuracy;
1086:../src/gps.c  **** } ubx_nav_velned;
1087:../src/gps.c  **** 
1088:../src/gps.c  **** enum {
1089:../src/gps.c  ****     PREAMBLE1 = 0xb5,
1090:../src/gps.c  ****     PREAMBLE2 = 0x62,
1091:../src/gps.c  ****     CLASS_NAV = 0x01,
1092:../src/gps.c  ****     CLASS_ACK = 0x05,
1093:../src/gps.c  ****     CLASS_CFG = 0x06,
1094:../src/gps.c  ****     MSG_ACK_NACK = 0x00,
1095:../src/gps.c  ****     MSG_ACK_ACK = 0x01,
1096:../src/gps.c  ****     MSG_POSLLH = 0x2,
1097:../src/gps.c  ****     MSG_STATUS = 0x3,
1098:../src/gps.c  ****     MSG_SOL = 0x6,
1099:../src/gps.c  ****     MSG_VELNED = 0x12,
1100:../src/gps.c  ****     MSG_CFG_PRT = 0x00,
1101:../src/gps.c  ****     MSG_CFG_RATE = 0x08,
1102:../src/gps.c  ****     MSG_CFG_SET_RATE = 0x01,
1103:../src/gps.c  ****     MSG_CFG_NAV_SETTINGS = 0x24
1104:../src/gps.c  **** } ubs_protocol_bytes;
1105:../src/gps.c  **** 
1106:../src/gps.c  **** enum {
1107:../src/gps.c  ****     FIX_NONE = 0,
1108:../src/gps.c  ****     FIX_DEAD_RECKONING = 1,
1109:../src/gps.c  ****     FIX_2D = 2,
1110:../src/gps.c  ****     FIX_3D = 3,
1111:../src/gps.c  ****     FIX_GPS_DEAD_RECKONING = 4,
1112:../src/gps.c  ****     FIX_TIME = 5
1113:../src/gps.c  **** } ubs_nav_fix_type;
1114:../src/gps.c  **** 
1115:../src/gps.c  **** enum {
1116:../src/gps.c  ****     NAV_STATUS_FIX_VALID = 1
1117:../src/gps.c  **** } ubx_nav_status_bits;
1118:../src/gps.c  **** 
1119:../src/gps.c  **** // Packet checksum accumulators
1120:../src/gps.c  **** static uint8_t _ck_a;
1121:../src/gps.c  **** static uint8_t _ck_b;
1122:../src/gps.c  **** 
1123:../src/gps.c  **** // State machine state
1124:../src/gps.c  **** static uint8_t _step;
1125:../src/gps.c  **** static uint8_t _msg_id;
1126:../src/gps.c  **** static uint16_t _payload_length;
1127:../src/gps.c  **** static uint16_t _payload_counter;
1128:../src/gps.c  **** 
1129:../src/gps.c  **** static bool next_fix;
1130:../src/gps.c  **** static uint8_t _class;
1131:../src/gps.c  **** 
1132:../src/gps.c  **** // do we have new position information?
1133:../src/gps.c  **** static bool _new_position;
1134:../src/gps.c  **** 
1135:../src/gps.c  **** // do we have new speed information?
1136:../src/gps.c  **** static bool _new_speed;
1137:../src/gps.c  **** 
1138:../src/gps.c  **** static uint8_t _disable_counter;
1139:../src/gps.c  **** 
1140:../src/gps.c  **** // Receive buffer
1141:../src/gps.c  **** static union {
1142:../src/gps.c  ****     ubx_nav_posllh posllh;
1143:../src/gps.c  ****     ubx_nav_status status;
1144:../src/gps.c  ****     ubx_nav_solution solution;
1145:../src/gps.c  ****     ubx_nav_velned velned;
1146:../src/gps.c  ****     uint8_t bytes[64];
1147:../src/gps.c  **** } _buffer;
1148:../src/gps.c  **** 
1149:../src/gps.c  **** void _update_checksum(uint8_t *data, uint8_t len, uint8_t *ck_a, uint8_t *ck_b)
1150:../src/gps.c  **** {
 4441              		.loc 1 1150 0
 4442              		.cfi_startproc
 4443              		@ args = 0, pretend = 0, frame = 16
 4444              		@ frame_needed = 1, uses_anonymous_args = 0
 4445              		@ link register save eliminated.
 4446 1b6c 80B4     		push	{r7}
 4447              	.LCFI91:
 4448              		.cfi_def_cfa_offset 4
 4449              		.cfi_offset 7, -4
 4450 1b6e 85B0     		sub	sp, sp, #20
 4451              	.LCFI92:
 4452              		.cfi_def_cfa_offset 24
 4453 1b70 00AF     		add	r7, sp, #0
 4454              	.LCFI93:
 4455              		.cfi_def_cfa_register 7
 4456 1b72 F860     		str	r0, [r7, #12]
 4457 1b74 7A60     		str	r2, [r7, #4]
 4458 1b76 3B60     		str	r3, [r7, #0]
 4459 1b78 0B46     		mov	r3, r1
 4460 1b7a FB72     		strb	r3, [r7, #11]
1151:../src/gps.c  ****     while (len--) {
 4461              		.loc 1 1151 0
 4462 1b7c 13E0     		b	.L240
 4463              	.L241:
1152:../src/gps.c  ****         *ck_a += *data;
 4464              		.loc 1 1152 0
 4465 1b7e 7B68     		ldr	r3, [r7, #4]
 4466 1b80 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 4467 1b82 FB68     		ldr	r3, [r7, #12]
 4468 1b84 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4469 1b86 D318     		adds	r3, r2, r3
 4470 1b88 DAB2     		uxtb	r2, r3
 4471 1b8a 7B68     		ldr	r3, [r7, #4]
 4472 1b8c 1A70     		strb	r2, [r3, #0]
1153:../src/gps.c  ****         *ck_b += *ck_a;
 4473              		.loc 1 1153 0
 4474 1b8e 3B68     		ldr	r3, [r7, #0]
 4475 1b90 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 4476 1b92 7B68     		ldr	r3, [r7, #4]
 4477 1b94 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4478 1b96 D318     		adds	r3, r2, r3
 4479 1b98 DAB2     		uxtb	r2, r3
 4480 1b9a 3B68     		ldr	r3, [r7, #0]
 4481 1b9c 1A70     		strb	r2, [r3, #0]
1154:../src/gps.c  ****         data++;
 4482              		.loc 1 1154 0
 4483 1b9e FB68     		ldr	r3, [r7, #12]
 4484 1ba0 03F10103 		add	r3, r3, #1
 4485 1ba4 FB60     		str	r3, [r7, #12]
 4486              	.L240:
1151:../src/gps.c  ****     while (len--) {
 4487              		.loc 1 1151 0 discriminator 1
 4488 1ba6 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 4489 1ba8 002B     		cmp	r3, #0
 4490 1baa 0CBF     		ite	eq
 4491 1bac 0023     		moveq	r3, #0
 4492 1bae 0123     		movne	r3, #1
 4493 1bb0 DBB2     		uxtb	r3, r3
 4494 1bb2 FA7A     		ldrb	r2, [r7, #11]
 4495 1bb4 02F1FF32 		add	r2, r2, #-1
 4496 1bb8 FA72     		strb	r2, [r7, #11]
 4497 1bba 002B     		cmp	r3, #0
 4498 1bbc DFD1     		bne	.L241
1155:../src/gps.c  ****     }
1156:../src/gps.c  **** }
 4499              		.loc 1 1156 0
 4500 1bbe 07F11407 		add	r7, r7, #20
 4501 1bc2 BD46     		mov	sp, r7
 4502 1bc4 80BC     		pop	{r7}
 4503 1bc6 7047     		bx	lr
 4504              		.cfi_endproc
 4505              	.LFE60:
 4507              		.align	2
 4508              		.thumb
 4509              		.thumb_func
 4511              	GPS_UBLOX_newFrame:
 4512              	.LFB61:
1157:../src/gps.c  **** 
1158:../src/gps.c  **** static bool GPS_UBLOX_newFrame(uint8_t data)
1159:../src/gps.c  **** {
 4513              		.loc 1 1159 0
 4514              		.cfi_startproc
 4515              		@ args = 0, pretend = 0, frame = 16
 4516              		@ frame_needed = 1, uses_anonymous_args = 0
 4517 1bc8 80B5     		push	{r7, lr}
 4518              	.LCFI94:
 4519              		.cfi_def_cfa_offset 8
 4520              		.cfi_offset 7, -8
 4521              		.cfi_offset 14, -4
 4522 1bca 84B0     		sub	sp, sp, #16
 4523              	.LCFI95:
 4524              		.cfi_def_cfa_offset 24
 4525 1bcc 00AF     		add	r7, sp, #0
 4526              	.LCFI96:
 4527              		.cfi_def_cfa_register 7
 4528 1bce 0346     		mov	r3, r0
 4529 1bd0 FB71     		strb	r3, [r7, #7]
1160:../src/gps.c  ****     bool parsed = false;
 4530              		.loc 1 1160 0
 4531 1bd2 4FF00003 		mov	r3, #0
 4532 1bd6 FB73     		strb	r3, [r7, #15]
1161:../src/gps.c  **** 
1162:../src/gps.c  ****     switch (_step) {
 4533              		.loc 1 1162 0
 4534 1bd8 874B     		ldr	r3, .L266
 4535 1bda 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4536 1bdc 082B     		cmp	r3, #8
 4537 1bde 00F20581 		bhi	.L243
 4538 1be2 01A2     		adr	r2, .L253
 4539 1be4 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 4540              		.align	2
 4541              	.L253:
 4542 1be8 2B1C0000 		.word	.L244+1
 4543 1bec 0D1C0000 		.word	.L245+1
 4544 1bf0 431C0000 		.word	.L246+1
 4545 1bf4 671C0000 		.word	.L247+1
 4546 1bf8 9B1C0000 		.word	.L248+1
 4547 1bfc D11C0000 		.word	.L249+1
 4548 1c00 371D0000 		.word	.L250+1
 4549 1c04 911D0000 		.word	.L251+1
 4550 1c08 B31D0000 		.word	.L252+1
 4551              	.L245:
1163:../src/gps.c  ****         case 1:
1164:../src/gps.c  ****             if (PREAMBLE2 == data) {
 4552              		.loc 1 1164 0
 4553 1c0c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4554 1c0e 622B     		cmp	r3, #98
 4555 1c10 07D1     		bne	.L254
1165:../src/gps.c  ****                 _step++;
 4556              		.loc 1 1165 0
 4557 1c12 794B     		ldr	r3, .L266
 4558 1c14 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4559 1c16 03F10103 		add	r3, r3, #1
 4560 1c1a DAB2     		uxtb	r2, r3
 4561 1c1c 764B     		ldr	r3, .L266
 4562 1c1e 1A70     		strb	r2, [r3, #0]
1166:../src/gps.c  ****                 break;
 4563              		.loc 1 1166 0
 4564 1c20 E4E0     		b	.L243
 4565              	.L254:
1167:../src/gps.c  ****             }
1168:../src/gps.c  ****             _step = 0;
 4566              		.loc 1 1168 0
 4567 1c22 754B     		ldr	r3, .L266
 4568 1c24 4FF00002 		mov	r2, #0
 4569 1c28 1A70     		strb	r2, [r3, #0]
 4570              	.L244:
1169:../src/gps.c  ****         case 0:
1170:../src/gps.c  ****             if (PREAMBLE1 == data)
 4571              		.loc 1 1170 0
 4572 1c2a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4573 1c2c B52B     		cmp	r3, #181
 4574 1c2e 40F0D680 		bne	.L262
1171:../src/gps.c  ****                 _step++;
 4575              		.loc 1 1171 0
 4576 1c32 714B     		ldr	r3, .L266
 4577 1c34 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4578 1c36 03F10103 		add	r3, r3, #1
 4579 1c3a DAB2     		uxtb	r2, r3
 4580 1c3c 6E4B     		ldr	r3, .L266
 4581 1c3e 1A70     		strb	r2, [r3, #0]
1172:../src/gps.c  ****             break;
 4582              		.loc 1 1172 0
 4583 1c40 CDE0     		b	.L262
 4584              	.L246:
1173:../src/gps.c  ****         case 2:
1174:../src/gps.c  ****             _step++;
 4585              		.loc 1 1174 0
 4586 1c42 6D4B     		ldr	r3, .L266
 4587 1c44 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4588 1c46 03F10103 		add	r3, r3, #1
 4589 1c4a DAB2     		uxtb	r2, r3
 4590 1c4c 6A4B     		ldr	r3, .L266
 4591 1c4e 1A70     		strb	r2, [r3, #0]
1175:../src/gps.c  ****             _class = data;
 4592              		.loc 1 1175 0
 4593 1c50 6A4B     		ldr	r3, .L266+4
 4594 1c52 FA79     		ldrb	r2, [r7, #7]
 4595 1c54 1A70     		strb	r2, [r3, #0]
1176:../src/gps.c  ****             _ck_b = _ck_a = data;   // reset the checksum accumulators
 4596              		.loc 1 1176 0
 4597 1c56 6A4B     		ldr	r3, .L266+8
 4598 1c58 FA79     		ldrb	r2, [r7, #7]
 4599 1c5a 1A70     		strb	r2, [r3, #0]
 4600 1c5c 684B     		ldr	r3, .L266+8
 4601 1c5e 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 4602 1c60 684B     		ldr	r3, .L266+12
 4603 1c62 1A70     		strb	r2, [r3, #0]
1177:../src/gps.c  ****             break;
 4604              		.loc 1 1177 0
 4605 1c64 C2E0     		b	.L243
 4606              	.L247:
1178:../src/gps.c  ****         case 3:
1179:../src/gps.c  ****             _step++;
 4607              		.loc 1 1179 0
 4608 1c66 644B     		ldr	r3, .L266
 4609 1c68 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4610 1c6a 03F10103 		add	r3, r3, #1
 4611 1c6e DAB2     		uxtb	r2, r3
 4612 1c70 614B     		ldr	r3, .L266
 4613 1c72 1A70     		strb	r2, [r3, #0]
1180:../src/gps.c  ****             _ck_b += (_ck_a += data);       // checksum byte
 4614              		.loc 1 1180 0
 4615 1c74 624B     		ldr	r3, .L266+8
 4616 1c76 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 4617 1c78 FB79     		ldrb	r3, [r7, #7]
 4618 1c7a D318     		adds	r3, r2, r3
 4619 1c7c DAB2     		uxtb	r2, r3
 4620 1c7e 604B     		ldr	r3, .L266+8
 4621 1c80 1A70     		strb	r2, [r3, #0]
 4622 1c82 5F4B     		ldr	r3, .L266+8
 4623 1c84 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 4624 1c86 5F4B     		ldr	r3, .L266+12
 4625 1c88 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4626 1c8a D318     		adds	r3, r2, r3
 4627 1c8c DAB2     		uxtb	r2, r3
 4628 1c8e 5D4B     		ldr	r3, .L266+12
 4629 1c90 1A70     		strb	r2, [r3, #0]
1181:../src/gps.c  ****             _msg_id = data;
 4630              		.loc 1 1181 0
 4631 1c92 5D4B     		ldr	r3, .L266+16
 4632 1c94 FA79     		ldrb	r2, [r7, #7]
 4633 1c96 1A70     		strb	r2, [r3, #0]
1182:../src/gps.c  ****             break;
 4634              		.loc 1 1182 0
 4635 1c98 A8E0     		b	.L243
 4636              	.L248:
1183:../src/gps.c  ****         case 4:
1184:../src/gps.c  ****             _step++;
 4637              		.loc 1 1184 0
 4638 1c9a 574B     		ldr	r3, .L266
 4639 1c9c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4640 1c9e 03F10103 		add	r3, r3, #1
 4641 1ca2 DAB2     		uxtb	r2, r3
 4642 1ca4 544B     		ldr	r3, .L266
 4643 1ca6 1A70     		strb	r2, [r3, #0]
1185:../src/gps.c  ****             _ck_b += (_ck_a += data);       // checksum byte
 4644              		.loc 1 1185 0
 4645 1ca8 554B     		ldr	r3, .L266+8
 4646 1caa 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 4647 1cac FB79     		ldrb	r3, [r7, #7]
 4648 1cae D318     		adds	r3, r2, r3
 4649 1cb0 DAB2     		uxtb	r2, r3
 4650 1cb2 534B     		ldr	r3, .L266+8
 4651 1cb4 1A70     		strb	r2, [r3, #0]
 4652 1cb6 524B     		ldr	r3, .L266+8
 4653 1cb8 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 4654 1cba 524B     		ldr	r3, .L266+12
 4655 1cbc 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4656 1cbe D318     		adds	r3, r2, r3
 4657 1cc0 DAB2     		uxtb	r2, r3
 4658 1cc2 504B     		ldr	r3, .L266+12
 4659 1cc4 1A70     		strb	r2, [r3, #0]
1186:../src/gps.c  ****             _payload_length = data; // payload length low byte
 4660              		.loc 1 1186 0
 4661 1cc6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4662 1cc8 9AB2     		uxth	r2, r3
 4663 1cca 504B     		ldr	r3, .L266+20
 4664 1ccc 1A80     		strh	r2, [r3, #0]	@ movhi
1187:../src/gps.c  ****             break;
 4665              		.loc 1 1187 0
 4666 1cce 8DE0     		b	.L243
 4667              	.L249:
1188:../src/gps.c  ****         case 5:
1189:../src/gps.c  ****             _step++;
 4668              		.loc 1 1189 0
 4669 1cd0 494B     		ldr	r3, .L266
 4670 1cd2 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4671 1cd4 03F10103 		add	r3, r3, #1
 4672 1cd8 DAB2     		uxtb	r2, r3
 4673 1cda 474B     		ldr	r3, .L266
 4674 1cdc 1A70     		strb	r2, [r3, #0]
1190:../src/gps.c  ****             _ck_b += (_ck_a += data);       // checksum byte
 4675              		.loc 1 1190 0
 4676 1cde 484B     		ldr	r3, .L266+8
 4677 1ce0 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 4678 1ce2 FB79     		ldrb	r3, [r7, #7]
 4679 1ce4 D318     		adds	r3, r2, r3
 4680 1ce6 DAB2     		uxtb	r2, r3
 4681 1ce8 454B     		ldr	r3, .L266+8
 4682 1cea 1A70     		strb	r2, [r3, #0]
 4683 1cec 444B     		ldr	r3, .L266+8
 4684 1cee 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 4685 1cf0 444B     		ldr	r3, .L266+12
 4686 1cf2 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4687 1cf4 D318     		adds	r3, r2, r3
 4688 1cf6 DAB2     		uxtb	r2, r3
 4689 1cf8 424B     		ldr	r3, .L266+12
 4690 1cfa 1A70     		strb	r2, [r3, #0]
1191:../src/gps.c  ****             _payload_length += (uint16_t) (data << 8);
 4691              		.loc 1 1191 0
 4692 1cfc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4693 1cfe 9BB2     		uxth	r3, r3
 4694 1d00 4FEA0323 		lsl	r3, r3, #8
 4695 1d04 9AB2     		uxth	r2, r3
 4696 1d06 414B     		ldr	r3, .L266+20
 4697 1d08 1B88     		ldrh	r3, [r3, #0]
 4698 1d0a D318     		adds	r3, r2, r3
 4699 1d0c 9AB2     		uxth	r2, r3
 4700 1d0e 3F4B     		ldr	r3, .L266+20
 4701 1d10 1A80     		strh	r2, [r3, #0]	@ movhi
1192:../src/gps.c  ****             if (_payload_length > 512) {
 4702              		.loc 1 1192 0
 4703 1d12 3E4B     		ldr	r3, .L266+20
 4704 1d14 1B88     		ldrh	r3, [r3, #0]
 4705 1d16 B3F5007F 		cmp	r3, #512
 4706 1d1a 07D9     		bls	.L256
1193:../src/gps.c  ****                 _payload_length = 0;
 4707              		.loc 1 1193 0
 4708 1d1c 3B4B     		ldr	r3, .L266+20
 4709 1d1e 4FF00002 		mov	r2, #0
 4710 1d22 1A80     		strh	r2, [r3, #0]	@ movhi
1194:../src/gps.c  ****                 _step = 0;
 4711              		.loc 1 1194 0
 4712 1d24 344B     		ldr	r3, .L266
 4713 1d26 4FF00002 		mov	r2, #0
 4714 1d2a 1A70     		strb	r2, [r3, #0]
 4715              	.L256:
1195:../src/gps.c  ****             }
1196:../src/gps.c  ****             _payload_counter = 0;   // prepare to receive payload
 4716              		.loc 1 1196 0
 4717 1d2c 384B     		ldr	r3, .L266+24
 4718 1d2e 4FF00002 		mov	r2, #0
 4719 1d32 1A80     		strh	r2, [r3, #0]	@ movhi
1197:../src/gps.c  ****             break;
 4720              		.loc 1 1197 0
 4721 1d34 5AE0     		b	.L243
 4722              	.L250:
1198:../src/gps.c  ****         case 6:
1199:../src/gps.c  ****             _ck_b += (_ck_a += data);       // checksum byte
 4723              		.loc 1 1199 0
 4724 1d36 324B     		ldr	r3, .L266+8
 4725 1d38 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 4726 1d3a FB79     		ldrb	r3, [r7, #7]
 4727 1d3c D318     		adds	r3, r2, r3
 4728 1d3e DAB2     		uxtb	r2, r3
 4729 1d40 2F4B     		ldr	r3, .L266+8
 4730 1d42 1A70     		strb	r2, [r3, #0]
 4731 1d44 2E4B     		ldr	r3, .L266+8
 4732 1d46 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 4733 1d48 2E4B     		ldr	r3, .L266+12
 4734 1d4a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4735 1d4c D318     		adds	r3, r2, r3
 4736 1d4e DAB2     		uxtb	r2, r3
 4737 1d50 2C4B     		ldr	r3, .L266+12
 4738 1d52 1A70     		strb	r2, [r3, #0]
1200:../src/gps.c  ****             if (_payload_counter < sizeof(_buffer)) {
 4739              		.loc 1 1200 0
 4740 1d54 2E4B     		ldr	r3, .L266+24
 4741 1d56 1B88     		ldrh	r3, [r3, #0]
 4742 1d58 3F2B     		cmp	r3, #63
 4743 1d5a 04D8     		bhi	.L257
1201:../src/gps.c  ****                 _buffer.bytes[_payload_counter] = data;
 4744              		.loc 1 1201 0
 4745 1d5c 2C4B     		ldr	r3, .L266+24
 4746 1d5e 1B88     		ldrh	r3, [r3, #0]
 4747 1d60 2C4A     		ldr	r2, .L266+28
 4748 1d62 F979     		ldrb	r1, [r7, #7]
 4749 1d64 D154     		strb	r1, [r2, r3]
 4750              	.L257:
1202:../src/gps.c  ****             }
1203:../src/gps.c  ****             if (++_payload_counter == _payload_length)
 4751              		.loc 1 1203 0
 4752 1d66 2A4B     		ldr	r3, .L266+24
 4753 1d68 1B88     		ldrh	r3, [r3, #0]
 4754 1d6a 03F10103 		add	r3, r3, #1
 4755 1d6e 9AB2     		uxth	r2, r3
 4756 1d70 274B     		ldr	r3, .L266+24
 4757 1d72 1A80     		strh	r2, [r3, #0]	@ movhi
 4758 1d74 264B     		ldr	r3, .L266+24
 4759 1d76 1A88     		ldrh	r2, [r3, #0]
 4760 1d78 244B     		ldr	r3, .L266+20
 4761 1d7a 1B88     		ldrh	r3, [r3, #0]
 4762 1d7c 9A42     		cmp	r2, r3
 4763 1d7e 30D1     		bne	.L263
1204:../src/gps.c  ****                 _step++;
 4764              		.loc 1 1204 0
 4765 1d80 1D4B     		ldr	r3, .L266
 4766 1d82 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4767 1d84 03F10103 		add	r3, r3, #1
 4768 1d88 DAB2     		uxtb	r2, r3
 4769 1d8a 1B4B     		ldr	r3, .L266
 4770 1d8c 1A70     		strb	r2, [r3, #0]
1205:../src/gps.c  ****             break;
 4771              		.loc 1 1205 0
 4772 1d8e 28E0     		b	.L263
 4773              	.L251:
1206:../src/gps.c  ****         case 7:
1207:../src/gps.c  ****             _step++;
 4774              		.loc 1 1207 0
 4775 1d90 194B     		ldr	r3, .L266
 4776 1d92 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4777 1d94 03F10103 		add	r3, r3, #1
 4778 1d98 DAB2     		uxtb	r2, r3
 4779 1d9a 174B     		ldr	r3, .L266
 4780 1d9c 1A70     		strb	r2, [r3, #0]
1208:../src/gps.c  ****             if (_ck_a != data)
 4781              		.loc 1 1208 0
 4782 1d9e 184B     		ldr	r3, .L266+8
 4783 1da0 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4784 1da2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4785 1da4 9A42     		cmp	r2, r3
 4786 1da6 1ED0     		beq	.L264
1209:../src/gps.c  ****                 _step = 0;          // bad checksum
 4787              		.loc 1 1209 0
 4788 1da8 134B     		ldr	r3, .L266
 4789 1daa 4FF00002 		mov	r2, #0
 4790 1dae 1A70     		strb	r2, [r3, #0]
1210:../src/gps.c  ****             break;
 4791              		.loc 1 1210 0
 4792 1db0 19E0     		b	.L264
 4793              	.L252:
1211:../src/gps.c  ****         case 8:
1212:../src/gps.c  ****             _step = 0;
 4794              		.loc 1 1212 0
 4795 1db2 114B     		ldr	r3, .L266
 4796 1db4 4FF00002 		mov	r2, #0
 4797 1db8 1A70     		strb	r2, [r3, #0]
1213:../src/gps.c  ****             if (_ck_b != data)
 4798              		.loc 1 1213 0
 4799 1dba 124B     		ldr	r3, .L266+12
 4800 1dbc 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4801 1dbe FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4802 1dc0 9A42     		cmp	r2, r3
 4803 1dc2 12D1     		bne	.L265
 4804              	.L260:
1214:../src/gps.c  ****                 break;              // bad checksum
1215:../src/gps.c  ****             GPS_Present = 1;
 4805              		.loc 1 1215 0
 4806 1dc4 144B     		ldr	r3, .L266+32
 4807 1dc6 4FF00102 		mov	r2, #1
 4808 1dca 1A70     		strb	r2, [r3, #0]
1216:../src/gps.c  ****             if (UBLOX_parse_gps()) {
 4809              		.loc 1 1216 0
 4810 1dcc 00F026F8 		bl	UBLOX_parse_gps
 4811 1dd0 0346     		mov	r3, r0
 4812 1dd2 002B     		cmp	r3, #0
 4813 1dd4 0AD0     		beq	.L243
1217:../src/gps.c  ****                 parsed = true;
 4814              		.loc 1 1217 0
 4815 1dd6 4FF00103 		mov	r3, #1
 4816 1dda FB73     		strb	r3, [r7, #15]
 4817 1ddc 06E0     		b	.L243
 4818              	.L262:
1172:../src/gps.c  ****             break;
 4819              		.loc 1 1172 0
 4820 1dde 00BF     		nop
 4821 1de0 04E0     		b	.L243
 4822              	.L263:
1205:../src/gps.c  ****             break;
 4823              		.loc 1 1205 0
 4824 1de2 00BF     		nop
 4825 1de4 02E0     		b	.L243
 4826              	.L264:
1210:../src/gps.c  ****             break;
 4827              		.loc 1 1210 0
 4828 1de6 00BF     		nop
 4829 1de8 00E0     		b	.L243
 4830              	.L265:
1214:../src/gps.c  ****                 break;              // bad checksum
 4831              		.loc 1 1214 0
 4832 1dea 00BF     		nop
 4833              	.L243:
1218:../src/gps.c  ****             }
1219:../src/gps.c  ****     }                           //end switch
1220:../src/gps.c  ****     return parsed;
 4834              		.loc 1 1220 0
 4835 1dec FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1221:../src/gps.c  **** }
 4836              		.loc 1 1221 0
 4837 1dee 1846     		mov	r0, r3
 4838 1df0 07F11007 		add	r7, r7, #16
 4839 1df4 BD46     		mov	sp, r7
 4840 1df6 80BD     		pop	{r7, pc}
 4841              	.L267:
 4842              		.align	2
 4843              	.L266:
 4844 1df8 30010000 		.word	_step
 4845 1dfc 37010000 		.word	_class
 4846 1e00 2E010000 		.word	_ck_a
 4847 1e04 2F010000 		.word	_ck_b
 4848 1e08 31010000 		.word	_msg_id
 4849 1e0c 32010000 		.word	_payload_length
 4850 1e10 34010000 		.word	_payload_counter
 4851 1e14 3C010000 		.word	_buffer
 4852 1e18 00000000 		.word	GPS_Present
 4853              		.cfi_endproc
 4854              	.LFE61:
 4856              		.align	2
 4857              		.thumb
 4858              		.thumb_func
 4860              	UBLOX_parse_gps:
 4861              	.LFB62:
1222:../src/gps.c  **** 
1223:../src/gps.c  **** static bool UBLOX_parse_gps(void)
1224:../src/gps.c  **** {
 4862              		.loc 1 1224 0
 4863              		.cfi_startproc
 4864              		@ args = 0, pretend = 0, frame = 0
 4865              		@ frame_needed = 1, uses_anonymous_args = 0
 4866              		@ link register save eliminated.
 4867 1e1c 80B4     		push	{r7}
 4868              	.LCFI97:
 4869              		.cfi_def_cfa_offset 4
 4870              		.cfi_offset 7, -4
 4871 1e1e 00AF     		add	r7, sp, #0
 4872              	.LCFI98:
 4873              		.cfi_def_cfa_register 7
1225:../src/gps.c  ****     switch (_msg_id) {
 4874              		.loc 1 1225 0
 4875 1e20 614B     		ldr	r3, .L285
 4876 1e22 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4877 1e24 A3F10203 		sub	r3, r3, #2
 4878 1e28 102B     		cmp	r3, #16
 4879 1e2a 00F2A080 		bhi	.L269
 4880 1e2e 01A1     		adr	r1, .L274
 4881 1e30 51F823F0 		ldr	pc, [r1, r3, lsl #2]
 4882              		.align	2
 4883              	.L274:
 4884 1e34 791E0000 		.word	.L270+1
 4885 1e38 B71E0000 		.word	.L271+1
 4886 1e3c 6F1F0000 		.word	.L269+1
 4887 1e40 6F1F0000 		.word	.L269+1
 4888 1e44 F71E0000 		.word	.L272+1
 4889 1e48 6F1F0000 		.word	.L269+1
 4890 1e4c 6F1F0000 		.word	.L269+1
 4891 1e50 6F1F0000 		.word	.L269+1
 4892 1e54 6F1F0000 		.word	.L269+1
 4893 1e58 6F1F0000 		.word	.L269+1
 4894 1e5c 6F1F0000 		.word	.L269+1
 4895 1e60 6F1F0000 		.word	.L269+1
 4896 1e64 6F1F0000 		.word	.L269+1
 4897 1e68 6F1F0000 		.word	.L269+1
 4898 1e6c 6F1F0000 		.word	.L269+1
 4899 1e70 6F1F0000 		.word	.L269+1
 4900 1e74 411F0000 		.word	.L273+1
 4901              	.L270:
1226:../src/gps.c  ****     case MSG_POSLLH:
1227:../src/gps.c  ****         //i2c_dataset.time                = _buffer.posllh.time;
1228:../src/gps.c  ****         GPS_coord[LON] = _buffer.posllh.longitude;
 4902              		.loc 1 1228 0
 4903 1e78 4C4B     		ldr	r3, .L285+4
 4904 1e7a 5A68     		ldr	r2, [r3, #4]
 4905 1e7c 4C4B     		ldr	r3, .L285+8
 4906 1e7e 5A60     		str	r2, [r3, #4]
1229:../src/gps.c  ****         GPS_coord[LAT] = _buffer.posllh.latitude;
 4907              		.loc 1 1229 0
 4908 1e80 4A4B     		ldr	r3, .L285+4
 4909 1e82 9A68     		ldr	r2, [r3, #8]
 4910 1e84 4A4B     		ldr	r3, .L285+8
 4911 1e86 1A60     		str	r2, [r3, #0]
1230:../src/gps.c  ****         GPS_altitude = _buffer.posllh.altitude_msl / 10 / 100;  //alt in m
 4912              		.loc 1 1230 0
 4913 1e88 484B     		ldr	r3, .L285+4
 4914 1e8a 1B69     		ldr	r3, [r3, #16]
 4915 1e8c 494A     		ldr	r2, .L285+12
 4916 1e8e 82FB0312 		smull	r1, r2, r2, r3
 4917 1e92 4FEAA212 		asr	r2, r2, #6
 4918 1e96 4FEAE373 		asr	r3, r3, #31
 4919 1e9a D31A     		subs	r3, r2, r3
 4920 1e9c 9AB2     		uxth	r2, r3
 4921 1e9e 464B     		ldr	r3, .L285+16
 4922 1ea0 1A80     		strh	r2, [r3, #0]	@ movhi
1231:../src/gps.c  ****         f.GPS_FIX = next_fix;
 4923              		.loc 1 1231 0
 4924 1ea2 464B     		ldr	r3, .L285+20
 4925 1ea4 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4926 1ea6 1A46     		mov	r2, r3
 4927 1ea8 454B     		ldr	r3, .L285+24
 4928 1eaa DA72     		strb	r2, [r3, #11]
1232:../src/gps.c  ****         _new_position = true;
 4929              		.loc 1 1232 0
 4930 1eac 454B     		ldr	r3, .L285+28
 4931 1eae 4FF00102 		mov	r2, #1
 4932 1eb2 1A70     		strb	r2, [r3, #0]
1233:../src/gps.c  ****         break;
 4933              		.loc 1 1233 0
 4934 1eb4 5FE0     		b	.L275
 4935              	.L271:
1234:../src/gps.c  ****     case MSG_STATUS:
1235:../src/gps.c  ****         next_fix = (_buffer.status.fix_status & NAV_STATUS_FIX_VALID) && (_buffer.status.fix_type =
 4936              		.loc 1 1235 0
 4937 1eb6 3D4B     		ldr	r3, .L285+4
 4938 1eb8 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 4939 1eba 03F00103 		and	r3, r3, #1
 4940 1ebe 002B     		cmp	r3, #0
 4941 1ec0 06D0     		beq	.L276
 4942              		.loc 1 1235 0 is_stmt 0 discriminator 1
 4943 1ec2 3A4B     		ldr	r3, .L285+4
 4944 1ec4 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 4945 1ec6 032B     		cmp	r3, #3
 4946 1ec8 02D1     		bne	.L276
 4947              		.loc 1 1235 0 discriminator 3
 4948 1eca 4FF00103 		mov	r3, #1
 4949 1ece 01E0     		b	.L277
 4950              	.L276:
 4951              		.loc 1 1235 0 discriminator 2
 4952 1ed0 4FF00003 		mov	r3, #0
 4953              	.L277:
 4954              		.loc 1 1235 0 discriminator 4
 4955 1ed4 03F00103 		and	r3, r3, #1
 4956 1ed8 DAB2     		uxtb	r2, r3
 4957 1eda 384B     		ldr	r3, .L285+20
 4958 1edc 1A70     		strb	r2, [r3, #0]
1236:../src/gps.c  ****         if (!next_fix)
 4959              		.loc 1 1236 0 is_stmt 1 discriminator 4
 4960 1ede 374B     		ldr	r3, .L285+20
 4961 1ee0 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4962 1ee2 83F00103 		eor	r3, r3, #1
 4963 1ee6 DBB2     		uxtb	r3, r3
 4964 1ee8 002B     		cmp	r3, #0
 4965 1eea 43D0     		beq	.L284
1237:../src/gps.c  ****             f.GPS_FIX = false;
 4966              		.loc 1 1237 0
 4967 1eec 344B     		ldr	r3, .L285+24
 4968 1eee 4FF00002 		mov	r2, #0
 4969 1ef2 DA72     		strb	r2, [r3, #11]
1238:../src/gps.c  ****         break;
 4970              		.loc 1 1238 0
 4971 1ef4 3EE0     		b	.L284
 4972              	.L272:
1239:../src/gps.c  ****     case MSG_SOL:
1240:../src/gps.c  ****         next_fix = (_buffer.solution.fix_status & NAV_STATUS_FIX_VALID) && (_buffer.solution.fix_ty
 4973              		.loc 1 1240 0
 4974 1ef6 2D4B     		ldr	r3, .L285+4
 4975 1ef8 DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 4976 1efa 03F00103 		and	r3, r3, #1
 4977 1efe 002B     		cmp	r3, #0
 4978 1f00 06D0     		beq	.L279
 4979              		.loc 1 1240 0 is_stmt 0 discriminator 1
 4980 1f02 2A4B     		ldr	r3, .L285+4
 4981 1f04 9B7A     		ldrb	r3, [r3, #10]	@ zero_extendqisi2
 4982 1f06 032B     		cmp	r3, #3
 4983 1f08 02D1     		bne	.L279
 4984              		.loc 1 1240 0 discriminator 3
 4985 1f0a 4FF00103 		mov	r3, #1
 4986 1f0e 01E0     		b	.L280
 4987              	.L279:
 4988              		.loc 1 1240 0 discriminator 2
 4989 1f10 4FF00003 		mov	r3, #0
 4990              	.L280:
 4991              		.loc 1 1240 0 discriminator 4
 4992 1f14 03F00103 		and	r3, r3, #1
 4993 1f18 DAB2     		uxtb	r2, r3
 4994 1f1a 284B     		ldr	r3, .L285+20
 4995 1f1c 1A70     		strb	r2, [r3, #0]
1241:../src/gps.c  ****         if (!next_fix)
 4996              		.loc 1 1241 0 is_stmt 1 discriminator 4
 4997 1f1e 274B     		ldr	r3, .L285+20
 4998 1f20 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4999 1f22 83F00103 		eor	r3, r3, #1
 5000 1f26 DBB2     		uxtb	r3, r3
 5001 1f28 002B     		cmp	r3, #0
 5002 1f2a 03D0     		beq	.L281
1242:../src/gps.c  ****             f.GPS_FIX = false;
 5003              		.loc 1 1242 0
 5004 1f2c 244B     		ldr	r3, .L285+24
 5005 1f2e 4FF00002 		mov	r2, #0
 5006 1f32 DA72     		strb	r2, [r3, #11]
 5007              	.L281:
1243:../src/gps.c  ****         GPS_numSat = _buffer.solution.satellites;
 5008              		.loc 1 1243 0
 5009 1f34 1D4B     		ldr	r3, .L285+4
 5010 1f36 93F82F20 		ldrb	r2, [r3, #47]	@ zero_extendqisi2
 5011 1f3a 234B     		ldr	r3, .L285+32
 5012 1f3c 1A70     		strb	r2, [r3, #0]
1244:../src/gps.c  ****         // GPS_hdop                        = _buffer.solution.position_DOP;
1245:../src/gps.c  ****         // debug[3] = GPS_hdop;
1246:../src/gps.c  ****         break;
 5013              		.loc 1 1246 0
 5014 1f3e 1AE0     		b	.L275
 5015              	.L273:
1247:../src/gps.c  ****     case MSG_VELNED:
1248:../src/gps.c  ****         // speed_3d                        = _buffer.velned.speed_3d;  // cm/s
1249:../src/gps.c  ****         GPS_speed = _buffer.velned.speed_2d;    // cm/s
 5016              		.loc 1 1249 0
 5017 1f40 1A4B     		ldr	r3, .L285+4
 5018 1f42 5B69     		ldr	r3, [r3, #20]
 5019 1f44 9AB2     		uxth	r2, r3
 5020 1f46 214B     		ldr	r3, .L285+36
 5021 1f48 1A80     		strh	r2, [r3, #0]	@ movhi
1250:../src/gps.c  ****         GPS_ground_course = (uint16_t) (_buffer.velned.heading_2d / 10000);     // Heading 2D deg *
 5022              		.loc 1 1250 0
 5023 1f4a 184B     		ldr	r3, .L285+4
 5024 1f4c 9B69     		ldr	r3, [r3, #24]
 5025 1f4e 204A     		ldr	r2, .L285+40
 5026 1f50 82FB0312 		smull	r1, r2, r2, r3
 5027 1f54 4FEA2232 		asr	r2, r2, #12
 5028 1f58 4FEAE373 		asr	r3, r3, #31
 5029 1f5c D31A     		subs	r3, r2, r3
 5030 1f5e 9AB2     		uxth	r2, r3
 5031 1f60 1C4B     		ldr	r3, .L285+44
 5032 1f62 1A80     		strh	r2, [r3, #0]	@ movhi
1251:../src/gps.c  ****         _new_speed = true;
 5033              		.loc 1 1251 0
 5034 1f64 1C4B     		ldr	r3, .L285+48
 5035 1f66 4FF00102 		mov	r2, #1
 5036 1f6a 1A70     		strb	r2, [r3, #0]
1252:../src/gps.c  ****         break;
 5037              		.loc 1 1252 0
 5038 1f6c 03E0     		b	.L275
 5039              	.L269:
1253:../src/gps.c  ****     default:
1254:../src/gps.c  ****         return false;
 5040              		.loc 1 1254 0
 5041 1f6e 4FF00003 		mov	r3, #0
 5042 1f72 15E0     		b	.L282
 5043              	.L284:
1238:../src/gps.c  ****         break;
 5044              		.loc 1 1238 0
 5045 1f74 00BF     		nop
 5046              	.L275:
1255:../src/gps.c  ****     }
1256:../src/gps.c  **** 
1257:../src/gps.c  ****     // we only return true when we get new position and speed data
1258:../src/gps.c  ****     // this ensures we don't use stale data
1259:../src/gps.c  ****     if (_new_position && _new_speed) {
 5047              		.loc 1 1259 0
 5048 1f76 134B     		ldr	r3, .L285+28
 5049 1f78 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 5050 1f7a 002B     		cmp	r3, #0
 5051 1f7c 0ED0     		beq	.L283
 5052              		.loc 1 1259 0 is_stmt 0 discriminator 1
 5053 1f7e 164B     		ldr	r3, .L285+48
 5054 1f80 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 5055 1f82 002B     		cmp	r3, #0
 5056 1f84 0AD0     		beq	.L283
1260:../src/gps.c  ****         _new_speed = _new_position = false;
 5057              		.loc 1 1260 0 is_stmt 1
 5058 1f86 0F4B     		ldr	r3, .L285+28
 5059 1f88 4FF00002 		mov	r2, #0
 5060 1f8c 1A70     		strb	r2, [r3, #0]
 5061 1f8e 0D4B     		ldr	r3, .L285+28
 5062 1f90 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 5063 1f92 114B     		ldr	r3, .L285+48
 5064 1f94 1A70     		strb	r2, [r3, #0]
1261:../src/gps.c  ****         return true;
 5065              		.loc 1 1261 0
 5066 1f96 4FF00103 		mov	r3, #1
 5067 1f9a 01E0     		b	.L282
 5068              	.L283:
1262:../src/gps.c  ****     }
1263:../src/gps.c  ****     return false;
 5069              		.loc 1 1263 0
 5070 1f9c 4FF00003 		mov	r3, #0
 5071              	.L282:
1264:../src/gps.c  **** }
 5072              		.loc 1 1264 0
 5073 1fa0 1846     		mov	r0, r3
 5074 1fa2 BD46     		mov	sp, r7
 5075 1fa4 80BC     		pop	{r7}
 5076 1fa6 7047     		bx	lr
 5077              	.L286:
 5078              		.align	2
 5079              	.L285:
 5080 1fa8 31010000 		.word	_msg_id
 5081 1fac 3C010000 		.word	_buffer
 5082 1fb0 00000000 		.word	GPS_coord
 5083 1fb4 D34D6210 		.word	274877907
 5084 1fb8 00000000 		.word	GPS_altitude
 5085 1fbc 36010000 		.word	next_fix
 5086 1fc0 00000000 		.word	f
 5087 1fc4 38010000 		.word	_new_position
 5088 1fc8 00000000 		.word	GPS_numSat
 5089 1fcc 00000000 		.word	GPS_speed
 5090 1fd0 AD8BDB68 		.word	1759218605
 5091 1fd4 00000000 		.word	GPS_ground_course
 5092 1fd8 39010000 		.word	_new_speed
 5093              		.cfi_endproc
 5094              	.LFE62:
 5096              		.bss
 5097              	param.9326:
 5098 017c 00       		.space	1
 5099              	offset.9327:
 5100 017d 00       		.space	1
 5101              	parity.9328:
 5102 017e 00       		.space	1
 5103 017f 00       		.align	2
 5104              	string.9329:
 5105 0180 00000000 		.space	15
 5105      00000000 
 5105      00000000 
 5105      000000
 5106              	frame.9331:
 5107 018f 00       		.space	1
 5108              	checksum_param.9330:
 5109 0190 00       		.space	1
 5110              	init.9232:
 5111 0191 00       		.space	1
 5112 0192 0000     		.align	2
 5113              	last.9231:
 5114 0194 00000000 		.space	8
 5114      00000000 
 5115              		.align	2
 5116              	speed_old.9230:
 5117 019c 00000000 		.space	4
 5118              		.align	2
 5119              	nav_loopTimer.9182:
 5120 01a0 00000000 		.space	4
 5121              		.text
 5122              	.Letext0:
 5123              		.file 2 "/home/oni/ARM_EABI/bin/../lib/gcc/arm-none-eabi/4.7.2/../../../../arm-none-eabi/include/s
 5124              		.file 3 "../src/board.h"
 5125              		.file 4 "../src/mw.h"
 5126              		.file 5 "/home/oni/ARM_EABI/bin/../lib/gcc/arm-none-eabi/4.7.2/../../../../arm-none-eabi/include/c
 5127              		.file 6 "/home/oni/workspace/Naze32/lib/CMSIS/CM3/CoreSupport/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:00000000 gps.c
     /tmp/ccI4P1re.s:23     .rodata:00000000 init_speed
     /tmp/ccI4P1re.s:20     .rodata:00000000 $d
     /tmp/ccI4P1re.s:56     .rodata:000000f8 gpsInitStrings
     /tmp/ccI4P1re.s:68     .rodata:00000118 ubloxInit
     /tmp/ccI4P1re.s:210    .text:00000000 $t
     /tmp/ccI4P1re.s:215    .text:00000000 navigatron2Init
     /tmp/ccI4P1re.s:261    .text:00000040 $d
     /tmp/ccI4P1re.s:274    .text:00000044 $t
     /tmp/ccI4P1re.s:279    .text:00000044 gpsInit
     /tmp/ccI4P1re.s:1816   .text:00000a2c GPS_set_pids
     /tmp/ccI4P1re.s:511    .text:000001e4 gpsPrint
     /tmp/ccI4P1re.s:496    .text:000001c4 $d
     /tmp/ccI4P1re.s:1162   .text:00000528 GPS_NewData
     /tmp/ccI4P1re.s:507    .text:000001e4 $t
     /tmp/ccI4P1re.s:576    .text:0000023c $d
     /tmp/ccI4P1re.s:580    .text:00000240 $t
     /tmp/ccI4P1re.s:585    .text:00000240 leadFilter_clear
     /tmp/ccI4P1re.s:623    .text:0000025c leadFilter_getPosition
                            *COM*:00000002 xLeadFilter
                            *COM*:00000002 yLeadFilter
     /tmp/ccI4P1re.s:700    .bss:00000000 $d
     /tmp/ccI4P1re.s:701    .bss:00000000 posholdPID_PARAM
     /tmp/ccI4P1re.s:704    .bss:00000010 poshold_ratePID_PARAM
     /tmp/ccI4P1re.s:707    .bss:00000020 navPID_PARAM
     /tmp/ccI4P1re.s:710    .bss:00000030 posholdPID
     /tmp/ccI4P1re.s:713    .bss:00000058 poshold_ratePID
     /tmp/ccI4P1re.s:716    .bss:00000080 navPID
     /tmp/ccI4P1re.s:723    .text:000002dc get_P
     /tmp/ccI4P1re.s:770    .text:00000310 get_I
     /tmp/ccI4P1re.s:888    .text:000003b8 get_D
     /tmp/ccI4P1re.s:1044   .text:000004f0 $d
     /tmp/ccI4P1re.s:1050   .text:000004fc $t
     /tmp/ccI4P1re.s:1054   .text:000004fc reset_PID
     /tmp/ccI4P1re.s:1092   .text:00000524 $d
     /tmp/ccI4P1re.s:1098   .bss:000000a8 dTnav
     /tmp/ccI4P1re.s:1101   .bss:000000ac actual_speed
     /tmp/ccI4P1re.s:1104   .bss:000000b0 GPS_scaleLonDown
     /tmp/ccI4P1re.s:1107   .bss:000000b4 rate_error
     /tmp/ccI4P1re.s:1110   .bss:000000b8 error
     /tmp/ccI4P1re.s:1113   .bss:000000c0 GPS_WP
     /tmp/ccI4P1re.s:1116   .bss:000000c8 target_bearing
     /tmp/ccI4P1re.s:1119   .bss:000000cc original_target_bearing
     /tmp/ccI4P1re.s:1122   .bss:000000d0 crosstrack_error
     /tmp/ccI4P1re.s:1125   .bss:000000d4 wp_distance
     /tmp/ccI4P1re.s:1128   .bss:000000d8 waypoint_speed_gov
     /tmp/ccI4P1re.s:1130   .bss:000000da GPS_filter_index
     /tmp/ccI4P1re.s:1133   .bss:000000dc GPS_filter
     /tmp/ccI4P1re.s:1136   .bss:00000104 GPS_filter_sum
     /tmp/ccI4P1re.s:1139   .bss:0000010c GPS_read
     /tmp/ccI4P1re.s:1142   .bss:00000114 GPS_filtered
     /tmp/ccI4P1re.s:1145   .bss:0000011c GPS_degree
     /tmp/ccI4P1re.s:1148   .bss:00000124 fraction3
     /tmp/ccI4P1re.s:1151   .bss:00000128 nav_bearing
     /tmp/ccI4P1re.s:1154   .bss:0000012c nav_takeoff_bearing
     /tmp/ccI4P1re.s:1157   .text:00000528 $t
     /tmp/ccI4P1re.s:3765   .text:00001714 GPS_newFrame
     /tmp/ccI4P1re.s:1652   .text:0000092c GPS_reset_home_position
     /tmp/ccI4P1re.s:1446   .text:00000768 $d
     /tmp/ccI4P1re.s:5119   .bss:000001a0 nav_loopTimer.9182
     /tmp/ccI4P1re.s:1469   .text:000007bc $t
     /tmp/ccI4P1re.s:2196   .text:00000c9c GPS_distance_cm_bearing
     /tmp/ccI4P1re.s:2321   .text:00000d80 GPS_calc_velocity
     /tmp/ccI4P1re.s:2472   .text:00000e8c GPS_calc_location_error
     /tmp/ccI4P1re.s:2537   .text:00000ee4 GPS_calc_poshold
     /tmp/ccI4P1re.s:3170   .text:000013a4 GPS_calc_desired_speed
     /tmp/ccI4P1re.s:2763   .text:0000109c GPS_calc_nav_rate
     /tmp/ccI4P1re.s:2140   .text:00000c58 check_missed_wp
     /tmp/ccI4P1re.s:1625   .text:000008e0 $d
     /tmp/ccI4P1re.s:1647   .text:0000092c $t
     /tmp/ccI4P1re.s:1966   .text:00000b44 GPS_calc_longitude_scaling
     /tmp/ccI4P1re.s:1706   .text:0000096c $d
     /tmp/ccI4P1re.s:1715   .text:00000984 $t
     /tmp/ccI4P1re.s:1720   .text:00000984 GPS_reset_nav
     /tmp/ccI4P1re.s:1803   .text:00000a14 $d
     /tmp/ccI4P1re.s:1812   .text:00000a2c $t
     /tmp/ccI4P1re.s:1951   .text:00000b24 $d
     /tmp/ccI4P1re.s:1962   .text:00000b44 $t
     /tmp/ccI4P1re.s:2038   .text:00000bb8 $d
     /tmp/ccI4P1re.s:2045   .text:00000bc8 $t
     /tmp/ccI4P1re.s:2050   .text:00000bc8 GPS_set_next_wp
     /tmp/ccI4P1re.s:2123   .text:00000c30 $d
     /tmp/ccI4P1re.s:2136   .text:00000c58 $t
     /tmp/ccI4P1re.s:3279   .text:00001450 wrap_18000
     /tmp/ccI4P1re.s:2186   .text:00000c94 $d
     /tmp/ccI4P1re.s:2192   .text:00000c9c $t
     /tmp/ccI4P1re.s:2310   .text:00000d70 $d
     /tmp/ccI4P1re.s:2317   .text:00000d80 $t
     /tmp/ccI4P1re.s:2457   .text:00000e6c $d
     /tmp/ccI4P1re.s:5110   .bss:00000191 init.9232
     /tmp/ccI4P1re.s:5113   .bss:00000194 last.9231
     /tmp/ccI4P1re.s:5116   .bss:0000019c speed_old.9230
     /tmp/ccI4P1re.s:2468   .text:00000e8c $t
     /tmp/ccI4P1re.s:2528   .text:00000edc $d
     /tmp/ccI4P1re.s:2533   .text:00000ee4 $t
     /tmp/ccI4P1re.s:2745   .text:00001070 $d
     /tmp/ccI4P1re.s:2759   .text:0000109c $t
     /tmp/ccI4P1re.s:3004   .text:00001288 GPS_update_crosstrack
     /tmp/ccI4P1re.s:2987   .text:00001260 $d
     /tmp/ccI4P1re.s:3000   .text:00001288 $t
     /tmp/ccI4P1re.s:3338   .text:00001494 wrap_36000
     /tmp/ccI4P1re.s:3156   .text:00001388 $d
     /tmp/ccI4P1re.s:3166   .text:000013a4 $t
     /tmp/ccI4P1re.s:3266   .text:0000143c $d
     /tmp/ccI4P1re.s:3274   .text:00001450 $t
     /tmp/ccI4P1re.s:3330   .text:00001490 $d
     /tmp/ccI4P1re.s:3334   .text:00001494 $t
     /tmp/ccI4P1re.s:3393   .text:000014d4 GPS_coord_to_degrees
     /tmp/ccI4P1re.s:3586   .text:00001624 $d
     /tmp/ccI4P1re.s:3593   .text:00001634 $t
     /tmp/ccI4P1re.s:3597   .text:00001634 grab_fields
     /tmp/ccI4P1re.s:3714   .text:000016dc hex_c
     /tmp/ccI4P1re.s:3793   .text:00001730 $d
     /tmp/ccI4P1re.s:3799   .text:00001740 $t
     /tmp/ccI4P1re.s:3940   .text:00001840 GPS_NMEA_newFrame
     /tmp/ccI4P1re.s:4511   .text:00001bc8 GPS_UBLOX_newFrame
     /tmp/ccI4P1re.s:3836   .text:00001774 GPS_I2C_newFrame
     /tmp/ccI4P1re.s:3828   .text:00001770 $d
     /tmp/ccI4P1re.s:3832   .text:00001774 $t
     /tmp/ccI4P1re.s:3927   .text:00001828 $d
     /tmp/ccI4P1re.s:3936   .text:00001840 $t
     /tmp/ccI4P1re.s:4258   .text:00001a5c $d
     /tmp/ccI4P1re.s:5097   .bss:0000017c param.9326
     /tmp/ccI4P1re.s:5099   .bss:0000017d offset.9327
     /tmp/ccI4P1re.s:5101   .bss:0000017e parity.9328
     /tmp/ccI4P1re.s:5104   .bss:00000180 string.9329
     /tmp/ccI4P1re.s:5106   .bss:0000018f frame.9331
     /tmp/ccI4P1re.s:5108   .bss:00000190 checksum_param.9330
     /tmp/ccI4P1re.s:4273   .text:00001a90 $t
     /tmp/ccI4P1re.s:4393   .text:00001b54 $d
                            *COM*:00000001 ubs_protocol_bytes
                            *COM*:00000001 ubs_nav_fix_type
                            *COM*:00000001 ubx_nav_status_bits
     /tmp/ccI4P1re.s:4406   .bss:0000012e _ck_a
     /tmp/ccI4P1re.s:4408   .bss:0000012f _ck_b
     /tmp/ccI4P1re.s:4410   .bss:00000130 _step
     /tmp/ccI4P1re.s:4412   .bss:00000131 _msg_id
     /tmp/ccI4P1re.s:4415   .bss:00000132 _payload_length
     /tmp/ccI4P1re.s:4418   .bss:00000134 _payload_counter
     /tmp/ccI4P1re.s:4420   .bss:00000136 next_fix
     /tmp/ccI4P1re.s:4422   .bss:00000137 _class
     /tmp/ccI4P1re.s:4424   .bss:00000138 _new_position
     /tmp/ccI4P1re.s:4426   .bss:00000139 _new_speed
     /tmp/ccI4P1re.s:4428   .bss:0000013a _disable_counter
     /tmp/ccI4P1re.s:4431   .bss:0000013c _buffer
     /tmp/ccI4P1re.s:4434   .text:00001b6c $t
     /tmp/ccI4P1re.s:4439   .text:00001b6c _update_checksum
     /tmp/ccI4P1re.s:4542   .text:00001be8 $d
     /tmp/ccI4P1re.s:4553   .text:00001c0c $t
     /tmp/ccI4P1re.s:4860   .text:00001e1c UBLOX_parse_gps
     /tmp/ccI4P1re.s:4844   .text:00001df8 $d
     /tmp/ccI4P1re.s:4856   .text:00001e1c $t
     /tmp/ccI4P1re.s:4884   .text:00001e34 $d
     /tmp/ccI4P1re.s:4903   .text:00001e78 $t
     /tmp/ccI4P1re.s:5080   .text:00001fa8 $d
                     .debug_frame:00000010 $d
     /tmp/ccI4P1re.s:5128   .text:00001fdc $t
                           .group:00000000 wm4.1.809c0ff785d6d6219236c5d51f444c16
                           .group:00000000 wm4.stdbool.h.29.1c9ee6859ce8145f7838a4f2549ccec2
                           .group:00000000 wm4.newlib.h.8.e1d498e57c12962fc6d7be5061a6981a
                           .group:00000000 wm4.config.h.148.52fe83653334d06815a0c57b59a3e584
                           .group:00000000 wm4._ansi.h.23.95dee4059009fe3ab635a191bb73dc66
                           .group:00000000 wm4.stdlib.h.18.6f6153fd5cb89acd58c0f0ab1f77e147
                           .group:00000000 wm4.stddef.h.187.40b3a084f9bc2c020a9e00b9eabe9c14
                           .group:00000000 wm4._default_types.h.6.1dbd2e581fd590860c7c17f21d147e91
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.349.31f4c5baff3fa2689010b32028da9c47
                           .group:00000000 wm4.reent.h.16.58b23a9f0faf0e7f2dfe7e2d33154afd
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.55.22eafe60f8565d898cbb44515781114b
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.math.h.49.5da716593b937b9fb02bef6ed6537c13
                           .group:00000000 wm4.ctype.h.2.fecd14bb6f4e162ef31748cc97760e21
                           .group:00000000 wm4.string.h.8.ef946ad0bc9ad5c970c365dcd1fc4b0a
                           .group:00000000 wm4.stddef.h.235.d9f4f80b8c4429535175712282cda6a6
                           .group:00000000 wm4.string.h.86.d5c872ff52e2712c985b588a0ef39f3c
                           .group:00000000 wm4.stdio.h.27.f2ac352bab34f31f9f478442827b2ba6
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.types.h.23.0d949686bbcadd1621462d4fa1f884f9
                           .group:00000000 wm4.stddef.h.40.b60a1c1ee3f272eef5327a730cbabca6
                           .group:00000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:00000000 wm4.types.h.80.f2bfdfeee9f340633702c07fad9b5e01
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.63.1f4bc553faa62c5c69dd9cb47f9f1417
                           .group:00000000 wm4.stm32f10x.h.51.b859cb68ed44ee02c916b41cb8c68f1c
                           .group:00000000 wm4.core_cm3.h.25.119fe996be41b62fbd915b59177e39d1
                           .group:00000000 wm4.stm32f10x.h.522.9a9f642c8c562acb4a63ad5d933b7c01
                           .group:00000000 wm4.stm32f10x.h.8304.f7d8ad90959e99679b3257267c3aadfe
                           .group:00000000 wm4.stm32f10x_adc.h.83.4d35a50d598070ecea6f33bcef02c922
                           .group:00000000 wm4.stm32f10x_bkp.h.25.4622919f1e30efdad5eb44e12edd5513
                           .group:00000000 wm4.stm32f10x_can.h.25.48aab46fcce6d08400bf960b028e4698
                           .group:00000000 wm4.stm32f10x_cec.h.25.8f03450e7bbb704d96e7bc73ec0f66a7
                           .group:00000000 wm4.stm32f10x_dac.h.25.6e7f2924f39c60c10815105b99b8b446
                           .group:00000000 wm4.stm32f10x_dbgmcu.h.25.d3351200fc7f9c8615d1ae81d40db08a
                           .group:00000000 wm4.stm32f10x_dma.h.25.94e36204daa98cae5dcc70a10a9694d5
                           .group:00000000 wm4.stm32f10x_exti.h.25.b9064155c5c006b5154b39788c79001a
                           .group:00000000 wm4.stm32f10x_flash.h.25.4be61fcb02863962a1e006449d310650
                           .group:00000000 wm4.stm32f10x_fsmc.h.25.bca154da2699cdb6024c0c6c4fc5aa89
                           .group:00000000 wm4.stm32f10x_gpio.h.25.80c981af0e637567395034c576cfb3ce
                           .group:00000000 wm4.stm32f10x_i2c.h.25.7b6cbaea24c6f25f538f8516d1814cb2
                           .group:00000000 wm4.stm32f10x_iwdg.h.25.da9374ab9856795610487f312ccf3122
                           .group:00000000 wm4.stm32f10x_pwr.h.25.37ef75009f751ef5fe27910e0bf00a62
                           .group:00000000 wm4.stm32f10x_rcc.h.25.968bcf08d813e68e57c280a4da69fa5a
                           .group:00000000 wm4.stm32f10x_rtc.h.25.361142606ba98ddcd10369f321f6e636
                           .group:00000000 wm4.stm32f10x_sdio.h.25.1fb5280a7690ef99070096bf8c866b3a
                           .group:00000000 wm4.stm32f10x_spi.h.25.68b3d5ccfcf895f9fe505ce20c0c300f
                           .group:00000000 wm4.stm32f10x_tim.h.25.21c6ec062f1e74898cb96a57da276fec
                           .group:00000000 wm4.stm32f10x_usart.h.25.29629c699b65db3f3efd3561f66b0bf6
                           .group:00000000 wm4.stm32f10x_wwdg.h.25.dde12201d86b5aa9ecaafb5eccdc6549
                           .group:00000000 wm4.misc.h.25.068e106f368fa5369a681ef57c106f4b
                           .group:00000000 wm4.stdarg.h.31.fa591a4b1df9e413e9f5b8097f9ae89d
                           .group:00000000 wm4.printf.h.118.ab3672ee221610a07496c11f46394049
                           .group:00000000 wm4.board.h.22.3e17243136ce51e89ad1cec38a12dc6f
                           .group:00000000 wm4.drv_adc.h.3.0c1a2a90f0739aca31cc38e66ffab3f5
                           .group:00000000 wm4.drv_pwm.h.3.1f878ba1925c00079825df97e09db15d
                           .group:00000000 wm4.mw.h.4.b0e233e0e6ae9c4c07b142ad41413d4c

UNDEFINED SYMBOLS
delay
i2cRead
GPS_Present
uart2Init
uart2ChangeBaud
uart2Write
sensorsSet
mcfg
uart2TransmitEmpty
__aeabi_i2f
__aeabi_fmul
__aeabi_f2iz
__aeabi_fadd
__aeabi_fcmplt
__aeabi_fcmpgt
__aeabi_fdiv
__aeabi_f2d
__aeabi_ui2f
__aeabi_dmul
__aeabi_ddiv
__aeabi_dadd
__aeabi_fsub
__aeabi_d2f
cfg
millis
GPS_update
f
GPS_numSat
GPS_coord
nav_mode
GPS_home
GPS_distanceToHome
GPS_directionToHome
magHold
heading
GPS_angle
nav_rated
nav
cosf
__aeabi_f2uiz
sqrtf
atan2f
sinf
__ctype_ptr__
GPS_altitude
GPS_speed
GPS_ground_course
