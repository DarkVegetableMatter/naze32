   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.thumb
  20              		.thumb_func
  22              	_putc:
  23              	.LFB29:
  24              		.file 1 "../src/main.c"
   1:../src/main.c **** #include "board.h"
   2:../src/main.c **** #include "mw.h"
   3:../src/main.c **** 
   4:../src/main.c **** extern uint8_t useServo;
   5:../src/main.c **** extern rcReadRawDataPtr rcReadRawFunc;
   6:../src/main.c **** 
   7:../src/main.c **** // two receiver read functions
   8:../src/main.c **** extern uint16_t pwmReadRawRC(uint8_t chan);
   9:../src/main.c **** extern uint16_t spektrumReadRawRC(uint8_t chan);
  10:../src/main.c **** 
  11:../src/main.c **** static void _putc(void *p, char c)
  12:../src/main.c **** {
  25              		.loc 1 12 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 8
  28              		@ frame_needed = 1, uses_anonymous_args = 0
  29 0000 80B5     		push	{r7, lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 8
  32              		.cfi_offset 7, -8
  33              		.cfi_offset 14, -4
  34 0002 82B0     		sub	sp, sp, #8
  35              	.LCFI1:
  36              		.cfi_def_cfa_offset 16
  37 0004 00AF     		add	r7, sp, #0
  38              	.LCFI2:
  39              		.cfi_def_cfa_register 7
  40 0006 7860     		str	r0, [r7, #4]
  41 0008 0B46     		mov	r3, r1
  42 000a FB70     		strb	r3, [r7, #3]
  13:../src/main.c ****     uartWrite(c);
  43              		.loc 1 13 0
  44 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
  45 000e 1846     		mov	r0, r3
  46 0010 FFF7FEFF 		bl	uartWrite
  14:../src/main.c **** }
  47              		.loc 1 14 0
  48 0014 07F10807 		add	r7, r7, #8
  49 0018 BD46     		mov	sp, r7
  50 001a 80BD     		pop	{r7, pc}
  51              		.cfi_endproc
  52              	.LFE29:
  54              		.align	2
  55              		.global	main
  56              		.thumb
  57              		.thumb_func
  59              	main:
  60              	.LFB30:
  15:../src/main.c **** 
  16:../src/main.c **** 
  17:../src/main.c **** int main(void)
  18:../src/main.c **** {
  61              		.loc 1 18 0
  62              		.cfi_startproc
  63              		@ args = 0, pretend = 0, frame = 24
  64              		@ frame_needed = 1, uses_anonymous_args = 0
  65 001c 80B5     		push	{r7, lr}
  66              	.LCFI3:
  67              		.cfi_def_cfa_offset 8
  68              		.cfi_offset 7, -8
  69              		.cfi_offset 14, -4
  70 001e 86B0     		sub	sp, sp, #24
  71              	.LCFI4:
  72              		.cfi_def_cfa_offset 32
  73 0020 00AF     		add	r7, sp, #0
  74              	.LCFI5:
  75              		.cfi_def_cfa_register 7
  19:../src/main.c ****     uint8_t i;
  20:../src/main.c ****     drv_pwm_config_t pwm_params;
  21:../src/main.c ****     drv_adc_config_t adc_params;
  22:../src/main.c **** 
  23:../src/main.c **** #if 0
  24:../src/main.c ****     // PC12, PA15
  25:../src/main.c ****     // using this to write asm for bootloader :)
  26:../src/main.c ****     RCC->APB2ENR |= RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOC | RCC_APB2Periph_AFIO; // GPIOA/C+A
  27:../src/main.c ****     AFIO->MAPR &= 0xF0FFFFFF;
  28:../src/main.c ****     AFIO->MAPR = 0x02000000;
  29:../src/main.c ****     GPIOA->CRH = 0x34444444; // PIN 15 Output 50MHz
  30:../src/main.c ****     GPIOA->BRR = 0x8000; // set low 15
  31:../src/main.c ****     GPIOC->CRH = 0x44434444; // PIN 12 Output 50MHz
  32:../src/main.c ****     GPIOC->BRR = 0x1000; // set low 12
  33:../src/main.c **** #endif
  34:../src/main.c **** 
  35:../src/main.c **** #if 0
  36:../src/main.c ****     // using this to write asm for bootloader :)
  37:../src/main.c ****     RCC->APB2ENR |= RCC_APB2Periph_GPIOB | RCC_APB2Periph_AFIO; // GPIOB + AFIO
  38:../src/main.c ****     AFIO->MAPR &= 0xF0FFFFFF;
  39:../src/main.c ****     AFIO->MAPR = 0x02000000;
  40:../src/main.c ****     GPIOB->BRR = 0x18; // set low 4 & 3
  41:../src/main.c ****     GPIOB->CRL = 0x44433444; // PIN 4 & 3 Output 50MHz
  42:../src/main.c **** #endif
  43:../src/main.c **** 
  44:../src/main.c ****     systemInit();
  76              		.loc 1 44 0
  77 0022 FFF7FEFF 		bl	systemInit
  45:../src/main.c ****     init_printf(NULL, _putc);
  78              		.loc 1 45 0
  79 0026 4FF00000 		mov	r0, #0
  80 002a 9A49     		ldr	r1, .L25
  81 002c FFF7FEFF 		bl	init_printf
  46:../src/main.c **** 
  47:../src/main.c ****     checkFirstTime(false);
  82              		.loc 1 47 0
  83 0030 4FF00000 		mov	r0, #0
  84 0034 FFF7FEFF 		bl	checkFirstTime
  48:../src/main.c ****     readEEPROM();
  85              		.loc 1 48 0
  86 0038 FFF7FEFF 		bl	readEEPROM
  49:../src/main.c **** 
  50:../src/main.c ****     // configure power ADC
  51:../src/main.c ****     if (mcfg.power_adc_channel > 0 && (mcfg.power_adc_channel == 1 || mcfg.power_adc_channel == 9))
  87              		.loc 1 51 0
  88 003c 964B     		ldr	r3, .L25+4
  89 003e 93F8FD30 		ldrb	r3, [r3, #253]	@ zero_extendqisi2
  90 0042 002B     		cmp	r3, #0
  91 0044 0ED0     		beq	.L3
  92              		.loc 1 51 0 is_stmt 0 discriminator 1
  93 0046 944B     		ldr	r3, .L25+4
  94 0048 93F8FD30 		ldrb	r3, [r3, #253]	@ zero_extendqisi2
  95 004c 012B     		cmp	r3, #1
  96 004e 04D0     		beq	.L4
  97 0050 914B     		ldr	r3, .L25+4
  98 0052 93F8FD30 		ldrb	r3, [r3, #253]	@ zero_extendqisi2
  99 0056 092B     		cmp	r3, #9
 100 0058 04D1     		bne	.L3
 101              	.L4:
  52:../src/main.c ****         adc_params.powerAdcChannel = mcfg.power_adc_channel;
 102              		.loc 1 52 0 is_stmt 1
 103 005a 8F4B     		ldr	r3, .L25+4
 104 005c 93F8FD30 		ldrb	r3, [r3, #253]	@ zero_extendqisi2
 105 0060 3B71     		strb	r3, [r7, #4]
 106 0062 07E0     		b	.L5
 107              	.L3:
  53:../src/main.c ****     else {
  54:../src/main.c ****         adc_params.powerAdcChannel = 0;
 108              		.loc 1 54 0
 109 0064 4FF00003 		mov	r3, #0
 110 0068 3B71     		strb	r3, [r7, #4]
  55:../src/main.c ****         mcfg.power_adc_channel = 0;
 111              		.loc 1 55 0
 112 006a 8B4B     		ldr	r3, .L25+4
 113 006c 4FF00002 		mov	r2, #0
 114 0070 83F8FD20 		strb	r2, [r3, #253]
 115              	.L5:
  56:../src/main.c ****     }
  57:../src/main.c **** 
  58:../src/main.c ****     adcInit(&adc_params);
 116              		.loc 1 58 0
 117 0074 07F10403 		add	r3, r7, #4
 118 0078 1846     		mov	r0, r3
 119 007a FFF7FEFF 		bl	adcInit
  59:../src/main.c **** 
  60:../src/main.c ****     // We have these sensors; SENSORS_SET defined in board.h depending on hardware platform
  61:../src/main.c ****     sensorsSet(SENSORS_SET);
 120              		.loc 1 61 0
 121 007e 4FF00700 		mov	r0, #7
 122 0082 FFF7FEFF 		bl	sensorsSet
  62:../src/main.c **** 
  63:../src/main.c ****     mixerInit(); // this will set useServo var depending on mixer type
 123              		.loc 1 63 0
 124 0086 FFF7FEFF 		bl	mixerInit
  64:../src/main.c ****     // when using airplane/wing mixer, servo/motor outputs are remapped
  65:../src/main.c ****     if (mcfg.mixerConfiguration == MULTITYPE_AIRPLANE || mcfg.mixerConfiguration == MULTITYPE_FLYIN
 125              		.loc 1 65 0
 126 008a 834B     		ldr	r3, .L25+4
 127 008c 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 128 008e 0E2B     		cmp	r3, #14
 129 0090 03D0     		beq	.L6
 130              		.loc 1 65 0 is_stmt 0 discriminator 1
 131 0092 814B     		ldr	r3, .L25+4
 132 0094 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 133 0096 082B     		cmp	r3, #8
 134 0098 03D1     		bne	.L7
 135              	.L6:
  66:../src/main.c ****         pwm_params.airplane = true;
 136              		.loc 1 66 0 is_stmt 1
 137 009a 4FF00103 		mov	r3, #1
 138 009e 7B73     		strb	r3, [r7, #13]
 139 00a0 02E0     		b	.L8
 140              	.L7:
  67:../src/main.c ****     else
  68:../src/main.c ****         pwm_params.airplane = false;
 141              		.loc 1 68 0
 142 00a2 4FF00003 		mov	r3, #0
 143 00a6 7B73     		strb	r3, [r7, #13]
 144              	.L8:
  69:../src/main.c ****     pwm_params.useUART = feature(FEATURE_GPS) || feature(FEATURE_SPEKTRUM); // spektrum support use
 145              		.loc 1 69 0
 146 00a8 4FF48070 		mov	r0, #256
 147 00ac FFF7FEFF 		bl	feature
 148 00b0 0346     		mov	r3, r0
 149 00b2 002B     		cmp	r3, #0
 150 00b4 06D1     		bne	.L9
 151              		.loc 1 69 0 is_stmt 0 discriminator 2
 152 00b6 4FF00800 		mov	r0, #8
 153 00ba FFF7FEFF 		bl	feature
 154 00be 0346     		mov	r3, r0
 155 00c0 002B     		cmp	r3, #0
 156 00c2 02D0     		beq	.L10
 157              	.L9:
 158              		.loc 1 69 0 discriminator 1
 159 00c4 4FF00103 		mov	r3, #1
 160 00c8 01E0     		b	.L11
 161              	.L10:
 162              		.loc 1 69 0 discriminator 3
 163 00ca 4FF00003 		mov	r3, #0
 164              	.L11:
 165              		.loc 1 69 0 discriminator 4
 166 00ce 03F00103 		and	r3, r3, #1
 167 00d2 DBB2     		uxtb	r3, r3
 168 00d4 BB72     		strb	r3, [r7, #10]
  70:../src/main.c ****     pwm_params.usePPM = feature(FEATURE_PPM);
 169              		.loc 1 70 0 is_stmt 1 discriminator 4
 170 00d6 4FF00100 		mov	r0, #1
 171 00da FFF7FEFF 		bl	feature
 172 00de 0346     		mov	r3, r0
 173 00e0 7B72     		strb	r3, [r7, #9]
  71:../src/main.c ****     pwm_params.enableInput = !feature(FEATURE_SPEKTRUM); // disable inputs if using spektrum
 174              		.loc 1 71 0 discriminator 4
 175 00e2 4FF00800 		mov	r0, #8
 176 00e6 FFF7FEFF 		bl	feature
 177 00ea 0346     		mov	r3, r0
 178 00ec 002B     		cmp	r3, #0
 179 00ee 0CBF     		ite	eq
 180 00f0 0023     		moveq	r3, #0
 181 00f2 0123     		movne	r3, #1
 182 00f4 DBB2     		uxtb	r3, r3
 183 00f6 83F00103 		eor	r3, r3, #1
 184 00fa DBB2     		uxtb	r3, r3
 185 00fc 03F00103 		and	r3, r3, #1
 186 0100 DBB2     		uxtb	r3, r3
 187 0102 3B72     		strb	r3, [r7, #8]
  72:../src/main.c ****     pwm_params.useServos = useServo;
 188              		.loc 1 72 0 discriminator 4
 189 0104 654B     		ldr	r3, .L25+8
 190 0106 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 191 0108 002B     		cmp	r3, #0
 192 010a 0CBF     		ite	eq
 193 010c 0023     		moveq	r3, #0
 194 010e 0123     		movne	r3, #1
 195 0110 DBB2     		uxtb	r3, r3
 196 0112 FB72     		strb	r3, [r7, #11]
  73:../src/main.c ****     pwm_params.extraServos = cfg.gimbal_flags & GIMBAL_FORWARDAUX;
 197              		.loc 1 73 0 discriminator 4
 198 0114 624B     		ldr	r3, .L25+12
 199 0116 93F88230 		ldrb	r3, [r3, #130]	@ zero_extendqisi2
 200 011a 03F00803 		and	r3, r3, #8
 201 011e 002B     		cmp	r3, #0
 202 0120 0CBF     		ite	eq
 203 0122 0023     		moveq	r3, #0
 204 0124 0123     		movne	r3, #1
 205 0126 DBB2     		uxtb	r3, r3
 206 0128 3B73     		strb	r3, [r7, #12]
  74:../src/main.c ****     pwm_params.motorPwmRate = mcfg.motor_pwm_rate;
 207              		.loc 1 74 0 discriminator 4
 208 012a 5B4B     		ldr	r3, .L25+4
 209 012c B3F8D630 		ldrh	r3, [r3, #214]
 210 0130 3B82     		strh	r3, [r7, #16]	@ movhi
  75:../src/main.c ****     pwm_params.servoPwmRate = mcfg.servo_pwm_rate;
 211              		.loc 1 75 0 discriminator 4
 212 0132 594B     		ldr	r3, .L25+4
 213 0134 B3F8D830 		ldrh	r3, [r3, #216]
 214 0138 7B82     		strh	r3, [r7, #18]	@ movhi
  76:../src/main.c ****     switch (mcfg.power_adc_channel) {
 215              		.loc 1 76 0 discriminator 4
 216 013a 574B     		ldr	r3, .L25+4
 217 013c 93F8FD30 		ldrb	r3, [r3, #253]	@ zero_extendqisi2
 218 0140 012B     		cmp	r3, #1
 219 0142 02D0     		beq	.L13
 220 0144 092B     		cmp	r3, #9
 221 0146 04D0     		beq	.L14
 222              		.loc 1 76 0 is_stmt 0
 223 0148 07E0     		b	.L24
 224              	.L13:
  77:../src/main.c ****         case 1:
  78:../src/main.c ****             pwm_params.adcChannel = PWM2;
 225              		.loc 1 78 0 is_stmt 1
 226 014a 4FF00103 		mov	r3, #1
 227 014e BB73     		strb	r3, [r7, #14]
  79:../src/main.c ****             break;
 228              		.loc 1 79 0
 229 0150 07E0     		b	.L15
 230              	.L14:
  80:../src/main.c ****         case 9:
  81:../src/main.c ****             pwm_params.adcChannel = PWM8;
 231              		.loc 1 81 0
 232 0152 4FF00703 		mov	r3, #7
 233 0156 BB73     		strb	r3, [r7, #14]
  82:../src/main.c ****             break;
 234              		.loc 1 82 0
 235 0158 03E0     		b	.L15
 236              	.L24:
  83:../src/main.c ****         default:
  84:../src/main.c ****             pwm_params.adcChannel = 0;
 237              		.loc 1 84 0
 238 015a 4FF00003 		mov	r3, #0
 239 015e BB73     		strb	r3, [r7, #14]
  85:../src/main.c ****         break;
 240              		.loc 1 85 0
 241 0160 00BF     		nop
 242              	.L15:
  86:../src/main.c ****     }
  87:../src/main.c **** 
  88:../src/main.c ****     pwmInit(&pwm_params);
 243              		.loc 1 88 0
 244 0162 07F10803 		add	r3, r7, #8
 245 0166 1846     		mov	r0, r3
 246 0168 FFF7FEFF 		bl	pwmInit
  89:../src/main.c **** 
  90:../src/main.c ****     // configure PWM/CPPM read function. spektrum below will override that
  91:../src/main.c ****     rcReadRawFunc = pwmReadRawRC;
 247              		.loc 1 91 0
 248 016c 4D4B     		ldr	r3, .L25+16
 249 016e 4E4A     		ldr	r2, .L25+20
 250 0170 1A60     		str	r2, [r3, #0]
  92:../src/main.c **** 
  93:../src/main.c ****     if (feature(FEATURE_SPEKTRUM)) {
 251              		.loc 1 93 0
 252 0172 4FF00800 		mov	r0, #8
 253 0176 FFF7FEFF 		bl	feature
 254 017a 0346     		mov	r3, r0
 255 017c 002B     		cmp	r3, #0
 256 017e 05D0     		beq	.L16
  94:../src/main.c ****         spektrumInit();
 257              		.loc 1 94 0
 258 0180 FFF7FEFF 		bl	spektrumInit
  95:../src/main.c ****         rcReadRawFunc = spektrumReadRawRC;
 259              		.loc 1 95 0
 260 0184 474B     		ldr	r3, .L25+16
 261 0186 494A     		ldr	r2, .L25+24
 262 0188 1A60     		str	r2, [r3, #0]
 263 018a 0CE0     		b	.L17
 264              	.L16:
  96:../src/main.c ****     } else {
  97:../src/main.c ****         // spektrum and GPS are mutually exclusive
  98:../src/main.c ****         // Optional GPS - available in both PPM and PWM input mode, in PWM input, reduces number of
  99:../src/main.c ****         if (feature(FEATURE_GPS))
 265              		.loc 1 99 0
 266 018c 4FF48070 		mov	r0, #256
 267 0190 FFF7FEFF 		bl	feature
 268 0194 0346     		mov	r3, r0
 269 0196 002B     		cmp	r3, #0
 270 0198 05D0     		beq	.L17
 100:../src/main.c ****             gpsInit(mcfg.gps_baudrate);
 271              		.loc 1 100 0
 272 019a 3F4B     		ldr	r3, .L25+4
 273 019c D3F81031 		ldr	r3, [r3, #272]
 274 01a0 1846     		mov	r0, r3
 275 01a2 FFF7FEFF 		bl	gpsInit
 276              	.L17:
 101:../src/main.c ****     }
 102:../src/main.c **** #ifdef SONAR
 103:../src/main.c ****     // sonar stuff only works with PPM
 104:../src/main.c ****     if (feature(FEATURE_PPM)) {
 277              		.loc 1 104 0
 278 01a6 4FF00100 		mov	r0, #1
 279 01aa FFF7FEFF 		bl	feature
 280 01ae 0346     		mov	r3, r0
 281 01b0 002B     		cmp	r3, #0
 282 01b2 08D0     		beq	.L18
 105:../src/main.c ****         if (feature(FEATURE_SONAR))
 283              		.loc 1 105 0
 284 01b4 4FF48060 		mov	r0, #1024
 285 01b8 FFF7FEFF 		bl	feature
 286 01bc 0346     		mov	r3, r0
 287 01be 002B     		cmp	r3, #0
 288 01c0 01D0     		beq	.L18
 106:../src/main.c ****             Sonar_init();
 289              		.loc 1 106 0
 290 01c2 FFF7FEFF 		bl	Sonar_init
 291              	.L18:
 107:../src/main.c ****     }
 108:../src/main.c **** #endif
 109:../src/main.c **** 
 110:../src/main.c ****     LED1_ON;
 292              		.loc 1 110 0
 293 01c6 3A4B     		ldr	r3, .L25+28
 294 01c8 4FF01002 		mov	r2, #16
 295 01cc 5A61     		str	r2, [r3, #20]
 111:../src/main.c ****     LED0_OFF;
 296              		.loc 1 111 0
 297 01ce 384B     		ldr	r3, .L25+28
 298 01d0 4FF00802 		mov	r2, #8
 299 01d4 1A61     		str	r2, [r3, #16]
 112:../src/main.c ****     for (i = 0; i < 10; i++) {
 300              		.loc 1 112 0
 301 01d6 4FF00003 		mov	r3, #0
 302 01da FB75     		strb	r3, [r7, #23]
 303 01dc 1FE0     		b	.L19
 304              	.L20:
 113:../src/main.c ****         LED1_TOGGLE;
 305              		.loc 1 113 0 discriminator 2
 306 01de 344B     		ldr	r3, .L25+28
 307 01e0 334A     		ldr	r2, .L25+28
 308 01e2 D268     		ldr	r2, [r2, #12]
 309 01e4 82F01002 		eor	r2, r2, #16
 310 01e8 DA60     		str	r2, [r3, #12]
 114:../src/main.c ****         LED0_TOGGLE;
 311              		.loc 1 114 0 discriminator 2
 312 01ea 314B     		ldr	r3, .L25+28
 313 01ec 304A     		ldr	r2, .L25+28
 314 01ee D268     		ldr	r2, [r2, #12]
 315 01f0 82F00802 		eor	r2, r2, #8
 316 01f4 DA60     		str	r2, [r3, #12]
 115:../src/main.c ****         delay(25);
 317              		.loc 1 115 0 discriminator 2
 318 01f6 4FF01900 		mov	r0, #25
 319 01fa FFF7FEFF 		bl	delay
 116:../src/main.c ****         BEEP_ON;
 320              		.loc 1 116 0 discriminator 2
 321 01fe 2D4B     		ldr	r3, .L25+32
 322 0200 4FF48052 		mov	r2, #4096
 323 0204 5A61     		str	r2, [r3, #20]
 117:../src/main.c ****         delay(25);
 324              		.loc 1 117 0 discriminator 2
 325 0206 4FF01900 		mov	r0, #25
 326 020a FFF7FEFF 		bl	delay
 118:../src/main.c ****         BEEP_OFF;
 327              		.loc 1 118 0 discriminator 2
 328 020e 294B     		ldr	r3, .L25+32
 329 0210 4FF48052 		mov	r2, #4096
 330 0214 1A61     		str	r2, [r3, #16]
 112:../src/main.c ****     for (i = 0; i < 10; i++) {
 331              		.loc 1 112 0 discriminator 2
 332 0216 FB7D     		ldrb	r3, [r7, #23]
 333 0218 03F10103 		add	r3, r3, #1
 334 021c FB75     		strb	r3, [r7, #23]
 335              	.L19:
 112:../src/main.c ****     for (i = 0; i < 10; i++) {
 336              		.loc 1 112 0 is_stmt 0 discriminator 1
 337 021e FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 338 0220 092B     		cmp	r3, #9
 339 0222 DCD9     		bls	.L20
 119:../src/main.c ****     }
 120:../src/main.c ****     LED0_OFF;
 340              		.loc 1 120 0 is_stmt 1
 341 0224 224B     		ldr	r3, .L25+28
 342 0226 4FF00802 		mov	r2, #8
 343 022a 1A61     		str	r2, [r3, #16]
 121:../src/main.c ****     LED1_OFF;
 344              		.loc 1 121 0
 345 022c 204B     		ldr	r3, .L25+28
 346 022e 4FF01002 		mov	r2, #16
 347 0232 1A61     		str	r2, [r3, #16]
 122:../src/main.c **** 
 123:../src/main.c ****     // drop out any sensors that don't seem to work, init all the others. halt if gyro is dead.
 124:../src/main.c ****     sensorsAutodetect();
 348              		.loc 1 124 0
 349 0234 FFF7FEFF 		bl	sensorsAutodetect
 125:../src/main.c ****     imuInit(); // Mag is initialized inside imuInit
 350              		.loc 1 125 0
 351 0238 FFF7FEFF 		bl	imuInit
 126:../src/main.c **** 
 127:../src/main.c ****     // Check battery type/voltage
 128:../src/main.c ****     if (feature(FEATURE_VBAT))
 352              		.loc 1 128 0
 353 023c 4FF00200 		mov	r0, #2
 354 0240 FFF7FEFF 		bl	feature
 355 0244 0346     		mov	r3, r0
 356 0246 002B     		cmp	r3, #0
 357 0248 01D0     		beq	.L21
 129:../src/main.c ****         batteryInit();
 358              		.loc 1 129 0
 359 024a FFF7FEFF 		bl	batteryInit
 360              	.L21:
 130:../src/main.c **** 
 131:../src/main.c ****     serialInit(mcfg.serial_baudrate);
 361              		.loc 1 131 0
 362 024e 124B     		ldr	r3, .L25+4
 363 0250 D3F81431 		ldr	r3, [r3, #276]
 364 0254 1846     		mov	r0, r3
 365 0256 FFF7FEFF 		bl	serialInit
 132:../src/main.c **** 
 133:../src/main.c ****     previousTime = micros();
 366              		.loc 1 133 0
 367 025a FFF7FEFF 		bl	micros
 368 025e 0246     		mov	r2, r0
 369 0260 154B     		ldr	r3, .L25+36
 370 0262 1A60     		str	r2, [r3, #0]
 134:../src/main.c ****     if (mcfg.mixerConfiguration == MULTITYPE_GIMBAL)
 371              		.loc 1 134 0
 372 0264 0C4B     		ldr	r3, .L25+4
 373 0266 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 374 0268 052B     		cmp	r3, #5
 375 026a 03D1     		bne	.L22
 135:../src/main.c ****         calibratingA = 400;
 376              		.loc 1 135 0
 377 026c 134B     		ldr	r3, .L25+40
 378 026e 4FF4C872 		mov	r2, #400
 379 0272 1A80     		strh	r2, [r3, #0]	@ movhi
 380              	.L22:
 136:../src/main.c ****     calibratingG = 1000;
 381              		.loc 1 136 0
 382 0274 124B     		ldr	r3, .L25+44
 383 0276 4FF47A72 		mov	r2, #1000
 384 027a 1A80     		strh	r2, [r3, #0]	@ movhi
 137:../src/main.c ****     calibratingB = 200;             // 10 seconds init_delay + 200 * 25 ms = 15 seconds before grou
 385              		.loc 1 137 0
 386 027c 114B     		ldr	r3, .L25+48
 387 027e 4FF0C802 		mov	r2, #200
 388 0282 1A80     		strh	r2, [r3, #0]	@ movhi
 138:../src/main.c ****     f.SMALL_ANGLES_25 = 1;
 389              		.loc 1 138 0
 390 0284 104B     		ldr	r3, .L25+52
 391 0286 4FF00102 		mov	r2, #1
 392 028a 5A73     		strb	r2, [r3, #13]
 393              	.L23:
 139:../src/main.c **** 
 140:../src/main.c ****     // loopy
 141:../src/main.c ****     while (1) {
 142:../src/main.c ****         loop();
 394              		.loc 1 142 0 discriminator 1
 395 028c FFF7FEFF 		bl	loop
 143:../src/main.c ****     }
 396              		.loc 1 143 0 discriminator 1
 397 0290 FCE7     		b	.L23
 398              	.L26:
 399 0292 00BF     		.align	2
 400              	.L25:
 401 0294 00000000 		.word	_putc
 402 0298 00000000 		.word	mcfg
 403 029c 00000000 		.word	useServo
 404 02a0 00000000 		.word	cfg
 405 02a4 00000000 		.word	rcReadRawFunc
 406 02a8 00000000 		.word	pwmReadRawRC
 407 02ac 00000000 		.word	spektrumReadRawRC
 408 02b0 000C0140 		.word	1073810432
 409 02b4 00080140 		.word	1073809408
 410 02b8 00000000 		.word	previousTime
 411 02bc 00000000 		.word	calibratingA
 412 02c0 00000000 		.word	calibratingG
 413 02c4 00000000 		.word	calibratingB
 414 02c8 00000000 		.word	f
 415              		.cfi_endproc
 416              	.LFE30:
 418              		.align	2
 419              		.global	HardFault_Handler
 420              		.thumb
 421              		.thumb_func
 423              	HardFault_Handler:
 424              	.LFB31:
 144:../src/main.c **** }
 145:../src/main.c **** 
 146:../src/main.c **** void HardFault_Handler(void)
 147:../src/main.c **** {
 425              		.loc 1 147 0
 426              		.cfi_startproc
 427              		@ args = 0, pretend = 0, frame = 0
 428              		@ frame_needed = 1, uses_anonymous_args = 0
 429 02cc 80B5     		push	{r7, lr}
 430              	.LCFI6:
 431              		.cfi_def_cfa_offset 8
 432              		.cfi_offset 7, -8
 433              		.cfi_offset 14, -4
 434 02ce 00AF     		add	r7, sp, #0
 435              	.LCFI7:
 436              		.cfi_def_cfa_register 7
 148:../src/main.c ****     // fall out of the sky
 149:../src/main.c ****     writeAllMotors(mcfg.mincommand);
 437              		.loc 1 149 0
 438 02d0 044B     		ldr	r3, .L29
 439 02d2 B3F8D430 		ldrh	r3, [r3, #212]
 440 02d6 9BB2     		uxth	r3, r3
 441 02d8 1BB2     		sxth	r3, r3
 442 02da 1846     		mov	r0, r3
 443 02dc FFF7FEFF 		bl	writeAllMotors
 444              	.L28:
 150:../src/main.c ****     while (1);
 445              		.loc 1 150 0 discriminator 1
 446 02e0 FEE7     		b	.L28
 447              	.L30:
 448 02e2 00BF     		.align	2
 449              	.L29:
 450 02e4 00000000 		.word	mcfg
 451              		.cfi_endproc
 452              	.LFE31:
 454              	.Letext0:
 455              		.file 2 "/home/oni/ARM_EABI/bin/../lib/gcc/arm-none-eabi/4.7.2/../../../../arm-none-eabi/include/s
 456              		.file 3 "/home/oni/workspace/Naze32/lib/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
 457              		.file 4 "../src/board.h"
 458              		.file 5 "../src/drv_adc.h"
 459              		.file 6 "../src/drv_pwm.h"
 460              		.file 7 "../src/mw.h"
 461              		.file 8 "/home/oni/workspace/Naze32/lib/CMSIS/CM3/CoreSupport/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccLF5fie.s:18     .text:00000000 $t
     /tmp/ccLF5fie.s:22     .text:00000000 _putc
     /tmp/ccLF5fie.s:59     .text:0000001c main
     /tmp/ccLF5fie.s:401    .text:00000294 $d
     /tmp/ccLF5fie.s:418    .text:000002cc $t
     /tmp/ccLF5fie.s:423    .text:000002cc HardFault_Handler
     /tmp/ccLF5fie.s:450    .text:000002e4 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.809c0ff785d6d6219236c5d51f444c16
                           .group:00000000 wm4.stdbool.h.29.1c9ee6859ce8145f7838a4f2549ccec2
                           .group:00000000 wm4.newlib.h.8.e1d498e57c12962fc6d7be5061a6981a
                           .group:00000000 wm4.config.h.148.52fe83653334d06815a0c57b59a3e584
                           .group:00000000 wm4._ansi.h.23.95dee4059009fe3ab635a191bb73dc66
                           .group:00000000 wm4.stdlib.h.18.6f6153fd5cb89acd58c0f0ab1f77e147
                           .group:00000000 wm4.stddef.h.187.40b3a084f9bc2c020a9e00b9eabe9c14
                           .group:00000000 wm4._default_types.h.6.1dbd2e581fd590860c7c17f21d147e91
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.349.31f4c5baff3fa2689010b32028da9c47
                           .group:00000000 wm4.reent.h.16.58b23a9f0faf0e7f2dfe7e2d33154afd
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.55.22eafe60f8565d898cbb44515781114b
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.math.h.49.5da716593b937b9fb02bef6ed6537c13
                           .group:00000000 wm4.ctype.h.2.fecd14bb6f4e162ef31748cc97760e21
                           .group:00000000 wm4.string.h.8.ef946ad0bc9ad5c970c365dcd1fc4b0a
                           .group:00000000 wm4.stddef.h.235.d9f4f80b8c4429535175712282cda6a6
                           .group:00000000 wm4.string.h.86.d5c872ff52e2712c985b588a0ef39f3c
                           .group:00000000 wm4.stdio.h.27.f2ac352bab34f31f9f478442827b2ba6
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.types.h.23.0d949686bbcadd1621462d4fa1f884f9
                           .group:00000000 wm4.stddef.h.40.b60a1c1ee3f272eef5327a730cbabca6
                           .group:00000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:00000000 wm4.types.h.80.f2bfdfeee9f340633702c07fad9b5e01
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.63.1f4bc553faa62c5c69dd9cb47f9f1417
                           .group:00000000 wm4.stm32f10x.h.51.b859cb68ed44ee02c916b41cb8c68f1c
                           .group:00000000 wm4.core_cm3.h.25.119fe996be41b62fbd915b59177e39d1
                           .group:00000000 wm4.stm32f10x.h.522.9a9f642c8c562acb4a63ad5d933b7c01
                           .group:00000000 wm4.stm32f10x.h.8304.f7d8ad90959e99679b3257267c3aadfe
                           .group:00000000 wm4.stm32f10x_adc.h.83.4d35a50d598070ecea6f33bcef02c922
                           .group:00000000 wm4.stm32f10x_bkp.h.25.4622919f1e30efdad5eb44e12edd5513
                           .group:00000000 wm4.stm32f10x_can.h.25.48aab46fcce6d08400bf960b028e4698
                           .group:00000000 wm4.stm32f10x_cec.h.25.8f03450e7bbb704d96e7bc73ec0f66a7
                           .group:00000000 wm4.stm32f10x_dac.h.25.6e7f2924f39c60c10815105b99b8b446
                           .group:00000000 wm4.stm32f10x_dbgmcu.h.25.d3351200fc7f9c8615d1ae81d40db08a
                           .group:00000000 wm4.stm32f10x_dma.h.25.94e36204daa98cae5dcc70a10a9694d5
                           .group:00000000 wm4.stm32f10x_exti.h.25.b9064155c5c006b5154b39788c79001a
                           .group:00000000 wm4.stm32f10x_flash.h.25.4be61fcb02863962a1e006449d310650
                           .group:00000000 wm4.stm32f10x_fsmc.h.25.bca154da2699cdb6024c0c6c4fc5aa89
                           .group:00000000 wm4.stm32f10x_gpio.h.25.80c981af0e637567395034c576cfb3ce
                           .group:00000000 wm4.stm32f10x_i2c.h.25.7b6cbaea24c6f25f538f8516d1814cb2
                           .group:00000000 wm4.stm32f10x_iwdg.h.25.da9374ab9856795610487f312ccf3122
                           .group:00000000 wm4.stm32f10x_pwr.h.25.37ef75009f751ef5fe27910e0bf00a62
                           .group:00000000 wm4.stm32f10x_rcc.h.25.968bcf08d813e68e57c280a4da69fa5a
                           .group:00000000 wm4.stm32f10x_rtc.h.25.361142606ba98ddcd10369f321f6e636
                           .group:00000000 wm4.stm32f10x_sdio.h.25.1fb5280a7690ef99070096bf8c866b3a
                           .group:00000000 wm4.stm32f10x_spi.h.25.68b3d5ccfcf895f9fe505ce20c0c300f
                           .group:00000000 wm4.stm32f10x_tim.h.25.21c6ec062f1e74898cb96a57da276fec
                           .group:00000000 wm4.stm32f10x_usart.h.25.29629c699b65db3f3efd3561f66b0bf6
                           .group:00000000 wm4.stm32f10x_wwdg.h.25.dde12201d86b5aa9ecaafb5eccdc6549
                           .group:00000000 wm4.misc.h.25.068e106f368fa5369a681ef57c106f4b
                           .group:00000000 wm4.stdarg.h.31.fa591a4b1df9e413e9f5b8097f9ae89d
                           .group:00000000 wm4.printf.h.118.ab3672ee221610a07496c11f46394049
                           .group:00000000 wm4.board.h.22.3e17243136ce51e89ad1cec38a12dc6f
                           .group:00000000 wm4.drv_adc.h.3.0c1a2a90f0739aca31cc38e66ffab3f5
                           .group:00000000 wm4.drv_pwm.h.3.1f878ba1925c00079825df97e09db15d
                           .group:00000000 wm4.mw.h.4.b0e233e0e6ae9c4c07b142ad41413d4c

UNDEFINED SYMBOLS
uartWrite
systemInit
init_printf
checkFirstTime
readEEPROM
adcInit
sensorsSet
mixerInit
feature
pwmInit
spektrumInit
gpsInit
Sonar_init
delay
sensorsAutodetect
imuInit
batteryInit
serialInit
micros
loop
mcfg
useServo
cfg
rcReadRawFunc
pwmReadRawRC
spektrumReadRawRC
previousTime
calibratingA
calibratingG
calibratingB
f
writeAllMotors
