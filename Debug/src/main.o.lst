   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.thumb
  20              		.thumb_func
  22              	_putc:
  23              	.LFB29:
  24              		.file 1 "../src/main.c"
   1:../src/main.c **** #include "board.h"
   2:../src/main.c **** #include "mw.h"
   3:../src/main.c **** 
   4:../src/main.c **** extern uint8_t useServo;
   5:../src/main.c **** extern rcReadRawDataPtr rcReadRawFunc;
   6:../src/main.c **** 
   7:../src/main.c **** // two receiver read functions
   8:../src/main.c **** extern uint16_t pwmReadRawRC(uint8_t chan);
   9:../src/main.c **** extern uint16_t spektrumReadRawRC(uint8_t chan);
  10:../src/main.c **** 
  11:../src/main.c **** static void _putc(void *p, char c)
  12:../src/main.c **** {
  25              		.loc 1 12 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 8
  28              		@ frame_needed = 1, uses_anonymous_args = 0
  29 0000 80B5     		push	{r7, lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 8
  32              		.cfi_offset 7, -8
  33              		.cfi_offset 14, -4
  34 0002 82B0     		sub	sp, sp, #8
  35              	.LCFI1:
  36              		.cfi_def_cfa_offset 16
  37 0004 00AF     		add	r7, sp, #0
  38              	.LCFI2:
  39              		.cfi_def_cfa_register 7
  40 0006 7860     		str	r0, [r7, #4]
  41 0008 0B46     		mov	r3, r1
  42 000a FB70     		strb	r3, [r7, #3]
  13:../src/main.c ****     uartWrite(c);
  43              		.loc 1 13 0
  44 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
  45 000e 1846     		mov	r0, r3
  46 0010 FFF7FEFF 		bl	uartWrite
  14:../src/main.c **** }
  47              		.loc 1 14 0
  48 0014 07F10807 		add	r7, r7, #8
  49 0018 BD46     		mov	sp, r7
  50 001a 80BD     		pop	{r7, pc}
  51              		.cfi_endproc
  52              	.LFE29:
  54              		.align	2
  55              		.global	main
  56              		.thumb
  57              		.thumb_func
  59              	main:
  60              	.LFB30:
  15:../src/main.c **** 
  16:../src/main.c **** 
  17:../src/main.c **** int main(void)
  18:../src/main.c **** {
  61              		.loc 1 18 0
  62              		.cfi_startproc
  63              		@ args = 0, pretend = 0, frame = 24
  64              		@ frame_needed = 1, uses_anonymous_args = 0
  65 001c 80B5     		push	{r7, lr}
  66              	.LCFI3:
  67              		.cfi_def_cfa_offset 8
  68              		.cfi_offset 7, -8
  69              		.cfi_offset 14, -4
  70 001e 86B0     		sub	sp, sp, #24
  71              	.LCFI4:
  72              		.cfi_def_cfa_offset 32
  73 0020 00AF     		add	r7, sp, #0
  74              	.LCFI5:
  75              		.cfi_def_cfa_register 7
  19:../src/main.c ****     uint8_t i;
  20:../src/main.c ****     drv_pwm_config_t pwm_params;
  21:../src/main.c ****     drv_adc_config_t adc_params;
  22:../src/main.c **** 
  23:../src/main.c **** #if 0
  24:../src/main.c ****     // PC12, PA15
  25:../src/main.c ****     // using this to write asm for bootloader :)
  26:../src/main.c ****     RCC->APB2ENR |= RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOC | RCC_APB2Periph_AFIO; // GPIOA/C+A
  27:../src/main.c ****     AFIO->MAPR &= 0xF0FFFFFF;
  28:../src/main.c ****     AFIO->MAPR = 0x02000000;
  29:../src/main.c ****     GPIOA->CRH = 0x34444444; // PIN 15 Output 50MHz
  30:../src/main.c ****     GPIOA->BRR = 0x8000; // set low 15
  31:../src/main.c ****     GPIOC->CRH = 0x44434444; // PIN 12 Output 50MHz
  32:../src/main.c ****     GPIOC->BRR = 0x1000; // set low 12
  33:../src/main.c **** #endif
  34:../src/main.c **** 
  35:../src/main.c **** #if 0
  36:../src/main.c ****     // using this to write asm for bootloader :)
  37:../src/main.c ****     RCC->APB2ENR |= RCC_APB2Periph_GPIOB | RCC_APB2Periph_AFIO; // GPIOB + AFIO
  38:../src/main.c ****     AFIO->MAPR &= 0xF0FFFFFF;
  39:../src/main.c ****     AFIO->MAPR = 0x02000000;
  40:../src/main.c ****     GPIOB->BRR = 0x18; // set low 4 & 3
  41:../src/main.c ****     GPIOB->CRL = 0x44433444; // PIN 4 & 3 Output 50MHz
  42:../src/main.c **** #endif
  43:../src/main.c **** 
  44:../src/main.c ****     systemInit();
  76              		.loc 1 44 0
  77 0022 FFF7FEFF 		bl	systemInit
  45:../src/main.c ****     init_printf(NULL, _putc);
  78              		.loc 1 45 0
  79 0026 4FF00000 		mov	r0, #0
  80 002a 9949     		ldr	r1, .L24
  81 002c FFF7FEFF 		bl	init_printf
  46:../src/main.c **** 
  47:../src/main.c ****     checkFirstTime(false);
  82              		.loc 1 47 0
  83 0030 4FF00000 		mov	r0, #0
  84 0034 FFF7FEFF 		bl	checkFirstTime
  48:../src/main.c ****     readEEPROM();
  85              		.loc 1 48 0
  86 0038 FFF7FEFF 		bl	readEEPROM
  49:../src/main.c **** 
  50:../src/main.c ****     // configure power ADC
  51:../src/main.c ****     if (mcfg.power_adc_channel > 0 && (mcfg.power_adc_channel == 1 || mcfg.power_adc_channel == 9))
  87              		.loc 1 51 0
  88 003c 954B     		ldr	r3, .L24+4
  89 003e 93F8FD30 		ldrb	r3, [r3, #253]	@ zero_extendqisi2
  90 0042 002B     		cmp	r3, #0
  91 0044 0ED0     		beq	.L3
  92              		.loc 1 51 0 is_stmt 0 discriminator 1
  93 0046 934B     		ldr	r3, .L24+4
  94 0048 93F8FD30 		ldrb	r3, [r3, #253]	@ zero_extendqisi2
  95 004c 012B     		cmp	r3, #1
  96 004e 04D0     		beq	.L4
  97 0050 904B     		ldr	r3, .L24+4
  98 0052 93F8FD30 		ldrb	r3, [r3, #253]	@ zero_extendqisi2
  99 0056 092B     		cmp	r3, #9
 100 0058 04D1     		bne	.L3
 101              	.L4:
  52:../src/main.c ****         adc_params.powerAdcChannel = mcfg.power_adc_channel;
 102              		.loc 1 52 0 is_stmt 1
 103 005a 8E4B     		ldr	r3, .L24+4
 104 005c 93F8FD30 		ldrb	r3, [r3, #253]	@ zero_extendqisi2
 105 0060 3B71     		strb	r3, [r7, #4]
 106 0062 07E0     		b	.L5
 107              	.L3:
  53:../src/main.c ****     else {
  54:../src/main.c ****         adc_params.powerAdcChannel = 0;
 108              		.loc 1 54 0
 109 0064 4FF00003 		mov	r3, #0
 110 0068 3B71     		strb	r3, [r7, #4]
  55:../src/main.c ****         mcfg.power_adc_channel = 0;
 111              		.loc 1 55 0
 112 006a 8A4B     		ldr	r3, .L24+4
 113 006c 4FF00002 		mov	r2, #0
 114 0070 83F8FD20 		strb	r2, [r3, #253]
 115              	.L5:
  56:../src/main.c ****     }
  57:../src/main.c **** 
  58:../src/main.c ****     adcInit(&adc_params);
 116              		.loc 1 58 0
 117 0074 07F10403 		add	r3, r7, #4
 118 0078 1846     		mov	r0, r3
 119 007a FFF7FEFF 		bl	adcInit
  59:../src/main.c **** 
  60:../src/main.c ****     // We have these sensors; SENSORS_SET defined in board.h depending on hardware platform
  61:../src/main.c ****     sensorsSet(SENSORS_SET);
 120              		.loc 1 61 0
 121 007e 4FF00700 		mov	r0, #7
 122 0082 FFF7FEFF 		bl	sensorsSet
  62:../src/main.c **** 
  63:../src/main.c ****     mixerInit(); // this will set useServo var depending on mixer type
 123              		.loc 1 63 0
 124 0086 FFF7FEFF 		bl	mixerInit
  64:../src/main.c ****     // when using airplane/wing mixer, servo/motor outputs are remapped
  65:../src/main.c ****     if (mcfg.mixerConfiguration == MULTITYPE_AIRPLANE || mcfg.mixerConfiguration == MULTITYPE_FLYIN
 125              		.loc 1 65 0
 126 008a 824B     		ldr	r3, .L24+4
 127 008c 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 128 008e 0E2B     		cmp	r3, #14
 129 0090 03D0     		beq	.L6
 130              		.loc 1 65 0 is_stmt 0 discriminator 1
 131 0092 804B     		ldr	r3, .L24+4
 132 0094 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 133 0096 082B     		cmp	r3, #8
 134 0098 03D1     		bne	.L7
 135              	.L6:
  66:../src/main.c ****         pwm_params.airplane = true;
 136              		.loc 1 66 0 is_stmt 1
 137 009a 4FF00103 		mov	r3, #1
 138 009e 7B73     		strb	r3, [r7, #13]
 139 00a0 02E0     		b	.L8
 140              	.L7:
  67:../src/main.c ****     else
  68:../src/main.c ****         pwm_params.airplane = false;
 141              		.loc 1 68 0
 142 00a2 4FF00003 		mov	r3, #0
 143 00a6 7B73     		strb	r3, [r7, #13]
 144              	.L8:
  69:../src/main.c ****     pwm_params.useUART = feature(FEATURE_GPS) || feature(FEATURE_SPEKTRUM); // spektrum support use
 145              		.loc 1 69 0
 146 00a8 4FF48070 		mov	r0, #256
 147 00ac FFF7FEFF 		bl	feature
 148 00b0 0346     		mov	r3, r0
 149 00b2 002B     		cmp	r3, #0
 150 00b4 06D1     		bne	.L9
 151              		.loc 1 69 0 is_stmt 0 discriminator 2
 152 00b6 4FF00800 		mov	r0, #8
 153 00ba FFF7FEFF 		bl	feature
 154 00be 0346     		mov	r3, r0
 155 00c0 002B     		cmp	r3, #0
 156 00c2 02D0     		beq	.L10
 157              	.L9:
 158              		.loc 1 69 0 discriminator 1
 159 00c4 4FF00103 		mov	r3, #1
 160 00c8 01E0     		b	.L11
 161              	.L10:
 162              		.loc 1 69 0 discriminator 3
 163 00ca 4FF00003 		mov	r3, #0
 164              	.L11:
 165              		.loc 1 69 0 discriminator 4
 166 00ce 03F00103 		and	r3, r3, #1
 167 00d2 DBB2     		uxtb	r3, r3
 168 00d4 BB72     		strb	r3, [r7, #10]
  70:../src/main.c ****     pwm_params.usePPM = feature(FEATURE_PPM);
 169              		.loc 1 70 0 is_stmt 1 discriminator 4
 170 00d6 4FF00100 		mov	r0, #1
 171 00da FFF7FEFF 		bl	feature
 172 00de 0346     		mov	r3, r0
 173 00e0 7B72     		strb	r3, [r7, #9]
  71:../src/main.c ****     pwm_params.enableInput = !feature(FEATURE_SPEKTRUM); // disable inputs if using spektrum
 174              		.loc 1 71 0 discriminator 4
 175 00e2 4FF00800 		mov	r0, #8
 176 00e6 FFF7FEFF 		bl	feature
 177 00ea 0346     		mov	r3, r0
 178 00ec 002B     		cmp	r3, #0
 179 00ee 0CBF     		ite	eq
 180 00f0 0023     		moveq	r3, #0
 181 00f2 0123     		movne	r3, #1
 182 00f4 DBB2     		uxtb	r3, r3
 183 00f6 83F00103 		eor	r3, r3, #1
 184 00fa DBB2     		uxtb	r3, r3
 185 00fc 03F00103 		and	r3, r3, #1
 186 0100 DBB2     		uxtb	r3, r3
 187 0102 3B72     		strb	r3, [r7, #8]
  72:../src/main.c ****     pwm_params.useServos = useServo;
 188              		.loc 1 72 0 discriminator 4
 189 0104 644B     		ldr	r3, .L24+8
 190 0106 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 191 0108 002B     		cmp	r3, #0
 192 010a 0CBF     		ite	eq
 193 010c 0023     		moveq	r3, #0
 194 010e 0123     		movne	r3, #1
 195 0110 DBB2     		uxtb	r3, r3
 196 0112 FB72     		strb	r3, [r7, #11]
  73:../src/main.c ****     pwm_params.extraServos = cfg.gimbal_flags & GIMBAL_FORWARDAUX;
 197              		.loc 1 73 0 discriminator 4
 198 0114 614B     		ldr	r3, .L24+12
 199 0116 93F88230 		ldrb	r3, [r3, #130]	@ zero_extendqisi2
 200 011a 03F00803 		and	r3, r3, #8
 201 011e 002B     		cmp	r3, #0
 202 0120 0CBF     		ite	eq
 203 0122 0023     		moveq	r3, #0
 204 0124 0123     		movne	r3, #1
 205 0126 DBB2     		uxtb	r3, r3
 206 0128 3B73     		strb	r3, [r7, #12]
  74:../src/main.c ****     pwm_params.motorPwmRate = mcfg.motor_pwm_rate;
 207              		.loc 1 74 0 discriminator 4
 208 012a 5A4B     		ldr	r3, .L24+4
 209 012c B3F8D630 		ldrh	r3, [r3, #214]
 210 0130 3B82     		strh	r3, [r7, #16]	@ movhi
  75:../src/main.c ****     pwm_params.servoPwmRate = mcfg.servo_pwm_rate;
 211              		.loc 1 75 0 discriminator 4
 212 0132 584B     		ldr	r3, .L24+4
 213 0134 B3F8D830 		ldrh	r3, [r3, #216]
 214 0138 7B82     		strh	r3, [r7, #18]	@ movhi
  76:../src/main.c ****     switch (mcfg.power_adc_channel) {
 215              		.loc 1 76 0 discriminator 4
 216 013a 564B     		ldr	r3, .L24+4
 217 013c 93F8FD30 		ldrb	r3, [r3, #253]	@ zero_extendqisi2
 218 0140 012B     		cmp	r3, #1
 219 0142 02D0     		beq	.L13
 220 0144 092B     		cmp	r3, #9
 221 0146 04D0     		beq	.L14
 222              		.loc 1 76 0 is_stmt 0
 223 0148 07E0     		b	.L23
 224              	.L13:
  77:../src/main.c ****         case 1:
  78:../src/main.c ****             pwm_params.adcChannel = PWM2;
 225              		.loc 1 78 0 is_stmt 1
 226 014a 4FF00103 		mov	r3, #1
 227 014e BB73     		strb	r3, [r7, #14]
  79:../src/main.c ****             break;
 228              		.loc 1 79 0
 229 0150 07E0     		b	.L15
 230              	.L14:
  80:../src/main.c ****         case 9:
  81:../src/main.c ****             pwm_params.adcChannel = PWM8;
 231              		.loc 1 81 0
 232 0152 4FF00703 		mov	r3, #7
 233 0156 BB73     		strb	r3, [r7, #14]
  82:../src/main.c ****             break;
 234              		.loc 1 82 0
 235 0158 03E0     		b	.L15
 236              	.L23:
  83:../src/main.c ****         default:
  84:../src/main.c ****             pwm_params.adcChannel = 0;
 237              		.loc 1 84 0
 238 015a 4FF00003 		mov	r3, #0
 239 015e BB73     		strb	r3, [r7, #14]
  85:../src/main.c ****         break;
 240              		.loc 1 85 0
 241 0160 00BF     		nop
 242              	.L15:
  86:../src/main.c ****     }
  87:../src/main.c **** 
  88:../src/main.c ****     pwmInit(&pwm_params);
 243              		.loc 1 88 0
 244 0162 07F10803 		add	r3, r7, #8
 245 0166 1846     		mov	r0, r3
 246 0168 FFF7FEFF 		bl	pwmInit
  89:../src/main.c **** 
  90:../src/main.c ****     // configure PWM/CPPM read function. spektrum below will override that
  91:../src/main.c ****     rcReadRawFunc = pwmReadRawRC;
 247              		.loc 1 91 0
 248 016c 4C4B     		ldr	r3, .L24+16
 249 016e 4D4A     		ldr	r2, .L24+20
 250 0170 1A60     		str	r2, [r3, #0]
  92:../src/main.c **** 
  93:../src/main.c ****     if (feature(FEATURE_SPEKTRUM)) {
 251              		.loc 1 93 0
 252 0172 4FF00800 		mov	r0, #8
 253 0176 FFF7FEFF 		bl	feature
 254 017a 0346     		mov	r3, r0
 255 017c 002B     		cmp	r3, #0
 256 017e 11D0     		beq	.L16
  94:../src/main.c ****         spektrumInit();
 257              		.loc 1 94 0
 258 0180 FFF7FEFF 		bl	spektrumInit
  95:../src/main.c ****         rcReadRawFunc = spektrumReadRawRC;
 259              		.loc 1 95 0
 260 0184 464B     		ldr	r3, .L24+16
 261 0186 484A     		ldr	r2, .L24+24
 262 0188 1A60     		str	r2, [r3, #0]
  96:../src/main.c ****     if (feature(FEATURE_GPS))
 263              		.loc 1 96 0
 264 018a 4FF48070 		mov	r0, #256
 265 018e FFF7FEFF 		bl	feature
 266 0192 0346     		mov	r3, r0
 267 0194 002B     		cmp	r3, #0
 268 0196 05D0     		beq	.L16
  97:../src/main.c ****         gpsInit(mcfg.gps_baudrate);
 269              		.loc 1 97 0
 270 0198 3E4B     		ldr	r3, .L24+4
 271 019a D3F81031 		ldr	r3, [r3, #272]
 272 019e 1846     		mov	r0, r3
 273 01a0 FFF7FEFF 		bl	gpsInit
 274              	.L16:
  98:../src/main.c ****     }
  99:../src/main.c **** #ifdef SONAR
 100:../src/main.c ****     // sonar stuff only works with PPM
 101:../src/main.c ****     if (feature(FEATURE_PPM)) {
 275              		.loc 1 101 0
 276 01a4 4FF00100 		mov	r0, #1
 277 01a8 FFF7FEFF 		bl	feature
 278 01ac 0346     		mov	r3, r0
 279 01ae 002B     		cmp	r3, #0
 280 01b0 08D0     		beq	.L17
 102:../src/main.c ****         if (feature(FEATURE_SONAR))
 281              		.loc 1 102 0
 282 01b2 4FF48060 		mov	r0, #1024
 283 01b6 FFF7FEFF 		bl	feature
 284 01ba 0346     		mov	r3, r0
 285 01bc 002B     		cmp	r3, #0
 286 01be 01D0     		beq	.L17
 103:../src/main.c ****             Sonar_init();
 287              		.loc 1 103 0
 288 01c0 FFF7FEFF 		bl	Sonar_init
 289              	.L17:
 104:../src/main.c ****     }
 105:../src/main.c **** #endif
 106:../src/main.c **** 
 107:../src/main.c ****     LED1_ON;
 290              		.loc 1 107 0
 291 01c4 394B     		ldr	r3, .L24+28
 292 01c6 4FF01002 		mov	r2, #16
 293 01ca 5A61     		str	r2, [r3, #20]
 108:../src/main.c ****     LED0_OFF;
 294              		.loc 1 108 0
 295 01cc 374B     		ldr	r3, .L24+28
 296 01ce 4FF00802 		mov	r2, #8
 297 01d2 1A61     		str	r2, [r3, #16]
 109:../src/main.c ****     for (i = 0; i < 10; i++) {
 298              		.loc 1 109 0
 299 01d4 4FF00003 		mov	r3, #0
 300 01d8 FB75     		strb	r3, [r7, #23]
 301 01da 1FE0     		b	.L18
 302              	.L19:
 110:../src/main.c ****         LED1_TOGGLE;
 303              		.loc 1 110 0 discriminator 2
 304 01dc 334B     		ldr	r3, .L24+28
 305 01de 334A     		ldr	r2, .L24+28
 306 01e0 D268     		ldr	r2, [r2, #12]
 307 01e2 82F01002 		eor	r2, r2, #16
 308 01e6 DA60     		str	r2, [r3, #12]
 111:../src/main.c ****         LED0_TOGGLE;
 309              		.loc 1 111 0 discriminator 2
 310 01e8 304B     		ldr	r3, .L24+28
 311 01ea 304A     		ldr	r2, .L24+28
 312 01ec D268     		ldr	r2, [r2, #12]
 313 01ee 82F00802 		eor	r2, r2, #8
 314 01f2 DA60     		str	r2, [r3, #12]
 112:../src/main.c ****         delay(25);
 315              		.loc 1 112 0 discriminator 2
 316 01f4 4FF01900 		mov	r0, #25
 317 01f8 FFF7FEFF 		bl	delay
 113:../src/main.c ****         BEEP_ON;
 318              		.loc 1 113 0 discriminator 2
 319 01fc 2C4B     		ldr	r3, .L24+32
 320 01fe 4FF48052 		mov	r2, #4096
 321 0202 5A61     		str	r2, [r3, #20]
 114:../src/main.c ****         delay(25);
 322              		.loc 1 114 0 discriminator 2
 323 0204 4FF01900 		mov	r0, #25
 324 0208 FFF7FEFF 		bl	delay
 115:../src/main.c ****         BEEP_OFF;
 325              		.loc 1 115 0 discriminator 2
 326 020c 284B     		ldr	r3, .L24+32
 327 020e 4FF48052 		mov	r2, #4096
 328 0212 1A61     		str	r2, [r3, #16]
 109:../src/main.c ****     for (i = 0; i < 10; i++) {
 329              		.loc 1 109 0 discriminator 2
 330 0214 FB7D     		ldrb	r3, [r7, #23]
 331 0216 03F10103 		add	r3, r3, #1
 332 021a FB75     		strb	r3, [r7, #23]
 333              	.L18:
 109:../src/main.c ****     for (i = 0; i < 10; i++) {
 334              		.loc 1 109 0 is_stmt 0 discriminator 1
 335 021c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 336 021e 092B     		cmp	r3, #9
 337 0220 DCD9     		bls	.L19
 116:../src/main.c ****     }
 117:../src/main.c ****     LED0_OFF;
 338              		.loc 1 117 0 is_stmt 1
 339 0222 224B     		ldr	r3, .L24+28
 340 0224 4FF00802 		mov	r2, #8
 341 0228 1A61     		str	r2, [r3, #16]
 118:../src/main.c ****     LED1_OFF;
 342              		.loc 1 118 0
 343 022a 204B     		ldr	r3, .L24+28
 344 022c 4FF01002 		mov	r2, #16
 345 0230 1A61     		str	r2, [r3, #16]
 119:../src/main.c **** 
 120:../src/main.c ****     // drop out any sensors that don't seem to work, init all the others. halt if gyro is dead.
 121:../src/main.c ****     sensorsAutodetect();
 346              		.loc 1 121 0
 347 0232 FFF7FEFF 		bl	sensorsAutodetect
 122:../src/main.c ****     imuInit(); // Mag is initialized inside imuInit
 348              		.loc 1 122 0
 349 0236 FFF7FEFF 		bl	imuInit
 123:../src/main.c **** 
 124:../src/main.c ****     // Check battery type/voltage
 125:../src/main.c ****     if (feature(FEATURE_VBAT))
 350              		.loc 1 125 0
 351 023a 4FF00200 		mov	r0, #2
 352 023e FFF7FEFF 		bl	feature
 353 0242 0346     		mov	r3, r0
 354 0244 002B     		cmp	r3, #0
 355 0246 01D0     		beq	.L20
 126:../src/main.c ****         batteryInit();
 356              		.loc 1 126 0
 357 0248 FFF7FEFF 		bl	batteryInit
 358              	.L20:
 127:../src/main.c **** 
 128:../src/main.c ****     serialInit(mcfg.serial_baudrate);
 359              		.loc 1 128 0
 360 024c 114B     		ldr	r3, .L24+4
 361 024e D3F81431 		ldr	r3, [r3, #276]
 362 0252 1846     		mov	r0, r3
 363 0254 FFF7FEFF 		bl	serialInit
 129:../src/main.c **** 
 130:../src/main.c ****     previousTime = micros();
 364              		.loc 1 130 0
 365 0258 FFF7FEFF 		bl	micros
 366 025c 0246     		mov	r2, r0
 367 025e 154B     		ldr	r3, .L24+36
 368 0260 1A60     		str	r2, [r3, #0]
 131:../src/main.c ****     if (mcfg.mixerConfiguration == MULTITYPE_GIMBAL)
 369              		.loc 1 131 0
 370 0262 0C4B     		ldr	r3, .L24+4
 371 0264 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 372 0266 052B     		cmp	r3, #5
 373 0268 03D1     		bne	.L21
 132:../src/main.c ****         calibratingA = 400;
 374              		.loc 1 132 0
 375 026a 134B     		ldr	r3, .L24+40
 376 026c 4FF4C872 		mov	r2, #400
 377 0270 1A80     		strh	r2, [r3, #0]	@ movhi
 378              	.L21:
 133:../src/main.c ****     calibratingG = 1000;
 379              		.loc 1 133 0
 380 0272 124B     		ldr	r3, .L24+44
 381 0274 4FF47A72 		mov	r2, #1000
 382 0278 1A80     		strh	r2, [r3, #0]	@ movhi
 134:../src/main.c ****     calibratingB = 200;             // 10 seconds init_delay + 200 * 25 ms = 15 seconds before grou
 383              		.loc 1 134 0
 384 027a 114B     		ldr	r3, .L24+48
 385 027c 4FF0C802 		mov	r2, #200
 386 0280 1A80     		strh	r2, [r3, #0]	@ movhi
 135:../src/main.c ****     f.SMALL_ANGLES_25 = 1;
 387              		.loc 1 135 0
 388 0282 104B     		ldr	r3, .L24+52
 389 0284 4FF00102 		mov	r2, #1
 390 0288 5A73     		strb	r2, [r3, #13]
 391              	.L22:
 136:../src/main.c **** 
 137:../src/main.c ****     // loopy
 138:../src/main.c ****     while (1) {
 139:../src/main.c ****         loop();
 392              		.loc 1 139 0 discriminator 1
 393 028a FFF7FEFF 		bl	loop
 140:../src/main.c ****     }
 394              		.loc 1 140 0 discriminator 1
 395 028e FCE7     		b	.L22
 396              	.L25:
 397              		.align	2
 398              	.L24:
 399 0290 00000000 		.word	_putc
 400 0294 00000000 		.word	mcfg
 401 0298 00000000 		.word	useServo
 402 029c 00000000 		.word	cfg
 403 02a0 00000000 		.word	rcReadRawFunc
 404 02a4 00000000 		.word	pwmReadRawRC
 405 02a8 00000000 		.word	spektrumReadRawRC
 406 02ac 000C0140 		.word	1073810432
 407 02b0 00080140 		.word	1073809408
 408 02b4 00000000 		.word	previousTime
 409 02b8 00000000 		.word	calibratingA
 410 02bc 00000000 		.word	calibratingG
 411 02c0 00000000 		.word	calibratingB
 412 02c4 00000000 		.word	f
 413              		.cfi_endproc
 414              	.LFE30:
 416              		.align	2
 417              		.global	HardFault_Handler
 418              		.thumb
 419              		.thumb_func
 421              	HardFault_Handler:
 422              	.LFB31:
 141:../src/main.c **** }
 142:../src/main.c **** 
 143:../src/main.c **** void HardFault_Handler(void)
 144:../src/main.c **** {
 423              		.loc 1 144 0
 424              		.cfi_startproc
 425              		@ args = 0, pretend = 0, frame = 0
 426              		@ frame_needed = 1, uses_anonymous_args = 0
 427 02c8 80B5     		push	{r7, lr}
 428              	.LCFI6:
 429              		.cfi_def_cfa_offset 8
 430              		.cfi_offset 7, -8
 431              		.cfi_offset 14, -4
 432 02ca 00AF     		add	r7, sp, #0
 433              	.LCFI7:
 434              		.cfi_def_cfa_register 7
 145:../src/main.c ****     // fall out of the sky
 146:../src/main.c ****     writeAllMotors(mcfg.mincommand);
 435              		.loc 1 146 0
 436 02cc 044B     		ldr	r3, .L28
 437 02ce B3F8D430 		ldrh	r3, [r3, #212]
 438 02d2 9BB2     		uxth	r3, r3
 439 02d4 1BB2     		sxth	r3, r3
 440 02d6 1846     		mov	r0, r3
 441 02d8 FFF7FEFF 		bl	writeAllMotors
 442              	.L27:
 147:../src/main.c ****     while (1);
 443              		.loc 1 147 0 discriminator 1
 444 02dc FEE7     		b	.L27
 445              	.L29:
 446 02de 00BF     		.align	2
 447              	.L28:
 448 02e0 00000000 		.word	mcfg
 449              		.cfi_endproc
 450              	.LFE31:
 452              	.Letext0:
 453              		.file 2 "/home/oni/ARM_EABI/bin/../lib/gcc/arm-none-eabi/4.7.2/../../../../arm-none-eabi/include/s
 454              		.file 3 "/home/oni/workspace/Naze32/lib/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
 455              		.file 4 "../src/board.h"
 456              		.file 5 "../src/drv_adc.h"
 457              		.file 6 "../src/drv_pwm.h"
 458              		.file 7 "../src/mw.h"
 459              		.file 8 "/home/oni/workspace/Naze32/lib/CMSIS/CM3/CoreSupport/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccAuJybt.s:18     .text:00000000 $t
     /tmp/ccAuJybt.s:22     .text:00000000 _putc
     /tmp/ccAuJybt.s:59     .text:0000001c main
     /tmp/ccAuJybt.s:399    .text:00000290 $d
     /tmp/ccAuJybt.s:416    .text:000002c8 $t
     /tmp/ccAuJybt.s:421    .text:000002c8 HardFault_Handler
     /tmp/ccAuJybt.s:448    .text:000002e0 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.809c0ff785d6d6219236c5d51f444c16
                           .group:00000000 wm4.stdbool.h.29.1c9ee6859ce8145f7838a4f2549ccec2
                           .group:00000000 wm4.newlib.h.8.e1d498e57c12962fc6d7be5061a6981a
                           .group:00000000 wm4.config.h.148.52fe83653334d06815a0c57b59a3e584
                           .group:00000000 wm4._ansi.h.23.95dee4059009fe3ab635a191bb73dc66
                           .group:00000000 wm4.stdlib.h.18.6f6153fd5cb89acd58c0f0ab1f77e147
                           .group:00000000 wm4.stddef.h.187.40b3a084f9bc2c020a9e00b9eabe9c14
                           .group:00000000 wm4._default_types.h.6.1dbd2e581fd590860c7c17f21d147e91
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.349.31f4c5baff3fa2689010b32028da9c47
                           .group:00000000 wm4.reent.h.16.58b23a9f0faf0e7f2dfe7e2d33154afd
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.55.22eafe60f8565d898cbb44515781114b
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.math.h.49.5da716593b937b9fb02bef6ed6537c13
                           .group:00000000 wm4.ctype.h.2.fecd14bb6f4e162ef31748cc97760e21
                           .group:00000000 wm4.string.h.8.ef946ad0bc9ad5c970c365dcd1fc4b0a
                           .group:00000000 wm4.stddef.h.235.d9f4f80b8c4429535175712282cda6a6
                           .group:00000000 wm4.string.h.86.d5c872ff52e2712c985b588a0ef39f3c
                           .group:00000000 wm4.stdio.h.27.f2ac352bab34f31f9f478442827b2ba6
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.types.h.23.0d949686bbcadd1621462d4fa1f884f9
                           .group:00000000 wm4.stddef.h.40.b60a1c1ee3f272eef5327a730cbabca6
                           .group:00000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:00000000 wm4.types.h.80.f2bfdfeee9f340633702c07fad9b5e01
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.63.1f4bc553faa62c5c69dd9cb47f9f1417
                           .group:00000000 wm4.stm32f10x.h.51.b859cb68ed44ee02c916b41cb8c68f1c
                           .group:00000000 wm4.core_cm3.h.25.119fe996be41b62fbd915b59177e39d1
                           .group:00000000 wm4.stm32f10x.h.522.9a9f642c8c562acb4a63ad5d933b7c01
                           .group:00000000 wm4.stm32f10x.h.8304.f7d8ad90959e99679b3257267c3aadfe
                           .group:00000000 wm4.stm32f10x_adc.h.83.4d35a50d598070ecea6f33bcef02c922
                           .group:00000000 wm4.stm32f10x_bkp.h.25.4622919f1e30efdad5eb44e12edd5513
                           .group:00000000 wm4.stm32f10x_can.h.25.48aab46fcce6d08400bf960b028e4698
                           .group:00000000 wm4.stm32f10x_cec.h.25.8f03450e7bbb704d96e7bc73ec0f66a7
                           .group:00000000 wm4.stm32f10x_dac.h.25.6e7f2924f39c60c10815105b99b8b446
                           .group:00000000 wm4.stm32f10x_dbgmcu.h.25.d3351200fc7f9c8615d1ae81d40db08a
                           .group:00000000 wm4.stm32f10x_dma.h.25.94e36204daa98cae5dcc70a10a9694d5
                           .group:00000000 wm4.stm32f10x_exti.h.25.b9064155c5c006b5154b39788c79001a
                           .group:00000000 wm4.stm32f10x_flash.h.25.4be61fcb02863962a1e006449d310650
                           .group:00000000 wm4.stm32f10x_fsmc.h.25.bca154da2699cdb6024c0c6c4fc5aa89
                           .group:00000000 wm4.stm32f10x_gpio.h.25.80c981af0e637567395034c576cfb3ce
                           .group:00000000 wm4.stm32f10x_i2c.h.25.7b6cbaea24c6f25f538f8516d1814cb2
                           .group:00000000 wm4.stm32f10x_iwdg.h.25.da9374ab9856795610487f312ccf3122
                           .group:00000000 wm4.stm32f10x_pwr.h.25.37ef75009f751ef5fe27910e0bf00a62
                           .group:00000000 wm4.stm32f10x_rcc.h.25.968bcf08d813e68e57c280a4da69fa5a
                           .group:00000000 wm4.stm32f10x_rtc.h.25.361142606ba98ddcd10369f321f6e636
                           .group:00000000 wm4.stm32f10x_sdio.h.25.1fb5280a7690ef99070096bf8c866b3a
                           .group:00000000 wm4.stm32f10x_spi.h.25.68b3d5ccfcf895f9fe505ce20c0c300f
                           .group:00000000 wm4.stm32f10x_tim.h.25.21c6ec062f1e74898cb96a57da276fec
                           .group:00000000 wm4.stm32f10x_usart.h.25.29629c699b65db3f3efd3561f66b0bf6
                           .group:00000000 wm4.stm32f10x_wwdg.h.25.dde12201d86b5aa9ecaafb5eccdc6549
                           .group:00000000 wm4.misc.h.25.068e106f368fa5369a681ef57c106f4b
                           .group:00000000 wm4.stdarg.h.31.fa591a4b1df9e413e9f5b8097f9ae89d
                           .group:00000000 wm4.printf.h.118.ab3672ee221610a07496c11f46394049
                           .group:00000000 wm4.board.h.22.3e17243136ce51e89ad1cec38a12dc6f
                           .group:00000000 wm4.drv_adc.h.3.0c1a2a90f0739aca31cc38e66ffab3f5
                           .group:00000000 wm4.drv_pwm.h.3.1f878ba1925c00079825df97e09db15d
                           .group:00000000 wm4.mw.h.4.b0e233e0e6ae9c4c07b142ad41413d4c

UNDEFINED SYMBOLS
uartWrite
systemInit
init_printf
checkFirstTime
readEEPROM
adcInit
sensorsSet
mixerInit
feature
pwmInit
spektrumInit
gpsInit
Sonar_init
delay
sensorsAutodetect
imuInit
batteryInit
serialInit
micros
loop
mcfg
useServo
cfg
rcReadRawFunc
pwmReadRawRC
spektrumReadRawRC
previousTime
calibratingA
calibratingG
calibratingB
f
writeAllMotors
